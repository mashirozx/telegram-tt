{"version":3,"file":"5769.c3dbfbe711671c6ba22d.js","mappings":"mRA0DO,SAASA,EACdC,GAEG,sFADCC,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAM,OAAEC,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,OAAKE,GAAWC,GAIhBJ,GAASM,EAAAA,EAAAA,IAAsBN,EAAQG,EAAQC,GAAU,OAAOG,EAAWN,GAC3ED,GAASQ,EAAAA,EAAAA,IAA8BR,EAAQG,EAAQC,OAAUG,OAAWA,OAAWA,EAAWN,IAJzFD,CAMX,EAzDAS,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOE,EAAAA,EAAAA,IAAsBN,EAAQG,EAAQC,GAAU,OAAMG,EAAWN,EAAM,KAGhFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOZ,EAAqBC,EAAQC,EAAM,KAG5CQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvC,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMS,GAAgBC,EAAAA,EAAAA,IAAmBX,EAAQC,IACzCQ,MAAOG,IAAiBC,EAAAA,EAAAA,IAAehB,EAAQC,GAAOgB,gBAAgBC,gBAAgBL,IAAkB,CAAC,EAQjH,OANID,IAAUG,IACZf,GAASQ,EAAAA,EAAAA,IAA8BR,EAAQG,EAAQC,EAAUe,EAAAA,OAAkBZ,OAAWA,EAAWN,KAGlGK,EAAAA,EAAAA,IAAsBN,EAAQG,EAAQC,GAAU,EAAMQ,EAAOX,EAEzD,KAGfQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,UAAES,EAAS,MAAEnB,GAAQC,EAAAA,EAAAA,OAAsBS,GAC3C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,GAAKE,GAAWC,EAIhB,OAAOiB,EAAAA,EAAAA,IAA2BrB,EAAQG,EAAQC,EAAUgB,EAAWnB,EAAM,I,2BCzC/EQ,EAAAA,EAAAA,IAAiB,YAAY,CAACT,EAAQU,EAASC,KAC7C,MAAM,GACJW,EAAE,SACFlB,EAAWmB,EAAAA,GAAc,KACzBC,EAAO,SAAQ,qBACfC,GAAuB,EAAK,kBAC5BC,EAAiB,MACjBzB,GAAQC,EAAAA,EAAAA,OACNS,EAEEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAEtD2B,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GA+CxC,OA9CI2B,EAASC,cAAcC,OAASF,EAASC,cAAcE,SACzD/B,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B6B,aAAc,IACTD,EAASC,aACZE,QAAQ,IAET9B,IAGA0B,GACHA,EAAmBxB,SAAWmB,GAC3BK,EAAmBvB,WAAaA,GAChCuB,EAAmBH,OAASA,IAE3BF,IACFtB,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQsB,EAAIlB,EAAU,aAAc,GAAIH,GAEvED,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BkC,gBAAiB,CAAC,GACjBjC,IAILD,EAASD,EADTC,GAASmC,EAAAA,EAAAA,IAAsBnC,EAAQC,GACDA,GAEtCD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BoC,mBAAmB,EACnBC,0BAAsB9B,KAClBe,KAAON,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBAAgBC,UAAY,CACnED,gBAAiB,CAAC,IAEnBrC,IAGDqB,KACWkB,EAAAA,EAAAA,IAAWxC,EAAQsB,IAEtBmB,UAAYf,EACpBhB,EAAQgC,eAAe,CAAEvC,OAAQmB,EAAKrB,UAC7BqB,KAAON,EAAAA,EAAAA,IAAehB,EAAQC,GAAO0C,kBAC9CjC,EAAQkC,gBAAgB,CAAE3C,WAI9BS,EAAQmC,gBAAgB,CAAE5C,WAEnB6C,EAAAA,EAAAA,IAAyB9C,EAAQsB,EAAIlB,EAAUoB,EAAMC,EAAsBxB,EAAM,KAG1FQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,OAAER,EAAM,SAAEC,EAAWmB,EAAAA,IAAmBZ,EAE9CoC,OAAOC,MAAKC,EAAAA,EAAAA,IAAqB9C,EAAQ,SAAUC,GAAW,SAAS,KAGzEK,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOmC,EAAAA,EAAAA,IAAyB9C,OAAQO,OAAWA,OAAWA,OAAWA,EAAWN,EAAM,KAG5FQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtCX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,KAC3BgB,EAAAA,EAAAA,IAAehB,EAAQC,GAC1BiD,iBAAiB,GAChBjD,GACHD,EAAS,IAAKA,EAAQmD,qBAAqB,IAC3CC,EAAAA,EAAAA,IAAUpD,GAEVU,EAAQ2C,SAAS,IAAK1C,EAASV,SAAQ,KAGzCQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OACJR,EAAM,KAAEmD,EAAI,SAAElD,EAAQ,MAAEmD,EAAK,MAAEtD,GAAQC,EAAAA,EAAAA,OACrCS,EAMJ,OAJIR,GACFO,EAAQ2C,SAAS,CAAE/B,GAAInB,EAAQC,WAAUH,WAGpC+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BwD,eAAgB,CACdrD,SACAmD,OACAC,UAEDtD,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5ByD,kBAAclD,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gCAAgC,CAACT,EAAQU,EAASC,KACjE,MAAM,uBAAE+C,EAAsB,MAAEzD,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9D,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0D,0BACCzD,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,iBAAEgD,EAAgB,WAAEC,EAAU,MAAE3D,GAAQC,EAAAA,EAAAA,OAAsBS,GAE9D,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE/D,IAAKE,EAEH,YADAO,EAAQ2C,SAAS,CAAE/B,GAAIsC,EAAW,GAAI3D,UAIxC,MAAM4D,EAAWD,EAAWE,QAAQ3D,GAEpC,IAAkB,IAAd0D,EACF,OAEF,MAAME,EAASH,EAAWC,EAAWF,GAErCjD,EAAQ2C,SAAS,CAAE/B,GAAIyC,EAAQtC,sBAAsB,EAAMxB,SAAQ,KAGrEQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,SAAEqD,EAAQ,MAAE/D,GAAQC,EAAAA,EAAAA,OAAsBS,EAChD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BiE,wBAAyBD,GACxB/D,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BiE,6BAAyB1D,GACxBN,EAAM,I,qGCzGX,MACMiE,EAA8BC,EAAAA,IAA2BC,EAAAA,IAK/D,IAAIC,EAgwBJ,SAASC,EAAoBtE,EAAqBG,EAAgBoE,GAChE,MAAQ/C,KAAMgD,EAAe,SAAEpE,IAAaC,EAAAA,EAAAA,IAAyBL,IAAW,CAAC,EAC3EyE,EAAOC,EAAAA,GAEPC,EAAmC,cAApBH,GACjBI,EAAAA,EAAAA,IAA4B5E,EAAQG,IACpC0E,EAAAA,EAAAA,IAAmB7E,EAAQG,GAC/B,IAAKwE,IAAiBvE,EAAU,OAChC,MAAM0E,EAAWP,EACdQ,KAAKzD,GAAOqD,EAAarD,KACzB0D,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BlF,EAAQiF,EAAS7E,GAAU+E,UAC3EC,MAAK,CAACC,EAAUC,IAAaD,EAAS/D,GAAKgE,EAAShE,KAEjDiE,EAAST,EAASU,QAAO,CAACC,EAAKR,KACnC,MAAMS,GAASC,EAAAA,EAAAA,IAAa3F,EAAQiF,GAKpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAU,OACtDD,EAAIG,KAAM,GC50BP,SACLnB,EACAQ,GAEA,MAAMa,GAAQC,EAAAA,EAAAA,IAAuBd,GAC/Be,EAAiBF,EAAS,GAAEA,KAAW,GACvCxC,GAAO2C,EAAAA,EAAAA,GACXhB,OAAS1E,OAAWA,OAAWA,OAAWA,OAAWA,GAAW,IAC/D2F,KAAK,IAGR,MAAQ,GAAEF,KAFUG,EAAAA,EAAAA,IAA6B1B,EAAMQ,EAAS3B,GAAM,GAAM,IAG9E,CDg0BgB8C,CAAyB3B,EAAMQ,QAEpCQ,CAAG,GACT,IAEGY,EAAavB,EAASU,QAAO,CAACC,EAAKR,KACvC,MAAMS,GAASC,EAAAA,EAAAA,IAAa3F,EAAQiF,GAIpC,OAHAQ,EAAIG,KAAM,KAAIF,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAU,OACtDD,EAAIG,KAAM,IAAEU,EAAAA,EAAAA,IAAsB7B,EAAMQ,GAAS,EAAO,OAAG1E,GAAW,QAE/DkF,CAAG,GACT,KAEHc,EAAAA,EAAAA,IAAoBhB,EAAOW,KAAK,MAAOG,EAAWH,KAAK,MACzD,EA7xBAzF,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,aAAEoG,EAAY,MAAEvG,GAAQC,EAAAA,EAAAA,OACtCS,EAIJ,OAFAX,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,mBAAoBoG,IAEnEvE,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,eAAgBoG,EAAcvG,EAAM,KAG7FQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,UAAE+F,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAEF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EAE7B,OAAO8E,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,eAAgBsG,EAAU,KAGhFjG,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,UAAE+F,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,EAAQ,KAAEoB,GAASG,EAC7BgF,EAAqB,cAATnF,EAAuB,qBAAuB,YAEhE,OAAOiF,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAUuG,EAAWD,EAAU,KAG3EjG,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,KACJ2C,EAAI,OAAEnD,EAAM,SAAEC,EAAQ,KAAEoB,GACtBb,EAEEgG,EAAqB,cAATnF,EAAuB,wBAA0B,eAEnE,OAAOiF,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAUuG,EAAWrD,EAAK,KAGtE7C,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMuE,GAAeE,EAAAA,EAAAA,IAAmB7E,EAAQG,GAC1CyG,GAAcC,EAAAA,EAAAA,IAAkB7G,EAAQG,EAAQC,EAAUH,GAChE,IAAK0E,IAAiBiC,EACpB,OAGF,MAAME,GAA2BC,EAAAA,EAAAA,IAASH,GAActF,GAC/C0F,QAAQrC,EAAarD,KAAO4D,EAAAA,EAAAA,IAA4BlF,EAAQ2E,EAAarD,GAAKlB,GAAU6G,WAGrG,OAAKH,GAIEL,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,YAAa0G,QAJjE,CAI0F,KAG5FrG,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,iBAAEgD,EAAgB,MAAE1D,GAAQC,EAAAA,EAAAA,OAAsBS,GAClD,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAMuE,GAAeE,EAAAA,EAAAA,IAAmB7E,EAAQG,GAC1CyG,GAAcC,EAAAA,EAAAA,IAAkB7G,EAAQG,EAAQC,EAAUH,GAChE,IAAK0E,IAAiBiC,EACpB,OAGF,MAAMM,GAAeC,EAAAA,EAAAA,IAAmBnH,EAAQG,EAAQC,GAGxD,IAAIsG,EAEJ,IAJiBU,EAAAA,EAAAA,IAAuBpH,EAAQG,EAAQC,EAAUH,IAIhDiH,EAUX,CACL,MAAMG,EAAkBC,OAAOC,KAAK5C,GAE9B6C,EADiBH,EAAgBvD,QAAQoD,EAAaO,YAC1B9D,EAClC+C,EAAYc,GAAYH,EAAgBK,OAAS,GAAKF,GAAY,EAC9DG,OAAON,EAAgBG,SACvBjH,CACN,MAbImG,EAHEtG,IAAamB,EAAAA,IACFiB,EAAAA,EAAAA,IAAWxC,EAAQG,IAEdyH,aAAatG,IAEZuG,EAAAA,EAAAA,IAAiB7H,EAAQG,EAAQC,IAE5B0H,cAU5BpH,EAAQqH,gBAAgB,CAAErB,YAAWzG,UACrCS,EAAQsH,aAAa,CACnB7H,SACAC,WACAsG,UAAWA,EACXzG,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,UAAEsG,EAAS,OAAEuB,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClEnI,GAAQC,EAAAA,EAAAA,OACNS,EAEEiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqI,YAAa,CACXlI,SACAC,WACAsG,YACAuB,OAAQA,QAAAA,EAAUrG,EAASyG,YAAYJ,OACvCC,OAAQA,QAAAA,EAAUtG,EAASyG,YAAYH,OACvCC,aAAcA,GAAgBvG,EAASyG,YAAYF,cAAgBnI,EAAOqI,YAAYC,iBACtFC,0BAAqEhI,IAA9CqB,EAASyG,YAAYE,qBACxCvI,EAAOqI,YAAYG,yBACnB5G,EAASyG,YAAYE,qBACzBH,QAASA,GAAWxG,EAASyG,YAAYD,UAE1CnI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OACJuH,EAAM,MAAEjI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqI,YAAa,KACRrH,EAAAA,EAAAA,IAAehB,EAAQC,GAAOoI,YACjCH,SACAE,SAAS,IAEVnI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,aACJwH,EAAY,qBAAEI,EAAoB,MAAEtI,GAAQC,EAAAA,EAAAA,OAC1CS,EAWJ,OATAX,EAAS,IACJA,EACHqI,YAAa,IACRrI,EAAOqI,YACVC,iBAAkBH,EAClBK,yBAA0BD,KAIvBvG,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqI,YAAa,KACRrH,EAAAA,EAAAA,IAAehB,EAAQC,GAAOoI,YACjCF,eACAI,yBAEDtI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,QACJyH,EAAO,MAAEnI,GAAQC,EAAAA,EAAAA,OACfS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqI,YAAa,KACRrH,EAAAA,EAAAA,IAAehB,EAAQC,GAAOoI,YACjCD,YAEDnI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OACJsH,EAAM,MAAEhI,GAAQC,EAAAA,EAAAA,OACdS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqI,YAAa,KACRrH,EAAAA,EAAAA,IAAehB,EAAQC,GAAOoI,YACjCJ,WAEDhI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqI,YAAa,CACXH,OAAQtG,EAASyG,YAAYH,OAC7BC,aAAcvG,EAASyG,YAAYF,aACnCI,qBAAsB3G,EAASyG,YAAYE,qBAC3CH,QAASxG,EAASyG,YAAYD,UAE/BnI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OAAER,EAAM,UAAEuG,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBS,EAEnD8H,GAAsBC,EAAAA,EAAAA,IAAyB1I,GAAQ2I,EAAAA,EAAAA,MAAe1I,GACtE2B,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAExC,GAAKwI,GAaE,GAAItI,IAAWyB,EAASgH,YAAYzI,QAAUuG,IAAc9E,EAASgH,YAAYlC,UACtF,OAAO1E,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4I,YAAa,CACXzI,SACAuG,YACAmC,OAAQ,CAAC,IAEV5I,QAnBH8C,OAAO+F,YAAW,KAChB9I,GAAS+I,EAAAA,EAAAA,MAET/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B4I,YAAa,CACXzI,SACAuG,YACAmC,OAAQ,CAAC,IAEV5I,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,GA3OW,IAuPhB,KAGlBS,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4I,YAAa,CAAC,GACb3I,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EAE7B,IAAImG,EAIFA,EAHE1H,IAAamB,EAAAA,IACFiB,EAAAA,EAAAA,IAAWxC,EAAQG,IAEVyH,aAAatG,IAEhBuG,EAAAA,EAAAA,IAAiB7H,EAAQG,EAAQC,IAExB0H,cAGzBA,GAILpH,EAAQsH,aAAa,CACnB7H,SACAC,WACAsG,UAAWoB,EACXkB,aAAa,EACbtH,mBAAmB,EACnBzB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EAEvBsH,GAAaC,EAAAA,EAAAA,IAAiBlJ,EAAQG,EAAQC,EAAUH,GAE9D,GAAKgJ,GAAoC,IAAtBA,EAAWvB,OAEvB,CACL,MAAMhB,EAAYuC,EAAWE,MAE7BnJ,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,aAAc,IAAI6I,GAAahJ,IAExFmD,EAAAA,EAAAA,IAAUpD,GAEVU,EAAQsH,aAAa,CACnB7H,SACAC,WACAsG,UAAWA,EACXzG,QACAyB,mBAAmB,GAEvB,MAfEhB,EAAQ0I,iBAAiB,CAAEnJ,SAiBb,KAGlBQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,WAAE0I,GAAa,EAAK,MAAEpJ,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1D,OAAO2I,EAAAA,EAAAA,IAA4BtJ,EAAQqJ,EAAYpJ,EAAM,KAG/DQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,gBAAEiD,EAAkB,SAAQ,YAAEwE,EAAW,UAAEO,EAAS,cAAEC,EAAa,eACpGC,EAAc,oBAAEC,EAAmB,qBAAEjI,EAAoB,kBAAEC,EAAiB,MAC5EzB,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAI,UAAE+F,GAAc/F,EAEpB,QAAkBJ,IAAdgJ,EAAyB,CAC3B,MAAMI,GAAMC,EAAAA,EAAAA,IAAmC5J,EAAQwJ,EAAgBD,GACnEI,GAAKjC,UACLhB,IAAamD,EAAAA,EAAAA,IAAQF,GAE3B,CAEA,MAAMhI,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GACtD6J,GAAoBnI,GACxBxB,IAAWwB,EAAmBxB,QAC3BC,IAAauB,EAAmBvB,UAChCoE,IAAoB7C,EAAmBH,KAiB5C,GAdI6C,IACF0F,aAAa1F,GACbA,OAAc9D,GAEhB8D,EAActB,OAAO+F,YAAW,KAC9B9I,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgK,EAAAA,EAAAA,IAAqBhK,OAAQO,OAAWA,OAAWA,OAAWA,EAAWN,GAClFD,GAASiK,EAAAA,EAAAA,IAAqBjK,OAAQO,EAAWN,IACjDmD,EAAAA,EAAAA,IAAUpD,EAAO,GAChBgJ,EAAc9E,EA3WI,MA6WrBlE,GAASgK,EAAAA,EAAAA,IAAqBhK,EAAQG,EAAQuG,EAAWsC,EAAaU,EAAqBzJ,GAC3FD,GAASiK,EAAAA,EAAAA,IAAqBjK,OAAQO,EAAWN,GAE7CwJ,EAAgB,CAClB,MAAMR,GAAaC,EAAAA,EAAAA,IAAiBlJ,EAAQG,EAAQC,EAAUH,IAAU,GACxED,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,aAAc,IAAI6I,EAAYQ,GAAiBxJ,EAC1G,CAEI6J,IACF9J,GAASiK,EAAAA,EAAAA,IAAqBjK,EAAQkK,EAAAA,GAAAA,OAAuBjK,IAG/D,MAAM2G,GAAcC,EAAAA,EAAAA,IAAkB7G,EAAQG,EAAQC,EAAUH,GAChE,GAAI2G,GAAeA,EAAYuD,SAASzD,GAStC,OARAtD,EAAAA,EAAAA,IAAUpD,QACVU,EAAQ2C,SAAS,CACf/B,GAAInB,EACJC,WACAqB,uBACAC,oBACAzB,UAWJ,GANI6J,IACF9J,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,mBAAeG,EAAWN,IAGrFD,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,mBAAeG,EAAWN,GAE/E2G,IAAgBkD,EAAkB,CACpC,MAAMM,EAAY1D,EAAYE,EAAY,GAAKsD,EAAAA,GAAAA,KAAsBA,EAAAA,GAAAA,GACrElK,GAASiK,EAAAA,EAAAA,IAAqBjK,EAAQoK,EAAWnK,EACnD,EAEAmD,EAAAA,EAAAA,IAAUpD,GAEVU,EAAQ2C,SAAS,CACf/B,GAAInB,EACJC,WACAqB,uBACAC,oBACAzB,UAEFS,EAAQ2J,qBAAqB,CAC3BpK,SAEc,KAGlBQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,WACJ2J,EAAU,WAAE/F,EAAU,UAAEgF,EAAS,YAAEgB,EAAW,MAAEtK,GAAQC,EAAAA,EAAAA,OACtDS,EACJ,IAAI6J,EAIJ,OAHIjB,IACFiB,GAAoBC,EAAAA,EAAAA,IAA0BzK,EAAQsK,EAAYf,KAE7DvH,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsC,gBAAiB,CACfgI,aACA/F,WAAYiG,GAAqBjG,EACjCmG,cAAc,EACdH,gBAEDtK,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsC,gBAAiB,KACZtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBACjCC,cAAUhC,EACVmK,cAAc,EACdC,WAAW,EACXC,YAAY,IAEb3K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,UAAEgK,EAAS,MAAE1K,GAAQC,EAAAA,EAAAA,OAAsBS,EAC3CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsC,gBAAiB,IACZV,EAASU,gBACZqI,YAEAC,WAAYD,GAAa/I,EAASU,gBAAgBsI,aAEnD3K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,WAAEiK,EAAU,MAAE3K,GAAQC,EAAAA,EAAAA,OAAsBS,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsC,gBAAiB,KACZtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBACjCsI,aACAD,UAAWC,IAEZ3K,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElDX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsC,gBAAiB,CAAC,GACjBrC,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,sCAAsC,CAACT,EAAQU,EAASC,KACvE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASiJ,iBACZ,OAGF,MAAQ1K,OAAQmK,EAAU,WAAE/F,GAAe3C,EAASiJ,iBAEpDnK,EAAQoK,gBAAgB,CAAER,aAAY/F,aAAYtE,SAAQ,KAG5DQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,QAAEsE,EAAO,MAAEhF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAClC8K,EAAWnJ,EAASoJ,gBAAgBD,SAAS9F,EAAQ9E,QACtD4K,GAAaA,EAASrD,SAE3B1H,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BgL,gBAAiB,CACfD,SAAU,IACLnJ,EAASoJ,gBAAgBD,SAC5B,CAAC9F,EAAQ9E,QAAS4K,EAAS/F,QAAQ1D,GAAOA,IAAO2D,EAAQ3D,QAG5DrB,IACHmD,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,+BAA+B,CAACT,EAAQU,EAASC,KAChE,MAAM,SAAEmE,EAAQ,MAAE7E,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1CoK,GAAW/J,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+K,gBAAgBD,SACzDE,EAAuD,CAAC,EAI9D,OAHA3D,OAAOC,KAAKwD,GAAUG,SAAS/K,IAC7B8K,EAAY9K,GAAU4K,EAAS5K,GAAQ6E,QAAQ1D,IAAQwD,EAASqG,MAAMlG,GAAYA,EAAQ3D,KAAOA,KAAI,KAEhGU,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgL,gBAAiB,CACfD,SAAUE,IAEXhL,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,QAAEsE,EAAO,MAAEhF,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxCD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BgL,gBAAiB,CACfD,SAAU,IACLnJ,EAASoJ,gBAAgBD,SAC5B,CAAC9F,EAAQ9E,QAAS,IAAKyB,EAASoJ,gBAAgBD,SAAS9F,EAAQ9E,SAAW,GAAK8E,EAAQ3D,OAG5FrB,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASiJ,iBACZ,OAGF,MAAM,OAAE1K,EAAM,WAAEoE,GAAe3C,EAASiJ,kBAClC,SAAEzK,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE3D0E,GAAeE,EAAAA,EAAAA,IAAmB7E,EAAQG,GAC3CwE,GAAiBvE,GACLmE,EAAWQ,KAAKzD,GAAOqD,EAAarD,KAClD0D,QAAQC,IAAYC,EAAAA,EAAAA,IAA4BlF,EAAQiF,EAAS7E,GAAUgL,cACrEF,SAASjG,GAAYvE,EAAQ2K,qBAAqB,CAAEpG,UAAShF,WAAS,KAGjFQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,UAAE+F,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD0C,GAAWiI,EAAAA,EAAAA,IAAkBtL,EAAQC,GAC3C,OAAKoD,GAIEkI,EAAAA,EAAAA,IAAuBvL,EAAQqD,EAAS/B,GAAIoF,EAAWzG,GAHrDD,CAG2D,KAGtES,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,UACJ+F,EAAS,UACT6C,EAAS,gBACTiC,EAAe,UACfC,EAAS,MACTxL,GAAQC,EAAAA,EAAAA,OACNS,EACEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,EAAUoB,KAAMgD,GAAoB7C,EAEpD3B,GAAS0L,EAAAA,EAAAA,IACP1L,EAAQG,EAAQC,EAAUoE,EAAiBkC,EAAW6C,EAAWiC,EAAiBC,EAAWxL,IAG/FmD,EAAAA,EAAAA,IAAUpD,IAENgB,EAAAA,EAAAA,IAAehB,EAAQC,GAAO0L,4BAChCjL,EAAQkL,uBAAuB,CAAE3L,UACjCS,EAAQmL,iBAAiB,CAEvB5G,QAAU,mDAAkD6G,EAAAA,GAAe,WAAa,8BACxF7L,UAEJ,KAGFQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,IAAKK,EAAAA,EAAAA,IAAehB,EAAQC,GAAO0L,0BAInC,OAAO3J,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B2L,2BAA2B,GAC1B1L,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOwB,EAAAA,EAAAA,IAAsBnC,EAAQC,EAAM,KAG7CQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACT,EAAQU,EAASC,KAClD,MAAM,OAAEoL,EAAM,MAAE9L,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE1D,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgM,UAAW,CACTjK,QAAQ,EACRgK,WAED9L,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgM,UAAW,CACTjK,QAAQ,IAET9B,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,KACpD,GAAIuL,EAAAA,KAAoBC,KAAKC,MAAQxE,OAAOsE,EAAAA,KA1nBR,OA2nBlC,OAGF,MAAMG,EAAiBC,EAAAA,IAAAA,MAAkB,KAAKC,MAAM,EAAG,GAAGpG,KAAK,MACzD,qBAAEqG,GAAyBvM,EAEjC,GAAIuM,EAAqBpB,MAAK,QAAC,QAAEqB,GAAS,SAAKA,IAAYJ,CAAc,IACvE,OAGF,MAAMnH,EAAkC,CACtC9E,OAAQsM,EAAAA,IACRC,MAAMC,EAAAA,EAAAA,MACNC,QAAS,CACPtJ,MAAMuJ,EAAAA,EAAAA,I,ktDAAuC,IAE/CC,YAAY,GAGdpM,EAAQqM,0BAA0B,CAChC9H,QAASA,EACTuH,QAASJ,GACT,KAGJ3L,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,QAAEsE,EAAO,QAAEuH,GAAY7L,GACvB,qBAAE4L,GAAyBvM,EAC3BgN,GAAcxK,EAAAA,EAAAA,IAAWxC,EAAQyM,EAAAA,KAEjCQ,EAAQC,KAAKC,IACjBH,EAAYpF,aAAatG,IAAM,KAC5BiL,EAAqBxH,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,KAEtC8L,GAAkBb,EAAqB7E,OAAS,GA5pBf,IA8pBjCpG,EAAK4L,KAAKG,MAAMJ,GAASG,EAE/BnI,EAAQqI,gBAAkBrI,EAAQ3D,GAClC2D,EAAQ3D,GAAKA,EAEb,MAAMiM,EAAsB,CAC1BjM,KACA2D,UACAuH,UACAgB,UAAU,GAGZxN,EAAS,IACJA,EACHuM,qBAAsB,IACjBA,EAAqBD,OA7qBW,KA8qBnCiB,KAGJnK,EAAAA,EAAAA,IAAUpD,GAEVU,EAAQ+M,UAAU,CAChB,QAAS,aACTnM,GAAI2D,EAAQ3D,GACZnB,OAAQ8E,EAAQ9E,OAChB8E,WACA,KAGJxE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,UAAEuG,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0N,aAAc,CAAEvN,SAAQuG,cACvBzG,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0N,kBAAcnN,GACbN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OAAER,EAAM,UAAEuG,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B2N,YAAa,CAAExN,SAAQuG,cACtBzG,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B2N,iBAAapN,GACZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,OAAER,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CiN,GAAiBC,EAAAA,EAAAA,IAAmC7N,EAAQG,EAAQmB,EAAIrB,GAE9E,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B8N,qBAAsB,CAAE3N,SAAQuG,UAAWpF,EAAIsM,mBAC9C3N,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B8N,0BAAsBvN,GACrBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASiJ,iBACZ,OAGF,MAAM,OAAE1K,EAAM,WAAEoE,GAAe3C,EAASiJ,iBACxCvG,EAAoBtE,EAAQG,EAAQoE,EAAW,KAGjD9D,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,WAAE4D,EAAU,MAAEtE,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5CoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GAClCsE,GAAoC,IAAtBA,EAAWmD,QAAiBqG,GAI/CzJ,EAAoBtE,EAAQ+N,EAAKzM,GAAIiD,EAAW,KEpzBlD9D,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+N,aAEjD,OAAOC,EAAAA,EAAAA,IAAmBjO,EAAQ,CAChCkO,cAAe,CAAC,EAChBC,aAAc,CAAC,EACfC,mBAAe7N,KACXK,EAAQ,CAAEyN,eAAgB,CAAEC,OAAQnO,EAAQ2E,UAAU,IAAW,CAAEuJ,oBAAgB9N,GACvFK,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAEqO,GAAc5N,GAAW,CAAC,EAC7D,OAAOsN,EAAAA,EAAAA,IAAmBjO,EAAQ,CAChCuO,aACCtO,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,GAAEW,GAAOX,GACT,qBAAE6N,GAAyBxO,EAEjC,IAAKwO,EACH,MAAO,IACFxO,EACHwO,qBAAsB,CAAClN,IAI3B,MAAMmN,EAAeD,EAAqBxJ,QAAQ7E,GAAWA,IAAWmB,IAMxE,OALAmN,EAAaC,QAAQpN,GACjBmN,EAAa/G,OAnCY,IAoC3B+G,EAAatF,MAGR,IACFnJ,EACHwO,qBAAsBC,EACvB,KAGHhO,EAAAA,EAAAA,IAAiB,2BAA4BT,IACpC,IACFA,EACHwO,0BAAsBjO,OAI1BE,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,QAAEiM,EAAO,MAAE3M,GAAQC,EAAAA,EAAAA,OAAsBS,EAE/C,OAAOgO,EAAAA,EAAAA,IAA0B3O,EAAQ4M,EAAS3M,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAOsN,EAAAA,EAAAA,IAAmBjO,EAAQ,CAAEG,OAAQmB,EAAIV,WAAOL,EAAW6N,mBAAe7N,GAAaN,EAAM,KC/DtGQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4O,cAAe,CACbhO,QACAiO,eAAWtO,IAEZN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B8O,UAAW,CACTlO,QACAmO,YAAQxO,EAERyO,aAASzO,IAEVN,EAAM,KCnBXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,MACJC,EAAK,MACLX,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOsO,EAAAA,EAAAA,IAAiBjP,EAAQ,CAC9BkP,mBAAe3O,EACf4O,kBAAc5O,EACd8N,eAAgBrH,QAAQpG,GACxBA,SACCX,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAEyO,EAAM,MAAEnP,GAAQC,EAAAA,EAAAA,OAAsBS,EAE9C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqP,WAAY,CAAED,WACbnP,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqP,WAAY,CACVC,iBAAiB,IAElBrP,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAO4O,EAAAA,EAAAA,IAAsBvP,EAAQC,EAAM,I,8CC1C9B,SAASuP,EAAWC,GACjCC,SAASC,iBAAkC,gDACxCzE,SAAS0E,IACJH,EACGG,EAAKC,KAAK1F,SAAS,oBACtByF,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,UAAW,mBAG3CF,EAAKC,KAAOD,EAAKC,KAAKC,QAAQ,iBAAkB,UAClD,GAEN,C,eCLO,SAASC,EAAoBC,GAC9BN,SAASO,QAAUD,IACrBN,SAASO,MAAQD,EAErB,CAGO,MAAME,GAAeC,EAAAA,EAAAA,IAASJ,EAXV,KAWmD,GCglB9E,IAAIK,GAhkBJ3P,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAE0P,EAAK,MAAEpQ,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACnDuC,OAA4B3C,IAAV8P,EAAsBA,IAASrP,EAAAA,EAAAA,IAAehB,EAAQC,GAAOiD,gBAKrF,OAHAlD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAAEkD,mBAAmBjD,GAC5C,IAAKD,EAAQmD,oBAAqBD,EAE9B,KAGfzC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,gBAAE2P,GAAoB3P,EAE5B,MAAO,IACFX,EACHsQ,kBACD,KAGH7P,EAAAA,EAAAA,IAAiB,wBAAyBT,IACjC,IACFA,EACHsQ,qBAAiB/P,OAIrBE,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAMyB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAExC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuQ,WAAY,CACVxF,SAAU,IACLnJ,EAAS2O,WAAWxF,SACvB,CAAC5K,GAAS,IACLyB,EAAS2O,WAAWxF,SAAS5K,GAChCqQ,WAAY5O,EAAS2O,WAAWxF,SAAS5K,IAAW,CAAC,GAAGqQ,aAI7DvQ,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,+BAA+B,CAACT,EAAQU,EAASC,KAChE,MAAM,OAAE8P,EAAM,MAAExQ,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GACpD,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAMyB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAExC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuQ,WAAY,CACVxF,SAAU,IACLnJ,EAAS2O,WAAWxF,SACvB,CAAC5K,GAAS,IACLyB,EAAS2O,WAAWxF,SAAS5K,GAChCqQ,UAAU,EACVE,WAAYD,MAIjBxQ,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE/D,IAAKE,EACH,OAGF,MAAMyB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GAExC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuQ,WAAY,CACVxF,SAAU,IACLnJ,EAAS2O,WAAWxF,SACvB,CAAC5K,GAAS,IACLyB,EAAS2O,WAAWxF,SAAS5K,GAChCqQ,UAAU,MAIfvQ,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACT,EAAQU,EAASC,KAC7C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAKgI,EAAAA,EAAAA,QAAkBgI,EAAAA,EAAAA,MAIvB,OAAO3O,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4Q,kBAAyE,KAAtD5P,EAAAA,EAAAA,IAAehB,EAAQC,GAAO4Q,aAAanJ,QAC7DzH,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoC,mBAAoBR,EAASQ,kBAC7B0O,WAAY,IACPlP,EAASkP,WACZC,sBAAkBxQ,IAEnBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,MAAiB,UAAEwG,GAAc/F,GAAW,CAAC,EAC7D,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B8Q,WAAY,KACP9P,EAAAA,EAAAA,IAAehB,EAAQC,GAAO6Q,WACjCC,iBAAkBrK,IAEnBzG,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B4Q,oBAAoB5P,EAAAA,EAAAA,IAAehB,EAAQC,GAAO2Q,mBACjD3Q,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEmF,GAAUnF,GACZ,aAAEqQ,GAAiBhR,EACzB,IAAKgR,EACH,MAAO,IACFhR,EACHgR,aAAc,CAAClL,IAInB,MAAMmL,EAAYD,EAAahM,QAAQkM,GAAMA,IAAMpL,IAMnD,OALAmL,EAAUvC,QAAQ5I,GACdmL,EAAUvJ,OAtJU,IAuJtBuJ,EAAU9H,MAGL,IACFnJ,EACHgR,aAAcC,EACf,KAGHxQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,QAAEwQ,GAAYxQ,GACd,OAAEyQ,GAAWpR,EAAOqR,SAC1B,IAAKD,EACH,MAAO,IACFpR,EACHqR,SAAU,IACLrR,EAAOqR,SACVD,OAAQ,CACNE,KAAM,IACND,SAAU,CAACF,MAMnB,MAAMI,EAAcH,EAAOC,SAASrM,QAAQwM,GAAMA,EAAElQ,KAAO6P,EAAQ7P,KAGnE,OAFAiQ,EAAY7C,QAAQyC,GAEb,IACFnR,EACHqR,SAAU,IACLrR,EAAOqR,SACVD,OAAQ,IACHA,EACHC,SAAUE,IAGf,KAGH9Q,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,WAAE8Q,GAAe9Q,GACjB,mBAAE+Q,GAAuB1R,EAC/B,IAAK0R,EACH,MAAO,IACF1R,EACH0R,mBAAoB,CAACD,IAIzB,MAAMR,EAAYS,EAAmB1M,QAAQ1D,GAAOA,IAAOmQ,IAM3D,OALAR,EAAUvC,QAAQ+C,GACdR,EAAUvJ,OA3MU,IA4MtBuJ,EAAU9H,MAGL,IACFnJ,EACH0R,mBAAoBT,EACrB,KAGHxQ,EAAAA,EAAAA,IAAiB,0BAA2BT,IACnC,IACFA,EACH0R,mBAAoB,QAIxBjR,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,MAAEgR,EAAK,cAAEC,GAAkBjR,EACjC,MAAO,IACFX,EACHqR,SAAU,IACLrR,EAAOqR,SACVQ,MAAO,CACLC,OAAUF,EAAwB5R,EAAOqR,SAASQ,MAAMC,OAA9BH,IAG9BI,aAAc,IACT/R,EAAO+R,aACVF,MAAO,CACLC,OAASF,EAAgBD,EAAQ3R,EAAO+R,aAAaF,MAAMC,SAGhE,KAGHrR,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,SAAsB8R,GAAiBrR,EACvDqR,EAAaC,SAAUC,EAAAA,EAAAA,GAAc,CAAC,GAEtC,MAAMC,EAAmB,KAAInR,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmS,eACrDC,EAA4BF,EAAiBG,WAAWC,GAAMA,EAAEtN,UAAY+M,EAAa/M,UAO/F,OANmC,IAA/BoN,GACFF,EAAiBK,OAAOH,EAA2B,GAGrDF,EAAiBvM,KAAKoM,IAEfhQ,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoS,cAAeD,GACdlS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uCAAuC,CAACT,EAAQU,EAASC,KACxE,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAExCoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EAAM,OAEX,MAAM,iBACJ0E,EAAgB,cAAEC,EAAa,cAAEC,EAAa,iBAAEC,EAAgB,cAAEC,EAAa,gBAC/EC,EAAe,mBAAEC,EAAkB,cAAEC,IACnCC,EAAAA,EAAAA,IAA4BlF,GAC1BmF,GAAiBrJ,EAAAA,EAAAA,IAAQ,CAC7B4I,EAAmB,uCAAoClS,EACvDmS,EAAgB,wCAAqCnS,EACrDoS,EAAgB,wCAAqCpS,EACrDyS,EAAgB,+CAA4CzS,EAC5DwS,EAAqB,+CAA4CxS,EACjEqS,EAAmB,uCAAoCrS,EACvDsS,EAAgB,wCAAqCtS,EACrDuS,EAAkB,0CAAuCvS,IACxDwE,KAAKoO,GAAMzO,EAAAA,GAAuByO,KAErC,IAAKD,EAAexL,OAKlB,YAJAhH,EAAQmL,iBAAiB,CACvB5G,QAASP,EAAAA,GAAuB,2BAChCzE,UAKJ,MAAMmT,EAAgB1O,EAAAA,GAAuB,sCACvC2O,EAAuBH,EAAehN,KAAK,MAAM4J,QAAQ,YAAc,GAAEsD,OAE/E1S,EAAQmL,iBAAiB,CACvB5G,QAASP,EAAAA,GAAuB,8BAA+B2O,GAC/DpT,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCwR,GAAmBnR,EAAAA,EAAAA,IAAehB,EAAQC,GAC7CmS,cAAcpN,QAAO,QAAC,QAAEiN,GAAS,SAAKA,IAAYtR,EAAQsR,OAAO,IAEpE,OAAOjQ,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoS,cAAeD,GACdlS,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,cAAc,CAACT,EAAQU,EAASC,KAC/C,MAAM,KAAE2S,EAAI,MAAErT,GAAQC,EAAAA,EAAAA,OAAsBS,EAG5C,GAAI,YAAa2S,GAAQA,EAAKC,eAAgBC,EAAAA,EAAAA,IAAqBF,GACjE,OAAOtT,EAGT,MAAMyT,EAAa,KAAIzS,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyT,SACrD,GAAI,YAAaJ,EAAM,CACrB,MAAMK,EAAqBF,EAAWnB,WAAWsB,GAASA,EAAiB3O,UAAYqO,EAAKrO,WAChE,IAAxB0O,GACFF,EAAWjB,OAAOmB,EAAoB,EAE1C,CAIA,OAFAF,EAAW7N,KAAK0N,IAETtR,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0T,QAASD,GACRxT,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,iBAAiB,CAACT,EAAQU,EAASC,KAClD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C8S,EAAa,KAAIzS,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyT,SAIrD,OAFAD,EAAWtK,OAEJnH,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0T,QAASD,GACRxT,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAQkT,IAAKC,EAAgB,MAAE7T,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7D,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B8T,oBACC7T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,WAAEoT,EAAU,MAAE9T,GAAQC,EAAAA,EAAAA,OAAsBS,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgU,0BAA2BD,GAC1B9T,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BgU,+BAA2BzT,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,YAAY,CAACT,EAAQU,EAASC,KAC7C,MAAM,IACJkT,EAAG,OAAE1T,EAAM,UAAEuG,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAC9BS,EAEEsE,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQuG,GAClD,IAAKzB,EAAS,OAEd,MAAMiP,EAAQjP,EAAQkP,UAAYlP,EAAQmP,SAC1C,GAAKF,EAAL,CAEA,KAAKG,EAAAA,EAAAA,IAAmBrU,EAAQkU,GAY9B,OAXAlU,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsU,gBAAiB,CACfJ,QACA1S,KAAM,OACN+S,UAAW,CACTC,OAAQ,WACR7T,aAGHV,QACHmD,EAAAA,EAAAA,IAAUpD,GAIZA,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9ByU,WAAY,CACVZ,MACA1T,SACAuG,cAEDzG,IACHmD,EAAAA,EAAAA,IAAUpD,EAxBQ,CAwBD,KAGnBS,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASC,KAC9C,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5ByU,gBAAYlU,GACXN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,IACJ+T,EAAG,KAAEC,EAAI,MAAEC,EAAK,OAAEC,EAAM,MAAE5U,GAAQC,EAAAA,EAAAA,OAChCS,GAAW,CAAC,GACV,eAAEmU,GAAmB9U,EAAO+U,SAASC,MAC3C,GAAuB,IAAnBF,EAEJ,OAAO9S,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BiV,SAAU,CACRC,iBAAkBhJ,KAAKC,MACvBuI,MACAC,OACAC,QACAC,WAED5U,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,eACJwU,EAAc,kBAAEC,GACdzU,EAEJ,MAAO,IACFX,EACHqV,mBAAoB,CAClBF,eAAgBA,QAAAA,EAAkBnV,EAAOqV,mBAAmBF,eAC5DC,kBAAmBA,QAAAA,EAAqBpV,EAAOqV,mBAAmBD,mBAErE,KAGH3U,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAE2U,EAAK,MAAErV,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuV,kBAAmB,CACjBD,UAEDrV,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BuV,uBAAmBhV,GAClBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BwV,+BAA2BjV,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,OAAEmR,EAAM,MAAE7R,GAAQC,EAAAA,EAAAA,OAAsBS,EAC9C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5ByV,wBAAyB3D,GACxB7R,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5ByV,6BAAyBlV,GACxBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kCAAkC,CAACT,EAAQU,EAASC,KACnE,MAAM,IAAEgJ,GAAQhJ,GACV,aAAE+U,GAAiB1V,EAAO+R,aAEhC,MAAO,IACF/R,EACH+R,aAAc,IACT/R,EAAO+R,aACV2D,cAAcC,EAAAA,EAAAA,IAAO,IAAID,KAAiB/L,IAAM2C,MAAM,EAAGsJ,EAAAA,MAE5D,KAGHnV,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EAM9C,OAHoB2K,EAAAA,EAAAA,IAAkBtL,EAAQC,IAC5BS,EAAQ2C,SAAS,CAAE/B,GAAInB,EAAQC,SAAUmB,EAAAA,GAAgBtB,WAEpE+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6V,iBAAkB,CAChB1V,WAEDF,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6V,sBAAkBtV,GACjBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,OAAER,EAAM,QAAE2V,EAAO,MAAE7V,GAAQC,EAAAA,EAAAA,OAAsBS,EAMvD,OAHoB2K,EAAAA,EAAAA,IAAkBtL,EAAQC,IAC5BS,EAAQ2C,SAAS,CAAE/B,GAAInB,EAAQF,WAE1C+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B+V,eAAgB,CACd5V,SACA2V,YAED7V,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B+V,oBAAgBxV,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,gBAAEqV,GAAoBhW,GACtB,SAAEiW,EAAWD,EAAgBC,SAAQ,YAAEC,EAAcF,EAAgBE,aAAgBvV,EAE3F,MAAO,IACFX,EACHgW,gBAAiB,CACfC,WACAC,eAEH,KAGHzV,EAAAA,EAAAA,IAAiB,mBAAoBT,IACnC,MAAMmW,EAAoB,qBAE1BC,MAAO,eAAqBlK,KAAKC,SAC9BkK,MAAMC,GAAaA,EAAShT,SAC5B+S,MAAM7J,IACLA,EAAUA,EAAQ+J,OAEdJ,EAAkBK,KAAKhK,IAAYA,IAAYH,EAAAA,MACjDrM,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACHyW,mBAAmB,IAErBrT,EAAAA,EAAAA,IAAUpD,GACZ,IAED0W,OAAO9C,IACF+C,EAAAA,KAEFC,QAAQC,MAAM,4BAA6BjD,EAC7C,GACA,KAGNnT,EAAAA,EAAAA,IAAiB,eAAgBT,KAC1BgB,EAAAA,EAAAA,IAAehB,GAAQE,EAAAA,EAAAA,OAAmB4W,qBAC/CC,EAAAA,EAAAA,IAAyB,KAO3BtW,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,UAAEqW,EAAS,MAAE/W,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CqW,GACHtW,EAAQuW,gBAAe,GAGzB,MAAMC,GAAmBvB,EAAAA,EAAAA,IAAOqB,EAC5B,IAAIhX,EAAOkX,iBAAkBjX,GAC7BD,EAAOkX,iBAAiBlS,QAAQmS,GAAMA,IAAMlX,KAmBhD,OAjBIiX,EAAiBxP,UAAW0P,EAAAA,EAAAA,MAAuB1P,QACrDhH,EAAQuW,gBAAe,GAGrBD,GACE5G,GAAsBiH,cAAcjH,GAExCA,EAAuBrN,OAAOuU,aAAY,KACxC5W,EAAQmC,gBAAgB,CACtB5C,SACA,GAvBsB,OA0B1BoX,cAAcjH,GACdA,OAAuB7P,GAGlB,IACFP,EACHkX,mBACAK,2BAA4BP,GAAYQ,EAAAA,EAAAA,WAA6BjX,EACtE,KAGHE,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,sBAAE8W,GAA0BzX,EAAO+U,SAASC,MAC5C0C,EAAgB1X,EAAO0X,cAE7B,GAAIhI,SAASO,MAAM9F,SAASwN,EAAAA,KAG1B,OAFAnI,GAAW,QACXO,EAAqB,GAAE6H,EAAAA,OAAcD,EAAAA,OAIvC,GAAI3X,EAAOuX,4BAA8BrK,KAAK2K,MAAM3L,KAAKC,MAAQ,KAAQ,GAAM,EAAG,CAChF,MAEM2L,GAFoBN,EAAAA,EAAAA,MAEYxX,EAAOuX,2BAE7C,GAAIO,EAAY,EAGd,OAFA/H,EAAqB,GAAE+H,iBAAyBA,EAAY,EAAI,IAAM,WACtEtI,GAAW,EAGf,CAEAA,GAAW,GAEX,MAAMuI,GAAc1X,EAAAA,EAAAA,IAAyBL,EAAQC,GACrD,GAAI8X,GAAeN,EAAuB,CACxC,MAAM,OAAEtX,EAAM,SAAEC,GAAa2X,EACvBC,GAAcxV,EAAAA,EAAAA,IAAWxC,EAAQG,GACvC,GAAI6X,EAAa,CACf,MAAM/H,GAAQgI,EAAAA,EAAAA,GAAavT,EAAAA,GAAwBsT,OAAazX,EAAWJ,IAAWuX,GACtF,OAAIM,EAAYvV,SAAWuV,EAAYE,SAAS9X,QAC9C8P,EAAc,GAAED,OAAW+H,EAAYE,OAAO9X,GAAU6P,cAI1DC,EAAaD,EAEf,CACF,CAEAF,EAAoB6H,EAAAA,IAAW,KCrqBjCnX,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CwX,GAASnX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QAAQD,OASrD,OARAnY,GAASqY,EAAAA,EAAAA,IAAarY,EAAQC,GAC9BD,GAASsY,EAAAA,EAAAA,IAAatY,EAAQC,IACrB+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BoY,QAAS,KACJpX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACjCD,WAEDlY,EACU,KAGfQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEkW,EAAK,MAAE5W,GAAQC,EAAAA,EAAAA,OAAsBS,EAE7C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoY,QAAS,KACJpX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACjCD,OAAQ,SACRtB,UAED5W,EAAM,I,gBCzBXQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,QAAEmY,EAAO,cAAEC,EAAa,kBAAEC,EAAiB,OAAExQ,EAAM,OAAEC,EAAM,aAAEC,EAAY,QAAEC,EAAO,MAClGnI,GAAQC,EAAAA,EAAAA,OACNS,EAEEiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0Y,YAAa,IACR9W,EAAS8W,YACZvY,SACAC,WACAmY,UACAC,gBACAC,oBACAxQ,SACAgO,UAAU,EACV/N,OAAQA,QAAAA,EAAUtG,EAAS8W,YAAYxQ,OACvCC,aAAcA,GAAgBvG,EAAS8W,YAAYvQ,cAAgBnI,EAAO0Y,YAAYpQ,iBACtFF,QAASA,GAAWxG,EAAS8W,YAAYtQ,SAE3C9F,gBAAiB,CAAC,GACjBrC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OACJuH,EAAM,QAAEE,EAAO,aAAED,EAAY,SAAE8N,IAC7BjV,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,YAElC,OAAO1W,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0Y,YAAa,CACXxQ,SACAE,UACA6N,WACA9N,iBAEDlI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OACJuH,EAAM,MACNjI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0Y,YAAa,KACR1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,YACjCxQ,SACAE,SAAS,IAEVnI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,aACJwH,EAAY,MACZlI,GAAQC,EAAAA,EAAAA,OACNS,EAUJ,OARAX,EAAS,IACJA,EACH0Y,YAAa,IACR1Y,EAAO0Y,YACVpQ,iBAAkBH,KAIfnG,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0Y,YAAa,KACR1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,YACjCvQ,iBAEDlI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,QACJyH,EAAO,MACPnI,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0Y,YAAa,KACR1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,YACjCtQ,YAEDnI,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,SAAEsV,EAAQ,MAAEhW,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B0Y,YAAa,KACR1X,EAAAA,EAAAA,IAAehB,EAAQC,GAAOyY,YACjCzC,aAEDhW,EAAM,I,+CC5FX,IAAI0Y,GAAiB,GACrBC,EAAAA,EAAAA,KAAe,MAET7P,EAAAA,EAAAA,MAAY8P,SAASC,cAAgBH,GAA8D,IAA5CrR,OAAOC,MAAKwB,EAAAA,EAAAA,MAAYgQ,SAASrR,SAC1FsR,EAAAA,EAAAA,KACF,KAGFvY,EAAAA,EAAAA,IAAiB,eAAewY,MAAOjZ,EAAQU,EAASC,KACtD,MAAM,SAAEkY,GAAalY,EACrBX,GAASkZ,EAAAA,EAAAA,IAAuBlZ,EAAQ,CACtCmZ,WAAW,KAEb/V,EAAAA,EAAAA,IAAUpD,SACJoZ,EAAAA,EAAAA,IAAcP,GAEpB,MAAMQ,EAAcC,KAAKC,UAAU,KAAKC,EAAAA,EAAAA,MAAqBpK,OAAQpP,EAAO0X,gBAC5E1X,GAAS+I,EAAAA,EAAAA,MACT,MAAM0Q,GAAaC,EAAAA,EAAAA,KAAgBR,EAAAA,EAAAA,IAAuBlZ,EAAQ,CAChE8Y,aAAa,EACbjC,WAAOtW,EACP4Y,WAAW,WAGPQ,EAAAA,EAAAA,IAAeN,EAAaI,IAElCG,EAAAA,EAAAA,MACA5Z,GAAS+I,EAAAA,EAAAA,MACT/I,GAASkZ,EAAAA,EAAAA,IAAuBlZ,EAAQ,CACtC8Y,aAAa,EACbjC,WAAOtW,EACP4Y,WAAW,KAEb/V,EAAAA,EAAAA,IAAUpD,IAEV6Z,EAAAA,EAAAA,KAAiB,EAAK,KAGxBpZ,EAAAA,EAAAA,IAAiB,iBAAkBT,KAC5B8Z,EAAAA,EAAAA,OAEEC,EAAAA,EAAAA,IAAsB/Z,OAG/BS,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAMqZ,EAAkB1S,OAAO2S,OAAOja,EAAO+Y,UACvC,YAAEM,EAAW,WAAEI,GAAe9Y,EAC9BuZ,EAAUZ,KAAKa,MAAMd,IAC3Be,EAAAA,EAAAA,IAAaF,EAASA,EAAQ9K,QAE9B,MAAMiL,EAAiBra,GACvBA,EAASsZ,KAAKa,MAAMV,IACbV,QAAUsB,EAAetB,SAChCuB,EAAAA,EAAAA,IAAata,GAAQua,EAAAA,EAAAA,IAAUC,EAAAA,IAE/Bxa,GAASkZ,EAAAA,EAAAA,IACPlZ,EACA,CACEya,gBAAgB,EAChB5D,WAAOtW,EACPma,qBAAsB,KAG1BtX,EAAAA,EAAAA,IAAUpD,IAEV4Z,EAAAA,EAAAA,MAEAI,EAAgB9O,SAAQ,QAAG5J,GAAIrB,EAAK,YAAE0a,GAAa,SAAKja,EAAQka,KAAK,CAAE3a,QAAO0a,eAAc,IAC5Fja,EAAQma,SAAS,KAGnBpa,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,SAAEkY,GAAalY,GACrBma,EAAAA,EAAAA,IAAejC,GAAUxC,KAAK3V,EAAQqa,cAAc,KAClDra,EAAQsa,yBAAyB,GACjC,KAGJva,EAAAA,EAAAA,IAAiB,2BAA4BT,IAA6B,MACxE,OAAOkZ,EAAAA,EAAAA,IAAuBlZ,EAAQ,CACpC0a,sBAA4D,QAAtC,EAAC1a,EAAO6Y,UAAU6B,4BAAoB,QAAI,GAAK,GACrE,KAGJja,EAAAA,EAAAA,IAAiB,8BAA+BT,IACvCkZ,EAAAA,EAAAA,IAAuBlZ,EAAQ,CACpC0a,qBAAsB,OAI1Bja,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEkW,GAAUlW,EAElB,OAAOuY,EAAAA,EAAAA,IAAuBlZ,EAAQ,CAAE6W,SAAQ,KAGlDpW,EAAAA,EAAAA,IAAiB,sBAAuBT,IAC/BkZ,EAAAA,EAAAA,IAAuBlZ,EAAQ,CAAE6W,WAAOtW,OAGjDE,EAAAA,EAAAA,IAAiB,oBAAoB,KACnCkY,GAAiB,CAAI,I,8CCfvB,MAEMsC,EAA0B,IAAIC,IAE9BC,GAA0BhL,EAAAA,EAAAA,KAAUiL,GAAOA,KAAM,KAAK,GAmzB5DnC,eAAe5O,EACbrK,EACA+N,EACA3N,EACAib,EACAjR,GAIA,IAHAkR,EAAa,UAAH,8CACVC,EAAkB,UAAH,8CAAQ,sFACnBtb,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAMC,EAAS4N,EAAKzM,GAEpB,IAAIka,EACJ,OAAQpR,GACN,KAAKqR,EAAAA,GAAAA,UACHD,OAAYjb,EACZ,MACF,KAAKkb,EAAAA,GAAAA,OACHD,IAActO,KAAK2K,MAAM6D,EAAAA,IAAqB,GAAK,GACnD,MACF,KAAKD,EAAAA,GAAAA,SACHD,IAAcE,EAAAA,IAAqB,GAIvC1b,GAAS+I,EAAAA,EAAAA,MACT,MAAMxD,QAAeoW,EAAAA,EAAAA,IAAQ,gBAAiB,CAC5C5N,MAAMvL,EAAAA,EAAAA,IAAWxC,EAAQG,GACzBkb,WACAG,YACAlG,MAAOoG,EAAAA,IACPtb,aAGF,IAAKmF,EACH,OAGF,MAAM,SACJT,EAAQ,MAAE8W,EAAK,MAAEtN,EAAK,mBAAEuN,GACtBtW,EAEJvF,GAAS+I,EAAAA,EAAAA,MAET,MAAM+S,EAAgB3b,IAAWsM,EAAAA,IAC7BzM,EAAOuM,qBAAqBvH,QAAO,QAAC,UAAE+W,GAAW,SAAMA,CAAS,IAAEhX,KAAI,QAAC,QAAEE,GAAS,SAAKA,CAAO,IAC9F,GACE+W,EAAe,GAAoBC,OAAOnX,EAAUgX,GACpDI,GAAOC,EAAAA,EAAAA,IAAqBH,EAAa,MACzCrS,EAAMrC,OAAOC,KAAK2U,GAAMnX,IAAI4C,QAElC3H,GAASoc,EAAAA,EAAAA,IAAoBpc,EAAQG,EAAQ+b,GAC7Clc,EAASsb,GACLe,EAAAA,EAAAA,IAAkBrc,EAAQG,EAAQC,EAAUuJ,EAAK1J,IACjDqc,EAAAA,EAAAA,IAAgBtc,EAAQG,EAAQC,EAAUuJ,GAE9C3J,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OACtD5b,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB7N,EAAO,OACtDtO,GAASyc,EAAAA,EAAAA,IAAkBzc,EAAQG,EAAQ0b,GAE3C,IAAIa,GAAYC,EAAAA,EAAAA,IAAgB3c,EAAQG,EAAQC,GAChD,MAAMwc,GAAcC,EAAAA,EAAAA,IAAkB7c,EAAQG,EAAQC,EAAUH,GAWhE,GATIqb,GAAcoB,GAAaE,IACxBA,EAAYlV,UAAUoV,EAAAA,EAAAA,IAA4BJ,EAAWE,KAChE5c,GAASsc,EAAAA,EAAAA,IAAgBtc,EAAQG,EAAQC,EAAUwc,GACnDF,GAAYC,EAAAA,EAAAA,IAAgB3c,EAAQG,EAAQC,GAC5CJ,GAASiC,EAAAA,EAAAA,IAAsBjC,EAAQG,EAAQC,EAAU,mBAAeG,EAAWN,GACnFqb,GAAa,KAIZC,EAAiB,CACpB,MAAMwB,EAAazB,EAAasB,EAAeF,GACzC,eAAEM,GAAmBC,EAAiBF,EAAY1B,EAAUjR,GAClEpK,GAASkd,EAAAA,EAAAA,IAAuBld,EAAQG,EAAQC,EAAU4c,EAAiB/c,EAC7E,EAEAmD,EAAAA,EAAAA,IAAUpD,EACZ,CA+CA,SAASid,EACPE,EACA9B,EACAjR,GAEA,MAAM,OAAE1C,GAAWyV,EACbC,EAAQ/B,EArBhB,SAA0B8B,EAAqB9B,GAC7C,OAAIA,EAAW8B,EAAU,GAChB,EAGL9B,EAAW8B,EAAUA,EAAUzV,OAAS,GACnCyV,EAAUzV,OAAS,EAGrByV,EAAU7K,WAAU,CAAChR,EAAI+b,IAC9B/b,IAAO+Z,GACH/Z,EAAK+Z,GAAY8B,EAAUE,EAAI,GAAKhC,GAE5C,CAQ2BiC,CAAiBH,EAAW9B,IAAa,EAE5DkC,EADcnT,IAAcqR,EAAAA,GAAAA,UACM2B,EAASA,EAAQ,GAAM1V,EACzD8V,EAAOD,EAAoB7B,EAAAA,IAC3B+B,EAAKF,EAAoB7B,EAAAA,IAAqB,EAC9CsB,EAAiBG,EAAU7Q,MAAMY,KAAKC,IAAI,EAAGqQ,GAAOC,EAAK,GAE/D,IAAIC,EACAC,EACJ,OAAQvT,GACN,KAAKqR,EAAAA,GAAAA,UACHiC,EAAeH,EAAoB,EACnCI,EAAcH,GAAQ,EACtB,MACF,KAAK/B,EAAAA,GAAAA,SACHiC,EAAeH,EAAoB7V,EACnCiW,EAAcF,GAAM/V,EAAS,EAC7B,MACF,KAAK+T,EAAAA,GAAAA,OACL,QACEiC,EAAeV,EAAetV,OAAS,EACvCiW,EAAcX,EAAetV,SAAWgU,EAAAA,IAI5C,MAAO,CAAEsB,iBAAgBU,eAAcC,cACzC,CAEA1E,eAAe2E,EAAmC5d,EAAW6d,GAejB,sFACtC5L,GADFhS,GAAQC,EAAAA,EAAAA,OAAkB,EAE5B,MAAM4d,EAAmBD,EAAOE,WAAa,CAACC,EAAkBC,KACzDhD,EAAwBiD,IAAID,KAC/BhM,EAAUgM,EACVhD,EAAwBkD,IAAIF,EAAgBH,IAG9C9d,GAAS+I,EAAAA,EAAAA,MAET/I,EAAS,IACJA,EACHoe,YAAa,CACXC,iBAAkB,IACbre,EAAOoe,YAAYC,iBACtB,CAACJ,GAAiB,CAAED,gBAI1B5a,EAAAA,EAAAA,IAAUpD,EAAO,OACfO,GAGAsd,EAAOS,YAAcC,EAAAA,WACjBC,EAAAA,EAAAA,MAGRxe,GAAS+I,EAAAA,EAAAA,MACT,MAAMpH,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAEF,MAAM,SAAEvB,GAAauB,EAEhBkc,EAAOS,YAAcle,IAAamB,EAAAA,KACrCsc,EAAOS,YAAaG,EAAAA,EAAAA,IAAyBze,EAAQ6d,EAAO9P,KAAKzM,GAAIlB,IAGnEyd,EAAOS,aAAeT,EAAOa,iBAAmBte,IAAamB,EAAAA,KAC/Dsc,EAAOa,iBAAkBD,EAAAA,EAAAA,IAAyBze,EAAQ6d,EAAO9P,KAAKzM,GAAIlB,UAGtEub,EAAAA,EAAAA,IAAQ,cAAekC,EAAQC,GAEjCA,GAAoB7L,GACtBgJ,EAAwB0D,OAAO1M,EAEnC,CAkYA,SAAS2M,EAAkBb,GACzB,MAAM,iBACJc,EAAgB,SAAEC,GAChBf,EACJ,OAAIc,EAAyB,OACzBE,EAAAA,IAAAA,IAAkCD,IAAaE,EAAAA,IAAAA,IAAkCF,GAAkB,QACnGG,EAAAA,IAAAA,IAAkCH,GAAkB,QACpDf,EAAWmB,MAAc,QACtB,MACT,EA15CAze,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,UACJyJ,EAAYqR,EAAAA,GAAAA,OAAwB,gBACpCF,GAAkB,EAAK,MACvBtb,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhB,IAAI,OAAER,EAAM,SAAEC,GAAaO,GAAW,CAAC,EAEvC,IAAKR,IAAWC,EAAU,CACxB,MAAMuB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGFxB,EAASwB,EAAmBxB,OAC5BC,EAAWuB,EAAmBvB,QAChC,CAEA,MAAM2N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAEhC,IAAK4N,GAAQA,EAAKoR,aAChB,OAGF,MAAMvY,GAAcC,EAAAA,EAAAA,IAAkB7G,EAAQG,EAAQC,EAAUH,GAC1Dyc,GAAYC,EAAAA,EAAAA,IAAgB3c,EAAQG,EAAQC,GAC5Cwc,GAAcC,EAAAA,EAAAA,IAAkB7c,EAAQG,EAAQC,EAAUH,GAEhE,GAAK2G,GAAgBA,EAAYc,QAAU0C,IAAcqR,EAAAA,GAAAA,OAmBlD,CACL,MAAMJ,EAAWjR,IAAcqR,EAAAA,GAAAA,UAA8B7U,EAAY,GAAKA,EAAYA,EAAYc,OAAS,GACzG4T,EAAatU,QAAQ4V,GACrBG,EAAczB,EAAasB,EAAcF,GACzC,eACJM,EAAc,aAAEU,EAAY,YAAEC,GAC5BV,EAAiBF,EAAY1B,EAAUjR,GAY3C,GAVIsT,IACF1d,GAASkd,EAAAA,EAAAA,IAAuBld,EAAQG,EAAQC,EAAU4c,EAAgB/c,KAG5Emf,EAAAA,EAAAA,KAAU,MAcdnG,eACEjZ,EACAU,EACAid,EAAsBrC,EAAqBC,EAC3CxN,EAAe3N,EAAkBgK,EAA8BiR,GAE/D,sFADIpb,GAAQC,EAAAA,EAAAA,OAAkB,EAEzByd,SACGtT,EACJrK,EAAQ+N,EAAM3N,EAAUib,EAAUjR,EAAWkR,EAAYC,EAAiBtb,GAIzEsb,GACH7a,EAAQ2J,qBAAqB,CAC3BlK,OAAQ4N,EAAKzM,GAAIlB,WAAUgK,YAAWmR,iBAAiB,EAAMtb,SAGnE,CA/BWof,CACHrf,EAAQU,EAASid,EAAarC,EAAYC,EAAiBxN,EAAM3N,EAAWgK,EAAWiR,EAAUpb,EAClG,IAGCsb,EACF,MAEJ,KAxCmF,CACjF,MAAMF,GAAWiE,EAAAA,EAAAA,IAAuBtf,EAAQG,EAAQF,KAAUsf,EAAAA,EAAAA,IAAqBvf,EAAQG,EAAQC,GACjGkb,EAAatU,QAAQqU,GAAYqB,IAAcA,EAAUvS,SAASkR,IAClE0B,GAAczB,EAAasB,EAAcF,IAAc,IACvD,eACJM,EAAc,aAAEU,EAAY,YAAEC,GAC5BV,EAAiBF,EAAY1B,EAAUI,EAAAA,GAAAA,QAEvCiC,GAAgBV,EAAetV,QAAUgU,EAAAA,MAC3C1b,GAASkd,EAAAA,EAAAA,IAAuBld,EAAQG,EAAQC,EAAU4c,EAAgB/c,IAGvE0d,IACHyB,EAAAA,EAAAA,KAAU,KACH/U,EACHrK,EAAQ+N,EAAM3N,EAAWib,EAAUI,EAAAA,GAAAA,OAA0BH,EAAYC,EAAiBtb,EAC3F,GAGP,CAuBA,OAAOD,CAAM,KAuBfS,EAAAA,EAAAA,IAAiB,eAAewY,MAAOjZ,EAAQU,EAASC,KACtD,MAAM,OACJR,EAAM,UAAEuG,EAAS,iBAAE8Y,EAAgB,aAAEC,GACnC9e,EAEEoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAM9I,QA0xBRgU,eACEjZ,EAAW+N,EAAerH,EAAmB8Y,GAE7C,MAAMja,QAAeoW,EAAAA,EAAAA,IAAQ,eAAgB,CAAE5N,OAAMrH,cACrD,GAAKnB,EAAL,CAIA,GAAIA,IAAWma,EAAAA,GAmBf,OALA1f,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQ+N,EAAKzM,GAAIoF,EAAWnB,EAAON,SAC9DjF,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,QAC7DxY,EAAAA,EAAAA,IAAUpD,GAEHuF,EAAON,QAlBZ,GAAIua,EAAkB,CACpBxf,GAAS+I,EAAAA,EAAAA,MACT,MAAM6W,GAAe3L,EAAAA,EAAAA,IAAkBjU,EAAQ+N,EAAKzM,GAAIke,GACxDxf,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQ+N,EAAKzM,GAAIke,EAAkB,IACzDI,EACHC,sBAAkBtf,KAEpB6C,EAAAA,EAAAA,IAAUpD,EACZ,CAXF,CAsBF,CAtzBwB8f,CAAY9f,EAAQ+N,EAAMrH,EAAW8Y,GAC3D,GAAIva,GAAWwa,EAAc,CAC3B,MAAM,cAAE3X,EAAa,WAAEiY,GAAeN,EACtCzf,GAAS+I,EAAAA,EAAAA,MAET/I,GAASggB,EAAAA,EAAAA,IACPhgB,EACAiF,EACA9E,EACA2H,EACAiY,IAEF3c,EAAAA,EAAAA,IAAUpD,EACZ,MAGFS,EAAAA,EAAAA,IAAiB,eAAe,CAACT,EAAQU,EAASC,KAChD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAE5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,EAAQ,KAAEoB,GAASG,EAInC,GAFAhB,GAAUsf,EAAAA,EAAAA,IAAKtf,EAAS,CAAC,UAEZ,cAATa,IAAyBb,EAAQuf,YACnC,OAAOle,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BqC,qBAAsB1B,GACrBV,GAGL,MAAM8N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1B+G,GAAeC,EAAAA,EAAAA,IAAmBnH,EAAQG,EAAQC,GAClD+f,EAAoBjZ,GAAe+M,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ+G,QAAgB3G,EAErFme,EAAkB3Q,EAAKtL,SACzBgc,EAAAA,EAAAA,IAAyBze,EAAQG,EAAQC,GACzC+f,GAAmBC,qBAAuBD,GAAmBN,iBAE3DhC,EAAS,IACVld,EACHoN,OACAuQ,WAAYpX,EACZwX,kBACA2B,WAAWC,EAAAA,EAAAA,IAAgBtgB,EAAQG,EAAQC,GAC3CmgB,QAAQC,EAAAA,EAAAA,IAAaxgB,EAAQG,IAG/BO,EAAQqH,gBAAgB,CAAErB,eAAWnG,EAAWN,UAChDS,EAAQ+f,oBAAoB,CAAExgB,UAE9B,MAAMygB,GAAY/f,EAAQggB,aAAehgB,EAAQggB,YAAYjZ,QAAU,EACjEkZ,GAAaF,GAAY/f,EAAQkgB,oBAEvC,GAAIH,EAAU,CACZ,MAAM,YAAEC,KAAgBG,GAAejD,EACvCD,EAAY5d,EAAQ,IACf8gB,EACH/C,WAAY4C,EAAcA,EAAY,QAAKpgB,GAC1CN,EACL,MAAO,GAAI2gB,EAAW,CACpB,MAAM,KACJtd,EAAI,SAAEyd,EAAQ,YAAEJ,KAAgBK,GAC9BnD,EACEoD,EAmtCV,SAAgCN,GAC9B,OAAOA,EAAYnb,QAAO,CAACC,EAAKsY,EAAYX,EAAO8D,IACnC,IAAV9D,GACF3X,EAAIG,KAAK,CAACmY,IACHtY,IAGImZ,EAAkBb,KACVa,EAAkBsC,EAAI9D,EAAQ,IAEjD3X,EAAIA,EAAIiC,OAAS,GAAG9B,KAAKmY,GAEzBtY,EAAIG,KAAK,CAACmY,IAGLtY,IACN,GACL,CApuCmB0b,CAAuBR,GAEtCM,EAAO/V,SAAQ,CAACkW,EAAOC,KACrB,MAAMC,GAAqBC,EAAAA,EAAAA,IAAMH,EAA0BI,EAAAA,KAC3D,IAAK,IAAInE,EAAI,EAAGA,EAAIiE,EAAmB5Z,OAAQ2V,IAAK,CAClD,MAAOoE,KAAoBC,GAAmBJ,EAAmBjE,GAC3D9T,EAAa,GAAE2C,KAAKC,QAAQkV,IAAahE,IAEzCsE,EAAgB,IAANtE,GAA0B,IAAfgE,EAE3BzD,EAAY5d,EAAQ,IACfghB,EACH1d,KAAMqe,EAAUre,OAAO/C,EACvBwgB,SAAUY,EAAUZ,OAAWxgB,EAC/Bwd,WAAY0D,EACZlY,UAAWmY,EAAgBha,OAAS,EAAI6B,OAAYhJ,GACnDN,GAEHyhB,EAAgBxW,SAAS6S,IACvBH,EAAY5d,EAAQ,IACfghB,EACHjD,aACAxU,aACCtJ,EAAM,GAEb,IAEJ,KAAO,CACL,MAAM,KACJqD,EAAI,SAAEyd,EAAQ,YAAEJ,EAAW,WAAErC,KAAe0C,GAC1CnD,EAEAva,GACFsa,EAAY5d,EAAQ,IACfghB,EACH1d,OACAyd,WACAzC,cACCre,GAGL0gB,GAAazV,SAAS6S,IACpBH,EAAY5d,EAAQ,IACfghB,EACHjD,cACC9d,EAAM,GAEb,CAEgB,KAGlBQ,EAAAA,EAAAA,IAAiB,eAAe,CAACT,EAAQU,EAASC,KAChD,MAAM,KAAE2C,EAAI,SAAEyd,EAAQ,MAAE9gB,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhDgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,EAAUoB,KAAMgD,GAAoB7C,EAC9CoM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1B8E,GAAU2c,EAAAA,EAAAA,IAAqB5hB,EAAQG,EAAQC,EAAUoE,GAC1DuJ,GAAS9I,KAIT0W,EAAAA,EAAAA,IAAQ,cAAe,CAC1B5N,OAAM9I,UAAS3B,OAAMyd,WAAUV,WAAWC,EAAAA,EAAAA,IAAgBtgB,EAAQG,EAAQC,KAG5EM,EAAQmhB,aAAa,CAAEnb,eAAWnG,EAAWN,UAAQ,KAGvDQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,UAAEuG,GAAc/F,EACxBsE,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQuG,GAC5CoX,EAAmB7Y,GAAWgW,EAAwB6G,KAAIC,EAAAA,EAAAA,IAAqB9c,IACjF6Y,IACFkE,EAAAA,EAAAA,IAAkBlE,GAGpBpd,EAAQ+M,UAAU,CAChB,QAAS,iBACT9D,IAAK,CAACjD,GACNvG,UACA,KAGJM,EAAAA,EAAAA,IAAiB,aAAawY,MAAOjZ,EAAQU,EAASC,KACpD,MAAM,OACJR,EAAM,SAAEC,EAAQ,MAAE6hB,EAAK,YAAEC,GACvBvhB,EACJ,IAAKshB,EACH,OAGF,MAAM,KAAE3e,EAAI,SAAEyd,GAAakB,EACrBlU,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BgiB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQG,GAC5BgiB,IAAQE,EAAAA,EAAAA,IAAcF,KAE1BF,EAAMK,SAAU,EAChBL,EAAMC,YAAcA,EACpBliB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,QAAS6hB,GAC/DjiB,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAAEqiB,UAAWtV,KAAK2K,MAAM3L,KAAKC,MAAQ,QAEzE/I,EAAAA,EAAAA,IAAUpD,SAEW2b,EAAAA,EAAAA,IAAQ,YAAa,CACxC5N,OACAzK,OACAyd,WACA0B,cAActb,EAAAA,EAAAA,IAAmBnH,EAAQG,EAAQC,GACjDA,UAAUqe,EAAAA,EAAAA,IAAyBze,EAAQG,EAAQC,OAInD6hB,EAAMK,SAAU,GAGlBtiB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,QAAS6hB,GAC/DjiB,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAAEqiB,UAAWtV,KAAK2K,MAAM3L,KAAKC,MAAQ,QAEzE/I,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,cAAc,CAACT,EAAQU,EAASC,KAC/C,MAAM,OACJR,EAAM,SAAEC,EAAWmB,EAAAA,GAAc,UAAEmhB,EAAS,YAAER,GAC5CvhB,EACJ,KAAKgiB,EAAAA,EAAAA,IAAY3iB,EAAQG,EAAQC,GAC/B,OAGF,MAAM2N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE3BuiB,IACE/G,EAAAA,EAAAA,IAAQ,aAAc5N,GAAM0Q,EAAAA,EAAAA,IAAyBze,EAAQG,EAAQC,IAG5E,MAAMwiB,EAAiCV,EAAc,CAAEA,cAAa5e,KAAM,SAAO/C,EAIjF,OAHAP,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,QAASwiB,IACtDL,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAAEqiB,eAAWjiB,GAEpC,KAGfE,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,SAAEC,EAAQ,UAAEigB,GAAc1f,EAExC,OAAO8F,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,YAAaigB,EAAU,KAG7E5f,EAAAA,EAAAA,IAAiB,cAAc,CAACT,EAAQU,EAASC,KAC/C,MAAM,UACJ+F,EAAS,QAAEmc,EAAO,UAAEC,EAAS,SAAEC,EAAQ,MAAE9iB,GAAQC,EAAAA,EAAAA,OAC/CS,EAEEoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GAClC8N,IAIA4N,EAAAA,EAAAA,IAAQ,aAAc,CACzB5N,OAAMrH,YAAWmc,UAASC,YAAWC,YACrC,KAGJtiB,EAAAA,EAAAA,IAAiB,oBAAoBwY,MAAOjZ,EAAQU,EAASC,KAC3D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMiV,GAAQvE,EAAAA,EAAAA,IAAyBze,EAAQG,EAAQC,SACjDub,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE5N,OAAM3N,SAAU4iB,IAEpDhjB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQ+N,EAAKzM,GAAIC,EAAAA,GAAgB,YAAa,KAC1E6B,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,WAAE4D,EAAU,mBAAE0e,EAAkB,MAAEhjB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAEF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EACvBoM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,IAE3Bwb,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE5N,OAAMxJ,aAAY0e,uBAEnD,MAAMC,GAAYC,EAAAA,EAAAA,IAAgBnjB,EAAQG,EAAQC,GAC9C8iB,GAAa3e,EAAW4F,SAAS+Y,IACnCxiB,EAAQmhB,aAAa,CAAEnb,eAAWnG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,WAAE4D,EAAU,MAAEtE,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5CgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,GAAWwB,EACboM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,IAE3Bwb,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE5N,OAAMxJ,eAEhD,MAAM2e,GAAYE,EAAAA,EAAAA,IAAyBpjB,EAAQG,GAC/C+iB,GAAa3e,EAAW4F,SAAS+Y,IACnCxiB,EAAQmhB,aAAa,CAAEnb,eAAWnG,EAAWN,SAC/C,KAGFQ,EAAAA,EAAAA,IAAiB,iBAAiBwY,MAAOjZ,EAAQU,EAASC,KACxD,MAAM,OAAER,EAAM,mBAAE8iB,EAAkB,MAAEhjB,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5DoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,aAGI4N,EAAAA,EAAAA,IAAQ,gBAAiB,CAAE5N,OAAMkV,uBAEvCjjB,GAAS+I,EAAAA,EAAAA,MACT,MAAMsa,GAAahjB,EAAAA,EAAAA,IAAyBL,EAAQC,GAChDojB,GAAcA,EAAWljB,SAAWA,GACtCO,EAAQ2C,SAAS,CAAE/B,QAAIf,EAAWN,SACpC,KAGFQ,EAAAA,EAAAA,IAAiB,kBAAkBwY,MAAOjZ,EAAQU,EAASC,KACzD,MAAM,WACJ4D,EAAU,OAAE+e,EAAM,YAAEC,EAAW,MAAEtjB,GAAQC,EAAAA,EAAAA,OACvCS,EACEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,GAAWwB,EACboM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE1BoF,QAAeoW,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C6H,KAAMzV,EAAMxJ,aAAY+e,SAAQC,gBAGlC7iB,EAAQmL,iBAAiB,CACvB5G,QAASM,GACLke,EAAAA,EAAAA,IAAU,2BACV,2EACJxjB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,qBAAqBwY,MAAOjZ,EAAQU,EAASC,KAC5D,MAAM,OAAE6T,EAAM,OAAErU,EAAM,SAAEC,GAAaO,EACrC,GAAIR,IAAWH,EAAO0X,cAAe,OAErC,MAAM3J,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EAAM,OACX,MAAMoU,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQG,GAC5BgiB,KAASuB,EAAAA,EAAAA,IAAUvB,KAASE,EAAAA,EAAAA,IAAcF,WAExCxG,EAAAA,EAAAA,IAAQ,oBAAqB,CACjC6H,KAAMzV,EAAM3N,WAAUoU,UACtB,KAGJ/T,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEsM,EAAK,MAAEhN,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvCgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EACvBoM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGFoN,GAAwB,MACjBQ,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC5N,OAAM3N,WAAU6M,SAChB,IAGA9M,IAAWsM,EAAAA,MACbzM,EAAS,IACJA,EACHuM,qBAAsBvM,EAAOuM,qBAAqBxH,KAAKiN,GAC9CA,EAAaxE,UAAYwE,EAAa1Q,IAAM2L,EAAQ,IAAK+E,EAAcxE,UAAU,GAAUwE,MAKxG,MAAMpL,GAAcC,EAAAA,EAAAA,IAAkB7G,EAAQG,EAAQC,EAAUH,GAC1D0jB,GAAQC,EAAAA,EAAAA,IAAoB5jB,EAAQG,EAAQC,EAAUH,GAC5D,IAAK2G,IAAgB+c,IAAU5V,EAAK8V,YAClC,OAAO7jB,EAGT,MAAM8jB,EA84BR,SAAwBna,EAAe6T,EAAcC,GACnD,IAAIsG,EAAQ,EAEZ,IAAK,IAAI1G,EAAI,EAAGlK,EAAIxJ,EAAIjC,OAAQ2V,EAAIlK,IAC9BxJ,EAAI0T,IAAMG,GAAQ7T,EAAI0T,IAAMI,GAC9BsG,MAGEpa,EAAI0T,IAAMI,IALuBJ,KAUvC,OAAO0G,CACT,CA55BoBC,CAAepd,EAAc+c,EAAO1W,GACtD,IAAK6W,EACH,OAAO9jB,EAGT,GAAI+N,EAAKtL,SAAWsL,EAAKmK,SAAS9X,GAAW,CAC3C,MAAM6jB,EAAQlW,EAAKmK,OAAO9X,GAC1BJ,GAASkkB,EAAAA,EAAAA,IAAiBlkB,EAAQG,EAAQC,EAAU,CAClD+jB,uBAAwBlX,IAE1B,MAAMmX,EAAsBlX,KAAKC,IAAI,EAAG8W,EAAMJ,YAAcC,GAM5D,OAL4B,IAAxBM,IACFpkB,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClC0jB,YAAa3W,KAAKC,IAAI,EAAGY,EAAK8V,YAAc,OAGzCQ,EAAAA,EAAAA,IAAYrkB,EAAQG,EAAQC,EAAU,CAC3CyjB,YAAaO,GAEjB,CAGA,OAAIhkB,IAAamB,EAAAA,IAIVghB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAChCgkB,uBAAwBlX,EACxB4W,YAAa3W,KAAKC,IAAI,EAAGY,EAAK8V,YAAcC,UAN9C,CAOE,KAGJrjB,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,WAAE4D,EAAU,MAAEtE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GAClC8N,IAIA4N,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE5N,OAAMxJ,cAAa,KAGxD9D,EAAAA,EAAAA,IAAiB,sBAAsBwY,MAAOjZ,EAAQU,EAASC,KAC7D,MAAM,KAAE2C,EAAI,MAAErD,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtC2jB,QAAuB3I,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE1W,QAAS3B,IAEvEtD,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BskB,kBACCrkB,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,IAAKK,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqkB,eAInC,OAAOtiB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BskB,oBAAgB/jB,GACfN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,OAAER,EAAM,UAAEuG,EAAS,QAAE6d,GAAY5jB,EACjCoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE5B4N,IACG4N,EAAAA,EAAAA,IAAQ,eAAgB,CAAE5N,OAAMrH,YAAW6d,WAClD,KAGF9jB,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,OAAER,EAAM,UAAEuG,GAAc/F,EACxBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE5B4N,IACG4N,EAAAA,EAAAA,IAAQ,eAAgB,CAAE5N,OAAMrH,YAAW6d,QAAS,IAC3D,KAGF9jB,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASC,KAC9C,MAAM,OAAER,EAAM,UAAEuG,GAAc/F,EACxBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BqkB,GAAOvQ,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQuG,IAAYkG,QAAQ4X,KAC/DzW,GAAQyW,IACL7I,EAAAA,EAAAA,IAAQ,YAAa,CAAE5N,OAAMrH,YAAW8d,QAC/C,KAGF/jB,EAAAA,EAAAA,IAAiB,yBAAyBwY,MAAOjZ,EAAQU,EAASC,KAChE,MAAM,KACJoN,EAAI,UAAErH,EAAS,OAAE+d,EAAM,OAAE1V,EAAM,MAAEuG,EAAK,kBAAEoP,EAAiB,MAAEzkB,GAAQC,EAAAA,EAAAA,OACjES,EAEE4E,QAAeoW,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD5N,OAAMrH,YAAW+d,SAAQ1V,SAAQuG,UAGnC,IAAK/P,EACH,OAGFvF,GAAS+I,EAAAA,EAAAA,MAET/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,OAE7D,MAAMha,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,IAClC,YAAE2I,GAAgBhH,GAClB,OAAEiH,GAAWjH,EAASgH,YAE5B5I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B4I,YAAa,IACRA,EACHC,OAAQ,IACHA,EACH,CAAC4b,IAAS9O,EAAAA,EAAAA,IAAO,KACV+O,GAAqB7b,GAAUA,EAAO4b,GAAU5b,EAAO4b,GAAU,MAClElf,GAAUA,EAAOqW,MAAM7W,KAAKod,GAASA,EAAK7gB,QAGlDqjB,QAAS,IACH/b,EAAY+b,QAAU/b,EAAY+b,QAAU,CAAC,EACjD,CAACF,GAASlf,EAAOqf,YAAc,MAGlC3kB,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OAAER,EAAM,IAAEwJ,GAAQhJ,EAClBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC5B4N,IACG4N,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE5N,OAAMpE,OAC7C,KAGFlJ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,SAAEoiB,EAAQ,YAAE7C,EAAW,MAAEjgB,GAAQC,EAAAA,EAAAA,OAAsBS,GAEvD,WACJ2J,EAAU,WAAE/F,EAAU,SAAEhC,EAAQ,YAAEgI,EAAW,UAAEI,EAAS,WAAEC,EAAU,WAAEia,IACpE7jB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBAC5BwiB,GAAuBC,EAAAA,EAAAA,IAA2B/kB,GAClDglB,EAAW1a,GAAa9H,EAAAA,EAAAA,IAAWxC,EAAQsK,QAAc/J,EACzD0kB,EAAS1iB,GAAWC,EAAAA,EAAAA,IAAWxC,EAAQuC,QAAYhC,EACnDuE,EAAWwF,GAAc/F,EAC3BA,EACCa,MAAK,CAAC8f,EAAGC,IAAMD,EAAIC,IACnBpgB,KAAKzD,IAAO2S,EAAAA,EAAAA,IAAkBjU,EAAQsK,EAAYhJ,KAAK0D,OAAOgC,cAC/DzG,EAEJ,IAAKykB,IAAaC,IAAWngB,GAAa+f,IAAeI,EAAOxiB,QAC9D,OAGF,MAAM8d,GAASC,EAAAA,EAAAA,IAAaxgB,EAAQuC,GAE9B6iB,EAAetgB,EAASE,QAAQqgB,KAAOC,EAAAA,EAAAA,IAA6BD,KACtED,EAAa1d,SACViU,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9BqJ,WACAC,SACAJ,aACA/f,SAAUsgB,EACVrC,WACA7C,cACAK,SACAhW,cACAI,YACAC,aACAka,yBAIJhgB,EACGE,QAAQqgB,IAAMC,EAAAA,EAAAA,IAA6BD,KAC3Cna,SAASjG,IACR,MAAM,KAAE3B,EAAI,SAAEyd,GAAa9b,EAAQ2H,QAAQtJ,MAAQ,CAAC,GAC9C,QAAE6N,EAAO,KAAEqT,GAASvf,EAAQ2H,QAE7BgR,EAAY5d,EAAQ,CACvB+N,KAAMkX,EACNvG,gBAAiBmG,EACjBvhB,OACAyd,WACA5P,UACAqT,OACAzB,WACA7C,cACAK,UACCtgB,EAAM,IAGbD,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsC,gBAAiB,CAAC,GACjBrC,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwBwY,MAAOjZ,EAAQU,EAASC,KAC/D,MAAM,OAAER,GAAWQ,EACboN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE5N,SACxD,IAAKxI,EACH,OAGF,MAAM,SAAET,GAAaS,EAEf2W,GAAOC,EAAAA,EAAAA,IAAqBrX,EAAU,MACtC6E,EAAMrC,OAAOC,KAAK2U,GAAMnX,IAAI4C,QAAQvC,MAAK,CAAC8f,EAAGC,IAAMA,EAAID,IAK7D,GAHAllB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASulB,EAAAA,EAAAA,IAAyBvlB,EAAQ+N,EAAKzM,GAAI4a,GACnDlc,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQ+N,EAAKzM,GAAIC,EAAAA,GAAgB,eAAgBoI,GACzEoE,GAAMtL,QAAS,CACjB,MAAM+iB,EAA+C,CAAC,EACtD1gB,EAASoG,SAASjG,IAChB,MAAM7E,GAAWqlB,EAAAA,EAAAA,IAA0BzlB,EAAQiF,GAC7CygB,EAAoBF,EAAmBplB,IAAa,GAC1DslB,EAAkB9f,KAAKX,EAAQ3D,IAC/BkkB,EAAmBplB,GAAYslB,CAAiB,IAGlDpe,OAAOqe,QAAQH,GAAoBta,SAAQ,IAA8B,IAA5B9K,EAAUwlB,GAAa,EAClE5lB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQ+N,EAAKzM,GAAIqG,OAAOvH,GAAW,eAAgBwlB,EAAa,GAEhG,EACAxiB,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,OACJR,EAAM,GAAEmB,GACNX,EAEEoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE3B4N,IAIA4N,EAAAA,EAAAA,IAAQ,wBAAyB,CACpC5N,OACApE,IAAK,CAACrI,IACN,KAGJb,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OACJR,EAAM,UAAEuG,EAAS,YAAEwZ,GACjBvf,EAEEoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1B8E,EAAU8I,IAAQ8X,EAAAA,EAAAA,IAAuB7lB,EAAQ+N,EAAKzM,GAAIoF,GAC3DqH,GAAS9I,IAIT0W,EAAAA,EAAAA,IAAQ,oBAAqB,CAChC5N,OACA9I,UACAib,eACA,KAGJzf,EAAAA,EAAAA,IAAiB,2BAA2BwY,MAAOjZ,EAAQU,EAASC,KAClE,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,0BAA2B,CAAE5N,OAAM3N,aAC3DmF,IACLvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,QAC7DxY,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,mBAAmBwY,MAAOjZ,EAAQU,EAASC,KAC1D,MAAM,UAAE+F,EAAS,OAAEvG,GAAWQ,EAExBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAEhC,IAAK4N,EAAM,OAEX/N,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQuG,EAAW,CACpDof,gBAAiB,MAGnB1iB,EAAAA,EAAAA,IAAUpD,GAEV,MAAMuF,QAAeoW,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE5N,OAAMrH,cAExD1G,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQuG,EAAW,CACpDof,gBAAiBvgB,EACjBwgB,sBAAuBxgB,KAGzBnC,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoBwY,MAAOjZ,EAAQU,EAASC,KAC3D,MAAM,IAAEgJ,EAAG,YAAEqc,GAAgBrlB,EACvBslB,EAAoBD,EAAcrc,GACpCgM,EAAAA,EAAAA,IAAOhM,EAAI3E,QAAQyM,IAAgBzR,EAAO+R,aAAamK,KAAKzK,MAC1DyU,QAAoBvK,EAAAA,EAAAA,IAAQ,mBAAoB,CACpDlK,WAAYwU,IAETC,IAELlmB,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACH+R,aAAc,IACT/R,EAAO+R,aACVmK,KAAM,IACDlc,EAAO+R,aAAamK,SACpBC,EAAAA,EAAAA,IAAqB+J,EAAa,UAI3C9iB,EAAAA,EAAAA,IAAUpD,GAAO,KAmOnBS,EAAAA,EAAAA,IAAiB,sBAAsBwY,MAAOjZ,EAAQU,EAASC,KAC7D,MAAM,OAAER,EAAM,SAAEC,GAAaO,EACvBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE5N,OAAM3N,aAC5D,IAAKmF,EACH,OAGF,MAAM,SAAET,EAAQ,MAAEwJ,EAAK,MAAEsN,GAAUrW,EAE7B2W,GAAOC,EAAAA,EAAAA,IAAqBrX,EAAU,MACtC6E,EAAMrC,OAAOC,KAAK2U,GAAMnX,IAAI4C,QAAQvC,MAAK,CAAC8f,EAAGC,IAAMA,EAAID,IAE7DllB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoc,EAAAA,EAAAA,IAAoBpc,EAAQ+N,EAAKzM,GAAI4a,GAC9Clc,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQ+N,EAAKzM,GAAIlB,EAAU,YAAauJ,GACpE3J,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OACtD5b,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB7N,EAAO,QACtDlL,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,cAAcwY,MAAOjZ,EAAQU,EAASC,KACrD,MAAM,OAAER,EAAM,UAAEuG,GAAc/F,EACxBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,cAAe,CAAE5N,OAAMrH,cAC/CnB,IAILvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQuG,EAAW,CACpDyf,cAAe5gB,KAEjBnC,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OAAER,EAAM,SAAEimB,GAAazlB,EACvBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BkmB,GAAa7jB,EAAAA,EAAAA,IAAWxC,EAAQomB,KAAahE,EAAAA,EAAAA,IAAWpiB,EAAQomB,GACtE,GAAKrY,GAASsY,EAMd,OAFK1K,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE4E,OAAQ8F,EAAYtY,UAEjDwU,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAChCmmB,SAAU,IACLvY,EAAKuY,SACRF,aAEF,KAGJ3lB,EAAAA,EAAAA,IAAiB,cAAcwY,MAAOjZ,EAAQU,EAASC,KACrD,MAAM,OAAER,GAAWQ,EACboN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,cAAe,CAAE5N,SAC9C,IAAKxI,EAOH,OANAvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClComB,cAAe,UAEjBnjB,EAAAA,EAAAA,IAAUpD,GAKZA,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,OAC7D5b,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAO+I,MAAO,OAC7DtO,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAAEomB,cAAehhB,EAAOgb,UAC5Dnd,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyBwY,MAAOjZ,EAAQU,EAASC,KAChE,MAAM,OAAER,GAAWQ,EACboN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE5N,SACpDxI,IAILvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASwmB,EAAAA,EAAAA,IAAuBxmB,EAAQG,EAAQoF,EAAOT,SAAS,IAChE9E,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,OAC7D5b,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAO+I,MAAO,QAC7DlL,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,OAAER,GAAWQ,EACboN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1B8E,GAAUwhB,EAAAA,EAAAA,IAAuBzmB,EAAQG,GAC1C4N,GAAS9I,IAIT0W,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE5N,OAAM2Y,OAAQzhB,EAAQ0hB,UAAW,KAG1ElmB,EAAAA,EAAAA,IAAiB,uBAAuBwY,MAAOjZ,EAAQU,EAASC,KAC9D,MAAM,OAAER,EAAM,SAAEkb,GAAa1a,EACvBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EAAM,OAEX,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,sBAAuB,CAAE5N,OAAMsN,aAE5D,IAAK9V,EAAQ,OAEb,MAAM,SAAET,EAAQ,MAAEwJ,EAAK,MAAEsN,GAAUrW,EAE7B2W,GAAOC,EAAAA,EAAAA,IAAqBrX,EAAU,MACtC6E,EAAMrC,OAAOC,KAAK2U,GAAMnX,IAAI4C,QAElC3H,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoc,EAAAA,EAAAA,IAAoBpc,EAAQ+N,EAAKzM,GAAI4a,GAC9Clc,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OACtD5b,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB7N,EAAO,OACtDtO,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClCymB,eAAgB,IAAK7Y,EAAK6Y,gBAAkB,MAAQjd,MAGtDvG,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,WAAE4D,EAAU,MAAEtE,GAAQC,EAAAA,EAAAA,OAAsBS,EAE5CoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,IAAK8N,EAAM,OAEX,MAAM6Y,GAAkB7Y,EAAK6Y,gBAAkB,IAAI5hB,QAAQ1D,IAAQiD,EAAW4F,SAAS7I,KACvFtB,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQ+N,EAAKzM,GAAI,CACnCslB,oBAGFxjB,EAAAA,EAAAA,IAAUpD,GAEVU,EAAQmmB,iBAAiB,CAAEtiB,aAAYtE,SAAQ,KAGjDQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5CoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GAElC8N,GAAM6Y,gBAEXlmB,EAAQsH,aAAa,CAAE7H,OAAQ4N,EAAKzM,GAAIoF,UAAWqH,EAAK6Y,eAAe,GAAI3mB,SAAQ,KAGrFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAE5CoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,GAAK8N,EAIL,OAFA4N,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE5N,UAEtBwU,EAAAA,EAAAA,IAAWviB,EAAQ+N,EAAKzM,GAAI,CACjCwlB,yBAAqBvmB,EACrBqmB,oBAAgBrmB,GAChB,KAGJE,EAAAA,EAAAA,IAAiB,WAAW,CAACT,EAAQU,EAASC,KAC5C,MAAM,IAAEkT,EAAG,gBAAEkT,EAAe,MAAE9mB,GAAQC,EAAAA,EAAAA,OAAsBS,EACtDqmB,GAAkBC,EAAAA,EAAAA,GAAepT,GAEvC,GAAImT,EAAgBE,MAAMC,EAAAA,MAAgBH,EAAgBE,MAAME,EAAAA,KAE9D,YADA1mB,EAAQ2mB,iBAAiB,CAAExT,MAAK5T,UAIlC,MAAM,UAAEqnB,GAActnB,EACtB,GAAIsnB,EAAW,CACb,MAAMC,EAAY,IAAIC,IAAIR,GAE1B,GAAIM,EAAUG,iBAAiBtd,SAASod,EAAUG,UAGhD,OAFAH,EAAUI,aAAaxJ,IA3tCD,kBA2tC0BmJ,EAAUM,qBAC1D7kB,OAAOC,KAAKukB,EAAU1X,KAAM,SAAU,YAIxC,GAAIyX,EAAUO,eAAe1d,SAASod,EAAUG,UAE9C,YADAhnB,EAAQonB,mBAAmB,CAAEjU,MAAK5T,SAGtC,CAE4B+mB,EAAgBE,MAAMa,EAAAA,MAAsBhB,EAKtEhkB,OAAOC,KAAKgkB,EAAiB,SAAU,YAFvCtmB,EAAQsnB,oBAAoB,CAAEnU,IAAKmT,EAAiB/mB,SAGtD,KAGFQ,EAAAA,EAAAA,IAAiB,yBAAyBwY,MAAOjZ,EAAQU,EAASC,KAChE,MAAM,OAAER,EAAM,QAAE2V,EAAO,MAAE7V,GAAQC,EAAAA,EAAAA,OAAsBS,EACvD,IAAIwhB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQG,GAC9B,GAAIgiB,IAAQ8F,EAAAA,EAAAA,IAAmCjoB,EAAQC,GAAQ,CAC7D,IAAKkiB,EAAKmE,SAAU,CAClB,MAAM,WAAE4B,GAAe/F,EACvBA,QAAaxG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEra,GAAInB,EAAQ+nB,eACpDloB,GAAS+I,EAAAA,EAAAA,KACX,CAEA,GAAIoZ,GAAMmE,SAAU6B,gBAOlB,YANAznB,EAAQ0nB,WAAW,CACjB9U,KAAM,CACJrO,SAASwe,EAAAA,EAAAA,IAAU,oCAAoC4E,EAAAA,EAAAA,IAAgBlG,KAEzEliB,SAIN,EAEKqoB,EAAAA,EAAAA,IAA8BtoB,EAAQG,EAAQF,IAKnDD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsC,gBAAiB,KACZtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBACjCC,SAAUpC,EACV0kB,WAAY/O,EACZpL,cAAc,IAEfzK,IACHmD,EAAAA,EAAAA,IAAUpD,GAEVU,EAAQ2C,SAAS,CAAE/B,GAAInB,EAAQC,SAAU0V,EAAS7V,UAClDS,EAAQ6nB,iBAAiB,CAAEtoB,UAC3BS,EAAQyB,sBAAsB,CAAElC,WAhB9BS,EAAQ8nB,oCAAoC,CAAEroB,SAAQF,SAgBhB,KAG1CQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsC,gBAAiB,KACZtB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqC,gBACjCC,SAAUvC,EAAO0X,gBAElBzX,IACHmD,EAAAA,EAAAA,IAAUpD,GAEVU,EAAQyB,sBAAsB,CAAElC,UAChCS,EAAQ4B,gBAAgB,CAAEygB,UAAU,EAAM9iB,SAAQ,KAGpDQ,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,OACJR,EAAM,GAAEmB,EAAE,eAAEmnB,GAAiBC,EAAAA,EAAAA,IAAmB1oB,GAAO,MAAEC,GAAQC,EAAAA,EAAAA,OAC/DS,EAIJ,OAFSgoB,EAAAA,EAAAA,IAAkC3oB,EAAQG,EAAQmB,EAAImnB,EAAgBxoB,EAElE,KAGfQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,OACJR,EAAM,GAAEmB,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAClBS,EAIJ,OAFSioB,EAAAA,EAAAA,IAAkC5oB,EAAQG,EAAQmB,EAAIrB,EAElD,KAGfQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,OACJR,EAAM,WAAEoE,EAAU,eAAEkkB,GAAiBC,EAAAA,EAAAA,IAAmB1oB,IACtDW,EAEEoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,GAAK4N,EAcL,OAZAxJ,EAAW2G,SAAS5J,IAClBtB,GAAS6oB,EAAAA,EAAAA,IAAyB7oB,EAAQG,EAAQmB,EAAImnB,EAAgB,CACpEK,WAAW,GACX,KAGJnN,EAAAA,EAAAA,IAAQ,gBAAiB,CACvB5N,OACAxJ,aACAkkB,mBAGKzoB,CAAM,KAGfS,EAAAA,EAAAA,IAAiB,oBAAoBwY,MAAOjZ,EAAQU,EAASC,KAC3D,MAAM,OAAER,EAAM,IAAEwJ,GAAQhJ,EAElBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EAAM,OAEX,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD5N,OACApE,QAGGpE,IAELvF,GAAS+I,EAAAA,EAAAA,MACTxD,EAAO2F,SAAS6d,IACd/oB,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQ4oB,EAAOznB,GAAI,CACpD0nB,MAAOD,EAAOC,MACdC,SAAUF,EAAOE,WAGnB,MAAMhkB,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ4oB,EAAOznB,IACzD,IAAK2D,EAAS,OAEd,MAAMikB,EAAgBjkB,EAAQkkB,mBAAmBhpB,OAC3CC,EAAW6E,EAAQkkB,mBAAmB/oB,SACvC8oB,GAAkB9oB,IAEvBJ,GAASkkB,EAAAA,EAAAA,IAAiBlkB,EAAQkpB,EAAe9oB,EAAU,CACzDgpB,cAAeL,EAAOK,gBACtB,KAGJhmB,EAAAA,EAAAA,IAAUpD,GAAO,I,yBCp7CnB,MAGMqpB,GAAkBC,EAAAA,EAAAA,KAAUlO,GAAOA,KAAM,KAAK,GAkfpDnC,eAAesQ,GAA0CvpB,EAAWsR,GAClE,MAAMkY,QAAuB7N,EAAAA,EAAAA,IAAQ,sBAAuB,CAAErK,SACzDkY,IAILxpB,GAAS+I,EAAAA,EAAAA,MAET/I,EAAS,IACJA,EACHqR,SAAU,IACLrR,EAAOqR,SACVD,OAAQoY,KAGZpmB,EAAAA,EAAAA,IAAUpD,GACZ,CAEAiZ,eAAewQ,GACbzpB,EACAU,EACAgpB,GAEA,sFACIC,GAFA1pB,GAAQC,EAAAA,EAAAA,OAAkB,EAG9B,IACEypB,QAAmBhO,EAAAA,EAAAA,IACjB,gBACA,CAAE+N,kBAkBN,CAhBE,MAAO7S,GACP,GAAoC,uBAA/BA,EAAmB5R,QAatB,OAZAvE,EAAQmL,iBAAiB,CACvB5G,SAASwe,EAAAA,EAAAA,IAAU,6BACnBxjB,eAGE,cAAeypB,IACd1oB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOuV,4BAA8BkU,EAAeE,YAC9E5pB,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BwV,+BAA2BjV,GAC1BN,IACHmD,EAAAA,EAAAA,IAAUpD,IAIhB,CAGA,GAFAA,GAAS+I,EAAAA,EAAAA,OAEJ4gB,EAEH,OAGF,MAAM,IAAExL,EAAG,SAAE9M,EAAQ,MAAEwY,GAAUF,EAI3BG,GAFN9pB,GAAS+pB,EAAAA,EAAAA,IAAiB/pB,EAAQme,EAAI7c,GAAI,IAAK6c,EAAK9M,WAAUwY,WAElCxY,SAAS2Y,SAASlkB,MAC1CgkB,GAAgBD,EAAMC,KACxB9pB,GAASiqB,EAAAA,EAAAA,IAAwBjqB,KAGnCoD,EAAAA,EAAAA,IAAUpD,EACZ,CAkLAiZ,eAAeiR,GAAkClqB,EAAWY,EAAeupB,EAAsBpb,GACnD,sFAAxC9O,GAAQC,EAAAA,EAAAA,OAAkB,EAC9B,MAAMqF,QAAeoW,EAAAA,EAAAA,IAAQ,aAAc,CAAE/a,QAAOmO,SAAQqb,SAAUD,IACjE5kB,IAILvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASqqB,EAAAA,EAAAA,IAAgBrqB,GAAS+O,EAAQxJ,EAAO+kB,KAAM/kB,EAAOqf,WAAY3kB,IAC1EmD,EAAAA,EAAAA,IAAUpD,GACZ,EA5uBAS,EAAAA,EAAAA,IAAiB,mBAAmBwY,MAAOjZ,EAAQU,KACjD,MAAO6pB,EAAeC,SAA2BC,QAAQC,IAAI,EAC3D/O,EAAAA,EAAAA,IAAQ,mBAAoB,CAAErK,KAAMtR,EAAOqR,SAASQ,MAAMP,QAC1DqK,EAAAA,EAAAA,IAAQ,uBAAwB,CAAErK,KAAMtR,EAAO+R,aAAaF,MAAMP,SAE/DkZ,GAAsBD,IAI3BvqB,GAAS+I,EAAAA,EAAAA,MAET/I,GAAS2qB,EAAAA,EAAAA,IACP3qB,EACA,QACAuqB,EAAcjZ,KACdiZ,EAAcK,MAGhB5qB,GAAS6qB,EAAAA,EAAAA,IACP7qB,EACAwqB,EAAkBlZ,KAClBkZ,EAAkBI,OAGpBxnB,EAAAA,EAAAA,IAAUpD,GAEVU,EAAQoqB,iBAAiB,CACvBnhB,IAAK3J,EAAO0R,qBACZ,KAGJjR,EAAAA,EAAAA,IAAiB,qBAAqBwY,MAAOjZ,EAAQU,EAASC,KAC5D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAEhDkR,OACEC,OAAQiZ,EAAc,IAExBC,SAAUC,GACRjrB,EAAOqR,UAETQ,OACEC,OAAQoZ,EAAoB,KAE5BlrB,EAAO+R,aACLoZ,EAAe,IAAIJ,KAAgBG,GACzC,GAAKC,EAAazjB,OAIlB,IAAK,IAAI2V,EAAI,EAAGA,EAAI8N,EAAazjB,OAAQ2V,IAAK,CAC5C,MAAM/b,EAAK6pB,EAAa9N,GACpB4N,EAAO3pB,IAAK+P,WAGhB3Q,EAAQ+oB,aAAa,CACnBC,eAAgB,CAAEpoB,KAAI4mB,WAAY+C,EAAO3pB,GAAI4mB,YAC7CjoB,UAGEod,EA/D0B,IA+DQ,GAAKA,EAAI,SACvC+N,EAAAA,EAAAA,IAjEgB,KAmE1B,MAGF3qB,EAAAA,EAAAA,IAAiB,sBAAuBT,IACtC,MAAM,KAAEsR,GAAStR,EAAOqR,SAASD,QAAU,CAAC,EACvCmY,GAAmBvpB,EAAQsR,EAAK,KAGvC7Q,EAAAA,EAAAA,IAAiB,wBAAwBwY,UACvC,MAAM,KAAE3H,GAAStR,EAAOqR,SAASga,UAAY,CAAC,EAExCC,QAAyB3P,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErK,SAC7Dga,IAILtrB,GAAS+I,EAAAA,EAAAA,MAET/I,EAAS,IACJA,EACHqR,SAAU,IACLrR,EAAOqR,SACVga,SAAUC,KAGdloB,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuBwY,UACtC,MAAM,KAAE3H,GAAStR,EAAOqR,SAASka,SAAW,CAAC,EAEvChmB,QAAeoW,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE7V,MAAO,OAAQwL,SAClE/L,IAILvF,GAAS+I,EAAAA,EAAAA,MAET/I,EAAS,IACJA,EACHqR,SAAU,IACLrR,EAAOqR,SACVka,QAAS,CACPja,KAAM/L,EAAO+L,KACbD,SAAU9L,EAAO8L,aAIvBjO,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,0BAA0BwY,UACzC,MAAM,KAAE3H,GAAStR,EAAOqR,SAASka,SAAW,CAAC,EAEvChmB,QAAeoW,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE7V,MAAO,OAAQwL,SAClE/L,IAILvF,GAAS+I,EAAAA,EAAAA,MAET/I,EAAS,IACJA,EACHqR,SAAU,IACLrR,EAAOqR,SACVma,WAAY,CACVla,KAAM/L,EAAO+L,KACbD,SAAU9L,EAAO8L,aAIvBjO,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwBwY,UACvC,MAAM,KAAE3H,GAAStR,EAAOqR,SAASoa,UAAY,CAAC,EAExCA,QAAiB9P,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE7V,MAAO,OAAQwL,SACpEma,IAILzrB,GAAS+I,EAAAA,EAAAA,MAET/I,EAAS,IACJA,EACHqR,SAAU,IACLrR,EAAOqR,SACVoa,SAAU,CACRna,KAAMma,EAASna,KACfD,SAAUoa,EAASpa,SAASrM,QAAQmM,GAA8B,OAAlBA,EAAQrL,YAI9D1C,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwBwY,UACvC,MAAM,KAAE3H,GAAStR,EAAOqR,SAASqa,UAAY,CAAC,EACxCC,QAAyBhQ,EAAAA,EAAAA,IAAQ,wBAAyB,CAAErK,SAC7Dqa,IAIL3rB,GAAS+I,EAAAA,EAAAA,MAET/I,GAAS2qB,EAAAA,EAAAA,IACP3qB,EACA,WACA2rB,EAAiBra,KACjBqa,EAAiBf,OAEnBxnB,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoBwY,UACnC,MAAM0Q,QAAmBhO,EAAAA,EAAAA,IAAQ,qBACjC,IAAKgO,EACH,OAGF,MAAM,IAAExL,EAAG,SAAE9M,GAAasY,EAE1B3pB,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACH4rB,aAAc,IAAKzN,EAAK9M,cAE1BjO,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyBwY,UACxC,MAAM0Q,QAAmBhO,EAAAA,EAAAA,IAAQ,0BACjC,IAAKgO,EACH,OAEF3pB,GAAS+I,EAAAA,EAAAA,MAET,MAAM,IAAEoV,EAAG,SAAE9M,GAAasY,EAEpBkC,EAAU,IAAK1N,EAAK9M,YAE1BrR,GAAS+pB,EAAAA,EAAAA,IAAiB/pB,EAAQ6rB,EAAQvqB,GAAIuqB,GAC9C7rB,EAAS,IACJA,EACH8rB,oBAAqBD,EAAQvqB,KAE/B8B,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,0BAA0BwY,UACzC,MAAM0Q,QAAmBhO,EAAAA,EAAAA,IAAQ,4BACjC,IAAKgO,EACH,OAEF3pB,GAAS+I,EAAAA,EAAAA,MAET,MAAM,IAAEoV,EAAG,SAAE9M,GAAasY,EACpBkC,EAAU,IAAK1N,EAAK9M,YAE1BrR,GAAS+pB,EAAAA,EAAAA,IAAiB/pB,EAAQ6rB,EAAQvqB,GAAIuqB,GAC9C7rB,EAAS,IAAKA,EAAQ+rB,qBAAsBF,EAAQvqB,KACpD8B,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,eAAE+oB,EAAc,MAAEzpB,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDqrB,GAAYC,EAAAA,EAAAA,IAAiBjsB,EAAQ0pB,GACvCsC,GAAaA,EAAUjI,QAAUiI,GAAW3a,UAAU3J,QACrD+hB,GAAazpB,EAAQU,EAASgpB,EAAgBzpB,EAAM,KAG3DQ,EAAAA,EAAAA,IAAiB,sBAAsBwY,UACrC,MAAOiT,EAAQC,SAAiB1B,QAAQC,IAAI,EAC1C/O,EAAAA,EAAAA,IAAQ,wBACRA,EAAAA,EAAAA,IAAQ,+BAELuQ,GAAWC,IAIhBnsB,GAAS+I,EAAAA,EAAAA,MAET/I,GAASosB,EAAAA,EAAAA,IAAsBpsB,EAAQ,IAAKksB,EAAO/N,IAAK9M,SAAU6a,EAAO7a,WACzErR,EAAS,IACJA,EACHqsB,qBAAsB,IAAKF,EAAQhO,IAAK9M,SAAU8a,EAAQ9a,YAG5DjO,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2BwY,UAC1C,MAAM0Q,QAAmBhO,EAAAA,EAAAA,IAAQ,4BACjC,IAAKgO,EACH,OAEF3pB,GAAS+I,EAAAA,EAAAA,MAET,MAAM,IAAEoV,EAAG,SAAE9M,GAAasY,EAE1B3pB,EAAS,IACJA,EACHssB,oBAAqB,IAAKnO,EAAK9M,cAEjCjO,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iBAAiBwY,UAChC,MAAM,KAAE3H,GAAStR,EAAOsqB,KAAKiC,MAEvBC,QAAkB7Q,EAAAA,EAAAA,IAAQ,iBAAkB,CAAErK,SAC/Ckb,IAILxsB,GAAS+I,EAAAA,EAAAA,MAET/I,EAAS,IACJA,EACHsqB,KAAM,IACDtqB,EAAOsqB,KACViC,MAAOC,KAGXppB,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,WAAWwY,MAAOjZ,EAAQU,EAASC,KAClD,MAAM,IACJ8rB,EAAG,aAAEC,EAAY,MACjBzsB,GAAQC,EAAAA,EAAAA,OACNS,EACE+G,EAAS1H,EAAOsqB,KAAKiC,MAAMjC,MAAM5iB,OAEjC4N,GAAQqX,EAAAA,EAAAA,GAAmB3sB,EAAQ,aACnC4sB,GAAeC,EAAAA,EAAAA,GAAmB7sB,EAAQ,aAC1C8sB,GAAY/H,EAAAA,EAAAA,IAA2B/kB,GAoB7C,IAlBK0sB,GAAgBhlB,GAAUA,GAAU4N,GACvC5U,EAAQmL,iBAAiB,CACvBoE,MAAOvL,EAAAA,GAAuB,2BAA4B4Q,EAAM7N,YAChExC,QAAS6nB,EAAYpoB,EAAAA,GAAuB,2CACxCA,EAAAA,GAAuB,mCACvBkoB,EAAanlB,gBACZqlB,GAAa,CAChBtY,OAAQ,CACNA,OAAQ,mBACR7T,QAAS,CAAEV,WAGf8sB,UAAW,YACX9sB,iBAIiB0b,EAAAA,EAAAA,IAAQ,UAAW,CAAE8Q,MAAKC,iBAE7C,OAIF,MAAMpC,GADNtqB,GAAS+I,EAAAA,EAAAA,OACWuhB,KAAKiC,MAAMjC,MAAMtlB,QAAO,QAAC,GAAE1D,GAAI,SAAKA,IAAOmrB,EAAInrB,EAAE,KAAK,GACpE0rB,EAAUN,EAAepC,EAAO,CAACmC,KAAQnC,GAE/CtqB,EAAS,IACJA,EACHsqB,KAAM,IACDtqB,EAAOsqB,KACViC,MAAO,IACFvsB,EAAOsqB,KAAKiC,MACfjC,KAAM0C,MAIZ5pB,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,eAAe,CAACT,EAAQU,EAASC,KAChD,MAAM,QAAEwQ,EAAO,MAAElR,GAAQC,EAAAA,EAAAA,OAAsBS,EACzCssB,EAAUjtB,EAAOqR,SAASga,SAASha,SAAS3J,OAC5C4N,GAAQqX,EAAAA,EAAAA,GAAmB3sB,EAAQ,iBACnC4sB,GAAeC,EAAAA,EAAAA,GAAmB7sB,EAAQ,iBAC1C8sB,GAAY/H,EAAAA,EAAAA,IAA2B/kB,GAEzCitB,GAAW3X,GACb5U,EAAQmL,iBAAiB,CACvBoE,MAAOvL,EAAAA,GAAuB,+BAAgC4Q,EAAM7N,YACpExC,QAAS6nB,EAAYpoB,EAAAA,GAAuB,+CACxCA,EAAAA,GAAuB,uCACvBkoB,EAAanlB,gBACZqlB,GAAa,CAChBtY,OAAQ,CACNA,OAAQ,mBACR7T,QAAS,CAAEV,WAGf8sB,UAAW,YACX9sB,UAIAkR,IACGwK,EAAAA,EAAAA,IAAQ,cAAe,CAAExK,WAChC,KAGF1Q,EAAAA,EAAAA,IAAiB,iBAAiB,CAACT,EAAQU,EAASC,KAClD,MAAM,QAAEwQ,GAAYxQ,EAEhBwQ,IACFnR,GAAS+I,EAAAA,EAAAA,MAIT/I,EAAS,IACJA,EACHqR,SAAU,IACLrR,EAAOqR,SACVga,SAAU,IACLrrB,EAAOqR,SAASga,SACnBha,SAAUrR,EAAOqR,SAASga,SAASha,SAASrM,QAAO,QAAC,GAAE1D,GAAI,SAAKA,IAAO6P,EAAQ7P,EAAE,QAItF8B,EAAAA,EAAAA,IAAUpD,IAEL2b,EAAAA,EAAAA,IAAQ,cAAe,CAAExK,UAAS+b,QAAQ,IACjD,KAGFzsB,EAAAA,EAAAA,IAAiB,uBAAuBwY,MAAOjZ,EAAQU,EAASC,KAC9D,MAAM,QAAEwQ,GAAYxQ,QAECgb,EAAAA,EAAAA,IAAQ,sBAAuB,CAAExK,aAKtDoY,IADSxgB,EAAAA,EAAAA,MACiB,KAG5BtI,EAAAA,EAAAA,IAAiB,uBAAuBwY,gBACjB0C,EAAAA,EAAAA,IAAQ,yBAI7B3b,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACHqR,SAAU,IACLrR,EAAOqR,SACVD,OAAQ,CACNC,SAAU,OAIhBjO,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,aAAEwsB,GAAiBxsB,EACnBgpB,GAAasC,EAAAA,EAAAA,IAAiBjsB,EAAQmtB,GAC5C,IAAKxD,EACH,OAGF,MAAM,WAAEzB,EAAU,cAAEkF,EAAa,WAAEC,GAAe1D,EAC5C2D,GAAeD,GAAcrmB,QAAQomB,IAEtCzR,EAAAA,EAAAA,IAAS2R,EAAoC,sBAAtB,oBAA6C,CAAEH,eAAcjF,cAAa,KAGxGznB,EAAAA,EAAAA,IAAiB,qBAAqBwY,MAAOjZ,EAAQU,EAASC,KAC5D,MAAM,SAAE4sB,GAAa5sB,EAErB,IAAI6sB,EAAuBxtB,EAAOytB,cAAcF,GAChD,GAAIC,GAAsBrU,UACxB,OAGFnZ,EAAS,IACJA,EACHytB,cAAe,IACVztB,EAAOytB,cACV,CAACF,GAAW,IACPC,EACHrU,WAAW,MAIjB/V,EAAAA,EAAAA,IAAUpD,GAEV,MAAMytB,QAAsB9R,EAAAA,EAAAA,IAAQ,qBAAsB,CACxD4R,WACAG,YAAaF,EAAuBA,EAAqBhhB,QAAU,IAMrE,GAFAghB,GADAxtB,GAAS+I,EAAAA,EAAAA,OACqB0kB,cAAcF,IAEvCE,EAaH,OAZAztB,EAAS,IACJA,EACHytB,cAAe,IACVztB,EAAOytB,cACV,CAACF,GAAW,IACPC,EACHrU,WAAW,UAIjB/V,EAAAA,EAAAA,IAAUpD,GAKZA,EAAS,IACJA,EACHytB,cAAe,IACVztB,EAAOytB,cACV,CAACF,GAAW,CACVpU,WAAW,EACX3M,QAASihB,EAAcjhB,QACvBmhB,SAAU,IACJH,GAAsBG,YACvBF,EAAcE,cAKzBvqB,EAAAA,EAAAA,IAAUpD,EAAO,KAqEnBS,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzCC,GACGyoB,GAAgBpQ,UACnB,MAAM1T,QAAeoW,EAAAA,EAAAA,IAAQ,iBAAkB,CAAE/a,UAEjD,IAAK2E,EACH,OAGFvF,GAAS+I,EAAAA,EAAAA,MACT,MAAM,SAAEiiB,EAAQ,MAAEnZ,GAAU7R,EAAOqR,SAE7BxC,EAAYtJ,EAAOqlB,KAAK7lB,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,IAE5CuQ,EAAMC,QACRD,EAAMC,OAAO5G,SAAS5J,IACpB,IAAKuN,EAAU1E,SAAS7I,GAAK,CAC3B,MAAM,MAAE2O,GAAU+a,EAAS1pB,IAAO,CAAC,EAC/B2O,IAAS2d,EAAAA,EAAAA,GAAY3d,EAAOrP,IAC9BiO,EAAUH,QAAQpN,EAEtB,KAIJtB,GAAS2qB,EAAAA,EAAAA,IACP3qB,EACA,SACAuF,EAAO+L,KACP/L,EAAOqlB,MAGT5qB,GAAS6tB,EAAAA,EAAAA,IAAoB7tB,EAAQuF,EAAO+L,KAAMzC,EAAW5O,IAC7DmD,EAAAA,EAAAA,IAAUpD,EAAO,GAErB,KAGFS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExB,iBAAVC,GACJyoB,GAAgB,KACnBa,GAAWlqB,EAAQY,EAAOZ,EAAO8tB,QAAQC,uBAAmBxtB,EAAWN,EAAM,GAEjF,KAGFQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,MAAEC,EAAK,OAAEmO,IAAW/N,EAAAA,EAAAA,IAAehB,EAAQC,GAAO6O,UAEnC,iBAAVlO,GACJyoB,GAAgB,KACnBa,GAAWlqB,EAAQY,EAAOZ,EAAO8tB,QAAQC,kBAAmBhf,EAAQ9O,EAAM,GAE9E,KAGFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEmF,GAAUnF,GACZ,KAAE2Q,GAAStR,EAAOqR,SAAS2Y,SAE5BX,GAAgBpQ,UACnBjZ,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACHqR,SAAU,IACLrR,EAAOqR,SACV2Y,SAAU,IACLhqB,EAAOqR,SAAS2Y,SACnBlkB,YAIN1C,EAAAA,EAAAA,IAAUpD,GAEV,MAAMuF,QAAeoW,EAAAA,EAAAA,IAAQ,wBAAyB,CAAE7V,QAAOwL,SAE/DtR,GAAS+I,EAAAA,EAAAA,MAEJxD,GAAUvF,EAAOqR,SAAS2Y,SAASlkB,QAAUA,IAIlD9F,GAASguB,EAAAA,EAAAA,IAAuBhuB,EAAQ8F,EAAOP,EAAO8L,SAAU9L,EAAO+L,OAEvElO,EAAAA,EAAAA,IAAUpD,GAAO,GACjB,KAGJS,EAAAA,EAAAA,IAAiB,yBAA0BT,IAClC,IACFA,EACHqR,SAAU,IACLrR,EAAOqR,SACV2Y,SAAU,CAAC,QAKjBvpB,EAAAA,EAAAA,IAAiB,2BAA2B,CAACT,EAAQU,EAASC,KAC5D,MAAM,MAAEmF,GAAUnF,EAElB,OAAOstB,EAAAA,EAAAA,IAA0BjuB,EAAQ8F,EAAM,KAGjDrF,EAAAA,EAAAA,IAAiB,4BAA6BT,IACrC,IACFA,EACH+R,aAAc,IACT/R,EAAO+R,aACViY,SAAU,CAAC,QAKjBvpB,EAAAA,EAAAA,IAAiB,6BAA6BwY,UAC5C,MAAM0S,QAAyBhQ,EAAAA,EAAAA,IAAQ,8BAClCgQ,IAIL3rB,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACH+R,aAAc,IACT/R,EAAO+R,aACVmc,YAAavC,EAAiBf,KAAK7lB,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,IACrD4a,KAAM,IACDlc,EAAO+R,aAAamK,SACpBC,EAAAA,EAAAA,IAAqBwP,EAAiBf,KAAKuD,SAAShQ,GAAQA,EAAI9M,UAAY,KAAK,QAGxFA,SAAU,IACLrR,EAAOqR,SACV2Z,SAAU,IACLhrB,EAAOqR,SAAS2Z,aAChB7O,EAAAA,EAAAA,IAAqBwP,EAAiBf,KAAM,UAIrDxnB,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkBwY,MAAOjZ,EAAQU,EAASC,KACzD,MAAM,eAAE+oB,EAAc,MAAEzpB,GAAQC,EAAAA,EAAAA,OAAsBS,GACjDsrB,EAAAA,EAAAA,IAAiBjsB,EAAQ0pB,UACtBD,GAAazpB,EAAQU,EAASgpB,EAAgBzpB,GAGtDD,GAAS+I,EAAAA,EAAAA,MACT,MAAMoV,GAAM8N,EAAAA,EAAAA,IAAiBjsB,EAAQ0pB,GAChCvL,GAAKyL,YAIV5pB,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BwV,0BAA2B2I,EAAIyL,WAC9B3pB,IACHmD,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2BwY,UAC1C,MAAM1T,QAAeoW,EAAAA,EAAAA,IAAQ,4BACxBpW,IAILvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASouB,EAAAA,EAAAA,IAA+BpuB,EAAQuF,EAAO+L,KAAM/L,EAAO8oB,gBACpEjrB,EAAAA,EAAAA,IAAUpD,GAAO,I,cC7uBnB,MAAMqpB,IAAkBC,EAAAA,EAAAA,KAAUlO,GAAOA,KAAM,KAAK,GAoFpDnC,eAAeqV,GACbtuB,GAGA,IAFAY,EAAQ,UAAH,6CAAG,GAAIY,EAAgC,uCAAE+sB,EAAmB,uCAAExgB,EAAc,uCAAEygB,EAAgB,uCAAEC,EAAgB,6HAGjHlpB,GAFAtF,GAAQC,EAAAA,EAAAA,OAAkB,EAY9B,GAAI6N,EAAM,CACR,MAAM2gB,GAAqB/S,EAAAA,EAAAA,IAAQ,sBAAuB,CACxD5N,OACAnN,QACAY,OACA8T,MAAOqZ,EAAAA,IACPtT,SAAUkT,EACVE,UACAD,YAEII,EAAgB7gB,EAAKtL,SAAUkZ,EAAAA,EAAAA,IAAQ,cAAe,CAC1D5N,OACAnN,QACA0U,MAAOuZ,EAAAA,WACJtuB,GAEEuuB,EAAa5W,SAAgBuS,QAAQC,IAAI,CAACgE,EAAoBE,IAErE,GAAIE,EAAa,CACf,MAAM,SACJhqB,EAAQ,MAAE8W,EAAK,WAAEmT,EAAU,aAAEC,GAC3BF,GAEI5W,OAAQ+W,EAAW,MAAElL,GAAU7L,GAAU,CAAC,EAElD3S,EAAS,CACP2S,OAAQ+W,EACRC,iBAAkBnL,EAClBjf,WACA8W,QACAtN,MAAO,GACPygB,aACAI,SAAUH,EAEd,CACF,MACEzpB,QAAeoW,EAAAA,EAAAA,IAAQ,uBAAwB,CAC7C/a,QACA2tB,aACAjZ,MAAOqZ,EAAAA,IACPntB,OACAgtB,UACAC,YAIJzuB,GAAS+I,EAAAA,EAAAA,MACT,MAAMqmB,GAAqBC,EAAAA,EAAAA,IAA+BrvB,EAAQC,GAClE,IAAKsF,GAAqB,KAAV3E,GAAgBA,IAAUwuB,EAGxC,OAFApvB,GAASsvB,EAAAA,EAAAA,IAAiCtvB,EAAQ,CAAE8E,UAAU,GAAS7E,QACvEmD,EAAAA,EAAAA,IAAUpD,GAIZ,MAAM,SACJ8E,EAAQ,MAAE8W,EAAK,MAAEtN,EAAK,WAAEygB,EAAU,SAAEI,GAClC5pB,EAEA+I,EAAM5G,SACR1H,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB7N,EAAO,QAGpDsN,EAAMlU,SACR1H,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,QAGpD9W,EAAS4C,SACX1H,GAASuvB,EAAAA,EAAAA,IAAYvvB,EAAQ8E,IAG/B9E,GAASwvB,EAAAA,EAAAA,IACPxvB,EACA8E,EACAiqB,EACAvtB,EACA2tB,EACAlvB,GAGEsF,EAAO2S,SACTlY,GAASyvB,EAAAA,EAAAA,IAAazvB,EAAQ+N,EAAMzM,GAAIiE,EAAO2pB,iBAAmB3pB,EAAO2S,SAG3E,MAAMwX,EAAenqB,EAAO2S,QAAQnT,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,IAAE8D,MAAK,CAAC8f,EAAGC,IAAMA,EAAID,IAC3EllB,GAASiO,EAAAA,EAAAA,IAAmBjO,EAAQ,CAClC2vB,cAAeD,GACdzvB,IAEHmD,EAAAA,EAAAA,IAAUpD,EACZ,CC1EAiZ,eAAe2W,GACb5vB,EACA+N,EACA3N,EACAoB,EACA6Z,GAGA,IAFAE,EAAkB,UAAH,8CAAQ,sFACnBtb,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAMqF,QAAeoW,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD5N,OACAvM,OACA8T,MAA4B,EAArBua,EAAAA,IACPC,aAAc1vB,IAAamB,EAAAA,QAAiBhB,EAAYH,EACxDib,aAGF,IAAK9V,EACH,OAGF,MAAM,MACJ+I,EAAK,MAAEsN,EAAK,SAAE9W,EAAQ,WAAEiqB,EAAU,aAAEC,GAClCzpB,EAEE2W,GAAOC,EAAAA,EAAAA,IAAqBrX,EAAU,MACtCirB,EAAczoB,OAAOC,KAAK2U,GAAMnX,IAAI4C,QAE1C3H,GAAS+I,EAAAA,EAAAA,MAET,MAAMinB,GAAgBC,EAAAA,EAAAA,IAAyBjwB,EAAQC,GAClD+vB,IAILhwB,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB7N,EAAO,OACtDtO,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OACtD5b,GAASoc,EAAAA,EAAAA,IAAoBpc,EAAQ+N,EAAKzM,GAAI4a,GAC9Clc,GAASkwB,EAAAA,EAAAA,IAA8BlwB,EAAQ+N,EAAKzM,GAAIlB,EAAUoB,EAAMuuB,EAAahB,EAAYC,EAAc/uB,IAC/GmD,EAAAA,EAAAA,IAAUpD,GAELub,GACEqU,GAAkB5vB,EAAQ+N,EAAM3N,EAAUoB,EAAMwtB,GAAc,EAAM/uB,GAE7E,ED5JAQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,OAAER,IAAWa,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+N,aAE7CpN,IAAUT,GACPkpB,IAAgBpQ,UACnB,MAAM1T,QAAeoW,EAAAA,EAAAA,IAAQ,cAAe,CAAE/a,UAE9CZ,GAAS+I,EAAAA,EAAAA,MACT,MAAMqmB,GAAqBC,EAAAA,EAAAA,IAA+BrvB,EAAQC,GAClE,IAAKsF,IAAW6pB,GAAuBxuB,IAAUwuB,EAG/C,OAFApvB,GAASsvB,EAAAA,EAAAA,IAAiCtvB,EAAQ,CAAEsO,OAAO,GAASrO,QACpEmD,EAAAA,EAAAA,IAAUpD,GAIZ,MAAM,WACJmwB,EAAU,WAAEC,EAAU,YAAEC,EAAW,YAAEC,GACnC/qB,GAEA4qB,EAAWzoB,QAAU2oB,EAAY3oB,UACnC1H,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB,IAAIgU,KAAeE,GAAc,SAG9ED,EAAW1oB,QAAU4oB,EAAY5oB,UACnC1H,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB,IAAIiU,KAAeE,GAAc,QAGlFtwB,GAASsvB,EAAAA,EAAAA,IAAiCtvB,EAAQ,CAAEsO,OAAO,GAASrO,GACpED,GAASiO,EAAAA,EAAAA,IAAmBjO,EAAQ,CAClCmO,aAAc,CACZoiB,QAASJ,EAAWprB,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,IACtCkvB,QAASJ,EAAWrrB,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,KAExC4M,cAAe,KACVlN,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+N,aAAaE,cAC9CqiB,QAASF,EAAYtrB,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,IACvCkvB,QAASF,EAAYvrB,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,MAExCrB,IAEHmD,EAAAA,EAAAA,IAAUpD,EAAO,GAErB,KAGFS,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,KAAE+L,EAAI,MAAEzM,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC6tB,EAAU9hB,GAAO+jB,EAAAA,GAAAA,IAAiB/jB,GAAQA,EAEhD1M,GAASiO,EAAAA,EAAAA,IAAmBjO,EAAQ,CAClC0M,OACA9L,MAAO,GACPwN,cAAe,KACVpN,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+N,aAAaI,cAC9C9K,KAAM,CACJyrB,gBAAYxuB,EACZmwB,SAAU,GACV1B,aAAc,KAGjB/uB,IACHmD,EAAAA,EAAAA,IAAUpD,GAEV,MAAM,OAAEG,IAAWa,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+N,aAEjDsgB,GAAqBtuB,EAAQ,GAAI,YAAQO,EAD5BJ,GAASqC,EAAAA,EAAAA,IAAWxC,EAAQG,QAAUI,EACOiuB,EAAS9hB,EAAMzM,EAAM,KAGjFQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,KAAEa,EAAI,MAAEvB,GAAQC,EAAAA,EAAAA,OAAsBS,GACtC,MACJC,EAAK,cAAEwN,EAAa,OAAEjO,EAAM,KAAEuM,IAC5B1L,EAAAA,EAAAA,IAAehB,EAAQC,GAAO+N,aAC5BwgB,EAAU9hB,GAAO+jB,EAAAA,GAAAA,IAAiB/jB,GAAQA,EAC1CsiB,EAAgB5gB,IAAgB5M,IAAsCwtB,aAI5EV,GAAqBtuB,EAAQY,EAAOY,EAAMwtB,EAF7B7uB,GAASqC,EAAAA,EAAAA,IAAWxC,EAAQG,QAAUI,EAEWiuB,EAAS9hB,EAAMzM,EAAM,KC7ErFQ,EAAAA,EAAAA,IAAiB,2BAA2BwY,MAAOjZ,EAAQU,EAASC,KAClE,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACnE8N,EAAO5N,GAASqC,EAAAA,EAAAA,IAAWxC,EAAQG,QAAUI,EACnD,IAAIyvB,GAAgBW,EAAAA,EAAAA,IAAwB3wB,EAAQC,GACpD,IAAK8N,IAASiiB,IAAkB5vB,EAC9B,OAGF,MAAM,MAAEQ,EAAK,QAAEoO,GAAYghB,EACrB3U,EAAWrM,GAASggB,aAE1B,IAAIc,EAMJ,GALI1vB,IAAamB,EAAAA,KAEfuuB,GADmBjoB,EAAAA,EAAAA,IAAiB7H,EAAQG,EAASC,IAC1B0vB,eAGxBlvB,EACH,OAGF,MAAM2E,QAAeoW,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD5N,OACAvM,KAAM,OACNZ,QACAkvB,eACAxa,MAAOsb,EAAAA,IACPvV,aAGF,IAAK9V,EACH,OAGF,MAAM,MACJ+I,EAAK,MAAEsN,EAAK,SAAE9W,EAAQ,WAAEiqB,EAAU,aAAEC,GAClCzpB,EAEE2W,GAAOC,EAAAA,EAAAA,IAAqBrX,EAAU,MACtCirB,EAAczoB,OAAOC,KAAK2U,GAAMnX,IAAI4C,QAE1C3H,GAAS+I,EAAAA,EAAAA,MAETinB,GAAgBW,EAAAA,EAAAA,IAAwB3wB,EAAQC,GAC3C+vB,GAAiBpvB,IAAUovB,EAAcpvB,QAI9CZ,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB7N,EAAO,OACtDtO,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OACtD5b,GAASoc,EAAAA,EAAAA,IAAoBpc,EAAQ+N,EAAKzM,GAAI4a,GAC9Clc,GAAS6wB,EAAAA,EAAAA,IAA6B7wB,EAAQ+N,EAAKzM,GAAIlB,EAAU2vB,EAAahB,EAAYC,EAAc/uB,IACxGmD,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzE,IAAKE,IAAWC,EACd,OAGF,MAAM2N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1B6vB,GAAgBC,EAAAA,EAAAA,IAAyBjwB,EAAQC,GAEvD,IAAK8N,IAASiiB,EACZ,OAGF,MAAQc,YAAatvB,EAAI,cAAE4M,GAAkB4hB,EAEvC3U,GADiB7Z,GAAQ4M,GAAiBA,EAAc5M,KAC7BwtB,aAE5BxtB,GAIAouB,GAAkB5vB,EAAQ+N,EAAM3N,EAAUoB,EAAM6Z,OAAU9a,EAAWN,EAAM,KAGlFQ,EAAAA,EAAAA,IAAiB,wBAAwBwY,MAAOjZ,EAAQU,EAASC,KAC/D,MAAM,UAAEowB,EAAS,MAAE9wB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE3C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAM4N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMrH,QAAkBiV,EAAAA,EAAAA,IAAQ,8BAA+B,CAC7D5N,OACAgjB,cAGGrqB,GAILhG,EAAQsH,aAAa,CACnB7H,OAAQ4N,EAAKzM,GACboF,YACAzG,SACA,KCrHJQ,EAAAA,EAAAA,IAAiB,mBAAmBwY,MAAOjZ,EAAQU,EAASC,KAC1D,MAAM,SAAEypB,EAAQ,MAAEnqB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAC/D,IAAKE,EACH,OAIF,IAAIa,EAAAA,EAAAA,IAAehB,EAAQC,GAAOsQ,WAAWyN,WAAagT,EAAAA,GAAAA,WACxD,OAGFhxB,GAASixB,EAAAA,EAAAA,IACPjxB,EAAQG,EAAQ,CAAE+wB,yBAAqB3wB,EAAW4wB,qBAAiB5wB,GAAaN,IAElFmD,EAAAA,EAAAA,IAAUpD,GAEV,MAAM,OAAEuF,EAAM,MAAEsR,SAAiB8E,EAAAA,EAAAA,IAAQ,oBAAqB,CAAEyO,aAEhEpqB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxB,EAAAA,EAAAA,IACPpxB,GAAmB,IAAXuF,EAAkByrB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0B/wB,GAEpFD,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CACxC+wB,qBAAgC,IAAX3rB,EACrB4rB,gBAAiB/G,EACjBvT,SACC5W,IACHmD,EAAAA,EAAAA,IAAUpD,QAEKO,IAAXgF,GACF7E,EAAQ2wB,sBAAsB,CAAE/b,MAAO,iBAAkBrV,SAC3D,KAGFQ,EAAAA,EAAAA,IAAiB,oBAAoBwY,MAAOjZ,EAAQU,EAASC,KAC3D,MAAM,SAAEypB,EAAQ,MAAEnqB,GAAQC,EAAAA,EAAAA,OAAsBS,GAE1C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAC/D,IAAKE,EACH,OAGF,MAAM4N,QAAaujB,EAAAA,EAAAA,IAAmBtxB,EAAQU,EAASP,EAAQF,GAC/D,IAAK8N,EAAM,OAEX/N,GAAS+I,EAAAA,EAAAA,MAET/I,GAASoxB,EAAAA,EAAAA,IAAyBpxB,EAAQgxB,EAAAA,GAAAA,WAA+B/wB,IACzEmD,EAAAA,EAAAA,IAAUpD,GAEV,MAAMuF,QAAeoW,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE5N,OAAMqc,aAExDpqB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxB,EAAAA,EAAAA,IAAyBpxB,EAAQuF,EAASyrB,EAAAA,GAAAA,SAA8BA,EAAAA,GAAAA,MAA0B/wB,GAC3GD,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CACxC+wB,yBAAqB3wB,EACrB4wB,qBAAiB5wB,EACjBsW,WAAOtW,GACNN,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzD8N,EAAO5N,IAAUqC,EAAAA,EAAAA,IAAWxC,EAAQG,GACrCA,GAAW4N,IAIhB4N,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE5N,QAAO,KAGxCtN,EAAAA,EAAAA,IAAiB,4BAA4B,CAACT,EAAQU,EAASC,KAC7D,MAAM,OAAER,EAAM,OAAEoxB,EAAM,MAAEtxB,GAAQC,EAAAA,EAAAA,OAAsBS,EAEtDX,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CAAEqxB,cAAeD,GAAUtxB,IACrEmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,OAAER,EAAM,OAAEoxB,EAAM,MAAEtxB,GAAQC,EAAAA,EAAAA,OAAsBS,EAEhDooB,EAASwI,EAAS,CAAEE,WAAY,CAAEF,WAAa,CAAEE,gBAAYlxB,GAEnEP,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ4oB,EAAQ9oB,IAClDmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2BwY,MAAOjZ,EAAQU,EAASC,KAClE,MAAM,OACJR,EAAM,QAAEuxB,EAAO,UAAEC,EAAS,MAAErc,EAAK,MAAErV,GAAQC,EAAAA,EAAAA,OACzCS,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1ByxB,GAAQxP,EAAAA,EAAAA,IAAWpiB,EAAQ0xB,GAAW1xB,EAAO0X,eACnD,IAAK8L,IAASoO,EAAO,OAErB,MAAMrsB,QAAeoW,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD6H,OAAMoO,QAAOD,YAAWrc,UAE1B,IAAK/P,EACH,OAEFvF,GAAS+I,EAAAA,EAAAA,MACT,MAAM,QAAE8oB,EAAO,MAAEjW,GAAUrW,EAE3BvF,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OAEtD,MAAMmN,EAAS4I,EAAY,CAAEG,eAAgBD,GAAY,CAAEA,WAC3D7xB,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ4oB,EAAQ9oB,IAClDmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,0BAA0BwY,MAAOjZ,EAAQU,EAASC,KACjE,MAAM,OACJR,EAAM,KAAEyP,EAAI,UAAE+hB,EAAS,WAAEI,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAEhiB,EAAK,MAAEhQ,GAAQC,EAAAA,EAAAA,OAC/ES,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAKqjB,EAAM,OAEX,MAAMje,QAAeoW,EAAAA,EAAAA,IAAQ,yBAA0B,CACrD6H,OACA5T,OACA+hB,YACAI,aACAC,aACAC,kBACAhiB,UAEF,IAAK1K,EACH,OAGF,MAAM,UAAE2sB,EAAS,UAAEC,EAAS,MAAEvW,GAAUrW,EAExCvF,GAAS+I,EAAAA,EAAAA,MACT,MAAM,WAAEwH,IAAevP,EAAAA,EAAAA,IAAehB,EAAQC,GACxC4xB,GAAWthB,EAAWxF,SAAS5K,GAAQ0xB,SAAW,IACrD7sB,QAAQioB,GAAYA,EAAQrd,OAASsiB,EAAUtiB,OAC5CkiB,EAAiB,IAAKvhB,EAAWxF,SAAS5K,GAAQ2xB,gBAAkB,IAEtEK,EAAUR,UACZG,EAAepjB,QAAQyjB,GAEvBN,EAAQjsB,KAAKusB,GAGfnyB,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OAEtD5b,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CACxC0xB,UACAC,kBACC7xB,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoBwY,MAAOjZ,EAAQU,EAASC,KAC3D,MAAM,OACJR,EAAM,WAAE4xB,EAAU,WAAEC,EAAU,gBAAEC,EAAe,MAAEhiB,EAAK,MAAEhQ,GAAQC,EAAAA,EAAAA,OAC9DS,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAKqjB,EAAM,OAEX,MAAMje,QAAeoW,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C6H,OACAuO,aACAC,aACAC,kBACAhiB,UAEF,IAAK1K,EACH,OAGFvF,GAAS+I,EAAAA,EAAAA,MACT,MAAM8oB,GAAU7wB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOsQ,WAAWxF,SAAS5K,GAAQ0xB,SAAW,GACrF7xB,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CACxC0xB,QAAS,IAAIA,EAAStsB,IACrBtF,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4BwY,MAAOjZ,EAAQU,EAASC,KACnE,MAAM,OACJR,EAAM,KAAEyP,EAAI,MAAE3P,GAAQC,EAAAA,EAAAA,OACpBS,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAKqjB,EAAM,OAMX,UAJqB7H,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD6H,OACA5T,SAGA,OAGF5P,GAAS+I,EAAAA,EAAAA,MACT,MAAMqpB,GAAkBpxB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOsQ,WAAWxF,SAAS5K,GAC1EH,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CACxC0xB,QAASO,GAAiBP,SAAS7sB,QAAQusB,GAAWA,EAAO3hB,OAASA,IACtEkiB,eAAgBM,GAAiBN,gBAAgB9sB,QAAQusB,GAAWA,EAAO3hB,OAASA,KACnF3P,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oCAAoCwY,MAAOjZ,EAAQU,EAASC,KAC3E,MAAM,OACJR,EAAM,QAAEuxB,EAAO,MAAEzxB,GAAQC,EAAAA,EAAAA,OACvBS,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1ByxB,GAAQxP,EAAAA,EAAAA,IAAWpiB,EAAQ0xB,GAAW1xB,EAAO0X,eAC9C8L,GAASoO,SAEOjW,EAAAA,EAAAA,IAAQ,mCAAoC,CAC/D6H,OACAoO,YAMF5xB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CACxC2xB,eAAgB,IACf7xB,IACHmD,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2BwY,MAC1CjZ,EAAQU,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAEyP,EAAI,WAAEyiB,EAAU,aAAEC,EAAY,MAAEhd,EAAK,MAAErV,GAAQC,EAAAA,EAAAA,OACrDS,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BoyB,EAAaD,GAAelQ,EAAAA,EAAAA,IAAWpiB,EAAQsyB,QAAgB/xB,EACrE,IAAKijB,GAAS8O,IAAiBC,EAAa,OAE5C,MAAMhtB,QAAeoW,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD6H,OACA5T,OACAyiB,aACAE,aACAjd,UAEF,IAAK/P,EACH,OAEF,MAAM,UAAEitB,EAAS,MAAE5W,GAAUrW,EAE7BvF,GAAS+I,EAAAA,EAAAA,MACT,MAAM0pB,GAAoBzxB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOsQ,WAAWxF,SAAS5K,IAASsxB,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAO3hB,OAASA,IAIpE5P,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CACxCsxB,WAAY,IACPgB,EACHD,cAEDvyB,GACHD,GAASuc,EAAAA,EAAAA,IAASvc,EAAQ4b,IAC1BxY,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4BwY,MAC3CjZ,EAAQU,EAASC,KAEjB,MAAM,OACJR,EAAM,KAAEyP,EAAI,WAAEyiB,EAAU,aAAEC,EAAY,MAAEhd,EAAK,MAAErV,GAAQC,EAAAA,EAAAA,OACrDS,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BoyB,EAAaD,GAAelQ,EAAAA,EAAAA,IAAWpiB,EAAQsyB,QAAgB/xB,EACrE,IAAKijB,GAAS8O,IAAiBC,EAAa,OAE5C,MAAMhtB,QAAeoW,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD6H,OACA5T,OACAyiB,aACAE,aACAjd,QACAod,aAAa,IAEf,IAAKntB,EACH,OAEF,MAAM,UAAEitB,EAAS,MAAE5W,GAAUrW,EAE7BvF,GAAS+I,EAAAA,EAAAA,MACT,MAAM0pB,GAAoBzxB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOsQ,WAAWxF,SAAS5K,IAASsxB,WAChFgB,GAAmBlB,QAAUkB,EAAkBlB,OAAO3hB,OAASA,IAGpE5P,GAASixB,EAAAA,EAAAA,IAAiBjxB,EAAQG,EAAQ,CACxCsxB,WAAY,IACPgB,EACHE,WAAYH,IAEbvyB,GACHD,GAASuc,EAAAA,EAAAA,IAASvc,EAAQ4b,IAC1BxY,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwBwY,MAAOjZ,EAAQU,EAASC,KAC/D,MAAM,OACJR,EAAM,WAAEkyB,EAAa,EAAC,aAAEC,EAAY,MAAEhd,EAAQ,GAC5C3U,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BoyB,EAAaD,GAAelQ,EAAAA,EAAAA,IAAWpiB,EAAQsyB,QAAgB/xB,EACrE,IAAKijB,GAAS8O,IAAiBC,EAAa,OAE5C,MAAMhtB,QAAeoW,EAAAA,EAAAA,IAAQ,2BAA4B,CACvD6H,OACA6O,aACAE,aACAjd,QACAod,aAAa,IAEf,IAAKntB,EACH,OAEF,MAAM,UAAEitB,EAAS,MAAE5W,GAAUrW,EAE7BvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAAEyyB,aAAcJ,IACpDxyB,GAASuc,EAAAA,EAAAA,IAASvc,EAAQ4b,IAC1BxY,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuBwY,MAAOjZ,EAAQU,EAASC,KAC9D,MAAM,OACJR,EAAM,OAAEiP,EAAM,WAAEyjB,GACdlyB,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BgiB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQoP,GAChC,IAAKoU,IAASrB,EAAM,OAOpB,UALqBxG,EAAAA,EAAAA,IAAQ,sBAAuB,CAClD6H,OACArB,OACA0Q,eAEW,OAEb7yB,GAAS+I,EAAAA,EAAAA,MACT,MAAM+pB,GAAatwB,EAAAA,EAAAA,IAAWxC,EAAQG,GACjC2yB,IAEL9yB,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClCyyB,aAAcE,EAAWF,cAAc5tB,QAAQ+tB,GAAaA,EAAS3jB,SAAWA,OAElFhM,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2BwY,MAAOjZ,EAAQU,EAASC,KAClE,MAAM,OACJR,EAAM,WAAE0yB,EAAU,KAAEjjB,GAClBjP,EACE6iB,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAKqjB,EAAM,OAOX,UALqB7H,EAAAA,EAAAA,IAAQ,0BAA2B,CACtD6H,OACAqP,aACAjjB,SAEW,OAEb5P,GAAS+I,EAAAA,EAAAA,MACT,MAAM+pB,GAAatwB,EAAAA,EAAAA,IAAWxC,EAAQG,GACjC2yB,IAEL9yB,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClCyyB,aAAc,GACdtM,SAAU,IACLwM,EAAWxM,SACd0M,mBAAoB,GACpBC,gBAAiB,MAGrB7vB,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,uBAAuBwY,MAAOjZ,EAAQU,EAASC,KAC9D,MAAM,OAAER,GAAWQ,EACboN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC3B4N,SAEgB4N,EAAAA,EAAAA,IAAQ,sBAAuB5N,KAGpD/N,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClC4U,cAAUxU,KAEZ6C,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,6BAA6BwY,MAAOjZ,EAAQU,EAASC,KACpE,MAAM,OACJyO,EAAM,KAAE8jB,EAAI,UAAEC,EAAS,MAAElzB,GAAQC,EAAAA,EAAAA,OAC/BS,EAEEwhB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQoP,GAChC,IAAK+S,EAAM,OAEXniB,GAASoxB,EAAAA,EAAAA,IAAyBpxB,EAAQgxB,EAAAA,GAAAA,WAA+B/wB,IACzEmD,EAAAA,EAAAA,IAAUpD,GAEV,MAAMuF,QAAeoW,EAAAA,EAAAA,IAAQ,4BAA6B,CACxDwG,OACA+Q,OACAC,cAGF,IAAK5tB,EAKH,OAJAvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxB,EAAAA,EAAAA,IAAyBpxB,EAAQgxB,EAAAA,GAAAA,MAA0B/wB,QACpEmD,EAAAA,EAAAA,IAAUpD,GAKZA,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,QAC7DxY,EAAAA,EAAAA,IAAUpD,GAEV,MAAM,GAAEsB,EAAE,WAAE4mB,GAAe/F,EAE3B,UADsBxG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEra,KAAI4mB,eAKnD,OAHAloB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxB,EAAAA,EAAAA,IAAyBpxB,EAAQgxB,EAAAA,GAAAA,MAA0B/wB,QACpEmD,EAAAA,EAAAA,IAAUpD,GAIZU,EAAQ0yB,kBAAkB,CAAEC,UAAWjkB,IAEvCpP,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxB,EAAAA,EAAAA,IAAyBpxB,EAAQgxB,EAAAA,GAAAA,SAA6B/wB,IACvEmD,EAAAA,EAAAA,IAAUpD,GAENkzB,IAASC,GACXzyB,EAAQmL,iBAAiB,CACvB5G,QAASP,EAAAA,GAAuB,4CAA4C4uB,EAAAA,EAAAA,IAAuBnR,IACnGliB,SAEJ,I,gBChbF,IAAIszB,GA6MAlZ,IA3MJ5Z,EAAAA,EAAAA,IAAiB,QAAQ,CAACT,EAAQU,KAC5BiW,EAAAA,KAEFC,QAAQ4c,IAAI,kBAGVD,IACFxpB,aAAawpB,IAGfvzB,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IAAKA,EAAQyzB,WAAW,IACjCrwB,EAAAA,EAAAA,IAAUpD,GAGVuzB,GAAuBxwB,OAAO+F,YAAW,KACvC9I,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IAAKA,EAAQyzB,WAAW,IACjCrwB,EAAAA,EAAAA,IAAUpD,GACVuzB,QAAuBhzB,CAAS,GAvBL,MA0B7B,MAAM,aAAEmzB,EAAY,uBAAEC,GAA2BjzB,EAEjDgzB,EAAa,CACXE,SAAU,SACVC,eAAe,EACfC,UAAW7a,gBAwBfA,eAA6DjZ,EAAWU,GACtE,IAAIqzB,GAAoB,EAExB/zB,GAAS+I,EAAAA,EAAAA,MAET,IAAIirB,GAAW,EAGf,MAEMC,EAFe3sB,OAAOC,KAAKvH,EAAO8E,SAASiG,UAEbvF,QAAwD,CAACC,EAAKtF,KAChGsF,EAAItF,GAAUmH,OACXC,KAAKvH,EAAO8E,SAASiG,SAAS5K,GAAQ+zB,aACtC1uB,QAAwC,CAAC2uB,EAAM/zB,KAC9C+zB,EAAKxsB,OAAOvH,IAAa,CACvB6hB,OAAOU,EAAAA,EAAAA,IAAY3iB,EAAQG,EAAQwH,OAAOvH,IAC1C8iB,WAAWC,EAAAA,EAAAA,IAAgBnjB,EAAQG,EAAQwH,OAAOvH,IAClDg0B,cAAcC,EAAAA,EAAAA,GAAmBr0B,EAAQG,EAAQwH,OAAOvH,KAGnD+zB,IACN,CAAC,GACC1uB,IACN,CAAC,GAGJ,IAAK,MAAQnE,GAAIrB,KAAWqH,OAAO2S,OAAOja,EAAO+Y,SAAU,CACzD/Y,GAAS+I,EAAAA,EAAAA,MACT,MAAQ5I,OAAQm0B,EAAel0B,SAAUm0B,IAAoBl0B,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACnGu0B,EAAiBD,GAAmBhzB,EAAAA,GACpCkzB,EAAaF,GAAmBD,GAClCzsB,EAAAA,EAAAA,IAAiB7H,EAAQs0B,EAAeC,QAAmBh0B,EACzDyX,EAAcsc,EAAgBt0B,EAAOsO,MAAM4N,KAAKoY,QAAiB/zB,EACvE,GAAI+zB,GAAiBtc,EAAa,CAChC,MAAMzS,QA4GawI,EA5GkBiK,EA4GH5X,EA5GgBo0B,EA4GEE,EA5GcD,GAAYtQ,wBA6G3ExI,EAAAA,EAAAA,IAAQ,gBAAiB,CAC9B5N,OACA3N,WACAib,SAAUqZ,GAAmB3mB,EAAKoW,uBAClC3I,YAAatO,KAAK2K,MAAM6D,EAAAA,IAAqB,GAAK,GAClDpG,MAAOoG,EAAAA,OAjHL1b,GAAS+I,EAAAA,EAAAA,MACT,MAAQ5I,OAAQw0B,IAAqBt0B,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAEjF,GAAIsF,GAAUovB,IAAqBL,EAAe,CAChD,MAAMM,GAAsB/vB,EAAAA,EAAAA,IAAmB7E,EAAQs0B,GACjDxY,EAAgBwY,IAAkB7nB,EAAAA,IACpCzM,EAAOuM,qBAAqBvH,QAAO,QAAC,UAAE+W,GAAW,SAAMA,CAAS,IAAEhX,KAAI,QAAC,QAAEE,GAAS,SAAKA,CAAO,IAC9F,GACE4vB,EAAoB7c,EAAYvV,SAAWuV,EAAYE,OACzD5Q,OAAO2S,OAAOjC,EAAYE,QACzBnT,KAAI,QAAC,cAAE+C,GAAe,SAAK8sB,EAAoB9sB,EAAc,IAC7D9C,OAAOgC,SACR,GAEEgV,EAAe,GAAoBC,OAAO1W,EAAOT,SAAUgX,GAC3DgZ,EAAmC9Y,EAAYC,OAAO4Y,GACtD3Y,GAAOC,EAAAA,EAAAA,IAAqB2Y,EAAkC,MAC9DpY,EAAYV,EAAYjX,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,IAE3C0yB,IACHh0B,EAAS,IACJA,EACH8E,SAAU,IACL9E,EAAO8E,SACViG,SAAU,CAAC,IAIfzD,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAwB,IAArB5J,GAAIyzB,GAAY,EACvD/0B,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9Bg1B,WAAY,CAAC,GACZD,EAAW,IAEhBf,GAAW,GAGbh0B,GAASoc,EAAAA,EAAAA,IAAoBpc,EAAQs0B,EAAepY,GACpDlc,GAASsc,EAAAA,EAAAA,IAAgBtc,EAAQs0B,EAAeE,EAAgB9X,GAC5D+X,GAAYQ,kBACdj1B,GAASkkB,EAAAA,EAAAA,IAAiBlkB,EAAQs0B,EAAeE,EAAgBC,IAGnEntB,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAwB,IAArB5J,GAAIyzB,GAAY,EACvD,MAAQ50B,OAAQ+0B,EAAa90B,SAAU+0B,IAAkB90B,EAAAA,EAAAA,IAAyBL,EAAQ+0B,IAAe,CAAC,EACtGG,IAAgBZ,GAAiBa,IAAkBX,IACrDx0B,GAASkd,EAAAA,EAAAA,IAAuBld,EAAQs0B,EAAeE,EAAgB9X,EAAWqY,GACpF,IAEF/0B,GAASo1B,EAAAA,EAAAA,IAAYp1B,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAO+I,MAAO,OAChEtO,GAASq1B,EAAAA,EAAAA,IAAYr1B,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,OAC5DrW,EAAOsW,mBAAmBnU,SAC5B1H,GAASyc,EAAAA,EAAAA,IAAkBzc,EAAQs0B,EAAe/uB,EAAOsW,qBAG3DkY,GAAoB,CACtB,CACF,EAEA3wB,EAAAA,EAAAA,IAAUpD,GAENgY,GAAavV,UACf/B,EAAQ40B,WAAW,CAAEn1B,OAAQm0B,EAAgBjkB,OAAO,IAChDkkB,GAAmBA,IAAoBhzB,EAAAA,IACzCb,EAAQ60B,cAAc,CACpBp1B,OAAQm0B,EAAgBxe,QAASye,EAAiBiB,wBAAwB,IAIlF,CAuCF,IAAyBznB,EAAe3N,EAAkBs0B,EArCxD10B,GAAS+I,EAAAA,EAAAA,MAEJgrB,IACH/zB,EAAS,IACJA,EACH8E,SAAU,IACL9E,EAAO8E,SACViG,SAAU,CAAC,IAIfzD,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAwB,IAArB5J,GAAIyzB,GAAY,EACvD/0B,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9Bg1B,WAAY,CAAC,GACZD,EAAW,KAMlBztB,OAAOC,KAAK0sB,GAAgB/oB,SAAS/K,IACnC,MAAMs1B,EAAUxB,EAAe9zB,GAC/BmH,OAAOC,KAAKkuB,GAASvqB,SAAS9K,IAC5BJ,GAAS01B,EAAAA,EAAAA,IAAa11B,EAAQG,EAAQwH,OAAOvH,GAAW6zB,EAAe9zB,GAAQwH,OAAOvH,IAAW,GACjG,KAGJgD,EAAAA,EAAAA,IAAUpD,GAEVsH,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClD,MAAQE,OAAQw1B,EAAajvB,UAAWkvB,IAAmB50B,EAAAA,EAAAA,IAAehB,EAAQC,GAAOoI,YACrFstB,GAAeC,KAAmB3hB,EAAAA,EAAAA,IAAkBjU,EAAQ21B,EAAaC,IAC3El1B,EAAQm1B,iBAAiB,CAAE51B,SAC7B,GAEJ,CAnKY61B,CAAuB91B,EAAQU,GAErCV,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACH+1B,aAAc7pB,KAAKC,MACnBsnB,WAAW,IAEbrwB,EAAAA,EAAAA,IAAUpD,GAEN2W,EAAAA,KAEFC,QAAQ4c,IAAI,oBAGdwC,EAAAA,EAAAA,MACAtC,EAAa,CAAEE,SAAU,WAAYC,eAAe,KAC/ClY,EAAAA,EAAAA,IAAQ,oBACbgY,GAAwB,GAE1B,KA6JJsC,EAAAA,GAAAA,KAAaj2B,IACX,MAAM,gBAAEk2B,EAAe,UAAEC,GAAcn2B,GACjC,YAAE2a,IAAgB3Z,EAAAA,EAAAA,IAAehB,IAClC2a,GAAgBN,IAAgB6b,kBAAoBA,GACpD7b,IAAgB8b,YAAcA,GAKX,yBAApBD,GAA4D,4BAAdC,IAEhDC,EAAAA,EAAAA,MAAaC,OANbhc,GAAiBra,CASI,KC1PzBS,EAAAA,EAAAA,IAAiB,cAAcwY,MAAOjZ,EAAQU,EAASC,KACrD,MAAM,OACJR,EAAM,OACNmjB,EAAM,YACNC,EAAW,MACXtjB,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAM4N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,aAAc,CACzC6H,KAAMzV,EACNuV,SACAC,gBAGF7iB,EAAQmL,iBAAiB,CACvB5G,QAASM,GACLke,EAAAA,EAAAA,IAAU,2BACV,2EACJxjB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsBwY,MAAOjZ,EAAQU,EAASC,KAC7D,MAAM,OACJR,EAAM,OACNmjB,EAAM,YACNC,EAAW,MACX+S,EAAK,MACLr2B,GAAQC,EAAAA,EAAAA,OACNS,EACJ,IAAKR,EACH,OAGF,MAAM4N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,IAASuoB,EACZ,OAGF,MAAM/wB,QAAeoW,EAAAA,EAAAA,IAAQ,qBAAsB,CACjD6H,KAAMzV,EACNuoB,QACAhT,SACAC,gBAGF7iB,EAAQmL,iBAAiB,CACvB5G,QAASM,GACLke,EAAAA,EAAAA,IAAU,2BACV,2EACJxjB,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,sBAAsBwY,UACrC,MAAM1T,QAAeoW,EAAAA,EAAAA,IAAQ,uBACxBpW,IAILvF,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACHu2B,eAAgB,CACdC,OAAQjxB,EAAOkxB,eACfC,cAAepvB,OAAOC,KAAKhC,EAAOkxB,gBAClCE,QAASpxB,EAAOoxB,WAGpBvzB,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,0BAA0BwY,MAAOjZ,EAAQU,EAASC,KACjE,MAAM,KAAE2Q,GAAS3Q,EAGjB,UADqBgb,EAAAA,EAAAA,IAAQ,yBAA0BrK,GAErD,OAGFtR,GAAS+I,EAAAA,EAAAA,MAET,MAAQ,CAACuI,GAAOslB,KAAoBC,GAAgB72B,EAAOu2B,eAAeC,OAE1Ex2B,EAAS,IACJA,EACHu2B,eAAgB,CACdC,OAAQK,EACRH,cAAe12B,EAAOu2B,eAAeG,cAAc1xB,QAAQ8xB,GAAOA,IAAOxlB,OAG7ElO,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,8BAA8BwY,UAE7C,UADqB0C,EAAAA,EAAAA,IAAQ,8BAE3B,OAIF,MAAMob,GADN/2B,GAAS+I,EAAAA,EAAAA,OACyBwtB,eAAeG,cAC9CvrB,MAAMmG,GAAStR,EAAOu2B,eAAeC,OAAOllB,GAAM0lB,YACrD,IAAKD,EACH,OAEF,MAAME,EAAiBj3B,EAAOu2B,eAAeC,OAAOO,GAEpD/2B,EAAS,IACJA,EACHu2B,eAAgB,CACdC,OAAQ,CACN,CAACO,GAAqBE,GAExBP,cAAe,CAACK,MAGpB3zB,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyBwY,MAAOjZ,EAAQU,EAASC,KAChE,MAAM,KAAE2Q,EAAI,gBAAE4lB,EAAe,sBAAEC,GAA0Bx2B,QACpCgb,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDrK,OACA4lB,kBACAC,4BAOFn3B,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACHu2B,eAAgB,IACXv2B,EAAOu2B,eACVC,OAAQ,IACHx2B,EAAOu2B,eAAeC,OACzB,CAACllB,GAAO,IACHtR,EAAOu2B,eAAeC,OAAOllB,WACR/Q,IAApB22B,EAAgC,CAAEA,wBAAoB32B,UAC5BA,IAA1B42B,EAAsC,CAAEA,8BAA0B52B,OAK9E6C,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,oBAAoBwY,MAAOjZ,EAAQU,EAASC,KAC3D,MAAM,KAAEy2B,GAASz2B,QAEIgb,EAAAA,EAAAA,IAAQ,mBAAoB,CAAEyb,WAMnDp3B,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACHu2B,eAAgB,IACXv2B,EAAOu2B,eACVI,QAASS,KAGbh0B,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyBwY,UACxC,MAAM1T,QAAeoW,EAAAA,EAAAA,IAAQ,0BAC7B,IAAKpW,EACH,OAEF,MAAM,MAAEqW,EAAK,kBAAEyb,GAAsB9xB,EACrCvF,GAAS+I,EAAAA,EAAAA,MAET/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OAEtD5b,EAAS,IACJA,EACHs3B,kBAAmB,CACjBd,OAAQa,EACRX,cAAepvB,OAAOC,KAAK8vB,MAG/Bj0B,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,6BAA6BwY,MAAOjZ,EAAQU,EAASC,KACpE,MAAM,KAAE2Q,GAAS3Q,EAGjB,UADqBgb,EAAAA,EAAAA,IAAQ,4BAA6BrK,GAExD,OAGFtR,GAAS+I,EAAAA,EAAAA,MAET,MAAQ,CAACuI,GAAOslB,KAAoBC,GAAgB72B,EAAOs3B,kBAAkBd,OAE7Ex2B,EAAS,IACJA,EACHs3B,kBAAmB,CACjBd,OAAQK,EACRH,cAAe12B,EAAOs3B,kBAAkBZ,cAAc1xB,QAAQ8xB,GAAOA,IAAOxlB,OAGhFlO,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iCAAiCwY,gBAC3B0C,EAAAA,EAAAA,IAAQ,mCAK7B3b,GAAS+I,EAAAA,EAAAA,MAET/I,EAAS,IACJA,EACHs3B,kBAAmB,CACjBd,OAAQ,CAAC,EACTE,cAAe,MAGnBtzB,EAAAA,EAAAA,IAAUpD,GAAO,ICjNnB,MACMu3B,IAAwBjO,EAAAA,EAAAA,KAAUlO,GAAOA,KAAM,KAAK,GC7BnD,SAASoc,GACdx3B,EAAWoqB,EAAkBqN,GAE1B,sFADCx3B,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAM0B,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,OAAO+B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B03B,WAAY,IACP91B,EAAS81B,WACZC,WAAY,IACP/1B,EAAS81B,WAAWC,WACvB,CAACvN,GAAWqN,KAGfx3B,EACL,CAEO,SAAS23B,GACd53B,EAAWmZ,GAER,sFADClZ,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,OAAO8B,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B03B,WAAY,KACP12B,EAAAA,EAAAA,IAAehB,EAAQC,GAAOy3B,WACjCve,cAEDlZ,EACL,EDKAQ,EAAAA,EAAAA,IAAiB,gBAAgBwY,MAAOjZ,EAAQU,EAASC,KACvD,MAAM,OAAEyO,GAAWzO,EACbwhB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQoP,GAChC,IAAK+S,EACH,OAGF,MAAM,GAAE7gB,EAAE,WAAE4mB,GAAe/F,EACrB0V,QAAgBlc,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEra,KAAI4mB,eACrD,IAAK2P,EAAS,OAEd,MAAMC,EAAuB3V,EAAK4V,aAAeF,EAAQE,WACnDC,EAAyB7V,EAAKmE,UAAU2R,cAAc32B,KAAOu2B,EAAQvR,UAAU2R,cAAc32B,GAC7F42B,EAA0B/V,EAAKmE,UAAU6R,eAAe72B,KAAOu2B,EAAQvR,UAAU6R,eAAe72B,GAChG82B,EAA0BjW,EAAKmE,UAAU+R,eAAe/2B,KAAOu2B,EAAQvR,UAAU+R,eAAe/2B,IACjGw2B,GAAwBE,GAA0BE,GAA2BE,IAC7EjW,EAAKmW,QAAQ5wB,QAChBhH,EAAQ0yB,kBAAkB,CAAEC,UAAWjkB,GACzC,KAGF3O,EAAAA,EAAAA,IAAiB,YAAYwY,MAAOjZ,EAAQU,EAASC,KACnD,MAAM,OAAEyO,GAAWzO,EACbwhB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQoP,GAChC,IAAK+S,EACH,OAGF,MAAM5c,QAAeoW,EAAAA,EAAAA,IAAQ,aAAc,CAAEC,MAAO,CAACuG,KACrD,IAAK5c,EACH,OAGF,MAAM,MAAEqW,EAAK,iBAAE2c,GAAqBhzB,EAEpCvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASq1B,EAAAA,EAAAA,IAAYr1B,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OACzD5b,GAASw4B,EAAAA,EAAAA,IAAoBx4B,EAAQ,IAChCA,EAAO4b,MAAM6c,gBACbF,KAELn1B,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,gBAAgBwY,UAC/B,MAAQyf,UAAU,gBAAEC,IAAsB34B,EAE1C,GAAO24B,MAAmBhsB,EAAAA,EAAAA,MAAkBgsB,EAlDX,IAmD/B,OAGF,MAAMpzB,QAAeoW,EAAAA,EAAAA,IAAQ,iBAC7B,IAAKpW,EACH,OAGF,MAAM,IAAEoE,EAAG,MAAEiS,GAAUrW,EAEvBvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OACtD5b,EAAS,IACJA,EACH04B,SAAU,IACL14B,EAAO04B,SACVlI,QAAS7mB,EACTgvB,iBAAiBhsB,EAAAA,EAAAA,SAGrBvJ,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,mBAAmBwY,UAClC,MAAM2f,QAAoBjd,EAAAA,EAAAA,IAAQ,oBAClC,IAAKid,EACH,OAGF54B,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqByc,EAAYhd,MAAO,OAClE5b,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqByc,EAAYtqB,MAAO,OAClEtO,GAAS64B,EAAAA,EAAAA,IAAgB74B,EAAQ44B,EAAYL,kBAG7C,MAAMO,EAAoB3W,GAAmBA,EAAK4W,UAAY5W,EAAK6W,WAAa,GAC1EC,EAAW,IAAIC,KAAKC,SAAS,SAE7BC,EAAcR,EAAYhd,MAAMxW,MAAK,CAAC8f,EAAGC,IAC7C8T,EAASI,QAAQP,EAAiB5T,GAAI4T,EAAiB3T,MACtDngB,QAAQmd,IAAUA,EAAKmX,SAE1Bt5B,EAAS,IACJA,EACH44B,YAAa,CACXpI,QAAS4I,EAAYr0B,KAAKod,GAASA,EAAK7gB,QAG5C8B,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,mBAAmB,MAC7Bkb,EAAAA,EAAAA,IAAQ,mBAAmB,KAGlClb,EAAAA,EAAAA,IAAiB,mBAAmBwY,MAAOjZ,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,GAC5C,OAAER,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACzDkiB,EAAOhiB,GAASiiB,EAAAA,EAAAA,IAAWpiB,EAAQG,QAAUI,EACnD,IAAK4hB,IAAQuB,EAAAA,EAAAA,IAAUvB,IAASA,EAAKoX,aAAaC,cAChD,OAGF,MAAMvsB,EAAQkV,EAAKoX,aAAatsB,MAC1B1H,QAAeoW,EAAAA,EAAAA,IAAQ,mBAAoBwG,EAAK7gB,GAAI6gB,EAAK+F,WAAajb,GAC5E,IAAK1H,EACH,OAGF,MAAM,MAAE+I,EAAK,QAAEiiB,EAAO,cAAEiJ,GAAkBj0B,EAE1CvF,GAAS+I,EAAAA,EAAAA,MACLuF,EAAM5G,SACR1H,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB7N,EAAO,QAExDtO,GAASy5B,EAAAA,EAAAA,IAAWz5B,EAAQmiB,EAAK7gB,GAAI,CACnCi4B,YAAa,CACXtsB,MAAOsjB,EAAQ7oB,OAAS6oB,EAAQA,EAAQ7oB,OAAS,GAAK,IACtDiC,KAAKgM,EAAAA,EAAAA,KAAQwM,EAAKoX,aAAa5vB,KAAO,IAAIsS,OAAOsU,IACjDiJ,oBAIJp2B,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iBAAiBwY,MAAOjZ,EAAQU,EAASC,KACxD,MAAM,OACJyO,EAAM,QAAEhH,GAAU,EAAK,UAAE4wB,EAAS,SAAED,EAAQ,uBAAEW,EAAsB,MACpEz5B,GAAQC,EAAAA,EAAAA,OACNS,EAEEwhB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQoP,GAChC,IAAK+S,EACH,OASF,IAAI5c,EACJ,GAPA7E,EAAQi5B,qBAAqB,CAAEx5B,OAAQiP,EAAQhH,YAE/CpI,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxB,EAAAA,EAAAA,IAAyBpxB,EAAQgxB,EAAAA,GAAAA,WAA+B/wB,IACzEmD,EAAAA,EAAAA,IAAUpD,IAGLmiB,EAAKyX,WAAazX,EAAK0X,YAC1Bt0B,QAAeoW,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEme,MAAO3X,EAAK0X,YAAab,YAAWD,iBACzE,CACL,MAAM,GAAEz3B,EAAE,WAAE4mB,GAAe/F,EAC3B5c,QAAeoW,EAAAA,EAAAA,IAAQ,gBAAiB,CACtCra,KACA4mB,aACA2R,YAAa,GACbb,YACAD,WACAW,0BAEJ,CAEIn0B,IACF7E,EAAQq5B,iBAAiB,CAAE55B,OAAQiP,IAEnCpP,GAAS+I,EAAAA,EAAAA,MACT/I,GAASy5B,EAAAA,EAAAA,IACPz5B,EACAmiB,EAAK7gB,GACL,CACE03B,YACAD,cAGJ31B,EAAAA,EAAAA,IAAUpD,IAGZA,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxB,EAAAA,EAAAA,IAAyBpxB,EAAQgxB,EAAAA,GAAAA,SAA6B/wB,GACvED,GAASuP,EAAAA,EAAAA,IAAsBvP,EAAQC,IACvCmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iBAAiBwY,MAAOjZ,EAAQU,EAASC,KACxD,MAAM,OAAEyO,GAAWzO,EAEbwhB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQoP,GAEhC,IAAK+S,EACH,OAGF,MAAM,GAAE7gB,EAAE,WAAE4mB,GAAe/F,QAErBxG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEra,KAAI4mB,cAAa,KAGpDznB,EAAAA,EAAAA,IAAiB,qBAAqBwY,MAAOjZ,EAAQU,EAASC,KAC5D,MAAM,UAAE0yB,GAAc1yB,EAChBq5B,GAAYC,EAAAA,EAAAA,IAAS5G,GAE3B,IAAIlR,EAAO6X,GAAY5X,EAAAA,EAAAA,IAAWpiB,EAAQqzB,QAAa9yB,EACvD,MAAMwN,EAAQisB,OAA4Cz5B,GAAhCiC,EAAAA,EAAAA,IAAWxC,EAAQqzB,GAC7C,IAAKlR,IAASpU,EACZ,OAGF,GAAIoU,IAASA,GAAMmE,SAAU,CAC3B,MAAM,GAAEhlB,EAAE,WAAE4mB,GAAe/F,EAE3B,GADAA,QAAaxG,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEra,KAAI4mB,gBACvC/F,EAAM,MACb,CAEA,MAAM5c,QAAeoW,EAAAA,EAAAA,IAAQ,qBAAsBwG,EAAMpU,GACzD,IAAKxI,IAAWA,EAAO+yB,OACrB,OAGFt4B,GAAS+I,EAAAA,EAAAA,MAET,MAAMmxB,EAAa/X,GAAQpU,GACrB,OAAEuqB,EAAM,MAAE1c,GAAUrW,EAC1B+yB,EAAOlzB,MAAM8f,GAAOA,EAAE5jB,KAAO44B,GAAYnC,YAAc,EAAI,IAC3D,MAAMI,EAAgBhW,GAAMmE,UAAU6R,cAChCE,EAAgBlW,GAAMmE,UAAU+R,cAClCF,GAAeG,EAAO1yB,KAAKuyB,GAC3BE,GAAeC,EAAO5pB,QAAQ2pB,GAElCr4B,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OAGpD5b,EADEg6B,GACOP,EAAAA,EAAAA,IAAWz5B,EAAQqzB,EAAW,CAAEiF,YAEhC/V,EAAAA,EAAAA,IAAWviB,EAAQqzB,EAAW,CAAEiF,YAG3Cl1B,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,MAAEC,EAAK,MAAEX,GAAQC,EAAAA,EAAAA,OAAsBS,EAExCC,GAEA22B,IAAsBte,UACzB,MAAM1T,QAAeoW,EAAAA,EAAAA,IAAQ,cAAe,CAAE/a,UAE9CZ,GAAS+I,EAAAA,EAAAA,MACT,MAAMqmB,GAAqBpuB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOk6B,WAAWv5B,MAEpE,IAAK2E,IAAW6pB,GAAuBxuB,IAAUwuB,EAG/C,OAFApvB,GAASo6B,EAAAA,EAAAA,IAA+Bp6B,GAAQ,EAAOC,QACvDmD,EAAAA,EAAAA,IAAUpD,GAIZ,MAAM,WAAEowB,EAAU,YAAEE,GAAgB/qB,EAEpC,IAAI4J,EACAD,EACAkhB,EAAW1oB,SACb1H,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBiU,EAAY,OAC3DjhB,EAAeihB,EAAWrrB,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,KAE1CgvB,EAAY5oB,SACd1H,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBmU,EAAa,OAC5DphB,EAAgBohB,EAAYvrB,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,KAGhDtB,GAASo6B,EAAAA,EAAAA,IAA+Bp6B,GAAQ,EAAOC,GACvDD,GAASiP,EAAAA,EAAAA,IAAiBjP,EAAQ,CAAEmP,eAAcD,iBAAiBjP,IAEnEmD,EAAAA,EAAAA,IAAUpD,EAAO,GACjB,KAGJS,EAAAA,EAAAA,IAAiB,iBAAiBwY,MAAOjZ,EAAQU,EAASC,KACxD,MACEk5B,YAAaC,EAAK,UAAEd,EAAS,SAAED,EAAQ,MACvC94B,GAAQC,EAAAA,EAAAA,OACNS,EAEE4E,QAAeoW,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEme,QAAOd,YAAWD,aAC7DxzB,GASL7E,EAAQ2C,SAAS,CAAE/B,GAAIiE,EAAQtF,UAE/BD,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuP,EAAAA,EAAAA,IAAsBvP,EAAQC,IACvCmD,EAAAA,EAAAA,IAAUpD,IAZRU,EAAQmL,iBAAiB,CACvB5G,QAASP,EAAAA,GAAuB,qCAChCzE,SAUa,KAGnBQ,EAAAA,EAAAA,IAAiB,cAAc,CAACT,EAAQU,EAASC,KAC/C,MAAM,OAAER,GAAWQ,EACbu5B,GAAaD,EAAAA,EAAAA,IAAS95B,IAAUiiB,EAAAA,EAAAA,IAAWpiB,EAAQG,IAAUqC,EAAAA,EAAAA,IAAWxC,EAAQG,GACjF+5B,IAIAve,EAAAA,EAAAA,IAAQ,aAAcue,EAAW,KAGxCz5B,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,YAAE05B,EAAW,QAAEC,GAAY35B,GAE5Bgb,EAAAA,EAAAA,IAAQ,oBAAqB0e,EAAaC,EAAQ,I,gBE/VzD,MAAMC,GAAkBhc,EAAAA,IAAUic,EAAAA,GAEnB,MAAMC,GAGnBC,YAAoBC,EAA2BC,G,UAA6B,KAAxDD,SAAAA,EAAiB,KAAUC,OAAAA,E,EAA2B,K,OAAA,G,iTAAA,gB,uFAC1E,CAEAC,kBACON,KAELO,KAAKC,UAAYh4B,OAAOC,KAAK,mBAAezC,EAAWu6B,KAAKH,UACxDG,KAAKC,UACPD,KAAKC,UAAUC,OAEfF,KAAKF,WAET,CAEA53B,KAAK6Q,GACH,GAAIinB,KAAKC,UAKP,OAJAD,KAAKC,UAAWE,SAASprB,KAAOgE,EAChCinB,KAAKC,UAAWG,aAChBJ,KAAKC,eAAYx6B,GAKnB,IAAKg6B,GAAiB,CACpB,MAAMY,EAAQp4B,OAAOC,KAAK6Q,OAAKtT,EAAWu6B,KAAKH,UAC3CQ,EACFA,EAAMD,QAENJ,KAAKF,UAET,CACF,CAEAQ,gBACEN,KAAKC,WAAWM,QAChBP,KAAKC,eAAYx6B,CACnB,EChBF,MAAM+6B,GAAY,4BAEZC,IAAwBprB,EAAAA,EAAAA,KAAUiL,GAAOA,KAAM,KAAK,GA6kB1DnC,eAAeuiB,GACbx7B,EAAWy7B,EAAcC,EAAoBC,SAEvChgB,EAAAA,EAAAA,IAAQ,kBAAmB,CAAE8f,MAAKE,iBAAgBD,cACxD17B,GAAS+I,EAAAA,EAAAA,YACH6yB,GAAe57B,EACvB,CAEAiZ,eAAe2iB,GAAsC57B,EAAWsR,GAC9D,MAAM/L,QAAeoW,EAAAA,EAAAA,IAAQ,iBAAkB,CAAErK,SAC5C/L,IAILvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,OAC7D5b,EAAS,IACJA,EACH67B,WAAY,CACVvqB,KAAM/L,EAAO+L,KACbwqB,KAAMv2B,EAAOu2B,QAGjB14B,EAAAA,EAAAA,IAAUpD,GACZ,CAgMA,SAAS+7B,GACP/7B,EACAU,EACAmT,EAAatO,GAEb,sFADItF,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,GAAoB,YAAhBqF,EAAO/D,KAAoB,CAC7BxB,GAAS+I,EAAAA,EAAAA,MACT,MAAMnH,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASo6B,QAAS,OACvB,MAAM,OAAEC,EAAM,IAAER,EAAG,yBAAES,GAA6B32B,EAYlD,OAXAvF,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9Bg8B,QAAS,IACJp6B,EAASo6B,QACZG,QAAS,CACPF,SACA/nB,MAAOunB,EAAIn6B,GACX46B,8BAGHj8B,QACHmD,EAAAA,EAAAA,IAAUpD,EAEZ,CAEA,MAAMo8B,EAA0B,aAAhB72B,EAAO/D,KAAsB+D,EAAOsO,IAAMA,EAC1D9Q,OAAOC,KAAKo5B,EAAS,SAAU,YAC/B17B,EAAQ27B,kBAAkB,CAAEp8B,SAC9B,CAiEAgZ,eAAeqjB,GACbvuB,GACA,IADe3N,EAAW,UAAH,6CAAGmB,EAAAA,GAAgBg7B,EAAe,uCAAEje,EAAmB,uCAAEiC,EAA0B,6CAEpG5E,EAAAA,EAAAA,IAAQ,cAAe,CAC3B5N,OACA2Q,gBAAiBte,EACjBkD,KAAMi5B,EACNje,aACAiC,UAEJ,CAEA,IAAIic,GAEJvjB,eAAewjB,GACbz8B,EACAU,EAAgCqN,EAAerH,EAAmB4M,GAElE,IAFiFopB,EAAS,UAAH,8CAAQ,sFAC3Fz8B,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAM,WACJkoB,EAAU,iBAAEvc,EAAgB,QAAE8wB,EAAO,SAAEC,GACrCl8B,EAEAg8B,IACGF,KACHA,GAAc,IAAI/B,GAAa,8BAA8B,KAC3D5uB,EAAiB,CAAE5G,QAAS,qCAAsChF,SAAQ,KAI9Eu8B,GAAY3B,mBAGd,MAAMt1B,QAAeoW,EAAAA,EAAAA,IAAQ,uBAAwB,CACnDxb,OAAQ4N,EAAKzM,GACb4mB,WAAYna,EAAKma,WACjBxhB,YACA4M,OACAopB,WAGF,IAAKn3B,EACH,OAEF,MAAM,QAAEN,EAAS43B,MAAOC,EAAO,IAAEjpB,GAAQtO,EAErCu3B,EACF1U,EAAW,CAAE9U,KAAM,CAAErO,QAASA,GAAW,SAAWhF,UAC3CgF,EACT4G,EAAiB,CAAE5G,UAAShF,UACnB4T,IACL6oB,EAEE7oB,EAAI1J,SAASmxB,IACfkB,GAAax5B,KAAK6Q,IAElB2oB,GAAapB,gBACbwB,EAAS,CACP/oB,MAAK1T,OAAQ4N,EAAKzM,GAAIoF,YAAWzG,WAIrC08B,EAAQ,CAAE9oB,MAAK5T,UAGrB,CCh+BO,SAAS88B,GAAiBzpB,GAC/B,MAAM1S,EAAQ0G,OAAOC,KAAK+L,GAAMvO,KAAKi4B,GAAO,GAAEA,KAAK1pB,EAAK0pB,OAAM92B,KAAK,KACnE,OAAOtF,EAAM8G,OAAS,EAAK,IAAG9G,IAAU,EAC1C,CC2FAqY,eAAegkB,GACbj9B,EAAWk9B,GAEsB,sFAD7Bj9B,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAMqF,QAAeoW,EAAAA,EAAAA,IAAQ,iBAAkBuhB,GAC/C,IAAK33B,EACH,OAGF,MAAM,KAAE43B,EAAI,QAAEC,EAAO,MAAExhB,GAAUrW,EAQjC,OANAvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASq9B,EAAAA,EAAAA,IAAer9B,EAAQm9B,EAAMl9B,GACtCD,GAASs9B,EAAAA,EAAAA,IAAet9B,EAAQu9B,EAAAA,GAAAA,SAAsBt9B,GACtDD,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,QACtDxY,EAAAA,EAAAA,IAAUpD,GAEHo9B,CACT,CAqUAnkB,eAAeukB,GACbx9B,EAAWk9B,EAAsCO,EAAkBC,GAEnE,sFADIz9B,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAMqF,QAAeoW,EAAAA,EAAAA,IAAQ,wBAAyB,CACpDuhB,eAAcO,cAAaC,eAE7B,IAAKn4B,EACH,OAGF,MAAM,GAAEjE,EAAE,gBAAEq8B,GAAoBp4B,EAChCvF,GAAS+I,EAAAA,EAAAA,MAET/I,GAAS49B,EAAAA,EAAAA,IAAiB59B,EAAQsB,EAAIrB,GAClC09B,GACF39B,GAAS69B,EAAAA,EAAAA,IAAsB79B,EAAQ29B,EAAiB19B,GACxDD,GAASs9B,EAAAA,EAAAA,IAAet9B,EAAQu9B,EAAAA,GAAAA,SAAsBt9B,IAEtDD,GAASs9B,EAAAA,EAAAA,IAAet9B,EAAQu9B,EAAAA,GAAAA,SAAsBt9B,IAExDmD,EAAAA,EAAAA,IAAUpD,EACZ,EF5aAS,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,UAAE+F,EAAS,OAAEo3B,EAAM,MAAE79B,GAAQC,EAAAA,EAAAA,OAAsBS,EAEzD,OAAQm9B,EAAOt8B,MACb,IAAK,UACHd,EAAQ47B,eAAe,CAAEC,QAASuB,EAAOx6B,KAAMrD,UAC/C,MACF,IAAK,MAAO,CACV,MAAM,IAAE4T,GAAQiqB,EAChBp9B,EAAQi8B,QAAQ,CAAE9oB,MAAK5T,UACvB,KACF,CACA,IAAK,WAAY,CACf,MAAM8N,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,IAAK8N,EACH,OAGG0uB,GAAqBz8B,EAAQU,EAASqN,EAAMrH,EAAWo3B,EAAOxqB,UAAM/S,EAAWN,GACpF,KACF,CACA,IAAK,cACHS,EAAQq9B,cAAc,CAAEhyB,OAAQ+xB,EAAO/xB,OAAQ9L,UAC/C,MACF,IAAK,eAAgB,CACnB,MAAMkiB,EAAOniB,EAAO0X,eAAgB0K,EAAAA,EAAAA,IAAWpiB,EAAQA,EAAO0X,oBAAiBnX,EAC/E,IAAK4hB,EACH,OAEFzhB,EAAQ0nB,WAAW,CACjB9U,KAAM,CACJumB,YAAa1X,EAAK0X,YAClBb,UAAW7W,EAAK6W,UAChBD,SAAU5W,EAAK4W,SACf3pB,OAAQ+S,EAAK7gB,IAEfrB,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM8N,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,IAAK8N,EACH,OAEF,MAAM,iBAAEiwB,GAAqBF,EAC7Bp9B,EAAQu9B,WAAW,CACjBD,mBAAkB79B,OAAQ4N,EAAKzM,GAAIoF,YAAWzG,UAEhD,KACF,CACA,IAAK,MAAO,CACV,MAAM8N,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,IAAK8N,EACH,OAEFrN,EAAQw9B,YAAY,CAClB/9B,OAAQ4N,EAAKzM,GACboF,YACAzG,UAEF,KACF,CACA,IAAK,OAAQ,CACX,MAAM8N,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,IAAK8N,EACH,OAGG0uB,GAAqBz8B,EAAQU,EAASqN,EAAMrH,OAAWnG,GAAW,EAAMN,GAC7E,KACF,CACA,IAAK,kBAAmB,CACtB,MAAM,MAAEW,EAAK,WAAEu9B,GAAeL,EAC9Bp9B,EAAQ09B,gBAAgB,CACtBx9B,QAAOu9B,aAAYz3B,YAAWzG,UAEhC,KACF,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEmP,GAAW0uB,EACnBp9B,EAAQ29B,iBAAiB,CAAE/8B,GAAI8N,EAAQnP,UACvC,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,IAAE4T,GAAQiqB,GACV,OAAE39B,IAAWE,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAC/D,IAAKE,EACH,OAEF,MAAM8E,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQuG,GAClD,IAAKzB,GAASmP,SAAU,OACxB,MAAMkqB,GAAQC,EAAAA,GAAAA,MACd79B,EAAQ89B,qBAAqB,CAC3B3qB,MAAKK,MAAOjP,GAASmP,SAAUkqB,QAAOG,WAAYX,EAAOx6B,KAAMrD,UAEjE,KACF,CAEA,IAAK,UAAW,CACd,MAAM,IAAE4T,GAAQiqB,EACV/vB,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,IAAK8N,EACH,OAEF,MAAM9I,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQ+N,EAAKzM,GAAIoF,GACnD,IAAKzB,EACH,OAEF,MAAMiP,EAAQjP,EAAQkP,UAAYlP,EAAQmP,SAC1C,IAAKF,EACH,OAEF,MAAMoqB,GAAQC,EAAAA,GAAAA,MACd79B,EAAQg+B,eAAe,CACrB7qB,MACAK,QACAyqB,OAAQ5wB,EAAKzM,GACbg9B,QACAG,WAAYX,EAAOx6B,KACnBrD,UAEF,KACF,CACA,IAAK,UAAW,CACd,MAAM,IAAE4T,GAAQiqB,EACV/vB,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,IAAK8N,EACH,OAEFrN,EAAQk+B,kBAAkB,CACxBz+B,OAAQ4N,EAAKzM,GACboF,YACAm4B,SAAUf,EAAOe,SACjBhrB,MACA5T,UAEF,KACF,EAAC,KAILQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,QAAE47B,EAAO,OAAEp8B,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,EACjDoN,EAAO5N,GAASqC,EAAAA,EAAAA,IAAWxC,EAAQG,IAAUmL,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvE0B,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAE5D,IAAK8N,IAASpM,EACZ,OAGF,MAAM,SAAEvB,GAAauB,EACrBjB,EAAQqH,gBAAgB,CAAErB,eAAWnG,EAAWN,UAChDS,EAAQ+f,oBAAoB,CAAExgB,UAEzBq8B,GACHvuB,EAAM3N,EAAUm8B,GAASp1B,EAAAA,EAAAA,IAAmBnH,EAAQ+N,EAAKzM,GAAIlB,IAAWogB,EAAAA,EAAAA,IAAaxgB,EAAQ+N,EAAKzM,IACnG,KAGHb,EAAAA,EAAAA,IAAiB,cAAcwY,MAAOjZ,EAAQU,EAASC,KACrD,MAAM,OAAER,EAAM,MAAEF,GAAQC,EAAAA,EAAAA,OAAsBS,GACxC,cAAE+W,GAAkB1X,EACpB+N,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACjCw7B,EAAM/jB,IAAiBonB,EAAAA,EAAAA,IAAc9+B,EAAQG,GAC9CuX,GAAkB3J,GAAS0tB,SAIX9f,EAAAA,EAAAA,IAAQ,iBAAkB8f,EAAIn6B,GAAIm6B,EAAIvT,cAK3DloB,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS++B,EAAAA,EAAAA,IAAqB/+B,EAAQy7B,EAAIn6B,KAC1C8B,EAAAA,EAAAA,IAAUpD,GACLs8B,GAAevuB,EAAMxM,EAAAA,GAAgB,cAAUhB,GAAWigB,EAAAA,EAAAA,IAAaxgB,EAAQG,IAAQ,KAG9FM,EAAAA,EAAAA,IAAiB,qBAAqBwY,UACpC,MAAM,gBAAE0f,GAAoB34B,EAAOg/B,cACnC,GAAIrG,IAAmBhsB,EAAAA,EAAAA,MAAkBgsB,EA3LR,GA4L/B,OAGF,MAAMpzB,QAAeoW,EAAAA,EAAAA,IAAQ,sBAC7B,IAAKpW,EACH,OAGF,MAAM,IAAEoE,EAAG,MAAEiS,GAAUrW,EAEvBvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OACtD5b,EAAS,IACJA,EACHg/B,cAAe,IACVh/B,EAAOg/B,cACVxO,QAAS7mB,EACTgvB,iBAAiBhsB,EAAAA,EAAAA,SAGrBvJ,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkBwY,MAAOjZ,EAAQU,EAASC,KACzD,MAAM,OACJR,EAAM,SAAEiqB,EAAQ,MAAExpB,EAAK,OAAEmO,EAAM,MAC/B9O,GAAQC,EAAAA,EAAAA,OACNS,EAEJ,IAAIs+B,GAAgBj+B,EAAAA,EAAAA,IAAehB,EAAQC,GAAOy3B,WAAWC,WAAWvN,GACxE,IAAsB,IAAlB6U,EAAJ,CAIA,QAAsB1+B,IAAlB0+B,EAA6B,CAC/B,MAAQ9c,KAAM+c,EAAS,KAAEnxB,SAAe4N,EAAAA,EAAAA,IAAQ,iBAAkB,CAAEyO,cAAe,CAAC,EAEpF,GADApqB,GAAS+I,EAAAA,EAAAA,OACJm2B,IAAcnxB,EAGjB,OAFA/N,EAASw3B,GAAyBx3B,EAAQoqB,GAAU,EAAOnqB,QAC3DmD,EAAAA,EAAAA,IAAUpD,GAIZA,GAASuc,EAAAA,EAAAA,IAASvc,EAAQ,CAAE,CAACk/B,EAAU59B,IAAK49B,IAC5Cl/B,GAASwc,EAAAA,EAAAA,IAASxc,EAAQ,CAAE,CAAC+N,EAAKzM,IAAKyM,IACvCkxB,EAAgB,CACd39B,GAAI49B,EAAU59B,GACdV,MAAO,GACPmO,OAAQ,GACRowB,cAAU5+B,EACV6+B,aAAa,EACbpwB,QAAS,GACTqwB,UAAW,GAGbr/B,EAASw3B,GAAyBx3B,EAAQoqB,EAAU6U,EAAeh/B,IACnEmD,EAAAA,EAAAA,IAAUpD,EACZ,EAEIY,IAAUq+B,EAAcr+B,OAAUq+B,EAAcG,cAI/C7D,IAAsB,MAykB7BtiB,eAAsDjZ,EAAW,GAYlB,IAZkB,SAC/DoqB,EAAQ,cACR6U,EAAa,OACb9+B,EAAM,MACNS,EAAK,OACLmO,GAOD,wFAAM9O,GAAQC,EAAAA,EAAAA,OAAkB,EAC/BF,GAAS+I,EAAAA,EAAAA,MACT,MAAM0yB,GAAMrZ,EAAAA,EAAAA,IAAWpiB,EAAQi/B,EAAc39B,IACvCyM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAKs7B,IAAQ1tB,EACX,OAGF,MAAMuxB,EAAwBL,EAAcr+B,QAAUA,EAEtDZ,EAASw3B,GADTx3B,EAAS43B,GAA2B53B,GAAQ,EAAMC,GACRmqB,EAAU,IAC/C6U,EACHr+B,WACI0+B,GAAyB,CAAEvwB,YAAQxO,EAAWyO,QAAS,KAC1D/O,IACHmD,EAAAA,EAAAA,IAAUpD,GAEV,MAAMuF,QAAeoW,EAAAA,EAAAA,IAAQ,wBAAyB,CACpD8f,MACA1tB,OACAnN,QACAmO,OAAQuwB,OAAwB/+B,EAAYwO,IAG9C/O,GAAS+I,EAAAA,EAAAA,MACT,MAAMw2B,GAAmBv+B,EAAAA,EAAAA,IAAehB,EAAQC,GAAOy3B,WAAWC,WAAWvN,GAE7E,GADApqB,EAAS43B,GAA2B53B,GAAQ,EAAOC,IAC9CsF,IAAWg6B,GAAoB3+B,IAAU2+B,EAAiB3+B,MAE7D,YADAwC,EAAAA,EAAAA,IAAUpD,GAIZ,MAAMw/B,EAAa,IAAIC,KAAKF,EAAiBvwB,SAAW,IAAIjK,KAAKuO,GAASA,EAAKhS,MACzEo+B,EAAan6B,EAAOyJ,QAAQhK,QAAQsO,IAAUksB,EAAWthB,IAAI5K,EAAKhS,MAExEtB,EAASw3B,GAAyBx3B,EAAQoqB,EAAU,IAC/CmV,EACHI,KAAMp6B,EAAOo6B,KACbN,UAAWnzB,KAAKC,MAA2B,IAAnB5G,EAAO85B,aAC3BK,EAAWh4B,QAAU,CAAEk4B,UAAWr6B,EAAOq6B,cACzCr6B,EAAO45B,UAAY,CAAEA,SAAU55B,EAAO45B,UAC1CC,YAAa75B,EAAOyJ,QAAQtH,OAAS,GAAKV,QAAQzB,EAAOqf,YACzD5V,QAAqC,KAA5BuwB,EAAiBxwB,QAAiBwwB,EAAiBxwB,SAAWxJ,EAAOqf,WAC1Erf,EAAOyJ,SACNuwB,EAAiBvwB,SAAW,IAAIiN,OAAOyjB,GAC5C3wB,OAAQ2wB,EAAWh4B,OAASnC,EAAOqf,WAAa,IAC/C3kB,IAEHmD,EAAAA,EAAAA,IAAUpD,EACZ,CAroBI6/B,CAAgB7/B,EAAQ,CACtBoqB,WACA6U,cAAeA,EACf9+B,SACAS,QACAmO,UACC9O,EAAM,GAtCX,CAuCE,KAGJQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,MACJC,EAAK,WAAEu9B,EAAU,UAAEz3B,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OACpCS,EACEoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,IAAK8N,EACH,OAEF,MAAM9I,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQ+N,EAAKzM,GAAIoF,GACnD,IAAKzB,EACH,OAGF,MAAM66B,GAAY1d,EAAAA,EAAAA,IAAWpiB,EAAQiF,EAAQkP,UAAYlP,EAAQmP,UAC5D0rB,GAILp/B,EAAQq/B,kBAAkB,CACxBz8B,KAAO,IAAGw8B,EAAUE,UAAW,GAAG5V,YAAYxpB,IAC9CT,OAAQg+B,EAAapwB,EAAKzM,QAAKf,EAC/BN,SAEc,KAGlBQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,GACJW,EAAE,QAAE2+B,EAAO,SAAEld,EAAQ,YAAE7C,EAAW,MAClCjgB,GAAQC,EAAAA,EAAAA,OACNS,EACEgB,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,IAAuBL,EAC1B,OAGF,MAAM,OAAEnB,EAAM,SAAEC,GAAauB,EAEvBoM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1Bme,GAAanX,EAAAA,EAAAA,IAAmBnH,EAAQG,EAAQC,GACtD,IAAIse,EAEAJ,GAAcle,IAAamB,EAAAA,KAC7Bmd,GAAkBD,EAAAA,EAAAA,IAAyBze,EAAQG,EAAQC,IAG7DM,EAAQqH,gBAAgB,CAAErB,eAAWnG,EAAWN,UAChDS,EAAQ+f,oBAAoB,CAAExgB,WAEzB0b,EAAAA,EAAAA,IAAQ,sBAAuB,CAClC5N,OACAmyB,SAAU5+B,EACV2+B,UACA3hB,aACAI,kBACA6B,QAAQC,EAAAA,EAAAA,IAAaxgB,EAAQG,GAC7B4iB,WACAod,aAAcjgB,GACd,KAGJzf,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,SAAEypB,EAAQ,MAAE/Z,EAAK,MAAEpQ,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvD,IAAIs+B,GAAgBj+B,EAAAA,EAAAA,IAAehB,EAAQC,GAAOy3B,WAAWC,WAAWvN,GAEnE6U,KAIA5uB,GAASnE,KAAKC,MAAQ8yB,EAAcI,YAEzCJ,EAAgB,CACd39B,GAAI29B,EAAc39B,GAClBV,MAAO,GACPmO,OAAQ,GACRowB,cAAU5+B,EACV6+B,aAAa,EACbpwB,QAAS,GACTqwB,UAAW,GAGbr/B,EAASw3B,GAAyBx3B,EAAQoqB,EAAU6U,EAAeh/B,IACnEmD,EAAAA,EAAAA,IAAUpD,IAAO,KAGnBS,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5C+2B,GAAa12B,EAAAA,EAAAA,IAAehB,EAAQC,GAAOy3B,WAAWC,WAE5DrwB,OAAOC,KAAKmwB,GAAYxsB,SAASkf,IAC/B1pB,EAAQ0/B,eAAe,CAAEhW,WAAUnqB,SAAQ,GAC3C,KAGJQ,EAAAA,EAAAA,IAAiB,YAAYwY,MAAOjZ,EAAQU,EAASC,KACnD,MAAM,MAAEuT,EAAK,MAAEmsB,GAAU1/B,EAEzB,IAAI86B,GAAMrZ,EAAAA,EAAAA,IAAWpiB,EAAQkU,GACxBunB,IAGAA,EAAInV,gBAAgB3K,EAAAA,EAAAA,IAAQ,gBAAiB,CAAEra,GAAIm6B,EAAIn6B,GAAI4mB,WAAYuT,EAAIvT,aAChFloB,GAAS+I,EAAAA,EAAAA,MACT0yB,GAAMrZ,EAAAA,EAAAA,IAAWpiB,EAAQkU,GACrBunB,EAAInV,UAAUga,iBAAiB3kB,EAAAA,EAAAA,IAAQ,iBAAkB8f,EAAIn6B,GAAIm6B,EAAIvT,kBAEnEvM,EAAAA,EAAAA,IAAQ,WAAY,CACxB8f,MACA8E,WAAYF,IACZ,KAGJ5/B,EAAAA,EAAAA,IAAiB,wBAAwBwY,MAAOjZ,EAAQU,EAASC,KAC/D,MAAM,IACJkT,EAAG,MAAEK,EAAK,MAAEoqB,EAAK,WAAEG,EAAU,MAC7Bx+B,GAAQC,EAAAA,EAAAA,OACNS,EAEE86B,GAAMrZ,EAAAA,EAAAA,IAAWpiB,EAAQkU,GAC/B,IAAKunB,EAAK,OAEV,KAAKpnB,EAAAA,EAAAA,IAAmBrU,EAAQkU,GAY9B,OAXAlU,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsU,gBAAiB,CACfJ,QACA1S,KAAM,SACN+S,UAAW,CACTC,OAAQ,uBACR7T,aAGHV,QACHmD,EAAAA,EAAAA,IAAUpD,GAIZ,MAAMwgC,QAAmB7kB,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE9H,MAAK4nB,MAAK6C,UAChEkC,IAILxgC,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BygC,OAAQ,CACN5sB,IAAK2sB,EACLtsB,QACAuqB,eAEDx+B,IACHmD,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkBwY,MAAOjZ,EAAQU,EAASC,KACzD,MAAM,IACJkT,EAAG,MAAEK,EAAK,OAAEyqB,EAAM,MAAEL,EAAK,SAAEvb,EAAQ,WAAE0b,EAAU,cAAEiC,EAAa,WAAEH,EAAU,MAC1EtgC,GAAQC,EAAAA,EAAAA,OACNS,EAEE86B,GAAMrZ,EAAAA,EAAAA,IAAWpiB,EAAQkU,GAC/B,IAAKunB,EAAK,OACV,MAAMjY,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQ2+B,GAChC,IAAKnb,EAAM,OAEX,KAAKnP,EAAAA,EAAAA,IAAmBrU,EAAQkU,GAY9B,OAXAlU,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsU,gBAAiB,CACfJ,QACA1S,KAAM,SACN+S,UAAW,CACTC,OAAQ,iBACR7T,aAGHV,QACHmD,EAAAA,EAAAA,IAAUpD,GAIZ,MAAM2B,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GAC5D,IAAK0B,EACH,OAGF,MAAM,OAAExB,EAAM,SAAEC,GAAauB,EACvBg/B,EAAQxgC,IAAUgH,EAAAA,EAAAA,IAAmBnH,EAAQG,EAAQC,GACrDmgB,GAASC,EAAAA,EAAAA,IAAaxgB,EAAQG,GAC9BoF,QAAeoW,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C9H,MACA4nB,MACAjY,OACA8a,QACAvb,WACAlD,iBAAkB8gB,QAASpgC,EAC3BH,WACAsgC,gBACAH,aACAhgB,WAEF,IAAKhb,EACH,OAGF,MAAQsO,IAAK2sB,EAAU,QAAEP,GAAY16B,EAErCvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BygC,OAAQ,CACN5sB,IAAK2sB,EACLtsB,QACA+rB,UACApgB,iBAAkB8gB,QAASpgC,EAC3BH,WACAq+B,eAEDx+B,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkBwY,MAAOjZ,EAAQU,EAASC,KACzD,MAAM,MACJuT,EAAK,OAAEyqB,EAAM,SAAE5b,EAAQ,iBAAElD,EAAgB,QAAEogB,EAAO,SAAE7/B,EAAQ,MAC5DH,GAAQC,EAAAA,EAAAA,OACNS,EAEE86B,GAAMrZ,EAAAA,EAAAA,IAAWpiB,EAAQkU,GAC/B,IAAKunB,EAAK,OACV,MAAMjY,GAAOhhB,EAAAA,EAAAA,IAAWxC,EAAQ2+B,GAChC,IAAKnb,EAAM,OAEX,MAAMjD,GAASC,EAAAA,EAAAA,IAAaxgB,EAAQ2+B,SAEfhjB,EAAAA,EAAAA,IAAQ,iBAAkB,CAC7C8f,MACAjY,OACAT,WACAlD,mBACAzf,WACA6/B,UACA1f,YAIA7f,EAAQkgC,YAAY,CAAE3gC,SACxB,KAGFQ,EAAAA,EAAAA,IAAiB,mBAAmB,CAACT,EAAQU,EAASC,KACpD,MAAM,IACJ86B,EAAG,KAAEnoB,EAAI,WAAEmrB,GACT99B,GAEJgb,EAAAA,EAAAA,IAAQ,kBAAmB,CACzB8f,MACAnoB,OACAmrB,cACA,KAGJh+B,EAAAA,EAAAA,IAAiB,eAAe,CAACT,EAAQU,EAASC,KAChD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAElD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BygC,YAAQlgC,GACPN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EAChCiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAK2B,EAAS6+B,QAAQ5sB,IAEtB,OAAO7R,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BygC,OAAQ,IACH7+B,EAAS6+B,OACZI,KAAMlgC,EAAQkgC,OAEf5gC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsU,qBAAiB/T,GAChBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,MAAEuT,EAAK,MAAEjU,GAAQC,EAAAA,EAAAA,OAAsBS,GACvC,cAAEmgC,GAAkB9gC,EAEpB+gC,EAAmB,IAAItB,IAAIqB,GACjCC,EAAiBC,IAAI9sB,GAErBlU,EAAS,IACJA,EACH8gC,cAAeG,MAAMzjB,KAAKujB,IAG5B,MAAMn/B,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAI2B,EAAS0S,iBAAiBC,UAAW,CACvC,MAAM,OAAEC,EAAQ7T,QAASugC,GAAoBt/B,EAAS0S,gBAAgBC,UAEtE7T,EAAQ8T,GAAQ0sB,EAClB,CAEAlhC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsU,qBAAiB/T,GAChBN,IAEHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,kBAAkBwY,MAAOjZ,EAAQU,EAASC,KACzD,MAAM,KAAE2Q,GAAS3Q,GAAW,CAAC,QACvBi7B,GAAe57B,EAAQsR,EAAK,KAGpC7Q,EAAAA,EAAAA,IAAiB,mBAAmBwY,MAAOjZ,EAAQU,EAASC,KAC1D,MAAM,MAAEuT,EAAK,eAAEynB,EAAc,UAAED,GAAc/6B,EAEvC86B,GAAMrZ,EAAAA,EAAAA,IAAWpiB,EAAQkU,GAE1BunB,SAECD,GAAgBx7B,EAAQy7B,EAAKC,EAAWC,EAAe,KA6B/Dl7B,EAAAA,EAAAA,IAAiB,iBAAiB,CAACT,EAAQU,EAASC,KAClD,MAAM,OACJR,EAAM,IAAEs7B,EAAG,IAAE5nB,EAAG,WAAE0sB,EAAU,SAAEngC,EAAQ,MACtCH,GAAQC,EAAAA,EAAAA,OACNS,EACE+/B,GAAiBjF,EACvB,IAAKiF,IAAkB1gC,EAAO67B,WAAWC,KAAKL,EAAIn6B,IAChD,OAAOU,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmhC,0BAA2B,CACzB1F,MACAlnB,UAAW,CACTC,OAAQ,gBACR7T,aAGHV,GAEL,MAAMq+B,GAAQC,EAAAA,GAAAA,MACd79B,EAAQ2C,SAAS,CAAE/B,GAAInB,EAAQC,WAAUH,UACzCS,EAAQg+B,eAAe,CACrB7qB,MACA8qB,OAAQx+B,EACR+T,MAAOwsB,EAAgBvgC,EAASs7B,EAAIn6B,GACpCg9B,QACAG,WAAY,GACZiC,gBACAH,aACAtgC,SAGc,KAGlBQ,EAAAA,EAAAA,IAAiB,2BAA2BwY,MAAOjZ,EAAQU,EAASC,KAClE,MAAM,eAAEg7B,EAAc,MAAE17B,GAAQC,EAAAA,EAAAA,OAAsBS,GAChD,0BAAEwgC,IAA8BngC,EAAAA,EAAAA,IAAehB,EAAQC,IAEvD,IAAEw7B,EAAG,UAAElnB,GAAc4sB,EAE3BnhC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BmhC,+BAA2B5gC,GAC1BN,IACHmD,EAAAA,EAAAA,IAAUpD,GAEV,MAAMohC,GAAUhf,EAAAA,EAAAA,IAAWpiB,EAAQy7B,EAAIn6B,IACvC,GAAK8/B,UAEC5F,GAAgBx7B,EAAQohC,GAAS,EAAMzF,GACzCpnB,GAAW,CACb,MAAM,OAAEC,EAAQ7T,QAAS0gC,GAAkB9sB,EAE3C7T,EAAQ8T,GAAQ6sB,EAClB,MAGF5gC,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BmhC,+BAA2B5gC,GAC1BN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,0BAA0B,CAACT,EAAQU,EAASC,KAC3D,MAAM,IACJ86B,EAAG,OAAEz2B,EAAM,WAAEu7B,EAAU,MAAEtgC,GAAQC,EAAAA,EAAAA,OAC/BS,EACE2zB,GAAgBj0B,EAAAA,EAAAA,IAAyBL,EAAQC,IAAQE,OAEzDmhC,EAAmB7F,EAAI8F,UAAUv8B,QAAQxD,GACpC,SAATA,GAAmBwD,EAAOmF,SAAS3I,KAGhC8/B,EAAiB55B,QAUtB1H,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BwhC,yBAA0B,CACxB/F,MACAz2B,OAAQs8B,EACRf,eAEDtgC,IACHmD,EAAAA,EAAAA,IAAUpD,IAhBRU,EAAQ+gC,cAAc,CACpBthC,OAAQm0B,GAAiBmH,EAAIn6B,GAC7Bm6B,MACA8E,aACAtgC,SAYa,KAGnBQ,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BwhC,8BAA0BjhC,GACzBN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqBwY,MAAOjZ,EAAQU,EAASC,KAC5D,MAAM,OACJR,EAAM,SAAE0+B,EAAQ,UAAEn4B,EAAS,IAAEmN,EAAG,MAAE5T,GAAQC,EAAAA,EAAAA,OACxCS,EAEEoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,oBAAqB,CAChD5N,OACA8wB,WACAn4B,cAGGnB,IACLvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9Bg8B,QAAS,CACPnoB,MACAiqB,OAAQ,CACNe,WACAn4B,YACAvG,OAAQ4N,EAAKzM,MAGhBrB,IACHmD,EAAAA,EAAAA,IAAUpD,GACV+7B,GAAoB/7B,EAAQU,EAASmT,EAAKtO,EAAQtF,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,oBAAoBwY,MAAOjZ,EAAQU,EAASC,KAC3D,MAAM,eAAEg7B,EAAc,MAAE17B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASo6B,SAAS8B,OAAQ,OAC/B,MAAM,OACJA,EAAM,IAAEjqB,GACNjS,EAASo6B,SACP,OAAE77B,EAAM,UAAEuG,EAAS,SAAEm4B,GAAaf,EAElC/vB,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,mBAAoB,CAC/C5N,OACArH,YACAm4B,WACAlD,mBAEGp2B,GAELw2B,GADA/7B,GAAS+I,EAAAA,EAAAA,MACmBrI,EAASmT,EAAKtO,EAAQtF,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,sBAAsBwY,MAAOjZ,EAAQU,EAASC,KAC7D,MAAM,IAAEkT,EAAG,MAAE5T,GAAQC,EAAAA,EAAAA,OAAsBS,EAErC4E,QAAeoW,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE9H,QAChDtO,IACLvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9Bg8B,QAAS,CACPnoB,QAED5T,IACHmD,EAAAA,EAAAA,IAAUpD,GACV+7B,GAAoB/7B,EAAQU,EAASmT,EAAKtO,EAAQtF,GAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqBwY,MAAOjZ,EAAQU,EAASC,KAC5D,MAAM,eAAEg7B,EAAc,MAAE17B,GAAQC,EAAAA,EAAAA,OAAsBS,EAChDiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASo6B,SAASnoB,IAAK,OAC5B,MAAM,IAAEA,GAAQjS,EAASo6B,QAEnBz2B,QAAeoW,EAAAA,EAAAA,IAAQ,oBAAqB,CAAE9H,MAAK8nB,mBACpDp2B,GAELw2B,GADA/7B,GAAS+I,EAAAA,EAAAA,MACmBrI,EAASmT,EAAKtO,EAAQtF,EAAM,KAG1DQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5Bg8B,aAASz7B,GACRN,EAAM,I,UGzzBXQ,EAAAA,EAAAA,IAAiB,oBAAoBwY,UACnC,MAAM1T,QAAeoW,EAAAA,EAAAA,IAAQ,mBACxBpW,IAILvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS0hC,EAAAA,EAAAA,IAAgB1hC,EAAQ,CAAE2hC,YAAap8B,EAAOo8B,cACvD3hC,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAE6hC,KAAMt8B,EAAOs8B,QACpDz+B,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,iBAAiBwY,MAAOjZ,EAAQU,EAASC,KACxD,MAAM,gBAAEmhC,EAAe,UAAEC,GAAcphC,EAEvCX,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAEmZ,WAAW,EAAMtC,WAAOtW,KAC/D6C,EAAAA,EAAAA,IAAUpD,GAEV,MAAMgiC,QAAkBrmB,EAAAA,EAAAA,IAAQ,gBAAiBmmB,GAEjD9hC,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAEmZ,WAAW,KAClD/V,EAAAA,EAAAA,IAAUpD,GAENgiC,GACFD,GACF,KAGFthC,EAAAA,EAAAA,IAAiB,iBAAiBwY,MAAOjZ,EAAQU,EAASC,KACxD,MAAM,gBAAEmhC,EAAe,UAAEC,GAAcphC,EAEvCX,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAEmZ,WAAW,EAAMtC,WAAOtW,KAC/D6C,EAAAA,EAAAA,IAAUpD,GAEV,MAAMgiC,QAAkBrmB,EAAAA,EAAAA,IAAQ,gBAAiBmmB,GAEjD9hC,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAEmZ,WAAW,KAClD/V,EAAAA,EAAAA,IAAUpD,GAENgiC,GACFD,GACF,KAGFthC,EAAAA,EAAAA,IAAiB,kBAAkBwY,MAAOjZ,EAAQU,EAASC,KACzD,MAAM,gBACJmhC,EAAe,SAAEG,EAAQ,KAAEJ,EAAI,MAAEK,EAAK,UAAEH,GACtCphC,EAEJX,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAEmZ,WAAW,EAAMtC,WAAOtW,KAC/D6C,EAAAA,EAAAA,IAAUpD,GAEV,MAAMgiC,QAAkBrmB,EAAAA,EAAAA,IAAQ,iBAAkBmmB,EAAiBG,EAAUJ,EAAMK,GAEnFliC,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAEmZ,WAAW,KAClD/V,EAAAA,EAAAA,IAAUpD,GAENgiC,GACFD,GACF,KAGFthC,EAAAA,EAAAA,IAAiB,uBAAuBwY,MAAOjZ,EAAQU,EAASC,KAC9D,MAAM,gBACJmhC,EAAe,MAAEI,EAAK,UAAEH,GACtBphC,EAEJX,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAEmZ,WAAW,EAAMtC,WAAOtW,KAC/D6C,EAAAA,EAAAA,IAAUpD,GAEV,MAAMgiC,QAAkBrmB,EAAAA,EAAAA,IAAQ,sBAAuBmmB,EAAiBI,GAExEliC,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAEmZ,WAAW,EAAOgpB,4BAAwB5hC,KACjF6C,EAAAA,EAAAA,IAAUpD,GAENgiC,GACFD,GACF,KAGFthC,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,KAAEyhC,GAASzhC,GAEZgb,EAAAA,EAAAA,IAAQ,2BAA4BymB,EAAK,KAGhD3hC,EAAAA,EAAAA,IAAiB,mBAAoBT,IAC5B4hC,EAAAA,EAAAA,IAAoB5hC,EAAQ,CAAE6W,WAAOtW,OD7D9CE,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,YAAE88B,EAAW,SAAE4E,EAAQ,MAAEpiC,GAAQC,EAAAA,EAAAA,OAAsBS,EAEvDu8B,GAAeoF,EAAAA,EAAAA,IAA0BtiC,EAAQC,GACvD,GAAKi9B,EAIL,GAAI,SAAUA,EACPM,GAAsBx9B,EAAQk9B,EAAcO,EAAa4E,EAAUpiC,OACnE,CACL,MAAM8N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQk9B,EAAa/8B,QAC7C,IAAK4N,EACH,OAGGyvB,GAAsBx9B,EAAQ,CACjC+N,OACArH,UAAWw2B,EAAax2B,WACvB+2B,EAAa4E,EAAUpiC,EAC5B,MAGFQ,EAAAA,EAAAA,IAAiB,eAAewY,MAAOjZ,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,EACtC,IAAIy8B,EACJ,GAAI,SAAUz8B,EACZy8B,QAAgBH,GAAej9B,EAAQ,CAAE6gC,KAAMlgC,EAAQkgC,MAAQ5gC,OAC1D,CACL,MAAM8N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQW,EAAQR,QACxC,IAAK4N,EACH,OAGFqvB,QAAgBH,GAAej9B,EAAQ,CACrC+N,OACArH,UAAW/F,EAAQ+F,WAClBzG,EACL,CAEKm9B,IAILp9B,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuiC,EAAAA,EAAAA,IAAeviC,EAAQo9B,EAASn9B,GACzCD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BoY,QAAS,KACJpX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACjC8kB,aAAcv8B,EACd6hC,oBAAoB,EACpBrqB,OAAQ,YACRsqB,gBAAkB9hC,EAAgB8hC,kBAEnCxiC,IACHmD,EAAAA,EAAAA,IAAUpD,GAAO,KAuBnBS,EAAAA,EAAAA,IAAiB,cAAcwY,MAAOjZ,EAAQU,EAASC,KACrD,MAAM,iBACJq9B,EAAgB,OAAE79B,EAAM,UAAEuG,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAC3CS,EACEoN,EAAO5N,IAAUqC,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1C,IAAKuG,IAAcs3B,IAAqBjwB,EACtC,OAGF,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,aAAc5N,EAAMiwB,GACjD,IAAKz4B,EACH,OAGFvF,GAAS+I,EAAAA,EAAAA,MACT,MAAM9D,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQ+N,EAAKzM,GAAIoF,GACnD1G,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,OAC7D5b,GAAS0iC,EAAAA,EAAAA,IAAW1iC,EAAQuF,EAAOo9B,QAAS19B,EAAShF,IACrDmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BoY,QAAS,KACJpX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACjCvB,WAAOtW,IAERN,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,gBAAgB,CAACT,EAAQU,EAASC,KACjD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClD,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BoY,QAAS,KACJpX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACjCuqB,aAASpiC,IAEVN,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,YAAEiiC,EAAW,MAAE3iC,GAAQC,EAAAA,EAAAA,OAAsBS,GAE7C,eAAEkiC,IAAmB7hC,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,SACnD,KAAE9E,GAASsvB,EAEjB,GAAuB,WAAnBC,EAA6B,CAC/B,MAAMC,GAAiBC,EAAAA,EAAAA,IAA6B/iC,EAAQC,GAC5D,IAAK6iC,EACH,QA0EN7pB,eACEjZ,EACAsT,EACAwvB,GAEA,sFADI7iC,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAMU,EAAQm8B,GAAiB,CAC7B,eAAgBzpB,EAAK0vB,WACrB,kBAAmB1vB,EAAK2vB,YACxB,iBAAkB3vB,EAAK4vB,WACvB,YAAa5vB,EAAK6vB,IAClB,oBAAqB7vB,EAAK8vB,IAC1B,wBAAyB9vB,EAAK+vB,UAG1B/sB,QAAiBF,MAAO,mCAAkCxV,IAAS,CACvE0iC,OAAQ,OACRV,YAAa,cACbW,QAAS,CACP,eAAgB,oCAChBC,cAAgB,UAASV,OAGvBv9B,QAAe+Q,EAASmtB,OAC9B,GAAIl+B,EAAOsR,MAAO,CAChB,MAAMA,GAAQ6sB,EAAAA,EAAAA,IAAen+B,EAAOsR,OAYpC,OAXA7W,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BoY,QAAS,KACJpX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACjCD,OAAQ,SACRtB,MAAO,IACFA,KAGN5W,QACHmD,EAAAA,EAAAA,IAAUpD,EAEZ,CACAA,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS2jC,EAAAA,EAAAA,IAAkB3jC,EAAQ,CACjCwB,KAAM+D,EAAO/D,KACbF,GAAIiE,EAAOjE,IACVrB,GACHD,GAASs9B,EAAAA,EAAAA,IAAet9B,EAAQu9B,EAAAA,GAAAA,SAAsBt9B,IACtDmD,EAAAA,EAAAA,IAAUpD,EACZ,CAtHS4jC,CAAsB5jC,EAAQsT,EAAMwvB,EAAgB7iC,EAC3D,MAAO,GAAuB,gBAAnB4iC,EAAkC,CAC3C,MAAMgB,GAAcC,EAAAA,EAAAA,IAA0B9jC,EAAQC,GACtD,IAAK4jC,EACH,QAoHN5qB,eACEjZ,EACAsT,EACAuwB,GAEA,sFADI5jC,GAAQC,EAAAA,EAAAA,OAAkB,EAE9B,MAAM2d,EAAS,CACbkmB,KAAM,CACJC,OAAQ1wB,EAAK0vB,WAAWlzB,QAAQ,OAAQ,IACxCm0B,iBAAkB3wB,EAAK2vB,YACvBiB,gBAAiB5wB,EAAK4vB,WACtBiB,cAAe7wB,EAAK6vB,IAAIrzB,QAAQ,OAAQ,MAGtC+D,EAAMuwB,EAAAA,IACR,+DACA,oDAEE9tB,QAAiBF,MAAMvC,EAAK,CAChCyvB,OAAQ,OACRC,QAAS,CACPc,OAAQ,mBACR,eAAgB,mBAChB,iBAAkBR,GAEpBS,KAAMhrB,KAAKC,UAAUsE,KAEjBtY,QAAe+Q,EAASmtB,OAE9B,GAAsB,OAAlBl+B,EAAO4S,OAAiB,CAE1B,MAAMtB,EAAQ,CAAE0M,YAAa,iBAY7B,OAXAvjB,GAAS+I,EAAAA,EAAAA,MACT/I,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BoY,QAAS,KACJpX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACjCD,OAAQ,SACRtB,MAAO,IACFA,KAGN5W,QACHmD,EAAAA,EAAAA,IAAUpD,EAEZ,CAEAA,GAAS+I,EAAAA,EAAAA,MACT/I,GAASukC,EAAAA,EAAAA,IAAuBvkC,EAAQ,CACtCwB,KAAM,OACNgjC,MAAOj/B,EAAO+N,KAAKkxB,OAClBvkC,GACHD,GAASs9B,EAAAA,EAAAA,IAAet9B,EAAQu9B,EAAAA,GAAAA,SAAsBt9B,IACtDmD,EAAAA,EAAAA,IAAUpD,EACZ,CAvKSykC,CAA2BzkC,EAAQsT,EAAMuwB,EAAa5jC,EAC7D,MAGFQ,EAAAA,EAAAA,IAAiB,mBAAmBwY,MAAOjZ,EAAQU,EAASC,KAC1D,MAAM,iBACJ+jC,EAAgB,gBAAEC,EAAe,kBAAEC,EAAiB,UAAEC,EAAS,MAC/D5kC,GAAQC,EAAAA,EAAAA,OACNS,EACEu8B,GAAeoF,EAAAA,EAAAA,IAA0BtiC,EAAQC,GACjD6kC,GAASC,EAAAA,EAAAA,IAAoB/kC,EAAQC,GACrC+kC,GAAgBC,EAAAA,EAAAA,IAAuBjlC,EAAQC,IAC/C,eAAE4iC,EAAc,kBAAEqC,IAAsBlkC,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACtE0qB,EAAoC,WAAnBD,GACnBE,EAAAA,EAAAA,IAA6B/iC,EAAQC,IAAS6jC,EAAAA,EAAAA,IAA0B9jC,EAAQC,GAEpF,KAAKi9B,GAAiB4F,GAAmBgC,GAAWjC,GAClD,OAGF,IAAIsC,EACJ,GAAI,SAAUjI,EACZiI,EAAsB,CACpBtE,KAAM3D,EAAa2D,UAEhB,CACL,MAAM9yB,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQk9B,EAAa/8B,QAC7C,IAAK4N,EACH,OAGFo3B,EAAsB,CACpBp3B,OACArH,UAAWw2B,EAAax2B,UAE5B,CAEA1G,GAASolC,EAAAA,EAAAA,IAAcplC,EAAQ,CAAEmY,OAAQ,WAAalY,IACtDmD,EAAAA,EAAAA,IAAUpD,GAEV,MAAM4iC,EAAc,CAClByC,KAAMV,EACNrxB,KAAyB,WAAnBuvB,GACFyC,EAAAA,EAAAA,IAAwBtlC,EAAQC,IAASslC,EAAAA,EAAAA,IAA6BvlC,EAAQC,UAE/D0b,EAAAA,EAAAA,IAAQ,kBAAmB,CAC9CuhB,aAAciI,EACdL,SACAlC,cACA4C,gBAAiBR,EACjBN,mBACAE,oBACAM,kBAAmBA,GAAmBO,MACtCZ,gBAOF7kC,GAAS+I,EAAAA,EAAAA,MACT/I,GAASolC,EAAAA,EAAAA,IAAcplC,EAAQ,CAAEmY,OAAQ,QAAUlY,GACnDD,GAASsY,EAAAA,EAAAA,IAAatY,EAAQC,IAC9BmD,EAAAA,EAAAA,IAAUpD,GAAO,KA0GnBS,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,KAAE+kC,EAAI,MAAEzlC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC5C,OAAO28B,EAAAA,EAAAA,IAAet9B,EAAQ0lC,QAAAA,EAAQnI,EAAAA,GAAAA,SAAsBt9B,EAAM,KAGpEQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,SAAEglC,EAAQ,MAAE1lC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAEtDiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAK2B,EAASC,aACd,OAAOG,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B6B,aAAc,IACTD,EAASC,gBACR8jC,GAAY,CAAE5jC,QAAQ,GAC1BwM,WAAYo3B,IAEb1lC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,oBAAoBwY,MAAOjZ,EAAQU,EAASC,KAC3D,MAAM,eACJilC,EAAc,WAAEC,EAAU,UAAE7D,EAAS,OAAE8D,EAAM,aAAEC,EAAY,SAAEC,EAAQ,MACrE/lC,GAAQC,EAAAA,EAAAA,OACNS,GAAW,CAAC,EAEhBD,EAAQulC,sBAER,MAAM1gC,QAAeoW,EAAAA,EAAAA,IAAQ,qBACxBpW,IAELvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,OAE7D5b,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9B6B,aAAc,CACZC,MAAOyD,EAAOzD,MACd8jC,iBACA7jC,QAAQ,EACR8jC,aACAG,WACAF,SACAC,eACA/D,cAED/hC,IACHmD,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwBwY,MAAOjZ,EAAQU,EAASC,KAC/D,MAAM,UAAEulC,EAAS,MAAEjmC,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EACvD4E,QAAeoW,EAAAA,EAAAA,IAAQ,qBAC7B,IAAKpW,EAAQ,OAEbvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,OAG7D,MAAMuqB,EAAQ5gC,EAAOzD,MAAMyiB,QAAQpZ,MAAMsZ,GAA6B,IAAlBA,EAAO2hB,SAE3DpmC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BqmC,iBAAkB,CAChBtkC,QAAQ,EACRmkC,YACAI,gBAAiBH,EAAMI,SACvBC,cAAeL,EAAMM,SAEtBxmC,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAClDX,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BqmC,iBAAkB,CAAEtkC,QAAQ,IAC3B9B,IACHmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,2BAA2BwY,MAAOjZ,EAAQU,EAASC,KAClE,MAAM,SAAEshC,EAAQ,MAAEhiC,GAAQC,EAAAA,EAAAA,OAAsBS,EAC1C4E,QAAeoW,EAAAA,EAAAA,IAAQ,gCAAiCsmB,GAE9DjiC,GAAS+I,EAAAA,EAAAA,MAKP/I,EAHGuF,EAEM,UAAWA,GACX6/B,EAAAA,EAAAA,IAAcplC,EAAQ,CAAE6W,MAAO,CAAE5R,QAASM,EAAOsR,MAAO6vB,MAAO,aAAgBzmC,IAE/EmlC,EAAAA,EAAAA,IAAcplC,EAAQ,CAAEklC,kBAAmB3/B,EAAQmgC,KAAMnI,EAAAA,GAAAA,UAAwBt9B,IAJjFmlC,EAAAA,EAAAA,IAAcplC,EAAQ,CAAE6W,MAAO,CAAE5R,QAAS,gBAAiByhC,MAAO,aAAgBzmC,IAO7FmD,EAAAA,EAAAA,IAAUpD,EAAO,I,4BE3anB,MAAM2mC,GAAoB,GAAKC,GAAAA,GACzBC,GAA0B,KAAOD,GAAAA,GAC1BE,GAAwB,KAAOF,GAAAA,GAC/BG,GAAwB,GAAKH,GAAAA,GACpCI,GAAqB,OAASJ,GAAAA,G,uCCsB7B,SAASK,GAA6BjnC,EAAqBknC,GAEhE,OAAOA,IADUlmC,EAAAA,EAAAA,IAAehB,GACV4Q,qBAAsBjI,EAAAA,EAAAA,MACxC3I,EAAOsQ,mBArBe62B,EAqBuBC,GAAAA,EAAAA,MAAiBxyB,OApBhDyyB,EAAAA,IACTn6B,KAAKo6B,IACVp6B,KAAKC,IAAkB,IAAdg6B,EAAoBJ,IACf,IAAdI,GAIAA,EAAcI,EAAAA,IACTr6B,KAAKo6B,IACVp6B,KAAKC,IAAkB,IAAdg6B,EAAoBJ,IACf,GAAdI,GAIGL,IAOH,GAtBN,IAA4BK,CAuB5B,CAwDO,SAASK,GACdxnC,EAAWG,EAAgB4oB,GAE3B,OAAOxG,EAAAA,GAAAA,IAAWviB,EAAQG,EAAQ4oB,OAAQxoB,GAAW,EACvD,CC1EA,IAAIknC,GAAqB,GAEzBhnC,EAAAA,EAAAA,IAAiB,0BAA0BwY,UACzC,MAAM1T,QAAeoW,EAAAA,EAAAA,IAAQ,yBACxBpW,IAKLA,EAAO2F,SAASw8B,IACVA,EAAkBC,iBACpBC,GAAAA,GAAmB,UAASF,EAAkBC,gBAAgBrmC,KAAMumC,EAAAA,GAAAA,SAElEH,EAAkBI,YACpBF,GAAAA,GAAmB,UAASF,EAAkBI,WAAWxmC,KAAMumC,EAAAA,GAAAA,QACjE,IAGF7nC,GAAS+I,EAAAA,EAAAA,MACT/I,EAAS,IACJA,EACH+nC,mBAAoBxiC,IAEtBnC,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,6BAA6B,CAACT,EAAQU,EAASC,KAC9D,MAAM,MACJmF,EAAK,EAAEohC,EAAC,EAAEc,EAAC,UAAEC,EAAS,WAAEC,EAAU,MAAEjoC,GAAQC,EAAAA,EAAAA,OAC1CS,EAEEwnC,EAAyB,CAC7B7mC,GAAImmC,KACJW,eAAgBtiC,EAChBohC,EAAGD,GAA6BjnC,EAAQknC,GApCV,GAoCeh6B,KAAKwZ,SAClB2hB,GAChCL,EAAGA,EAtC2B,GAsCvB96B,KAAKwZ,SAAuC2hB,GACnDJ,YACAC,cAGF,OAAOlmC,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsoC,wBAAyB,KAAKtnC,EAAAA,EAAAA,IAAehB,EAAQC,GAAOqoC,yBAA2B,GAAKH,IAC3FloC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,UACJ+F,EAAS,OAAEvG,EAAM,MAAE2F,EAAK,aAAEyiC,GACxB5nC,EAEEoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE3B4N,GAASjI,GAAS3F,IAAWH,EAAO0X,gBAIpCiE,EAAAA,EAAAA,IAAQ,uBAAwB,CACnC5N,OACArH,YACA8hC,SAAU1iC,EACV2iC,WAAYF,GACZ,KAGJ9nC,EAAAA,EAAAA,IAAiB,uBAAuB,CAACT,EAAQU,EAASC,KACxD,MAAM,OACJR,EAAM,UAAEuG,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OACzBS,EACE+nC,GAAWC,EAAAA,EAAAA,IAAsB3oC,EAAQG,GACzC8E,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQuG,GAE7CgiC,GAAazjC,KAAW2jC,EAAAA,EAAAA,IAAe3jC,IAE5CvE,EAAQmoC,eAAe,CACrB1oC,SACAuG,YACAgiC,WACAzoC,SACA,KAGJQ,EAAAA,EAAAA,IAAiB,kBAAkB,CAACT,EAAQU,EAASC,KACnD,MAAM,OAAER,EAAM,SAAEuoC,EAAQ,MAAEzoC,GAAQC,EAAAA,EAAAA,OAAsBS,EACxD,IAAI,UAAE+F,GAAc/F,EAEpB,MAAMoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAI8E,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQuG,GAEhD,IAAKqH,IAAS9I,EACZ,OAGF,MAAM6jC,EAAoB9hC,QAAQ/B,EAAQsE,aAAetE,EAAQ8jC,UAC3DC,EAA8BF,GAChCr+B,EAAAA,EAAAA,IAA0BzK,EAAQG,EAAQ8E,EAAQsE,WAAa,QAC/DhJ,EACJ0E,EAAU6jC,IACN70B,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ6oC,IAClC/jC,EACJyB,EAAYzB,GAAS3D,IAAMoF,EAE3B,MAAMuiC,GAAgBC,EAAAA,EAAAA,IAAiBjkC,GACjCkkC,EAAcF,EAAcG,MAAMC,IAAiBC,EAAAA,EAAAA,IAAeD,EAAcX,KAEhFa,EAAmBJ,EACrBF,EAAcjkC,QAAQqkC,KAAkBC,EAAAA,EAAAA,IAAeD,EAAcX,KAAa,IAAIO,EAAeP,GAEnGpzB,GAAQk0B,EAAAA,EAAAA,IAAuBxpC,GAE/BypC,EAAYF,EAAiBj9B,OAAOgJ,IAErCqG,EAAAA,EAAAA,IAAQ,eAAgB,CAAE5N,OAAMrH,YAAW+iC,cAEhD,MAAM,eAAE30B,GAAmB9U,EAAO+U,SAASC,MAErCpT,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAI6U,IAAmB40B,EAAAA,IAAqB,CAC1C,MAAMC,EAAqBR,GAAclpB,EAAAA,EAAAA,IAAKre,EAASM,gBAAiB,CAACwE,IAAc,IAClF9E,EAASM,gBACZ,CAACwE,GAAY,IACP9E,EAASM,gBAAgBwE,IAAc,GAC3C,CACEA,YACAgiC,cAIN1oC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BkC,gBAAiBynC,GAChB1pC,EACL,CAEA,ODrHK,SACLD,EAAWiF,EAAqBgkC,GAEhC,MAAMW,EAAmB3kC,EAAQwkC,WAAa,CAAEz6B,QAAS,IAGnDA,EAAU46B,EAAiB56B,QAAQjK,KAAKkoB,IAC5C4c,EAAAA,EAAAA,IAAiB5c,GAAW,IACvBA,EACH6c,iBAAavpC,EACbwjB,MAAOkJ,EAAQlJ,MAAQ,GACrBkJ,IACHjoB,QAAO,QAAC,MAAE+e,GAAO,SAAKA,EAAQ,CAAC,IAElCklB,EAAc/9B,SAAQ,CAACw9B,EAAUrrB,KAC/B,MAAM0sB,EAAgB/6B,EAAQsD,WAAW03B,IAAMV,EAAAA,EAAAA,IAAeU,EAAEtB,SAAUA,KACtEqB,GAAiB,EACnB/6B,EAAQ+6B,GAAiB,IACpB/6B,EAAQ+6B,GACXD,YAAazsB,EACb0G,MAAO/U,EAAQ+6B,GAAehmB,MAAQ,GAGxC/U,EAAQpJ,KAAK,CACX8iC,WACAoB,YAAazsB,EACb0G,MAAO,GAEX,IAGF,IAAI,gBAAEkmB,EAAkB,IAAOL,EAc/B,OAZIK,EAAgBviC,SAClBuiC,EAAkBA,EAAgBjlC,QAAO,QAAC,OAAEoK,GAAQ,SAAKA,IAAWpP,EAAO0X,aAAa,KAG1FuxB,EAAc/9B,SAASw9B,IACrB,MAAM,cAAEhxB,GAAkB1X,EAC1BiqC,EAAgBv7B,QAAQ,CACtBU,OAAQsI,EACRgxB,YACA,KAGG/oB,EAAAA,GAAAA,IAAkB3f,EAAQiF,EAAQ9E,OAAQ8E,EAAQ3D,GAAI,CAC3DmoC,UAAW,IACNG,EACH56B,UACAi7B,oBAGN,CCiESC,CAAmBlqC,EAAQiF,EAASwkC,EAAU,KAGvDhpC,EAAAA,EAAAA,IAAiB,sBAAsB,CAACT,EAAQU,EAASC,KACvD,MAAM,UAAE+F,EAAS,SAAEgiC,EAAQ,MAAEzoC,GAAQC,EAAAA,EAAAA,OAAsBS,EAErDiB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,IAAK2B,EAASM,gBAAgBwE,IAAY0iC,MAAMe,IAAWb,EAAAA,EAAAA,IAAea,EAAOzB,SAAUA,KACzF,OAAO1oC,EAGT,MAAMoqC,EAA4BxoC,EAASM,gBAAgBwE,GACxD1B,QAAQmlC,KAAYb,EAAAA,EAAAA,IAAea,EAAOzB,SAAUA,KAEjDiB,EAAqBS,EAA0B1iC,OAAS,IACzD9F,EAASM,gBACZ,CAACwE,GAAY0jC,IACXnqB,EAAAA,EAAAA,IAAKre,EAASM,gBAAiB,CAACwE,IAEpC,OAAO1E,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkC,gBAAiBynC,GAChB1pC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,sBAAsBwY,MAAOjZ,EAAQU,EAASC,KAC7D,MAAM,SAAE+nC,GAAa/nC,QAEAgb,EAAAA,EAAAA,IAAQ,qBAAsB,CAAE+sB,gBAKrD1oC,GAAS+I,EAAAA,EAAAA,OAEG+kB,QAKZ9tB,EAAS,IACJA,EACH8tB,OAAQ,IACH9tB,EAAO8tB,OACVuc,gBAAiB3B,KAGrBtlC,EAAAA,EAAAA,IAAUpD,IAXRU,EAAQ4pC,aAWO,KAGnB7pC,EAAAA,EAAAA,IAAiB,8BAA8B,CAACT,EAAQU,EAASC,KAC/D,MAAM,GAAEW,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OAAsBS,EAE1C,OAAOqB,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsoC,yBAAyBtnC,EAAAA,EAAAA,IAAehB,EAAQC,GAC7CqoC,yBAAyBtjC,QAAQmlC,GAAWA,EAAO7oC,KAAOA,KAC5DrB,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,gBAAgBwY,MAAOjZ,EAAQU,EAASC,KACvD,MAAM,OAAER,EAAM,UAAEuG,EAAS,SAAEgiC,GAAa/nC,EAClCoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1B8E,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQuG,GAClD,IAAKqH,IAAS9I,EACZ,OAGF,MAAM8J,EAAS9J,EAAQslC,UAAU3lB,WAC3Brf,QAAeoW,EAAAA,EAAAA,IAAQ,4BAA6B,CACxD+sB,WACA36B,OACArH,YACAqI,WAGGxJ,IAILvF,GAAS+I,EAAAA,EAAAA,MAELxD,EAAOqW,OAAOlU,SAChB1H,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqB5W,EAAOqW,MAAO,QAG/D5b,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQuG,EAAW,CACpD6jC,SAAUhlC,KAEZnC,EAAAA,EAAAA,IAAUpD,GAAO,KAGnBS,EAAAA,EAAAA,IAAiB,wBAAwB,CAACT,EAAQU,EAASC,KACzD,MAAM,IAAEgJ,EAAG,OAAExJ,GAAWQ,EAElBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE3B4N,IAIL4N,EAAAA,EAAAA,IAAQ,wBAAyB,CAAEhS,MAAKoE,QAAO,KAGjDtN,EAAAA,EAAAA,IAAiB,gCAAgC,CAACT,EAAQU,EAASC,KACjE,MAAM,OACJR,EAAM,SAAEqoC,EAAQ,EAAEtB,EAAC,EAAEc,EAAC,UAAEC,EAAS,WAAEC,EAAU,GAAE5mC,EAAE,MAAErB,GAAQC,EAAAA,EAAAA,OACzDS,EAEEoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE1ByB,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxC,GAAK8N,GAASnM,EAAS0mC,yBAAyBc,MAAMoB,GAAgBA,EAAYlpC,KAAOA,KACpFnB,IAAWH,EAAO0X,cAMvB,OAFAiE,EAAAA,EAAAA,IAAQ,+BAAgC,CAAE5N,OAAMy6B,cAEzCxmC,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BsoC,wBAAyB1mC,EAAS0mC,wBAAwBvjC,KAAKojC,GACzDA,EAAuB7mC,KAAOA,EACzB,IACF6mC,EACHjB,EAAGD,GAA6BjnC,EAAQknC,GACxCc,IACAC,YACAC,cAGGC,KAERloC,EAAM,KAGXQ,EAAAA,EAAAA,IAAiB,wBAAwBwY,MAAOjZ,EAAQU,EAASC,KAC/D,MAAM,OAAER,EAAM,SAAEkb,GAAa1a,EACvBoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EAAM,OAEX,MAAMxI,QAAeoW,EAAAA,EAAAA,IAAQ,uBAAwB,CAAE5N,OAAMsN,WAAUG,UAAWH,GAAY,OAAI9a,IAGlG,IAAKgF,IAAWA,EAAOT,SAAS4C,OAO9B,OALA1H,EAASwnC,GADTxnC,GAAS+I,EAAAA,EAAAA,MAC8B5I,EAAQ,CAC7CsqC,qBAAsB,SAGxBrnC,EAAAA,EAAAA,IAAUpD,GAIZ,MAAM,SAAE8E,EAAQ,MAAEwJ,EAAK,MAAEsN,GAAUrW,EAE7B2W,GAAOC,EAAAA,EAAAA,IAAqBrX,EAAU,MACtC6E,EAAMrC,OAAOC,KAAK2U,GAAMnX,IAAI4C,QAElC3H,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoc,EAAAA,EAAAA,IAAoBpc,EAAQ+N,EAAKzM,GAAI4a,GAC9Clc,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OAEtD5b,EAASwnC,GADTxnC,GAASwc,EAAAA,EAAAA,IAASxc,GAAQmc,EAAAA,EAAAA,IAAqB7N,EAAO,OACfnO,EAAQ,CAC7CuqC,gBAAiB,IAAK38B,EAAK28B,iBAAmB,MAAQ/gC,MAGxDvG,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyB,CAACT,EAAQU,EAASC,KAC1D,MAAM,WAAE4D,EAAU,MAAEtE,GAAQC,EAAAA,EAAAA,OAAsBS,GAE5C,eAAEmU,GAAmB9U,EAAO+U,SAASC,MAErCjH,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,GAAK8N,EAAL,CAEA,GAAIA,EAAK08B,qBAAsB,CAC7B,MAAMA,EAAuB18B,EAAK08B,qBAAuBlmC,EAAWmD,OAC9DgjC,GAAmB38B,EAAK28B,iBAAmB,IAAI1lC,QAAQ1D,IAAQiD,EAAW4F,SAAS7I,KAEzFtB,EAASwnC,GAAsBxnC,EAAQ+N,EAAKzM,GAAI,CAC9CopC,qBAGFtnC,EAAAA,EAAAA,IAAUpD,IAEL0qC,EAAgBhjC,QAAU+iC,GAC7B/pC,EAAQiqC,qBAAqB,CAAExqC,OAAQ4N,EAAKzM,GAAI+Z,SAAUnO,KAAKo6B,OAAO/iC,IAE1E,CAIA,GAFA7D,EAAQmmB,iBAAiB,CAAEtiB,aAAYtE,UAEnC6U,IAAmB40B,EAAAA,IAIvB,OAFA1pC,GAAS+I,EAAAA,EAAAA,OAEF/G,EAAAA,EAAAA,GAAehC,EAAQ,CAC5BkC,gBAAiB,KACZlB,EAAAA,EAAAA,IAAehB,EAAQC,GAAOiC,mBAC9BoF,OAAOsjC,YAAYrmC,EAAWQ,KAAK2B,IACpC,MAAMzB,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQ+N,EAAKzM,GAAIoF,GAEnD,IAAKzB,EAAS,OAEd,MAAM4lC,EAAS5lC,EAAQwkC,WAAWQ,iBAAiBjlC,QAAO,QAAC,SAAEwI,GAAU,SAAKA,CAAQ,IAEpF,IAAKq9B,EAAQ,OAEb,MAAMpB,EAAYoB,EAAO9lC,KAAKqM,GAAWA,EAAOs3B,WAEhD,MAAO,CAAChiC,EAAW+iC,EAAU1kC,KAAKilC,IAAC,CACjCtjC,YACAgiC,SAAUsB,MACR,IACHhlC,OAAOgC,YAEX/G,EA3CwB,CA2ClB,KAGXQ,EAAAA,EAAAA,IAAiB,qBAAqB,CAACT,EAAQU,EAASC,KACtD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GAElC8N,GAAM28B,iBAEXhqC,EAAQsH,aAAa,CAAE7H,OAAQ4N,EAAKzM,GAAIoF,UAAWqH,EAAK28B,gBAAgB,GAAIzqC,SAAQ,KAGtFQ,EAAAA,EAAAA,IAAiB,oBAAoB,CAACT,EAAQU,EAASC,KACrD,MAAM,MAAEV,GAAQC,EAAAA,EAAAA,OAAsBS,GAAW,CAAC,EAC5CoN,GAAOzC,EAAAA,EAAAA,IAAkBtL,EAAQC,GACvC,GAAK8N,EAIL,OAFA4N,EAAAA,EAAAA,IAAQ,mBAAoB,CAAE5N,SAEvBy5B,GAAsBxnC,EAAQ+N,EAAKzM,GAAI,CAC5CmpC,0BAAsBlqC,EACtBmqC,qBAAiBnqC,GACjB,KCjYJE,EAAAA,EAAAA,IAAiB,kBAAkBwY,MAAOjZ,EAAQU,EAASC,KACzD,MAAM,OAAER,EAAM,QAAE2qC,EAAO,MAAE7qC,GAAQC,EAAAA,EAAAA,OAAsBS,EACjDoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,GAAMuY,SACT,OAGF,MAAM/gB,QAAeoW,EAAAA,EAAAA,IAAQmvB,EAAU,uBAAyB,yBAA0B,CAAE/8B,SAC5F,IAAKxI,EACH,OAGFvF,GAAS+I,EAAAA,EAAAA,MACT,MAAM,MAAEgiC,EAAK,MAAEnvB,GAAUrW,EAIzB,GAFAvF,GAASuc,EAAAA,EAAAA,IAASvc,GAAQmc,EAAAA,EAAAA,IAAqBP,EAAO,OAElD,sBAAuBmvB,GAASA,EAAMC,kBAAkBtjC,OAAQ,CAClE,MAAM5C,GAAWD,EAAAA,EAAAA,IAAmB7E,EAAQG,GAE5C4qC,EAAMC,kBAAoBD,EAAMC,kBAAkBjmC,KAAKE,IAAO,IAAWA,KAAYH,EAASG,EAAQgmC,UACxG,CAEAjrC,GAASkrC,EAAAA,EAAAA,IAAiBlrC,EAAQG,EAAQ4qC,EAAO9qC,IACjDmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,yBAAyBwY,MAAOjZ,EAAQU,EAASC,KAChE,MAAM,OAAER,EAAM,UAAEuG,EAAS,MAAEzG,GAAQC,EAAAA,EAAAA,OAAsBS,EACnDoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,GAAMuY,SACT,OAGF,IAAI/gB,QAAeoW,EAAAA,EAAAA,IAAQ,yBAA0B,CAAE5N,OAAMrH,cACxDnB,IACHA,EAAS,CAAC,GAGZvF,GAAS+I,EAAAA,EAAAA,MAET,MAAM,MAAEigB,EAAK,SAAEC,IAAapkB,EAAAA,EAAAA,IAAmB7E,EAAQG,GAAQuG,GAC/DnB,EAAOyjB,MAAQA,EACfzjB,EAAO0jB,SAAWA,EAElB,MAAMkiB,EAAOp9B,EAAKuY,SAAU8kB,eACtBC,QAAuB1vB,EAAAA,EAAAA,IAAQ,6BAA8B,CAAE5N,OAAMrH,YAAWykC,SACtF5lC,EAAO8lC,eAAiBA,GAAgB3jC,OACxCnC,EAAO+lC,mBAAqBD,EAE5BrrC,GAAS+I,EAAAA,EAAAA,MAET/I,GAASurC,EAAAA,EAAAA,IAAwBvrC,EAAQuF,EAAQtF,IACjDmD,EAAAA,EAAAA,IAAUpD,EAAO,KAGnBS,EAAAA,EAAAA,IAAiB,4BAA4BwY,MAAOjZ,EAAQU,EAASC,KACnE,MAAM,OACJR,EAAM,MAAEqkC,EAAK,KAAEgH,EAAI,aAAEC,EAAY,MAAExrC,GAAQC,EAAAA,EAAAA,OACzCS,EACEoN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,GAAMuY,SACT,OAGF,MAAM6kB,EAAOp9B,EAAKuY,SAAU8kB,eACtB7lC,QAAeoW,EAAAA,EAAAA,IAAQ,4BAA6B,CAAE6oB,QAAO2G,OAAMM,iBAEpElmC,IAILvF,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS0rC,EAAAA,EAAAA,IAAsB1rC,EAAQG,EAAQqrC,EAAMjmC,EAAQtF,IAC7DmD,EAAAA,EAAAA,IAAUpD,GAAO,I,0BCxDnBS,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAQtmB,QAASkpC,EAAW,wBAAEC,IAA4BppC,EAAAA,EAAAA,IAAWxC,EAAQ+oB,EAAOznB,KAAO,CAAC,EAsC5F,OApCIynB,EAAOhb,KAAK69B,yBAA2BA,GACtC7iB,EAAOhb,KAAK69B,wBAA0BA,IACzC7iB,EAAS,IACJA,EACHhb,MAAMkS,EAAAA,EAAAA,IAAK8I,EAAOhb,KAAM,CAAC,6BAI7B/N,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQ+oB,EAAOznB,GAAIynB,EAAOhb,KAAMgb,EAAO8iB,kBAC3DzoC,EAAAA,EAAAA,IAAUpD,GAEL+oB,EAAO+iB,oBAAsBC,EAAAA,EAAAA,GAAmB/rC,EAAQ+oB,EAAOznB,KAElEZ,EAAQsrC,eAGNjjB,EAAOhb,KAAKzM,KACd2qC,EAAAA,GAAAA,IAA0B,CACxB9rC,OAAQ4oB,EAAOhb,KAAKzM,GACpB6iB,uBAAwB4E,EAAOhb,KAAKoW,8BAIxC7c,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClD,MAAQE,OAAQm0B,IAAkBj0B,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACxEisC,EAAanjB,EAEfuL,IAAkB4X,EAAW5qC,IAC5B,YAAa4qC,EAAWn+B,MAAQ49B,IAAgBO,EAAWn+B,KAAKtL,UAC/DkpC,GACFjrC,EAAQkC,gBAAgB,CAAE3C,UAE5BS,EAAQ2C,SAAS,CAAE/B,GAAIgzB,EAAer0B,UACxC,GAIJ,CAEA,IAAK,iBAAkB,CACrB,MAAM2zB,GAAWuY,EAAAA,EAAAA,IAAmBnsC,EAAQ+oB,EAAOznB,IACnD,IAAKsyB,EACH,OAGF5zB,GAASosC,EAAAA,EAAAA,IAAkBpsC,EAAQ4zB,EAAU,CAAC7K,EAAOznB,KACrDtB,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQ+oB,EAAOznB,GAAI,CAAE+qC,aAAa,KACtDjpC,EAAAA,EAAAA,IAAUpD,GAEV,MAAM+N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQ+oB,EAAOznB,IAKvC,YAJIyM,GACFrN,EAAQ4rC,kBAAkB,CAAEnsC,OAAQ4N,EAAKzM,KAI7C,CAEA,IAAK,kBACH,OAAOirC,EAAAA,EAAAA,IAAUvsC,EAAQ+oB,EAAOznB,IAGlC,IAAK,kBACH,OAAOihB,EAAAA,EAAAA,IAAWviB,EAAQ+oB,EAAOznB,GAAIynB,EAAOhb,MAG9C,IAAK,yBAA0B,CAC7B,MAAM,GAAEzM,EAAE,SAAElB,EAAWmB,EAAAA,GAAc,aAAEirC,GAAiBzjB,EAaxD,OAZA/oB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQsB,EAAIlB,EAAU,eAAgBosC,IAClEppC,EAAAA,EAAAA,IAAUpD,QAEV8I,YAAW,KACT9I,GAAS+I,EAAAA,EAAAA,MACT,MAAM0jC,GAAsBC,EAAAA,EAAAA,IAAkB1sC,EAAQsB,EAAIlB,EAAU,gBAChEosC,GAAgBC,GAAuBD,EAAazb,YAAc0b,EAAoB1b,YACxF/wB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQsB,EAAIlB,EAAU,oBAAgBG,IAClE6C,EAAAA,EAAAA,IAAUpD,GACZ,GAnF0B,IAuF9B,CAEA,IAAK,aAAc,CACjB,MAAM,QAAEiF,GAAY8jB,EAEpB,GAAI9jB,EAAQmP,WAAapU,EAAO0X,gBAAkBzS,EAAQ0nC,gBACxD,OAGF,MAAM5+B,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQ+oB,EAAO5oB,QACvC,IAAK4N,EACH,OAGF,MAAM6+B,EAAa5lC,QAAQ+hB,EAAO9jB,QAAQ3D,IAAMynB,EAAO9jB,QAAQ4nC,kBAoB/D,OAlBA7sC,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQ+oB,EAAO5oB,OAAQ,CACzC0jB,YAAa9V,EAAK8V,YAAc9V,EAAK8V,YAAc,EAAI,KACnD+oB,GAAc,CAAE9lB,qBAAsB/Y,EAAK+Y,qBAAuB,GAAK,KAGzE8lB,IACF5sC,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQ+oB,EAAO5oB,OAAQ,CACzCymB,eAAgB,IAAK7Y,EAAK6Y,gBAAkB,GAAKmC,EAAO9jB,QAAQ3D,QAIpE8B,EAAAA,EAAAA,IAAUpD,QAEV8sC,EAAAA,GAAAA,IAAmB,CACjB/+B,OACA9I,WAIJ,CAEA,IAAK,0BACL,IAAK,wBAAyB,CAC5B,MAAM,IAAE0E,EAAG,cAAEojC,GAAkBhkB,EAC/B,IAAuC,IAAnCgkB,EAAcF,iBAChB,OAsBF,OAnBAljC,EAAIuB,SAAS5J,IACX,MAAMnB,EAAU,cAAe4oB,EAASA,EAAOikB,WAAYC,EAAAA,EAAAA,IAAsBjtC,EAAQsB,GACnFyM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE5B4N,GAAM08B,uBACRzqC,EAASwnC,GAAsBxnC,EAAQG,EAAQ,CAC7CsqC,qBAAuB18B,EAAK08B,qBAAuB,QAAMlqC,EACzDmqC,gBAAiB38B,EAAK28B,iBAAiB1lC,QAAQqY,GAAMA,IAAM/b,OAI3DyM,GAAM+Y,sBACR9mB,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClC2mB,oBAAsB/Y,EAAK+Y,oBAAsB,QAAMvmB,EACvDqmB,eAAgB7Y,EAAK6Y,gBAAgB5hB,QAAQqY,GAAMA,IAAM/b,MAE7D,IAGKtB,CACT,CAEA,IAAK,qBAAsB,CACzB,MAAM,SAAEsmB,GAAayC,EACf+J,EAAa9yB,EAAOsO,MAAM4N,KAAK6M,EAAOznB,IAC5C,IAAKwxB,EACH,OAGF,OAAOvQ,EAAAA,EAAAA,IAAWviB,EAAQ+oB,EAAOznB,GAAI,CACnCglB,SAAU,IACLwM,EAAWxM,YACXA,IAGT,CAEA,IAAK,sBAAuB,CAC1B,MAAM,IAAE3c,EAAG,SAAE3F,GAAa+kB,EACpB6K,EAAW5vB,IAAakpC,EAAAA,IAAqB,WAAa,SAEhE,MAAO,IACFltC,EACHsO,MAAO,IACFtO,EAAOsO,MACV6+B,iBAAkB,IACbntC,EAAOsO,MAAM6+B,iBAChB,CAACvZ,GAAWjqB,EAAIjC,OAASiC,OAAMpJ,IAIvC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAEe,EAAE,SAAE8rC,GAAarkB,EACnB6K,GAAWuY,EAAAA,EAAAA,IAAmBnsC,EAAQsB,GAC5C,IAAKsyB,EACH,OAGF,MAAQ,CAACA,GAAWuZ,GAAqBntC,EAAOsO,MAAM6+B,iBAEtD,IAAIE,EAAsBF,GAAoB,GAC9C,GAAKC,GAEE,IAAKC,EAAoBljC,SAAS7I,GAAK,CAK5C,GAAiB,WAAbsyB,GAAyByZ,EAAoB3lC,QAAU4lC,EAAAA,IAAyB,CAClF,MAAMC,EAAUvtC,EAAOsO,MAAMi/B,QAAQpD,OACrCkD,EAAsBA,EAAoBroC,QAAQwoC,GAAaD,GAAWA,EAAQpjC,SAASqjC,IAC7F,CAEAH,EAAsB,CAAC/rC,KAAO+rC,EAChC,OAZEA,EAAsBA,EAAoBroC,QAAQwoC,GAAaA,IAAalsC,IAc9E,MAAO,IACFtB,EACHsO,MAAO,IACFtO,EAAOsO,MACV6+B,iBAAkB,IACbntC,EAAOsO,MAAM6+B,iBAChB,CAACvZ,GAAWyZ,EAAoB3lC,OAAS2lC,OAAsB9sC,IAIvE,CAEA,IAAK,qBAAsB,CACzB,MAAM,GAAEe,EAAE,SAAE0C,GAAa+kB,EAEzB,OAAO0kB,EAAAA,EAAAA,IAAmBztC,EAAQsB,EAAI0C,EACxC,CAEA,IAAK,mBAAoB,CACvB,MAAM,GAAE1C,EAAE,OAAEosC,GAAW3kB,GACf7M,KAAMyxB,EAAe,WAAE/pC,GAAe5D,EAAO4tC,YAE/CC,EAAqBH,EACvB,IAAKC,EAAiB,CAACrsC,GAAKosC,IAC5BI,EAAAA,EAAAA,IACAH,EACArmC,OAAOC,KAAKomC,GAAiB5oC,IAAI4C,QAAQ3C,QAAQhB,GAAaA,IAAa1C,KAGzEysC,EAAgBL,EAClB9pC,GAAcA,EAAWuG,SAAS7I,GAAMsC,EAAa,IAAKA,GAAc,GAAKtC,GAC7EsC,EAAaA,EAAWoB,QAAQgpC,GAAcA,IAAc1sC,SAAMf,EAEtE,MAAO,IACFP,EACH4tC,YAAa,IACR5tC,EAAO4tC,YACV1xB,KAAM2xB,EACNjqC,WAAYmqC,GAGlB,CAEA,IAAK,yBAA0B,CAC7B,MAAM,WAAEnqC,GAAemlB,EAEvB,MAAO,IACF/oB,EACH4tC,YAAa,IACR5tC,EAAO4tC,YACVhqC,cAGN,CAEA,IAAK,+BAAgC,CACnC,MAAM,QAAEqqC,GAAYllB,EAEpB,MAAO,IACF/oB,EACH4tC,YAAa,IACR5tC,EAAO4tC,YACVM,YAAaD,GAGnB,CAEA,IAAK,oBAAqB,CACxB,MAAMnb,EAAa9yB,EAAOsO,MAAM4N,KAAK6M,EAAOznB,KACtC,gBAAE6sC,EAAe,YAAEC,EAAW,gBAAEC,GAAoBtlB,EAC1D,IAAK+J,EACH,OAGF,IAAIwb,GAAe,EACfC,EAAUzb,EAAWxM,UAAUioB,QAC/B,IAAIzb,EAAWxM,SAASioB,SACxB,GAEJ,GAAIJ,EACFI,EAAUJ,EACVG,GAAe,OACV,GAAIF,EAENG,EAAQ7mC,QACL6mC,EAAQnF,MAAM/jB,GAAMA,EAAEjW,SAAWg/B,EAAYh/B,WAEjDm/B,EAAQ3oC,KAAKwoC,GACbE,GAAe,QAEZ,GAAIC,EAAQ7mC,QAAU2mC,EAAiB,CAC5C,MAAMG,EAAcD,EAAQj8B,WAAW+S,GAAMA,EAAEjW,SAAWi/B,IACtDG,GAAe,IACjBD,EAAQjiC,MAAMkiC,EAAa,GAC3BF,GAAe,EAEnB,CAEA,GAAIA,EAAc,CAChB,MAAMG,EAAeF,EAAQvpC,QAAO,QAAC,QAAE0pC,EAAO,QAAEC,GAAS,SAAKD,GAAWC,CAAO,IAGhF,OAAOpsB,EAAAA,EAAAA,IAAWviB,EAAQ+oB,EAAOznB,GAAI,CACnCstC,aAAcL,EAAQ7mC,OACtB4e,SAAU,IACLwM,EAAWxM,SACdioB,UACAM,kBAAkB1yB,EAAAA,EAAAA,IAAqBsyB,EAAc,YAG3D,CAEA,MACF,CAEA,IAAK,sBAAuB,CAC1B,MAAM,OAAEtuC,EAAM,IAAEwJ,GAAQof,EAClBhb,EAAO/N,EAAOsO,MAAM4N,KAAK/b,GAE/B,OAAI4N,GAAMuqB,QACD/V,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAChCm4B,OAAQvqB,EAAKuqB,OAAOtzB,QAAQsxB,IAAW3sB,EAAIQ,SAASmsB,EAAMh1B,aAI9D,CACF,CAEA,IAAK,eAAgB,CACnB,MAAM,OACJnB,EAAM,cAAE2uC,EAAa,KAAEpiC,EAAI,aAAExF,EAAY,SAAE9G,GACzC2oB,EAEJ,IADa/oB,EAAOsO,MAAM4N,KAAK/b,GAE7B,OAMF,OAHAH,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,GAAYmB,EAAAA,GAAgB,QAASutC,GACjF9uC,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,GAAYmB,EAAAA,GAAgB,eAAgB2F,GACxFlH,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAAEqiB,UAAW9V,GAEnD,CAEA,IAAK,aAAc,CACjB,MAAM,KAAE4G,GAASyV,EAMjB,YAJAzhB,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClDS,EAAQ0nB,WAAW,CAAE9U,OAAMrT,SAAQ,GAIvC,CAEA,IAAK,4BAA6B,CAChC,MAAM,OAAEE,EAAM,gBAAE8yB,EAAe,mBAAED,GAAuBjK,EAClDhb,EAAO/N,EAAOsO,MAAM4N,KAAK/b,GAC/B,IAAK4N,EACH,OAaF,OAVA/N,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClCmmB,SAAU,IACLvY,EAAKuY,SACR2M,kBACAD,yBAGJ5vB,EAAAA,EAAAA,IAAUpD,QAEVU,EAAQquC,qBAAqB,CAAE5uC,UAEjC,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAEA,EAAM,QAAE2V,EAAO,SAAEs3B,GAAarkB,EAGtC,IADa/oB,EAAOsO,MAAM4N,KAAK/b,GAE7B,OAQF,OALAH,GAASqkB,EAAAA,EAAAA,IAAYrkB,EAAQG,EAAQ2V,EAAS,CAC5Cs3B,kBAEFhqC,EAAAA,EAAAA,IAAUpD,EAGZ,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEG,EAAM,MAAEwR,GAAUoX,EAG1B,IADa/oB,EAAOsO,MAAM4N,KAAK/b,GACpB,OAOX,OALAH,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClC6uC,sBAAuBr9B,SAEzBvO,EAAAA,EAAAA,IAAUpD,EAGZ,CAEA,IAAK,cAAe,CAClB,MAAM,OAAEG,EAAM,QAAE2V,GAAYiT,EAG5B,KADavmB,EAAAA,EAAAA,IAAWxC,EAAQG,IACrBsC,QAAS,OAIpB,YAFA/B,EAAQ60B,cAAc,CAAEp1B,SAAQ2V,WAGlC,CAEA,IAAK,eAAgB,CACnB,MAAM,OAAE3V,GAAW4oB,EAGnB,KADavmB,EAAAA,EAAAA,IAAWxC,EAAQG,IACrBsC,QAAS,OAIpB,YAFA/B,EAAQ40B,WAAW,CAAEn1B,SAAQkQ,OAAO,GAGtC,EAGc,I,gBC7YlB,MAAM4+B,GAAkB,IAulBxB,SAASC,GACPlvC,EACAG,EACAmB,EACAmoC,EACA17B,EACAjB,EACA7H,GAEA,MAAM2kC,EAAmB3kC,GAASwkC,UAGlC,GAAIG,IAAoBuF,EAAAA,GAAAA,GAAa1F,EAAWG,GAC9C,OAAO5pC,EAKT,GAFAA,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQmB,EAAI,CAAEmoC,eAE5C38B,EACH,OAAO9M,EAGT,MAAMovC,EAA2BrhC,EAAK28B,iBAAiBvgC,SAAS7I,GAGhE,IAAI+tC,EAAAA,EAAAA,IAA0BrvC,EAAQypC,KAAe2F,EAA0B,CAC7EpvC,EAASwnC,GAAsBxnC,EAAQG,EAAQ,CAC7CsqC,sBAAuB18B,GAAM08B,sBAAwB,GAAK,EAC1DC,gBAAiB,IAAK38B,GAAM28B,iBAAmB,GAAKppC,KAGtD,MAAMguC,GAAar7B,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQmB,GAErD,IAAKyM,IAASuhC,EAAY,OAAOtvC,GAEjCof,EAAAA,EAAAA,KAAU,MACR0tB,EAAAA,GAAAA,IAAmB,CACjB/+B,OACA9I,QAASqqC,EACTC,YAAY,GACZ,GAEN,MAAWH,IACTpvC,EAASwnC,GAAsBxnC,EAAQG,EAAQ,CAC7CsqC,sBAAuB18B,GAAM08B,sBAAwB,GAAK,EAC1DC,gBAAiB38B,GAAM28B,iBAAiB1lC,QAAQqY,GAAMA,IAAM/b,OAIhE,OAAOtB,CACT,CAEA,SAASwvC,GACPxvC,EAA6BG,EAAgBmB,EAAYyrC,GACzD,IAD6F0C,EAAc,UAAH,8CAExG,MAAMC,EAAiBD,GACnB5pB,EAAAA,EAAAA,IAAuB7lB,EAAQG,EAAQmB,IACvC2S,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQmB,GAGtC,GAAIouC,GAAkB3C,EAAcngC,QAAS,CAC3C,MAAM,MACJ0pB,EAAK,MAAEqZ,EAAK,QAAEx+B,EAAO,SAAEzB,IACrBkgC,EAAAA,EAAAA,IAAkBF,GAClBpZ,GAASyW,EAAcngC,QAAQ0pB,OACjCyW,EAAcngC,QAAQ0pB,MAAMuZ,QAAUvZ,EAAMuZ,QAC5C9C,EAAcngC,QAAQ0pB,MAAMwZ,UAAYxZ,EAAMwZ,WACrCH,GAAS5C,EAAcngC,QAAQ+iC,MACxC5C,EAAcngC,QAAQ+iC,MAAME,QAAUF,EAAME,QACnC1+B,GAAW47B,EAAcngC,QAAQuE,QAC1C47B,EAAcngC,QAAQuE,QAAQ4+B,oBAAsB5+B,EAAQ4+B,oBACnDrgC,GAAYq9B,EAAcngC,QAAQ8C,WAC3Cq9B,EAAcngC,QAAQ8C,SAASsgC,eAAiBtgC,EAASsgC,eAE7D,CAEA,MAAMV,EAAaI,EAAiB,IAAKA,KAAmB3C,GAAkBA,EAE9E,OAAO0C,GACHQ,EAAAA,EAAAA,IAAuBjwC,EAAQG,EAAQmB,EAAIguC,IAC3C3vB,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQmB,EAAIguC,EAC5C,CAEA,SAASY,GACPlwC,EAAWU,EAAgCuE,EAAqB8a,GAEhE,MAAM,OAAE5f,GAAW8E,GAEb,WAAEwvB,IAAe0b,EAAAA,EAAAA,IAAsBnwC,EAAQiF,IAAY,CAAC,EAElE,IAAKwvB,GAAcxvB,EAAQ4a,iBAAkB,CAC3C,MAAMuwB,GAAgBn8B,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ8E,EAAQ4a,kBAC5DuwB,EACFpwC,GAASggB,EAAAA,EAAAA,IAAuChgB,EAAQowC,EAAejwC,EAAQ8E,EAAQ3D,GAAIye,GAE3Frf,EAAQof,YAAY,CAClB3f,SACAuG,UAAWzB,EAAQ4a,iBACnBJ,aAAc,CACZM,aACAjY,cAAe7C,EAAQ3D,KAI/B,CAEA,OAAOtB,CACT,CAEA,SAASqwC,GACPrwC,EAAWU,EAAgCuE,GAE3C,MAAM,GAAE3D,EAAE,OAAEnB,GAAW8E,GAEjB,WAAEwvB,EAAU,eAAE6b,IAAmBH,EAAAA,EAAAA,IAAsBnwC,EAAQiF,IAAY,CAAC,EAG5EsrC,GADO/tC,EAAAA,EAAAA,IAAWxC,EAAQG,IACI0jB,eAAgBlH,EAAAA,EAAAA,IAAgB3c,EAAQG,EAAQoB,EAAAA,IA+BpF,OA7BAvB,EAASkwC,GAAmBlwC,EAAQU,EAASuE,GAEzCwvB,KACE6b,IAAmB1H,EAAAA,EAAAA,IAAe3jC,KACpCjF,GAASsc,EAAAA,EAAAA,IAAgBtc,EAAQG,EAAQs0B,EAAWr0B,SAAU,CAACkB,IAE/DgG,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,GAC9CmH,EAAAA,EAAAA,IAAuBpH,EAAQG,EAAQs0B,EAAWr0B,SAAUH,KAC9DD,GAASwwC,EAAAA,EAAAA,IAAcxwC,EAAQG,EAAQs0B,EAAWr0B,SAAUkB,EAAIrB,GAE3DqwC,IACHtwC,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQs0B,EAAWr0B,SAAU,iBAAkB6E,EAAQ3D,KAE/F,KAIJtB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQs0B,EAAWr0B,SAAU,aAAc,IAC1Eq0B,EACH3sB,cAAe7C,EAAQ3D,MAGpBsnC,EAAAA,EAAAA,IAAe3jC,KAClBjF,GAASkkB,EAAAA,EAAAA,IAAiBlkB,EAAQG,EAAQs0B,EAAWr0B,SAAU,CAC7DgpB,eAAgBqL,EAAWrL,eAAiB,GAAK,MAKnDmnB,IAIJvwC,GAASsc,EAAAA,EAAAA,IAAgBtc,EAAQG,EAAQoB,EAAAA,GAAgB,CAACD,IAE1DgG,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClD,IAAImH,EAAAA,EAAAA,IAAuBpH,EAAQG,EAAQoB,EAAAA,GAAgBtB,GAAQ,CAEjE,MAAMwwC,GAAgB7sB,EAAAA,EAAAA,IAAoB5jB,EAAQG,EAAQoB,EAAAA,GAAgBtB,GACpEywC,GAAkBF,EAAAA,EAAAA,IAAcxwC,EAAQG,EAAQoB,EAAAA,GAAgBD,EAAIrB,GACpE+c,GAAiBnW,EAAAA,EAAAA,IAAkB6pC,EAAiBvwC,EAAQoB,EAAAA,GAAgBtB,GAE7EwwC,IAAiBzzB,EAAgB7S,SAASsmC,KAC7CzwC,EAAS0wC,EAEb,MAfO1wC,CAmBX,CAEA,SAAS2wC,GACP3wC,EACAG,EACA8E,GAEA,IADAoL,EAAQ,UAAH,8CAEL,MAAM,MAAE/B,GAAUtO,EACZ+N,EAAOO,EAAM4N,KAAK/b,GAClBywC,EAAqB7iC,GAAMnG,YAE3Bqc,EAAQlW,GAAMtL,SAAUouC,EAAAA,EAAAA,IAAuB7wC,EAAQiF,QAAW1E,EAOxE,OANI0jB,IACFjkB,GAASqkB,EAAAA,EAAAA,IAAYrkB,EAAQG,EAAQ8jB,EAAM3iB,GAAI,CAC7CwG,cAAe7C,EAAQ3D,OAIvBsvC,GAAuBvgC,GAEvBugC,EAAmBtvC,KAAO2D,EAAQ3D,IAAMsvC,EAAmBtvC,KAAO2D,EAAQqI,iBACvErI,EAAQ3D,GAAKsvC,EAAmBtvC,IAO9BihB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAAEyH,YAAa3C,IAJxCjF,CAOb,CAEA,SAAS8wC,GAAuC9wC,EAAWG,GACzD,MAAM+b,GAAOrX,EAAAA,EAAAA,IAAmB7E,EAAQG,GAClCuc,GAAYC,EAAAA,EAAAA,IAAgB3c,EAAQG,EAAQoB,EAAAA,IAElD,IAAK2a,IAASQ,EACZ,OAGF,IAAIW,EAAIX,EAAUhV,OAClB,KAAO2V,KAAK,CACV,MAAMpY,EAAUiX,EAAKQ,EAAUW,IAC/B,IAAKpY,EAAQ8a,WACX,OAAO9a,CAEX,CAGF,CAEA,SAAS8rC,GACP/wC,EAAWG,EAA4BwJ,EAAejJ,GAItD,GAAIP,EAAQ,CACV,MAAM4N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EAAM,OAEXpE,EAAIuB,SAAS5J,IACXtB,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQmB,EAAI,CAC7Cye,YAAY,IAKd,MAAMixB,EAAiBF,GAFvB9wC,GAASixC,EAAAA,EAAAA,IAAwBjxC,EAAQG,EAAQmB,GAEFnB,GAC3C6wC,IACFhxC,EAAS2wC,GAAsB3wC,EAAQG,EAAQ6wC,GAAgB,IAG7DjjC,EAAKmK,SAAS5W,KAChBtB,GAASkxC,EAAAA,EAAAA,IAAYlxC,EAAQG,EAAQmB,GACvC,IAGFZ,EAAQ4rC,kBAAkB,CAAEnsC,WAE5B,MAAMgxC,EAA8B,GA4BpC,OA1BAxnC,EAAIuB,SAAS5J,IACX,MAAM2D,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQmB,GAClD,IAAK2D,EACH,OAGFjF,EAASkwC,GAAmBlwC,EAAQU,EAASuE,GAAS,GAEtD,MAAM7E,GAAWqlB,EAAAA,EAAAA,IAA0BzlB,EAAQiF,GAC/C7E,GACF+wC,EAAkBvrC,KAAKxF,EACzB,KAGFgD,EAAAA,EAAAA,IAAUpD,QAEV8I,YAAW,KACT9I,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxC,EAAAA,EAAAA,IAAmBpxC,EAAQG,EAAQwJ,IAC5CvG,EAAAA,EAAAA,IAAUpD,IAEV2V,EAAAA,EAAAA,IAAOw7B,GAAmBjmC,SAAS9K,IACjCM,EAAQ2wC,wBAAwB,CAAElxC,SAAQC,YAAW,GACrD,GACD6uC,GAGL,CAIA,MAAMqC,EAA6B,GAEnC3nC,EAAIuB,SAAS5J,IACX,MAAMiwC,GAAkBtE,EAAAA,EAAAA,IAAsBjtC,EAAQsB,GACtD,GAAIiwC,EAAiB,CACnBD,EAAiB1rC,KAAK2rC,GAMtB,MAAMP,EAAiBF,GAJvB9wC,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQuxC,EAAiBjwC,EAAI,CACtDye,YAAY,IAGiCwxB,GAC3CP,IACFhxC,EAAS2wC,GAAsB3wC,EAAQuxC,EAAiBP,GAAgB,IAG1EloC,YAAW,KACT9I,GAAS+I,EAAAA,EAAAA,MACT/I,GAASoxC,EAAAA,EAAAA,IAAmBpxC,EAAQuxC,EAAiB,CAACjwC,KACtD8B,EAAAA,EAAAA,IAAUpD,EAAO,GAChBivC,GACL,MAGF7rC,EAAAA,EAAAA,IAAUpD,IAEV2V,EAAAA,EAAAA,IAAO27B,GAAkBpmC,SAAS5J,IAChCZ,EAAQ4rC,kBAAkB,CAAEnsC,OAAQmB,GAAK,GAE7C,EA54BAb,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAC9C,OAAQA,EAAO,UACb,IAAK,aAAc,CACjB,MAAM,OACJ5oB,EAAM,GAAEmB,EAAE,QAAE2D,EAAO,iBAAEusC,GACnBzoB,EAEJ/oB,EAASqwC,GADTrwC,EAASwvC,GAAqBxvC,EAAQG,EAAQmB,EAAI2D,GACNvE,EAASuE,GAEjDA,EAAQkkB,oBACVnpB,GAASkkB,EAAAA,EAAAA,IACPlkB,EACAiF,EAAQkkB,kBAAkBhpB,OAC1B8E,EAAQkkB,kBAAkB/oB,SAC1B6E,EAAQkkB,oBAIZ,MAAMmmB,GAAar7B,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQmB,IACxCkB,EAAAA,EAAAA,IAAWxC,EAAQG,IACtBsC,SACL6sC,EAAWmC,gBACVZ,EAAAA,EAAAA,IAAuB7wC,EAAQsvC,IAChCA,EAAWzvB,kBACdnf,EAAQ60B,cAAc,CAAEp1B,SAAQ2V,QAASw5B,EAAWzvB,mBAGtDvY,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClD,MAAMqiB,GAAUsmB,EAAAA,EAAAA,IAAe3jC,GAC/B,IAAIysC,EAAAA,EAAAA,IAAoC1xC,EAAQG,EAAQ8E,EAAuBhF,GAAQ,CACrF,GAAIqiB,GAAWrd,EAAQ6H,aAAgB7H,EAAQ2H,SAAS4H,OAAS,CAC/D,MAAM7S,GAAqBtB,EAAAA,EAAAA,IAAyBL,EAAQC,GACxD0B,GAEFjB,EAAQsH,aAAa,CACnB7H,SACAC,SAAUuB,EAAmBvB,SAC7BsG,UAAWzB,EAAQ3D,GACnB0H,aAAa,EACbU,qBAAqB,EACrBzJ,SAGN,CAEA,MAAM,WAAEw0B,IAAe0b,EAAAA,EAAAA,IAAsBnwC,EAAQiF,IAA0B,CAAC,EAC5EwvB,IAAenS,GACjB5hB,EAAQ2wC,wBAAwB,CAAElxC,SAAQC,SAAUq0B,EAAWr0B,WAK5DkiB,GACHxZ,YAAW,KACT9I,GAAS+I,EAAAA,EAAAA,MACLyoC,IACFxxC,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQoB,EAAAA,GAAgB,eAAgBD,IAE9EtB,EAAS2wC,GAAsB3wC,EAAQG,EAAQmvC,IAC/ClsC,EAAAA,EAAAA,IAAUpD,EAAO,GAChBivC,GAEP,MACEjvC,EAAS2wC,GAAsB3wC,EAAQG,EAAQmvC,EACjD,KAGFlsC,EAAAA,EAAAA,IAAUpD,IAGL+rC,EAAAA,EAAAA,GAAmB/rC,EAAQG,IAC9BO,EAAQsrC,eAGV,KACF,CAEA,IAAK,8BACH1kC,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClD,MAAQE,OAAQm0B,IAAkBj0B,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EAE9E,GAAIq0B,IAAkBvL,EAAOznB,GAAI,OACjC,MAAM2D,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQs0B,EAAevL,EAAOriB,WAEhE,IAAKzB,EAAS,OAGd,IAAI0sC,EAAAA,EAAAA,IAAe1sC,KAAa8jB,EAAOjjB,MAAO,OAE9C,MAAMlE,GAAWZ,EAAAA,EAAAA,IAAehB,EAAQC,GACxCD,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BsoC,wBAAyB,IAAK1mC,EAAS0mC,yBAA2B,GAAK,CACrEhnC,GAAIM,EAAS0mC,yBAAyB5gC,QAAU,EAChD0gC,eAAgBrf,EAAOjjB,MACvBY,UAAWqiB,EAAOriB,aAEnBzG,EAAM,KAGXmD,EAAAA,EAAAA,IAAUpD,GAEV,MAGF,IAAK,sBAAuB,CAC1B,MAAM,OAAEG,EAAM,GAAEmB,EAAE,QAAE2D,GAAY8jB,EAEhC/oB,EAASwvC,GAAqBxvC,EAAQG,EAAQmB,EAAI2D,GAAS,GAE3D,MAAM2gB,GAAegsB,EAAAA,EAAAA,IAAmB5xC,EAAQG,EAAQoB,EAAAA,KAAmB,GAC3EvB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQoB,EAAAA,GAAgB,gBAAgBoU,EAAAA,EAAAA,IAAO,IAAIiQ,EAActkB,KAErG,MAAMlB,GAAWqlB,EAAAA,EAAAA,IAA0BzlB,EAAQiF,GACnD,GAAI7E,IAAamB,EAAAA,GAAgB,CAC/B,MAAMswC,GAAqBD,EAAAA,EAAAA,IAAmB5xC,EAAQG,EAAQC,IAAa,GAC3EJ,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,gBAAgBuV,EAAAA,EAAAA,IAAO,IAAIk8B,EAAoBvwC,IACvG,EAEA8B,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAEG,EAAM,GAAEmB,EAAE,QAAE2D,GAAY8jB,EAE1B2mB,GAAiBz7B,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQmB,GACnDyM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAEhCH,EAASwvC,GAAqBxvC,EAAQG,EAAQmB,EAAI2D,GAElD,MAAMqqC,GAAar7B,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQmB,GACjD2D,EAAQkkB,oBACVnpB,GAASkkB,EAAAA,EAAAA,IACPlkB,EACAiF,EAAQkkB,kBAAkBhpB,OAC1B8E,EAAQkkB,kBAAkB/oB,SAC1B6E,EAAQkkB,oBAIRumB,IACF1vC,EAAS2wC,GAAsB3wC,EAAQG,EAAQmvC,IAG7CrqC,EAAQwkC,WAAa17B,IACvB/N,EAASkvC,GAAgBlvC,EAAQG,EAAQmB,EAAI2D,EAAQwkC,UAAW17B,EAAMuhC,EAAWxiC,WAAY4iC,IAG3FzqC,EAAQ2H,SAAStJ,MAAMA,OAASosC,GAAgB9iC,SAAStJ,MAAMA,OACjEtD,GAASixC,EAAAA,EAAAA,IAAwBjxC,EAAQG,EAAQmB,KAGnD8B,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAEG,EAAM,GAAEmB,EAAE,QAAE2D,GAAY8jB,EAE1B2mB,GAAiB7pB,EAAAA,EAAAA,IAAuB7lB,EAAQG,EAAQmB,GAC9D,IAAKouC,EACH,OAGF1vC,EAASwvC,GAAqBxvC,EAAQG,EAAQmB,EAAI2D,GAAS,GAC3D,MAAM0E,EAAMrC,OAAOC,MAAK3C,EAAAA,EAAAA,IAA4B5E,EAAQG,IAAW,CAAC,GAAG4E,IAAI4C,QAAQvC,MAAK,CAAC8f,EAAGC,IAAMA,EAAID,IAC1GllB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQoB,EAAAA,GAAgB,eAAgBoI,GAE5E,MAAMvJ,GAAWqlB,EAAAA,EAAAA,IAA0BzlB,EAAQ0vC,GACnD,GAAItvC,IAAamB,EAAAA,GAAgB,CAC/B,MAAMswC,GAAqBD,EAAAA,EAAAA,IAAmB5xC,EAAQG,EAAQC,IAAa,GAC3EJ,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,eAAgByxC,EAAmBzsC,MAAK,CAAC8f,EAAGC,IAAMA,EAAID,IAC9G,EACA9hB,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OAAEG,EAAM,QAAE8R,EAAO,QAAEhN,GAAY8jB,EAErC/oB,EAASqwC,GAA2BrwC,EAAQU,EAASuE,GAErD,MAAMyqC,GAAiBz7B,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ8R,GAEzDjS,GAASoxC,EAAAA,EAAAA,IAAmBpxC,EAAQG,EAAQ,CAAC8R,IAGzChN,EAAQwqC,cACVzvC,GAAS8xC,EAAAA,EAAAA,IAA4B9xC,EAAQG,EAAQ,CAAC8R,KAGxDjS,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQ8E,EAAQ3D,GAAI,IAClDouC,KACAzqC,EACHqI,gBAAiB2E,IAGnB,MAAMq9B,GAAar7B,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ8E,EAAQ3D,IAC7DtB,EAAS2wC,GAAsB3wC,EAAQG,EAAQmvC,GAE/C,MAAMyC,GAAS5B,EAAAA,EAAAA,IAAsBnwC,EAAQiF,GAE7CqC,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClD,MAAQE,OAAQm0B,EAAel0B,SAAUm0B,IAAoBl0B,EAAAA,EAAAA,IAAyBL,EAAQC,IAAU,CAAC,EACrGq0B,IAAkBn0B,IAChB4xC,GAAQtd,YAAYr0B,UAAYmB,EAAAA,MAAoBgzB,GAI1D7zB,EAAQsxC,oBAAoB,CAAE/kC,MAAOhI,EAAQ3D,GAAIrB,SAAQ,IAEvD8xC,GAAQtd,aACVz0B,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQ4xC,EAAOtd,WAAWr0B,SAAU,aAAc,IACjF2xC,EAAOtd,WACV3sB,cAAe7C,EAAQ3D,GACvB6iB,uBAAwBlf,EAAQ3D,OAIpC8B,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,sCAAuC,CAC1C,MAAM,OAAEG,EAAM,QAAE8R,EAAO,QAAEhN,GAAY8jB,EAC/BnD,GAAegsB,EAAAA,EAAAA,IAAmB5xC,EAAQG,EAAQoB,EAAAA,KAAmB,GAC3EvB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQoB,EAAAA,GAAgB,eAAgB,IAAIqkB,EAAc3gB,EAAQ3D,KAEtG,MAAMlB,GAAWqlB,EAAAA,EAAAA,IAA0BzlB,EAAQiF,GACnD,GAAI7E,IAAamB,EAAAA,GAAgB,CAC/B,MAAMswC,GAAqBD,EAAAA,EAAAA,IAAmB5xC,EAAQG,EAAQC,IAAa,GAC3EJ,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,eAAgB,IAAIyxC,EAAoB5sC,EAAQ3D,IACxG,CAEA,MAAMouC,GAAiB7pB,EAAAA,EAAAA,IAAuB7lB,EAAQG,EAAQ8R,GAE9DjS,GAAS8xC,EAAAA,EAAAA,IAA4B9xC,EAAQG,EAAQ,CAAC8R,IACtDjS,GAASiwC,EAAAA,EAAAA,IAAuBjwC,EAAQG,EAAQ8E,EAAQ3D,GAAI,IACvDouC,KACAzqC,EACHqI,gBAAiB2E,KAGnB7O,EAAAA,EAAAA,IAAUpD,GACV,KACF,CAEA,IAAK,kBAAmB,CACtB,MAAM,OAAEG,EAAM,SAAEitC,EAAQ,WAAE7oC,GAAewkB,EAEnCjkB,GAAWmtC,EAAAA,EAAAA,KAAWptC,EAAAA,EAAAA,IAAmB7E,EAAQG,GAASoE,GAC1D2tC,EAA4C,CAChD,CAAC3wC,EAAAA,IAAiBgD,GAEpB+C,OAAO2S,OAAOnV,GAAUoG,SAASjG,IAC/B,MAAM7E,GAAWqlB,EAAAA,EAAAA,IAA0BzlB,EAAQiF,GACnD,GAAI7E,IAAamB,EAAAA,GAAgB,OACjC,MAAM4wC,EAAyBD,EAAgB9xC,IAAa,GAC5D+xC,EAAuBvsC,KAAKX,EAAQ3D,IACpC4wC,EAAgB9xC,GAAY+xC,CAAsB,IAGpD7qC,OAAOqe,QAAQusB,GAAiBhnC,SAAQ,IAAqB,IAAnB9K,EAAUuJ,GAAI,EACtD,MAAMyoC,GAAYC,EAAAA,EAAAA,IAAgBryC,EAAQG,EAAQoB,EAAAA,KAAmB,GAC/D+wC,EAAelF,GACjBz3B,EAAAA,EAAAA,IAAOy8B,EAAUn2B,OAAOtS,IAAMvE,MAAK,CAAC8f,EAAGC,IAAMA,EAAID,IACjDktB,EAAUptC,QAAQ1D,IAAQqI,EAAIQ,SAAS7I,KAC3CtB,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQwH,OAAOvH,GAAW,YAAakyC,EAAa,KAE1FlvC,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,mBAAoB,CACvB,MAAM,OACJG,EAAM,SAAEC,EAAQ,WAAEq0B,EAAU,eAAE6b,GAC5BvnB,EAEEwpB,GAAoB1qC,EAAAA,EAAAA,IAAiB7H,EAAQG,EAAQC,GACrDoyC,EAAgB,IACjBD,KACA9d,GAGL,IAAK+d,EAAcpyC,SACjB,OAGFJ,GAASkkB,EAAAA,EAAAA,IAAiBlkB,EAAQG,EAAQC,EAAUoyC,GAEhDlC,IACFtwC,GAASyG,EAAAA,EAAAA,IAAmBzG,EAAQG,EAAQC,EAAU,iBAAkBkwC,IAG1E,MAAMviC,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAMhC,GALI4N,GAAMtL,SAAWgyB,EAAWtQ,yBAA2BouB,GAAmBpuB,wBAC5EzjB,EAAQ60B,cAAc,CAAEp1B,SAAQ2V,QAAS1V,IAIvCq0B,EAAW3E,eAAiB1vB,IAAa2N,GAAMtL,QAAS,CAC1D,MAAM0hB,EAAyBpW,GAAMoW,uBAC/BsuB,EAAiCD,EAAcruB,wBAA0BA,EAC3EA,GAA0BsuB,IAC5BzyC,GAASkkB,EAAAA,EAAAA,IAAiBlkB,EAAQG,EAAQC,EAAU,CAClD+jB,uBAAwBjX,KAAKC,IAAIslC,EAAgCtuB,KAGvE,EAEA/gB,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAQsB,GAAInB,GAAW4oB,EACjB2pB,GAAe7tC,EAAAA,EAAAA,IAAmB7E,EAAQG,GAE5CuyC,KAAiBzY,EAAAA,EAAAA,IAAS95B,KAC5BH,GAASoxC,EAAAA,EAAAA,IAAmBpxC,EAAQG,EAAQmH,OAAOC,KAAKmrC,GAAc3tC,IAAI4C,UAC1EvE,EAAAA,EAAAA,IAAUpD,GACVU,EAAQiyC,aAAa,CAAExyC,SAAQkQ,OAAO,EAAMpQ,OAAOC,EAAAA,EAAAA,SAGrD,KACF,CAEA,IAAK,iBAAkB,CACrB,MAAM,IAAEyJ,EAAG,OAAExJ,GAAW4oB,EAExBgoB,GAAe/wC,EAAQG,EAAQwJ,EAAKjJ,GACpC,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEiJ,EAAG,OAAExJ,GAAW4oB,GAyjB9B,SACE5oB,EAA4BwJ,EAAejJ,EAAgCV,GAEtEG,IAILwJ,EAAIuB,SAAS5J,IACXtB,GAASiwC,EAAAA,EAAAA,IAAuBjwC,EAAQG,EAAQmB,EAAI,CAClDye,YAAY,GACZ,KAGJ3c,EAAAA,EAAAA,IAAUpD,GAEV8I,YAAW,KACT9I,GAAS+I,EAAAA,EAAAA,MACT/I,GAAS8xC,EAAAA,EAAAA,IAA4B9xC,EAAQG,EAAQwJ,GACrD,MAAMipC,GAAoBhuC,EAAAA,EAAAA,IAA4B5E,EAAQG,GAC9DH,GAASyG,EAAAA,EAAAA,IACPzG,EAAQG,EAAQoB,EAAAA,GAAgB,eAAgB+F,OAAOC,KAAKqrC,GAAqB,CAAC,GAAG7tC,IAAI4C,UAE3FvE,EAAAA,EAAAA,IAAUpD,EAAO,GAChBivC,IACL,CA/kBM4D,CAAwB1yC,EAAQwJ,EAAKjJ,EAASV,GAC9C,KACF,CAEA,IAAK,gBAAiB,CACpB,MAAM,OAAEG,GAAW4oB,EACbpkB,EAAe3E,EAAO8E,SAASiG,SAAS5K,GAY9C,GAXIA,IAAWsM,EAAAA,MACbzM,EAAS,IACJA,EACHuM,qBAAsBvM,EAAOuM,qBAAqBxH,KAAKiN,IAAY,IAC9DA,EACH+J,WAAW,QAGf3Y,EAAAA,EAAAA,IAAUpD,IAGR2E,EAAc,CAChB,MAAMgF,EAAMrC,OAAOC,KAAK5C,EAAauX,MAAMnX,IAAI4C,QAE/CopC,GADA/wC,GAAS+I,EAAAA,EAAAA,MACc5I,EAAQwJ,EAAKjJ,EACtC,MACEA,EAAQ4rC,kBAAkB,CAAEnsC,WAG9B,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,IAAEwJ,EAAG,cAAEojC,GAAkBhkB,EAE/Bpf,EAAIuB,SAAS5J,IACX,MAAMnB,GAAS8sC,EAAAA,EAAAA,IAAsBjtC,EAAQsB,GACzCnB,IACFH,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQmB,EAAIyrC,GACjD,KAGF3pC,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,UAAEgtC,EAAS,IAAErjC,EAAG,cAAEojC,GAAkBhkB,EAE1Cpf,EAAIuB,SAAS5J,IACXtB,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQgtC,EAAW1rC,EAAIyrC,EAAc,KAGlE3pC,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,oBAAqB,CACxB,MAAM,OAAE8yC,EAAM,WAAEC,GAAehqB,EAEzB9jB,GAAU+tC,EAAAA,EAAAA,IAA0BhzC,EAAQ8yC,GAElD,GAAI7tC,GAAS2H,QAAQ4X,KAAM,CACzB,MAAMyuB,EAAahuC,EAAQ2H,QAAQ4X,KAAKxV,QACxC,IAAI0wB,EAAauT,EACbF,EAAW/jC,SAASA,UACjBikC,EAAWjkC,SAAY+jC,EAAW/jC,QAAQkkC,MAEpCD,EAAWjkC,UACpB0wB,EAAa,IACRqT,EAAW/jC,QACdA,QAAS+jC,EAAW/jC,QAAQA,QAAQjK,KAAKQ,IAAM,IAC1CA,EACH4tC,SAAUF,EAAWjkC,QAAS7D,MAAM6+B,GAAMA,EAAEvlB,SAAWlf,EAAOkf,UAAS0uB,aAEzED,WAAO3yC,IARTm/B,EAAaqT,EAAW/jC,SAY5B,MAAMokC,EAAc,IAAKnuC,EAAQ2H,QAAQ4X,QAASuuB,EAAY/jC,QAAS0wB,GAEvE1/B,GAAS2f,EAAAA,EAAAA,IACP3f,EACAiF,EAAQ9E,OACR8E,EAAQ3D,GACR,CACEsL,QAAS,IACJ3H,EAAQ2H,QACX4X,KAAM4uB,MAIZhwC,EAAAA,EAAAA,IAAUpD,EACZ,CACA,KACF,CAEA,IAAK,wBAAyB,CAC5B,MAAM,OAAE8yC,EAAM,OAAE1jC,EAAM,QAAEmV,GAAYwE,EAC9B9jB,GAAU+tC,EAAAA,EAAAA,IAA0BhzC,EAAQ8yC,GAClD,IAAK7tC,IAAYA,EAAQ2H,QAAQ4X,OAASvf,EAAQ2H,QAAQ4X,KAAKxV,QAC7D,MAGF,MAAM,KAAEwV,GAASvf,EAAQ2H,SAEnB,eAAEymC,EAAc,YAAEC,EAAW,QAAEtkC,GAAYwV,EAAKxV,QAChDukC,EAAoBF,EAAiB,IAAIA,GAAkB,GAC3DG,EAAiBF,EAAcA,EAAc,EAAI,EACjD5T,EAAa1wB,EAAU,IAAIA,GAAW,GAE5CukC,EAAkB3tC,KAAKwJ,GAEvBmV,EAAQrZ,SAASuZ,IACf,MAAMgvB,EAAoB/T,EAAWptB,WAAW/M,GAAWA,EAAOkf,SAAWA,IACvEivB,EAAehU,EAAW+T,GAC1BE,EAA+BD,EAAe,IAAKA,GAAiB,CAAEjvB,SAAQmvB,YAAa,GAEjGD,EAAcC,aAAe,EACzBxkC,IAAWpP,EAAO0X,gBACpBi8B,EAAcR,UAAW,GAGvBM,EACF/T,EAAW+T,GAAqBE,EAEhCjU,EAAW95B,KAAK+tC,EAClB,IAGF3zC,GAAS2f,EAAAA,EAAAA,IACP3f,EACAiF,EAAQ9E,OACR8E,EAAQ3D,GACR,CACEsL,QAAS,IACJ3H,EAAQ2H,QACX4X,KAAM,IACDA,EACHxV,QAAS,IACJwV,EAAKxV,QACRqkC,eAAgBE,EAChBD,YAAaE,EACbxkC,QAAS0wB,QAMnBt8B,EAAAA,EAAAA,IAAUpD,GAEV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,QAAEiF,GAAY8jB,GAEhB8qB,EAAAA,EAAAA,IAAyB7zC,IAC3BU,EAAQqM,0BAA0B,CAAE9H,YAGtC,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,OAAE9E,EAAM,GAAEmB,EAAE,UAAEmoC,GAAc1gB,EAC5B9jB,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQmB,GAC5CyM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQ+oB,EAAO5oB,QAEvC,IAAK4N,IAAS9I,EAAS,OAEvBjF,EAASkvC,GAAgBlvC,EAAQG,EAAQmB,EAAImoC,EAAW17B,EAAM9I,EAAQ6H,WAAY7H,IAClF7B,EAAAA,EAAAA,IAAUpD,GACV,KACF,CAEA,IAAK,6BAA8B,CACjC,MAAM,OACJG,EAAM,GAAEmB,EAAE,MAAEwyC,EAAK,QAAEC,GACjBhrB,EACE9jB,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQmB,GAGlD,KAFakB,EAAAA,EAAAA,IAAWxC,EAAQ+oB,EAAO5oB,UAEzB8E,EAAS,OAEvB,GAAI8uC,EAAS,CACX,IAAK9uC,EAAQ2H,QAAQwwB,QAAS,OAC9Bp9B,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQmB,EAAI,CAC7CsL,QAAS,IACJ3H,EAAQ2H,QACXwwB,QAAS,IACJn4B,EAAQ2H,QAAQwwB,QACnB4W,cAAeD,OAIrB3wC,EAAAA,EAAAA,IAAUpD,EACZ,MAAW8zC,IACT9zC,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQmB,EAAI,CAC7CsL,QAAS,IACJknC,MAGP1wC,EAAAA,EAAAA,IAAUpD,IAGZ,KACF,CAEA,IAAK,yBAA0B,CAC7B,MAAM,gBAAE8lB,EAAe,KAAExiB,EAAI,UAAEwlB,GAAcC,EAE7C/oB,EAAS,IACJA,EACHi0C,eAAgB,IACXj0C,EAAOi0C,eACV,CAACnuB,GAAkB,IACb9lB,EAAOi0C,eAAenuB,IAAoB,CAAC,EAC/CA,kBACAxiB,OACAwlB,gBAIN1lB,EAAAA,EAAAA,IAAUpD,GACV,KACF,CAEA,IAAK,0BAA2B,CAC9B,MAAM,OAAEG,EAAM,QAAE8R,EAAO,MAAE4E,GAAUkS,EAE/BlS,EAAMqQ,MAAM,2BACd5f,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClDS,EAAQ8nB,oCAAoC,CAAEroB,SAAQF,SAAQ,IAIlED,GAAS2f,EAAAA,EAAAA,IAAkB3f,EAAQG,EAAQ8R,EAAS,CAAEiiC,aAAc,+BACpE9wC,EAAAA,EAAAA,IAAUpD,GACV,KACF,CAEA,IAAK,4BAA6B,CAChC,MAAM,OACJG,EAAM,WAAEoE,EAAU,eAAEkkB,EAAc,aAAE0rB,GAClCprB,EAEJ/oB,GAASo0C,EAAAA,EAAAA,IAA0Bp0C,EAAQG,EAAQoE,EAAYkkB,EAAgB0rB,IAE/E/wC,EAAAA,EAAAA,IAAUpD,GACV,KACF,EAAC,IC1oBL,MAEMq0C,IAA8B/qB,EAAAA,EAAAA,KASpC,WAEE,IAAItpB,GAAS+I,EAAAA,EAAAA,MAEb/I,GAASw4B,EAAAA,EAAAA,IAAoBx4B,EAAQ,IAChCA,EAAO4b,MAAM6c,gBACb6b,MAELlxC,EAAAA,EAAAA,IAAUpD,GAEVs0C,GAAuB,CAAC,CAC1B,GAtB+B,KAE0D,GAEzF,IAAIA,GAAsD,CAAC,GAoB3D7zC,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAC9C,OAAQA,EAAO,UACb,IAAK,gBACH,OAAOwrB,EAAAA,EAAAA,IAAcv0C,EAAQ+oB,EAAOznB,IAGtC,IAAK,aAgBH,OAfAgG,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAC9C8oB,EAAOznB,KAAOtB,EAAO0X,eAAiBqR,EAAO5G,KAAK2K,aAAc/H,EAAAA,EAAAA,IAA2B/kB,KAEzF+oB,EAAO5G,KAAK2K,WAAWpsB,EAAQ8zC,iBAAiB,CAAExS,WAAW,EAAM/hC,UAGvED,EAAS,IACJA,EACHm0C,aAAc,CACZppC,SAAU,CAAC,IAGjB,KAGK0uB,EAAAA,EAAAA,IAAWz5B,EAAQ+oB,EAAOznB,GAAIynB,EAAO5G,MAG9C,IAAK,0BACHzhB,EAAQ+zC,aAAa,CAAErlC,OAAQ2Z,EAAOznB,KACtC,MAGF,IAAK,wBACH,OAAOm4B,EAAAA,EAAAA,IAAWz5B,EAAQ+oB,EAAO3Z,OAAQ,CAAEirB,YAAatR,EAAOsR,cAGjE,IAAK,mBAGH,OAvDwBjrB,EAsDH2Z,EAAO3Z,OAtDYslC,EAsDJ3rB,EAAO5Q,OArD/Cm8B,GAAqBllC,GAAUslC,OAC/BL,KAwDE,IAAK,qBAAsB,CACzB,MAAM,GAAE/yC,EAAE,SAAEglB,GAAayC,EACnB4rB,EAAa30C,EAAO4b,MAAMM,KAAK5a,GACrC,IAAKqzC,EACH,OAGF,OAAOlb,EAAAA,EAAAA,IAAWz5B,EAAQsB,EAAI,CAC5BglB,SAAU,IACLquB,EAAWruB,YACXA,IAGT,CAEA,IAAK,sBAAuB,CAC1B,MAAM,MAAEpS,EAAK,OAAE4pB,GAAW/U,EAEpB4rB,GAAavyB,EAAAA,EAAAA,IAAWpiB,EAAQkU,GACtC,IAAKygC,GAAYruB,UAAUsuB,QACzB,OAGF,OAAOnb,EAAAA,EAAAA,IAAWz5B,EAAQkU,EAAO,CAC/BoS,SAAU,IACLquB,EAAWruB,SACdsuB,QAAS,IACJD,EAAWruB,SAASsuB,QACvBC,WAAY/W,KAIpB,EA1FJ,IAA8B1uB,EAAgBslC,CA6F5B,KCvGlBj0C,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAC9C,GACO,qBADCA,EAAO,SAEX,OAAOgB,EAAAA,EAAAA,IAAiB/pB,EAAQ+oB,EAAOznB,GAAIynB,EAAOY,WAItC,KCHlBlpB,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAC9C,OAAQA,EAAO,UACb,IAAK,oBACH,OAAIA,EAAOuX,WACFwU,EAAAA,EAAAA,IAAkB90C,EAAQ+oB,EAAOznB,KAEjCy9B,EAAAA,EAAAA,IAAqB/+B,EAAQ+oB,EAAOznB,IAG/C,IAAK,yBACHtB,EAAS,IACJA,EACH44B,YAAa,CACXpI,QAAS,MAGbptB,EAAAA,EAAAA,IAAUpD,GACV,MAEF,IAAK,eACHU,EAAQ4pC,aACR,MAEF,IAAK,yBACH5pC,EAAQq0C,uBACR,MAEF,IAAK,uBACHr0C,EAAQ6oB,qBACR,MAEF,IAAK,4BACH7oB,EAAQs0C,0BACR,MAEF,IAAK,4BAA6B,CAChC,MAAMC,EAAWlsB,EAAOnX,cAAgB5R,EAAO+R,aAAaF,MAAMC,OAAS9R,EAAOqR,SAASQ,MAAMC,OACjG,IAAKmjC,EAAU,OAAOj1C,EACtB,MAAMk1C,EAAW,CAACnsB,EAAOznB,MAAO2zC,EAASjwC,QAAQ1D,GAAOA,IAAOynB,EAAOznB,MACtEZ,EAAQy0C,mBAAmB,CAAExjC,MAAOujC,EAAUtjC,cAAemX,EAAOnX,gBACpE,KACF,CAEA,IAAK,oBACHlR,EAAQ00C,kBACR,MAEF,IAAK,yBACH10C,EAAQy0C,mBAAmB,CAAExjC,MAAOoX,EAAOpX,MAAOC,cAAemX,EAAOnX,gBACxE,MAEF,IAAK,kBACHlR,EAAQ20C,gBACR,MAEF,IAAK,gBACHr1C,EAAS,IACJA,EACH+U,SAAU,IACL/U,EAAO+U,SACVugC,QAAS,IACJt1C,EAAO+U,SAASugC,QACnB,CAACvsB,EAAOwsB,KAAMxsB,EAAOysB,UAI3BpyC,EAAAA,EAAAA,IAAUpD,GACV,MAEF,IAAK,kCACHsH,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClDD,GAASy1C,EAAAA,EAAAA,IAAqBz1C,EAAQ+oB,EAAOlV,IAAK5T,GAClDD,GAASs9B,EAAAA,EAAAA,IAAet9B,EAAQu9B,EAAAA,GAAAA,eAA4Bt9B,EAAM,KAEpEmD,EAAAA,EAAAA,IAAUpD,GACV,MAEF,IAAK,0BACHsH,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAStJ,IACjCA,EAAS6+B,QAAQR,UAAYlX,EAAOkX,UACtCv/B,EAAQqH,gBAAgB,CAAErB,eAAWnG,EAAWN,MAAO2B,EAASN,KAChEZ,EAAQkgC,YAAY,CAAE3gC,MAAO2B,EAASN,KACxC,IAKU,KCzFlBb,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAC9C,OAAQA,EAAO,UACb,IAAK,uBACH,OAAO2sB,EAAAA,EAAAA,IAAqB11C,EAAQ+oB,EAAO4sB,SAAU5sB,EAAOhG,SAAUgG,EAAO6sB,oBAG/E,IAAK,yBAA0B,CAC7B,MAAM,OACJz1C,EAAM,QAAEiI,EAAO,SAAE2a,EAAQ,mBAAE6yB,GACzB7sB,EACS/oB,EAAOsO,MAAM4N,KAAK/b,KAG7BH,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAAEiI,aAGxCpI,GAAS61C,EAAAA,EAAAA,IAAmB71C,EAAQG,EAAQ,CAAEiI,UAAS2a,WAAU6yB,wBACjExyC,EAAAA,EAAAA,IAAUpD,GACV,KACF,CAEA,IAAK,8BAA+B,CAClC,MAAM,OACJG,EAAM,QAAE2V,EAAO,QAAE1N,GACf2gB,EAEJ/oB,GAASqkB,EAAAA,EAAAA,IAAYrkB,EAAQG,EAAQ2V,EAAS,CAAE1N,aAEhDhF,EAAAA,EAAAA,IAAUpD,GACV,KACF,EAGc,KCrClBS,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAC9C,OAAQA,EAAO,UACb,IAAK,2BACH,MAAO,IACF/oB,EACH81C,cAAe,IACV91C,EAAO81C,cACV38B,WAAW,EACXgpB,uBAAwBpZ,EAAOrhB,SAKrC,IAAK,mBACH,MAAO,IACF1H,EACH81C,cAAe,IACV91C,EAAO81C,cACVj/B,MAAOkS,EAAO9jB,UAMN,I,6BCblBxE,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAC9C,OAAQA,EAAO,UACb,IAAK,kBAAmB,CACtB,GAAoC,cAAhCA,EAAOgtB,KAAK7f,gBACd,OAAIl2B,EAAOg2C,WAAWC,uBAChB,mBAAoBv1C,GAASA,EAAQw1C,eAAe,CAAEC,cAAc,EAAMl2C,OAAOC,EAAAA,EAAAA,UAG9Ek2C,EAAAA,GAAAA,IAAgBp2C,EAAQ+oB,EAAOgtB,KAAKz0C,IAI/C,MAAM+0C,GAAYC,EAAAA,GAAAA,IAAgBt2C,EAAQ+oB,EAAOgtB,KAAKz0C,IAChDnB,EAASk2C,GAAWl2C,OAO1B,OANIA,IACFH,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClCo2C,eAAiBF,EAAUG,kBAAoB,GAAKxvC,QAAQqvC,EAAUI,cAAc/uC,YAIjFgvC,EAAAA,GAAAA,IACL12C,EACA+oB,EAAOgtB,KAAKz0C,IACZ2e,EAAAA,EAAAA,IAAK8I,EAAOgtB,KAAM,CAAC,yBACnBx1C,EACAwoB,EAAOgtB,KAAKS,kBAEhB,CACA,IAAK,wBAAyB,CAC5B,MAAMzoC,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQ+oB,EAAO5oB,QASvC,OARI4N,IACF/N,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQ+oB,EAAO5oB,OAAQ,CACzCmmB,SAAU,IACLvY,EAAKuY,SACRqwB,YAAa5tB,EAAOgtB,KAAKz0C,OAIxBtB,CACT,CACA,IAAK,8BAA+B,CAClC,MAAM,YAAE22C,EAAW,aAAEF,EAAY,WAAE7xB,GAAemE,GAC5C,cAAErR,GAAkB1X,EAG1BA,GAAS+I,EAAAA,EAAAA,MACT0tC,EAAavrC,SAAS0rC,IAChBA,EAAYt1C,KACdtB,GAAS62C,EAAAA,GAAAA,IACP72C,EAAQ22C,EAAaC,EAAYt1C,GAAIs1C,EAAa5vC,QAAQ4d,IAAelN,IAAkBk/B,EAAYt1C,IAE3G,IAEEsjB,IACF5kB,GAAS02C,EAAAA,GAAAA,IAAgB12C,EAAQ22C,EAAa,CAC5C/xB,gBAIJ,MAAMyxB,GAAYC,EAAAA,GAAAA,IAAgBt2C,EAAQ22C,GACpCx2C,EAASk2C,GAAWl2C,OAM1B,OALIA,IACFH,GAASuiB,EAAAA,EAAAA,IAAWviB,EAAQG,EAAQ,CAClCo2C,eAAiBF,EAAUG,kBAAoB,GAAKxvC,QAAQqvC,EAAUI,cAAc/uC,WAGjF1H,CACT,CACA,IAAK,kBAAmB,CACtB,IAAK82C,EAAAA,GAAqB,OAE1B,MAAM,UACJC,EAAS,cACTr/B,GACE1X,GAEE,KAAE+1C,GAAShtB,EAEjB,GAAIguB,EACF,MAAmB,cAAfhB,EAAKiB,OACPt2C,EAAQu2C,mBAAmB,CAAEC,MAAO,QAChC,WAAYx2C,GAASA,EAAQy2C,OAAO,CAAEl3C,OAAOC,EAAAA,EAAAA,QAE1C,IACFF,KACC+1C,EAAKqB,YAAc,CAAEC,gBAAiBtB,UAI9C,EAKF,GAFmBA,GAAMrkB,UAAYha,GAEH,cAAfq+B,EAAKiB,MAgBtB,OAfA53B,EAAAA,EAAAA,KAAU,KACRpf,GAAS+I,EAAAA,EAAAA,OACTuuC,EAAAA,GAAAA,IAAgB,CACdvB,OACA5zB,MAAMo1B,EAAAA,GAAAA,IAAoBv3C,IAC1B,KAGJw3C,EAAAA,EAAAA,OACKC,EAAAA,EAAAA,IAAmCz3C,EAAQU,EAASq1C,EAAK2B,SAASx3C,EAAAA,EAAAA,OACvEF,EAAS,IACJA,EACH+2C,UAAWhB,IAGN/zC,EAAAA,EAAAA,GAAehC,EAAQ,CAC5B23C,oBAAoB,IACnBz3C,EAAAA,EAAAA,MAEP,EAGc,I,gBCzHlBO,EAAAA,EAAAA,IAAiB,aAAa,CAACT,EAAQU,EAASqoB,KAEvC,gCADCA,EAAO,UAEXzhB,OAAO2S,OAAOja,EAAO+Y,SAAS7N,SAAQ,IAAmB,IAAhB5J,GAAIrB,GAAO,EAClD,MAAM,aAAEi9B,IAAiBl8B,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QAEvD,GAAI8kB,GAAgB,WAAYA,GAAgB,cAAeA,EAAc,CAC3E,MAAMj4B,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQk9B,EAAa/8B,OAAQ+8B,EAAax2B,WAE5E,GAAIzB,GAAWA,EAAQ2H,QAAQwwB,QAAS,CACtC,MAAM,OAAEqJ,EAAM,SAAEF,EAAQ,MAAEt2B,GAAUhL,EAAQ2H,QAAQwwB,QAEpD18B,EAAQmL,iBAAiB,CACvB5L,QACAgF,QAASP,EAAAA,GAAuB,kBAAmB,EACjDkzC,EAAAA,GAAAA,GAAenR,EAAQF,EAAU7hC,EAAAA,KAAgC09B,MACjEnyB,KAGN,CACF,CAKK4nC,EAAAA,KACH73C,GAASsY,EAAAA,EAAAA,IAAatY,EAAQC,IAG5B8oB,EAAO8X,MAAQ3D,GAAgB,SAAUA,GAAgBA,EAAa2D,OAAS9X,EAAO8X,OAI1F7gC,GAASgC,EAAAA,EAAAA,GAAehC,EAAQ,CAC9BoY,QAAS,KACJpX,EAAAA,EAAAA,IAAehB,EAAQC,GAAOmY,QACjCD,OAAQ,SAETlY,GAAM,GAKC,I,yECjDH,SAAS63C,GAAgBC,IACtCC,EAAAA,EAAAA,KAAU,KACDp/B,EAAAA,EAAAA,IAAem/B,IACrB,CAACA,GACN,C,gBCLA,MAAME,GAAevoC,SAASwoC,cAAc,yBACtCC,GAAyBF,IAAcG,aAAa,YAAc,GAClEC,GAA6B,4EAiCnC,SAASC,GAAapnC,GACpBA,EAAEqnC,gBACJ,C,4ECjCA,MAQA,IAAeC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE12C,GAAW02C,EACbC,GAAkBC,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB72C,GAG3E,OAAO22C,EAAkB,mBAACA,EAAoBD,QAAYl4C,CAAS,I,uCCArE,MAmBA,IAAei4C,EAAAA,EAAAA,KAnBqB,IAAuB,IAAtB,cAAEK,GAAe,GACpDC,EAAAA,GAAAA,MACA,MAAMC,GAA2BvhC,EAAAA,EAAAA,MAQjC,IANAwgC,EAAAA,EAAAA,KAAU,KACJa,IACFG,EAAAA,GAAAA,GAAeD,EACjB,GACC,CAACF,EAAeE,KAEfF,GAAkBE,EAItB,OACE,0BAAKhsB,UAAU,wBAAuBksB,EAAAA,GAAAA,IAAqBF,GAAgC,I,6GCtBxF,IAAKG,GAYG,SAASC,GACtB10C,EACAyxB,EACAzC,EACA2lB,EACAljC,EACAmjC,GAEA,IAAIlhC,EAUAtU,EAWAP,EAWJ,OA3BE6U,EC5BW,WACb,MAAOmhC,EAAUC,IAAeC,EAAAA,EAAAA,IAASz2C,OAAO02C,UAAUC,QAgB1D,OAdA1B,EAAAA,EAAAA,KAAU,KACR,SAAS2B,IACPJ,EAAYx2C,OAAO02C,UAAUC,OAC/B,CAKA,OAHA32C,OAAO62C,iBAAiB,SAAUD,GAClC52C,OAAO62C,iBAAiB,UAAWD,GAE5B,KACL52C,OAAO82C,oBAAoB,UAAWF,GACtC52C,OAAO82C,oBAAoB,SAAUF,EAAa,CACnD,GACA,IAEIL,CACT,CDM0BQ,IACoB,8BAApB5jB,EAEbzC,EACAylB,GAAiBa,QAEjBb,GAAiBc,OAJjBd,GAAiBe,kBAS1Bp2C,EADEsU,IAAW+gC,GAAiBc,QAAUX,EAC7B,OACFD,EACE,eACFljC,EACE,YAEA,UAITiC,IAAW+gC,GAAiBe,kBAC9B32C,EAAOmB,EAAK,qBACH0T,IAAW+gC,GAAiBa,UACrCz2C,EAAOmB,EAAK,aAGG,iBAAbZ,IACFP,EAAOA,EAAM42C,cAAcpqC,QAAQ,OAAQ,KAGtC,CACLqqC,iBAAkBhiC,EAClBiiC,yBAA0Bv2C,EAC1Bw2C,qBAAsB/2C,EAE1B,EArDC,SAJW41C,GAAAA,EAAAA,EAAgB,yCAAhBA,EAAAA,EAAgB,qBAAhBA,EAAAA,EAAgB,mBAI3B,CAJWA,KAAAA,GAAgB,K,0HEa5B,MA0BA,IAAeV,EAAAA,EAAAA,KA1B+B,IAIxC,IAJyC,iBAC7C2B,EAAgB,qBAChBE,EAAoB,QACpBC,GACD,EACC,MAAM71C,GAAO81C,EAAAA,GAAAA,KAEb,OACE,0BAAKj5C,GAAG,0BAA0Bk5C,IAAK/1C,EAAKg2C,MAAQ,WAAQl6C,EAAW+5C,QAASA,GAC9E,mBAACI,GAAA,EAAO,CAACC,MAAM,UACf,0BAAK5tB,UAAU,cACb,mBAAC6tB,GAAA,EAAU,CAACC,UAAWV,EAAkB3O,KAAK,cAC3C6O,IAGL,mBAACS,GAAA,EAAM,CACLjjC,OAAK,EACLkjC,KAAK,OACLJ,MAAM,qBAEN,2BAAM5tB,UAAU,gBAEd,I,sCCvCV,SAAyD,uBCmEzD,IAAeyrB,EAAAA,EAAAA,KA9CyB,IAIlC,IAJmC,SACvC9P,EAAQ,SACRsS,EAAQ,UACRjuB,GACD,EACC,MAAMkuB,GAAcC,EAAAA,EAAAA,IAAsBxS,EAASj3B,YAE7C0pC,GAAmBC,EAAAA,GAAAA,GAAUJ,OAAyBz6C,EAAd06C,GAExCI,GAAkBC,EAAAA,EAAAA,KAAQ,IACzBC,EAAAA,GACEta,MAAMzjB,KAAK,CAAE9V,OAbF,IAa2B3C,KAAI,IAqCrD,WACE,MAAMmiC,GAAK,GAAqB,GAAhBh6B,KAAKwZ,WAAkBxZ,KAAKwZ,SAAW,GAAM,GAAK,GAC5DshB,EAAI,GAAqB,GAAhB96B,KAAKwZ,SAEpB,MAAQ,eAAcwgB,MAAMc,EAAI,MAAMd,KAAKc,GAC7C,CA1C2DwT,KADjB,IAErC,IAEH,GAAKL,GAAqBH,EAI1B,OACE,0BAAKjuB,WAAW0uB,EAAAA,GAAAA,GDxCG,uBCwCyB1uB,IACzCsuB,EAAMt2C,KAAK22C,IACV,MAAMC,EAAS,wBAAuBD,OACtC,OAAIV,EAEA,mBAACY,GAAA,EAAW,CACVnqC,WAAYi3B,EAASj3B,WACrBsb,UAAW8uB,GACXF,MAAOA,EACPG,qBAAmB,IAMvB,0BACEC,IAAKZ,EACLa,IAAI,GACJjvB,UAAW8uB,GACXF,MAAOA,GACP,IAGF,IC/CV,IAAenD,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE12C,GAAW02C,EACbwD,GAAmBtD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB72C,GAG7E,OAAOk6C,EAAmB,mBAACA,EAAqBxD,QAAYl4C,CAAS,ICkFvE,IAAei4C,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAAYl8C,IAC9B,MAAM,cAAE0X,GAAkB1X,EAG1B,MAAO,CACLq6B,aAHkB3iB,GAAgB0K,EAAAA,EAAAA,IAAWpiB,EAAQ0X,QAAiBnX,IAG5C85B,YAC3B,GANiB6hB,EArEiB,IAAqB,IAApB,YAAE7hB,GAAa,EACnD,MAAM,eAAE8hB,EAAc,gBAAEC,IAAoBhmB,EAAAA,EAAAA,MAGtCimB,GAAYC,EAAAA,EAAAA,IAA0B,OACrCC,EAAkBC,EAAsBC,IAA0BC,EAAAA,GAAAA,IAAQ,IAC1EC,EAAeC,EAAYC,IAAcH,EAAAA,GAAAA,IAAQ,IACjDI,EAAoBC,EAAkBC,IAAqBN,EAAAA,GAAAA,IAAQ,IACpE,SAAEO,IAAaC,EAAAA,EAAAA,MAEfC,EAAQ9iB,GAAa+iB,MAA4B,IAApB/iB,EAAY+iB,MAAelxC,KAAKC,MAAgC,KAAxBkxC,EAAAA,EAAAA,WAA+B98C,GAC1G+8C,EAAAA,GAAAA,GAAWlB,EAAiBe,IAE5BI,EAAAA,GAAAA,IAAsB,IAAuB,IAArBC,GAAgB,EAClCjB,GAAoBliB,GAAemjB,GAAmBnjB,EAAY5oB,aAAe+rC,EAAgB/rC,aACnGmrC,IACAH,IACF,GAEC,CAACpiB,EAAakiB,EAAkBK,EAAYH,IAE/C,MAAMgB,GAAuBC,EAAAA,EAAAA,KAAavsC,IACxCqrC,IACAL,EAAe,CAAE9hB,YAAalpB,GAAU,GACvC,CAACqrC,EAAsBL,KAE1BmB,EAAAA,GAAAA,GAAWT,EAAYF,EA7BE,UA6BmCp8C,GAE5D,MAAMo9C,GAAyBD,EAAAA,EAAAA,KAAY,KACzCX,GAAkB,GACjB,CAACA,IAEJ,OACE,0BAAKhwB,UAAU,iBACZ/lB,QAAQ21C,GAAiBtiB,IACxB,mBAAC,GAAiB,CAChBqO,SAAUrO,EACV2gB,UAAQ,EACRjuB,UAAU,wBAGd,mBAAC+tB,GAAA,EAAM,CACLjjC,OAAK,EACL+lC,IAAKvB,EACLwB,QAASZ,EACTlC,KAAK,UACLJ,MAAM,cACN5tB,UAAU,eACVutB,QAASqD,GAERtjB,EACC,mBAACuhB,GAAA,EAAW,CACVrG,IAAKlb,EAAY5oB,WACjBA,WAAY4oB,EAAY5oB,WACxBspC,KAxDc,GAyDd+C,UAAWC,EAAAA,MAEX,mBAACC,GAAA,EAAW,OAElB,mBAAC,GAAgB,CACfC,gBAAiB5B,EACjBt6C,OAAQ+6C,EACRoB,oBAAqBT,EACrBU,QAASnB,IAEP,KCVJoB,GAA0B,CAAC,EAAG,EAAG,GAsXvC,IAAe5F,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACjBl8C,IACC,MAAM4B,GAAWZ,EAAAA,EAAAA,IAAehB,IAE9BY,MAAOy9C,EAAW,eAAEhwC,EAAc,OAAElO,EAAM,KAAEuM,GAC1C9K,EAASoM,cACP,cACJ0J,EAAa,gBAAEwe,EAAe,UAAEzC,EAAS,gBAAEzd,GACzChW,GACIkc,KAAMoiC,GAAct+C,EAAOsO,OAC7B,4BAAEiwC,EAA2B,eAAEzpC,GAAmB9U,EAAO+U,SAASC,MAExE,MAAO,CACLqpC,cACAllC,YAAW9K,GAAiBrH,QAAQqH,EAAeC,OAASD,EAAevJ,UAC3E4S,gBACA4mC,YACAE,mBAAoBr+C,EACpBs+C,WAAY/xC,EACZ4xB,OAAOogB,EAAAA,EAAAA,IAAY1+C,GACnB8U,iBACAohB,kBACAzC,YACAkrB,kBAAmB33C,SAAQ3G,EAAAA,EAAAA,IAAyBL,IACpDu+C,8BACAz5B,sBAAsBC,EAAAA,EAAAA,IAA2B/kB,GACjD4+C,eAAgB53C,QAAQhH,EAAOsO,MAAMi/B,QAAQpD,QAC7CrxB,YAAa9R,QAAQhH,EAAO6Y,SAASC,aACrC+lC,WAAY73C,QAAQpF,EAASi9C,YAC7B7oC,kBACD,GA9BekmC,EAnX8B,IA4B5C,IA5B6C,iBACjD4C,EAAgB,QAChBlyC,EAAO,eACPmyC,EAAc,cACdC,EAAa,gBACbC,EAAe,iBACfC,EAAgB,iBAChBC,EAAgB,iBAChBC,EAAgB,QAChBC,EAAO,YACPhB,EAAW,UACXllC,EAAS,qBACT2L,EAAoB,qBACpBw6B,EAAoB,cACpB5nC,EAAa,mBACb8mC,EAAkB,WAClBC,EAAU,MACVngB,EAAK,eACLxpB,EAAc,UACdwpC,EAAS,gBACTpoB,EAAe,UACfzC,EAAS,kBACTkrB,EAAiB,4BACjBJ,EAA2B,eAC3BK,EAAc,YACd9lC,EAAW,WACX+lC,EAAU,gBACV7oC,GACD,EACC,MAAM,SACJ3S,EAAQ,oBACRk8C,EAAmB,iBACnBC,EAAgB,sBAChBC,EAAqB,mBACrBC,EAAkB,WAClBC,EAAU,0BACVC,EAAyB,iBACzBC,EAAgB,QAChBljB,IACEvG,EAAAA,EAAAA,MAEE3xB,GAAO81C,EAAAA,GAAAA,MACP,SAAE0C,IAAaC,EAAAA,EAAAA,MACf4C,EAAUlzC,IAAYmzC,EAAAA,GAAAA,SAGtBC,GAAqB1E,EAAAA,EAAAA,KAAQ,IAC1BmD,GACHwB,EAAAA,GAAAA,IAAmB,IAAI/zC,KAAkB,IAAbuyC,SAC5Bl+C,GACH,CAACk+C,IACEyB,GAA2B5E,EAAAA,EAAAA,KAAQ,IAClCwE,GAAYxB,EAIVh3C,OAAO2S,OAAOqkC,GAAW94C,QAAO,CAAC26C,EAAOpyC,KACxCqyC,EAAAA,EAAAA,IAAeryC,IAIbA,EAAK8V,YAAcs8B,EAAQ,EAHzBA,GAIR,GATM,GAUR,CAACL,EAASxB,KAEP,iBAAEnE,EAAgB,qBAAEE,EAAoB,yBAAED,GAA6BjB,GAC3E10C,EAAMyxB,EAAiBzC,EAAWkrB,EAAmBJ,GAA8BK,GAG/EyB,GAAyB3C,EAAAA,EAAAA,KAAaxsC,IAC1CA,EAAEqnC,iBACFrnC,EAAEovC,kBACExnC,EACF6mC,IAEAC,EAA0B,CAAEnvC,OAAQ8vC,EAAAA,GAAAA,kBACtC,GACC,CAACznC,EAAa6mC,EAAYC,KAE7BY,EAAAA,GAAAA,GAAW,CACT,eAAgBH,EAChB,cAAeA,EACf,eAAgBA,KACZI,EAAAA,IAAU,CAAE,QAASJ,KAG3B,MAAMK,EAAoB39C,OAAOk4B,SAASvT,WAAai5B,EAAAA,KAAuBC,EAAAA,IAExEC,IAA8DvF,EAAAA,EAAAA,KAAQ,IACnE,QAAC,UAAEwF,EAAS,OAAE/+C,GAAQ,SAC3B,mBAAC+4C,GAAA,EAAM,CACLjjC,OAAK,EACLgmC,OAAQiC,IAAY7C,EACpBlC,KAAK,UACLJ,MAAM,cACN5tB,UAAWhrB,EAAS,SAAW,GAE/Bu4C,QAASwF,EAAUgB,EAAY,IAAMzB,IACrC0B,UAAWjB,EAAUr7C,EAAK,qBAAuB,uBAEjD,0BAAKsoB,WAAW0uB,EAAAA,GAAAA,GACd,sBACCqE,GAAW,aACZR,GAAwB,kBAGnB,GAEV,CAACQ,EAAS7C,EAAUx4C,EAAM46C,EAASC,IAEhC0B,IAAoBtD,EAAAA,EAAAA,KAAY,KAC/BW,GACHW,EAAc,GAChB,GACC,CAACX,EAAaW,IAEXiC,IAAyBvD,EAAAA,EAAAA,KAAY,KACzC8B,EAAiB,CAAEjB,6BAA8BA,GAA8B,GAC9E,CAACA,EAA6BiB,IAE3B0B,IAAoBxD,EAAAA,EAAAA,KAAY,KACpCr6C,EAAS,CAAE/B,GAAIoW,EAAejW,sBAAsB,GAAO,GAC1D,CAACiW,EAAerU,IAEb89C,IAAuBzD,EAAAA,EAAAA,KAAaxsC,IACxCA,EAAEovC,kBACF,MAAMc,EAAqB,UAAV9iB,EAAoB,OAAS,QAE9CkhB,EAAiB,CAAElhB,MAAO8iB,IAC1B5B,EAAiB,CAAE6B,sBAAsB,KACzCC,EAAAA,GAAAA,GAAYF,EAAUtsC,IAAmB40B,EAAAA,IAAoB,GAC5D,CAAC50B,EAAgB0qC,EAAkBlhB,IAEhCijB,IAA6B7D,EAAAA,EAAAA,KAAaxsC,IAC9CA,EAAEovC,kBAEF,MAAMkB,EAA8B,IAAnB1sC,EAAuB,EAAI,EAC5CspC,GAAwBlzC,SAAQ,CAACu2C,EAAGpkC,KAClC3N,SAAS40B,KAAKod,UAAUC,OAAQ,mBAAkBtkC,IAAKmkC,IAAankC,EAAE,IAGxEmiC,EAAiB,CAAE1qC,eAAgB0sC,GAAW,GAC7C,CAAC1sC,EAAgB0qC,IAEdoC,IAAuBlE,EAAAA,EAAAA,KAAY,KACvC36C,OAAOC,KAAK6+C,EAAAA,IAAoB,SAAU,WAAW,GACpD,IAEGC,IAAqBpE,EAAAA,EAAAA,KAAY,KCrOvCqE,aAAaC,QAJe,aAIgB1oC,KAAKC,UDsOxB,OACvB0oC,EAAAA,GAAAA,MACApC,GAAkB,GACjB,CAACA,IAEEqC,IAAqBxE,EAAAA,EAAAA,KAAY,KACrCgC,EAAmB,CAAEt1B,SAAU3lB,EAAK,0BAA2B,GAC9D,CAACA,EAAMi7C,IAEJyC,IAAuBzE,EAAAA,EAAAA,KAAY,KACvC/gB,EAAQ,CAAE9oB,IAAKuuC,EAAAA,KAAe,GAC7B,CAACzlB,IAEE0lB,IAAmB3E,EAAAA,EAAAA,KAAY,KACnCiC,GAAY,GACX,CAACA,IAEE2C,GACJt7C,QAAQw3C,IACL5xC,IAAYmzC,EAAAA,GAAAA,cACZnzC,IAAYmzC,EAAAA,GAAAA,UAGjB/H,EAAAA,EAAAA,KAAU,IAAOsK,IAAkBC,EAAAA,GAAAA,IAAsB,IAAMlD,WAAa9+C,GAAY,CAAC+hD,GAAiBjD,IAE1G,MAAMmD,GAAyB51C,IAAYmzC,EAAAA,GAAAA,SACvCt7C,EAAK,iBACLA,EAAK,UAEHg+C,GAAgBC,EAAAA,IAAW,GAAEr2C,EAAAA,oBAAwCsK,EAAAA,IAAQgsC,SAAet2C,EAAAA,KAG5F,uCACJu2C,GAAsC,gCACtCC,KACEC,EAAAA,GAAAA,GAAsChE,GAEpCiE,IAAYzH,EAAAA,EAAAA,KAAQ,IACxB,sCACE,mBAAC0H,GAAA,EAAQ,CACPC,KAAK,iBACL3I,QAAS4G,IAERz8C,EAAK,kBAEPuR,EAAgBC,UACf,mBAAC+sC,GAAA,EAAQ,CACPC,KAAK,UACL3I,QAAS8E,GAET,2BAAMryB,UAAU,kBAAkBtoB,EAAK,kBACtCy7C,EAA2B,GAC1B,0BAAKnzB,UAAU,eAAemzB,IAIpC,mBAAC8C,GAAA,EAAQ,CACPC,KAAK,OACL3I,QAAS6E,GAER16C,EAAK,aAER,mBAACu+C,GAAA,EAAQ,CACPC,KAAK,WACL3I,QAAS4E,GAERz6C,EAAK,aAER,mBAACu+C,GAAA,EAAQ,CACPC,KAAK,WACL3I,QAAS6G,IAET,2BAAMp0B,UAAU,kBAAkBtoB,EAAK,wBACvC,mBAACy+C,GAAA,EAAQ,CACP5hD,GAAG,WACH6hD,MAAO1+C,EAAe,SAAV65B,EAAmB,mCAAqC,mCACpE8kB,QAAmB,SAAV9kB,EACT+kB,aAAW,KAGf,mBAACL,GAAA,EAAQ,CACPC,KAAK,aACL3I,QAASiH,IAET,2BAAMx0B,UAAU,6BAA6BtoB,EAAK,yBAAyBy1C,eAC3E,mBAACgJ,GAAA,EAAQ,CACP5hD,GAAG,aACH6hD,MAAM,oBACNC,QAAStuC,EAAiB,KAG9B,mBAACkuC,GAAA,EAAQ,CACPC,KAAK,OACL3I,QAAS4H,IAERz9C,EAAK,qBAER,mBAACu+C,GAAA,EAAQ,CACPC,KAAK,MACL3I,QAAS6H,IAAqB,cAI/BO,EAAAA,KACC,mBAACM,GAAA,EAAQ,CACPC,KAAK,cACL3I,QAASsH,IAAqB,kBAKjClB,GACC,mBAACsC,GAAA,EAAQ,CACPC,KAAK,SACLpzC,KAzQe,8BA0QfyqC,QAASwH,IAAmB,uBAK/BjD,GACC,mBAACmE,GAAA,EAAQ,CACPC,KAAK,UACL3I,SAASgJ,EAAAA,GAAAA,MAAmB,iBAMjC,CACDxuC,EAAgBorC,EAA0BrB,EAAY0C,GAA4BY,GAAsB19C,EACxGm9C,GAAsBT,GAAsBe,GAAoBhB,GAAmBY,GACnF1C,EAAkBD,EAAkBD,EAAkB5gB,EAAOoiB,EAAmB1qC,IAGlF,OACE,0BAAK+W,UAAU,kBACb,0BAAKzrB,GAAG,iBAAiByrB,UAAU,eAChCtoB,EAAKg2C,OAAS,0BAAK1tB,UAAU,uBAC9B,mBAACw2B,GAAA,EAAY,CACXC,QAAS3C,GACT4C,OAAS,GAAEC,EAAAA,OAAYjB,KACvB11B,WAAW0uB,EAAAA,GAAAA,GACTh3C,EAAKg2C,OAAS,MACdqE,GAAoBr6C,EAAKg2C,OAAS,gBAClCmI,GAAuC31B,SAAWxoB,EAAKg2C,OAAS,sBAElEkJ,UAAW7E,GAAoBr6C,EAAKg2C,MAAQ,QAAU,OACtDmJ,gBAAiBn/C,EAAKg2C,MAAQoI,QAAkCtiD,GAE/DwiD,IAEH,mBAACc,GAAA,EAAW,CACVC,QAAQ,wBACRC,yBAAyB,aACzBh3B,WAAW0uB,EAAAA,GAAAA,GACR+C,GAAsBC,EAAc,wBAAqBl+C,EAC1Du+C,GAAoB,uBAEtBrZ,MAAOwZ,OAAkB1+C,EAAaw+C,GAAkBV,EACxD2F,QAAS1B,GACTnpC,UAAWA,GAA0C,cAA7BihC,EACxB6J,aAA2C,cAA7B7J,EAA2C,cAAW75C,EACpE2jD,uBAAqD,cAA7B9J,GAAsD,UAAV9b,EAAoB,aAAU/9B,EAClG4jD,YAAa3B,GACb4B,aAAa,MACbC,SAAUr9C,QAAQw3C,GAAsBC,GACxC6F,SAAUtF,EACVK,QAASA,EACTkF,QAASvD,GACTwD,eAA6C,cAA7BpK,EAA2C6G,QAAyB1gD,GAEnFy/C,GACC,mBAACyE,GAAA,EAAkB,CACjBxB,KAAK,WACLhzC,MAAO+vC,EACPqE,UAAQ,EACRnuC,YAAalP,QAAQw3C,GACrBzxB,UAAU,cACVutB,QAASiF,EACTmF,SA7RmB,CAAEh4C,UAAMnM,KAgS9Bi+C,GACC,mBAACiG,GAAA,EAAkB,CACjBE,aAAcnG,EACdlE,QAASmF,EACT4E,UAAQ,EACRK,SApSmB,CAAEpjD,QAAIf,MAwS9BukB,GAAwB,mBAAC,GAAY,MACrChM,GACC,mBAACgiC,GAAA,EAAM,CACLjjC,OAAK,EACLgmC,QAASZ,EACTlC,KAAK,UACLJ,MAAM,cACNoG,UAAY,GAAEt8C,EAAK,8DACnB61C,QAAS+H,GACTt1B,WAAW0uB,EAAAA,GAAAA,IAAgB32B,GAAwB,kBAEnD,wBAAGiI,UAAU,eAGjB,mBAAC63B,GAAA,EAAc,CACb7iD,OAAqC,YAA7Bq4C,EACRyK,UAAQ,EACR93B,UAAU,4BAEV,mBAAC,GAAuB,CACtBotB,iBAAkBA,EAClBE,qBAAsBA,EACtBC,QAAS2G,OAIX,K,oDErZV,MA+MA,IAAezI,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACjBl8C,IACC,MACE4tC,aACE1xB,KAAMyxB,EACN/pC,WAAYkhD,GAEdx2C,OACEi/B,SAAS,SACPwX,IAEH,cACDrtC,EAAa,aACbqe,EAAY,gBACZ/f,GACEhW,GACE,4BAAEglD,EAA2B,iBAAEC,IAAqBjkD,EAAAA,EAAAA,IAAehB,GAEzE,MAAO,CACL2tC,kBACAmX,mBACAG,mBACAvtC,gBACAwtC,kBAAkBC,EAAAA,EAAAA,IAAuBnlD,GACzC+1B,eACAivB,8BACAI,iBAAkBp+C,QAAQ+9C,GAAUr9C,QACpC29C,YAAY14B,EAAAA,EAAAA,GAAmB3sB,EAAQ,iBACvCgW,kBACD,GA7BekmC,EA5M2B,IAezC,IAf0C,gBAC9CoJ,EAAe,uBACfC,EAAsB,0BACtBC,EAAyB,gBACzB7X,EAAe,iBACfmX,EAAgB,iBAChBG,EAAgB,cAChBvtC,EAAa,iBACbwtC,EAAgB,aAChBnvB,EAAY,4BACZivB,EAA2B,WAC3BK,EAAU,qBACVI,EAAoB,iBACpBL,EAAgB,gBAChBpvC,GACD,EACC,MAAM,gBACJ0vC,EAAe,oBACfC,EAAmB,SACnBtiD,IACE+yB,EAAAA,EAAAA,MAGEwvB,GAAgBtJ,EAAAA,EAAAA,IAAuB,MAEvC73C,GAAO81C,EAAAA,GAAAA,MAEbvC,EAAAA,EAAAA,KAAU,KACJjiB,GACF2vB,GACF,GACC,CAAC3vB,EAAc2vB,IAElB,MAAMG,GAAiBvK,EAAAA,EAAAA,KAAQ,KACtB,CACLh6C,GAAIwkD,EAAAA,IACJ71C,MAAO60C,IAAmB,KAAOgB,EAAAA,IAAgBrhD,EAAK,uBAAyBA,EAAK,qBAErF,CAACqgD,EAAkBrgD,IAEhBshD,GAAmBzK,EAAAA,EAAAA,KAAQ,IACxBwJ,EACHA,EAAiB//C,KAAKzD,GAClBA,IAAOwkD,EAAAA,IACFD,EAGFlY,EAAgBrsC,IAAO,CAAC,IAC9B0D,OAAOgC,cACRzG,GACH,CAACotC,EAAiBkY,EAAgBf,IAE/BkB,EAAsBD,GAAkBzzC,WAAWo7B,GAAWA,EAAOpsC,KAAOwkD,EAAAA,MAC5EG,EAAqBD,IAAwBf,EAC7CiB,EAxDmB,IAwDsBjB,EAEzCkB,GAAqBrN,EAAAA,GAAAA,MACrBsN,GAAa9K,EAAAA,EAAAA,KAAQ,KACzB,GAAKyK,GAAqBA,EAAiBr+C,OAI3C,OAAOq+C,EAAiBhhD,KAAI,CAAC,EAAesY,KAAM,IAArB,GAAE/b,EAAE,MAAE2O,GAAO,EACxC,MAAMqwB,EAAYh/B,IAAOwkD,EAAAA,KAAiBzoC,EAAIgoC,EAAa,EAE3D,MAAQ,CACN/jD,KACA2O,QACAo2C,WAAYF,EAAmB7kD,IAAKglD,WACpCC,cAAev/C,QAAQm/C,EAAmB7kD,IAAKklD,oBAC/ClmB,YACD,GACD,GACD,CAACylB,EAAkBI,EAAoBd,IAEpCoB,GAAkB/I,EAAAA,EAAAA,KAAatgC,IACnCuoC,EAAoB,CAAEV,iBAAkB7nC,GAAS,CAAEspC,uBAAuB,GAAO,GAChF,CAACf,KAGJ3N,EAAAA,EAAAA,KAAU,KACHoO,GAAY1+C,QAIbu9C,GAAoBmB,EAAW1+C,QACjCi+C,EAAoB,CAAEV,iBAxFD,GAyFvB,GACC,CAACA,EAAkBmB,EAAYT,KAElC3N,EAAAA,EAAAA,KAAU,KACR,GAAKlsC,EAAAA,IAAiBs6C,GAAY1+C,SAAUw9C,EAI5C,OAAOyB,EAAAA,GAAAA,IAAcf,EAAc34B,QAAU,CAC3C25B,wBAAyB,aACzBC,QAAU,CAAC31C,EAAG9G,IACRA,IAAc08C,GAAAA,GAAAA,MAChBnB,EACE,CAAEV,iBAAkB/3C,KAAKo6B,IAAI2d,EAAmB,EAAGmB,EAAW1+C,OAAS,IACvE,CAAEg/C,uBAAuB,KAEpB,GACEt8C,IAAc08C,GAAAA,GAAAA,QACvBnB,EAAoB,CAAEV,iBAAkB/3C,KAAKC,IAAI,EAAG83C,EAAmB,IAAM,CAAEyB,uBAAuB,KAC/F,IAKX,GACD,CAACzB,EAAkBmB,EAAYlB,EAAkBS,IAEpD,MAAMoB,GAAwBzK,EAAAA,EAAAA,MAC9ByK,EAAsB95B,SAAWi5B,GACjClO,EAAAA,EAAAA,KAAU,IAAO+O,EAAsB95B,SAAUs1B,EAAAA,GAAAA,IAAsB,KACjEwE,EAAsB95B,SACxB04B,EAAoB,CAAEV,iBAxHD,GAyHvB,SACG1kD,GAAY,CAAC0kD,EAAkBU,KAEpCqB,EAAAA,GAAAA,GAAe,CACbx2C,UAAW01C,EACXe,OAAQ,IAAMtB,EAAoB,CAAEV,iBA9Hb,GA8HqD,CAAEyB,uBAAuB,OAGvG1O,EAAAA,EAAAA,KAAU,KACR,MAAMkP,EAAiBh2C,IACrB,GAAIA,EAAEi2C,SAAWj2C,EAAEk2C,UAAYl2C,EAAEkxB,KAAKilB,WAAW,UAAYjB,EAAY,CACvE,MAAO,CAAEkB,GAASp2C,EAAEkxB,KAAKlb,MAAM,cAAgB,GAC/C,IAAKogC,EAAO,OAEZ,GAxIsB,MAwIlBA,EAEF,YADAjkD,EAAS,CAAE/B,GAAIoW,EAAejW,sBAAsB,IAItD,MAAMisC,EAAS/lC,OAAO2/C,GAAS,EAC/B,GAAI5Z,EAAS0Y,EAAW1+C,OAAS,EAAG,OAEpCi+C,EAAoB,CAAEV,iBAAkBvX,GAAU,CAAEgZ,uBAAuB,IAC3Ex1C,EAAEqnC,gBACJ,GAKF,OAFA7oC,SAASkqC,iBAAiB,UAAWsN,GAAe,GAE7C,KACLx3C,SAASmqC,oBAAoB,UAAWqN,GAAe,EAAK,CAC7D,GACA,CAACxvC,EAAe0uC,EAAY/iD,EAAUsiD,IAEzC,MACE4B,aAAcC,EAAuB,qBAAEC,IACrCC,EAAAA,GAAAA,IAAmB5C,OAAkBvkD,GAAW,GAEpD,SAASonD,EAAiBn3C,GACxB,MAAMo3C,EAAetgD,OAAO2S,OAAO0zB,GAChCxiC,MAAK,QAAC,GAAE7J,GAAI,SAAKA,IAAO8kD,EAAYnB,GAAkB3jD,EAAE,IACrDumD,EAAWD,IAAiB3B,EAElC,OACE,mBAAC6B,GAAA,EAAQ,CACPC,WAAYF,EAAW,SAAW,MAClC7jD,SAAU6jD,EAAWD,EAAatmD,QAAKf,EACvCiQ,SAAUA,EACV00C,iBAAkBA,EAClBnvB,aAAcA,EACduvB,gBAAiBA,EACjBC,uBAAwBA,EACxBC,0BAA2BA,EAC3BwC,kBAAmB5C,IAAqBpvC,EAAgBC,SACxDD,gBAAiBA,GAGvB,CAEA,MAAMiyC,EAAsB7B,GAAcA,EAAW1+C,OAAS,EAE9D,OACE,0BACEqlB,WAAW0uB,EAAAA,GAAAA,GACT,cACAwM,GAAuBxC,GAAwB,6BAGhDwC,EACC,mBAACC,GAAA,EAAO,CAACC,KAAM/B,EAAYgC,UAAWnD,EAAkBoD,YAAa5B,EAAiB6B,YAAU,IAC9Fd,EACF,0BAAKz6B,WAAW0uB,EAAAA,GAAAA,GAAe,mBAAoBgM,UACjDlnD,EACJ,mBAACq6C,GAAA,EAAU,CACTgD,IAAKgI,EACLpa,KAAMwZ,EAA8B,OAASvgD,EAAKg2C,MAAQ,sBAAwB,kBAClFI,UAAWoK,EACXsD,YAAaN,EAAsB7B,EAAW1+C,YAASnH,GAEtDonD,GAEC,K,gBClPV,MAOA,IAAenP,EAAAA,EAAAA,KAPwBC,IACrC,MAAM+P,GAAa7P,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAO4P,EAAa,mBAACA,EAAe/P,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ICG7D,IAAejQ,EAAAA,EAAAA,KAPyBC,IACtC,MAAMiQ,GAAc/P,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAO8P,EAAc,mBAACA,EAAgBjQ,GAAY,mBAACgQ,GAAA,EAAO,KAAG,I,gBCS/D,MAgEA,IAAejQ,EAAAA,EAAAA,KAhEqB,IAK9B,IAL+B,QACnCmQ,EAAO,iBACPC,EAAgB,aAChBC,EAAY,WACZC,GACD,EACC,MAAOC,EAAYC,IAAiBxP,EAAAA,EAAAA,KAAS,IAE7CxB,EAAAA,EAAAA,KAAU,KACH2Q,GACHK,GAAc,EAChB,GACC,CAACL,IAEJ,MAAMlkD,GAAO81C,EAAAA,GAAAA,KAEP0O,GAAexN,EAAAA,GAAAA,GACnB,gBACAkN,GAAW,WACXI,GAAc,gBAGVG,GAAmBxL,EAAAA,EAAAA,KAAY,KACnCsL,GAAeD,EAAW,GACzB,CAACA,IAEEI,GAAczL,EAAAA,EAAAA,KAAY,KAC9BsL,GAAc,EAAM,GACnB,IAEGjG,GAAYzH,EAAAA,EAAAA,KAAQ,IACxB,sCACE,mBAAC0H,GAAA,EAAQ,CAACC,KAAK,UAAU3I,QAASuO,GAAepkD,EAAK,eACtD,mBAACu+C,GAAA,EAAQ,CAACC,KAAK,QAAQ3I,QAASwO,GAAarkD,EAAK,aAClD,mBAACu+C,GAAA,EAAQ,CAACC,KAAK,OAAO3I,QAASsO,GAAmBnkD,EAAK,sBAExD,CAACA,EAAMokD,EAAcC,EAAYF,IAEpC,OACE,0BAAK77B,UAAWk8B,EAAczO,IAAK/1C,EAAKg2C,MAAQ,WAAQl6C,GACtD,mBAACu6C,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,UACN5tB,UAAWg8B,EAAa,SAAW,GACnCzO,QAAS4O,EACTnI,UAAWt8C,EAAKskD,EAAa,QAAU,mBACvCK,UAAW,GAEX,wBAAGr8B,UAAU,yBACb,wBAAGA,UAAU,gBAEf,mBAACs8B,GAAA,EAAI,CACHtnD,OAAQgnD,EACRpF,UAAWl/C,EAAKg2C,MAAQ,OAAS,QACjC6O,UAAU,SACVC,WAAS,EACTpL,QAASgL,GAERpG,GAEC,I,gBCrCV,MAAMyG,GAA0BliD,OAAOC,KAAKw4C,EAAAA,IAAmBr4C,OAAS,EAGxE,IAAI+hD,GAEJ,MAiLA,IAAejR,EAAAA,EAAAA,KAjLgB,IAezB,IAf0B,QAC9B5rC,EAAO,YACPyxC,EAAW,WACXI,EAAU,gBACVQ,EAAe,eACfF,EAAc,qBACdO,EAAoB,gBACpBgG,EAAe,kBACf7uC,EAAiB,iBACjByuC,EAAgB,cAChBlG,EAAa,gBACb0K,EAAe,uBACfnE,EAAsB,QACtBlG,EAAO,cACPsK,GACD,EACC,MAAM,gBAAE/mD,IAAoBwzB,EAAAA,EAAAA,OACrBwzB,EAAsBC,IAA2BrQ,EAAAA,EAAAA,IAAS1tC,EAAAA,KAE3D,uBAAEg+C,EAAsB,6BAAEC,IAAiCC,EAAAA,GAAAA,GAAoB9E,GAC/E+E,EAAsB/E,GAAoBt4C,IAAYmzC,EAAAA,GAAAA,UAG1DwH,aAAc2C,EACdzC,qBAAsB0C,IACpBzC,EAAAA,GAAAA,GAAkBjxC,GAEhB2zC,GAAgB9N,EAAAA,EAAAA,KAAO,GAEvB+N,GAAmB3M,EAAAA,EAAAA,KAAY,KAC/B9wC,IAAYmzC,EAAAA,GAAAA,WAGhBqK,EAAcn9B,SAAU,EACxB48B,GAAwB,GAAK,GAC5B,CAACj9C,IAEE09C,GAAmB5M,EAAAA,EAAAA,KAAY,KACnC0M,EAAcn9B,SAAU,EAEpBw8B,KACF1/C,aAAa0/C,IACbA,QAAelpD,GAGjBkpD,GAAe1mD,OAAO+F,YAAW,KAC1BshD,EAAcn9B,SACjB48B,GAAwB,EAC1B,GApDwB,IAqDD,GACxB,IAEGU,GAAuB7M,EAAAA,EAAAA,KAAY,KACvCgM,EAAgB3J,EAAAA,GAAAA,SAA2B,GAC1C,CAAC2J,IAEEc,GAAuB9M,EAAAA,EAAAA,KAAY,KACvCgM,EAAgB3J,EAAAA,GAAAA,SAA2B,GAC1C,CAAC2J,IAEEe,GAAuB/M,EAAAA,EAAAA,KAAY,KACvCgM,EAAgB3J,EAAAA,GAAAA,UAChBn9C,GAAiB,GAChB,CAACA,EAAiB8mD,IAEfgB,GAAoBhN,EAAAA,EAAAA,KAAY,KACpC36C,OAAOk4B,SAAS0vB,QAAQ,GACvB,IAEGC,GAAyBlN,EAAAA,EAAAA,KAAY,KACzCgM,EAAgB3J,EAAAA,GAAAA,gBAAkC,GACjD,CAAC2J,IAEEmB,GAAuBnN,EAAAA,EAAAA,KAAY,KACvCgM,EAAgB3J,EAAAA,GAAAA,cAAgC,GAC/C,CAAC2J,KAEJ1R,EAAAA,EAAAA,KAAU,KACR,IAAI8S,EASJ,OARIl+C,IAAYmzC,EAAAA,GAAAA,SACd+K,EAAmB/nD,OAAO+F,YAAW,KACnC+gD,GAAwB,EAAM,GArFR,MAuFfO,EAAcn9B,SAAWnhB,EAAAA,KAClC+9C,GAAwB,GAGnB,KACDiB,IACF/gD,aAAa+gD,GACbA,OAAmBvqD,EACrB,CACD,GACA,CAACqM,IAEJ,MAAMnI,GAAO81C,EAAAA,GAAAA,KAEb,OACE,0BACEj5C,GAAG,kBACHypD,aAAej/C,EAAAA,QAAkCvL,EAAnB8pD,EAC9BW,aAAel/C,EAAAA,QAAkCvL,EAAnB+pD,GAE9B,mBAAC,GAAc,CACbxL,iBAAkBmL,EAClBr9C,QAASA,EACTmyC,eAAgBA,EAChBC,cAAeA,EACfE,iBAAkBqL,EAClBpL,iBAAkBqL,EAClBpL,iBAAkBqL,EAClBpL,QAASA,EACTC,qBAAsBA,EACtBL,gBAAiBA,IAEnB,mBAACrE,GAAA,EAAU,CACTpP,KAAM8T,EAAuB,OAAS,YACtCiJ,YAAaiB,GACb3O,UAAWjuC,EACXq+C,eAAa,EACbC,oBAAqBnL,EAAAA,GAAAA,WAEnBvvC,IACA,OAAQ5D,GACN,KAAKmzC,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAW,CACV0F,qBAAsBwE,EACtB1E,uBAAwBA,EACxBC,0BAA2BkE,EAC3BpE,gBAAiBA,IAGvB,KAAKvF,EAAAA,GAAAA,aACH,OACE,mBAAC,GAAU,CACT1B,YAAaA,EACbI,WAAYA,EACZjuC,SAAUA,EACV6uC,QAASA,IAGf,KAAKU,EAAAA,GAAAA,SACH,OAAO,mBAAC,GAAW,CAAC/6C,OAAQ+5C,EAAgBvuC,SAAUA,EAAU6uC,QAASA,IAC3E,QACE,OAAiB,IAIxB6K,GACC,mBAACpP,GAAA,EAAM,CACLqQ,OAAK,EACLC,MAAI,EACJr+B,WAAW0uB,EAAAA,GAAAA,GAAe,aAAc0O,GACxC7P,QAASoQ,GAERjmD,EAAK,wBAGTqlD,GACC,mBAACuB,GAAA,EAAU,CACTtpD,OAAQmjD,EACRjvC,UAAWg0C,EACXN,cAAeA,EACf2B,oBAAqBvB,IAGzB,mBAAC,GAAa,CACZpB,QAASiB,EACThB,iBAAkB4B,EAClB3B,aAAc+B,EACd9B,WAAY+B,IAEV,IC9MV,IAAerS,EAAAA,EAAAA,KAPsBC,IACnC,MAAM8S,GAAW5S,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAGhD,OAAO2S,EAAW,mBAACA,EAAa9S,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ICGzD,IAAejQ,EAAAA,EAAAA,KAPqBC,IAClC,MAAM+S,GAAU7S,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAG/C,OAAO4S,EAAU,mBAACA,EAAY/S,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ICEvD,IAAejQ,EAAAA,EAAAA,KAP2BC,IACxC,MAAMgT,GAAgB9S,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAO6S,EAAgB,mBAACA,EAAkBhT,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ICWxC,IAmBtBiD,IAAW,SAAXA,GAAAA,EAAAA,EAAW,eAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,uBAAXA,EAAAA,EAAW,4BAAXA,KAAAA,GAAW,KAWhB,MAAMC,GAAerkD,OAAOC,KAAKmkD,IAAahkD,OAAS,EA+bvD,IAAe8wC,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACjBl8C,IACC,MAAM4B,GAAWZ,EAAAA,EAAAA,IAAehB,IAE9BgO,cAAc,MACZpN,EAAK,KACL8L,GACD,4BACDs4C,EAA2B,iBAC3BC,EAAgB,mBAChB2G,GACEhqD,GACE,gBACJ0O,EAAe,cACfoH,EACAmB,UAAU,YACRC,GACD,kBACDrC,EAAiB,gBACjBT,GACEhW,EAEEgY,GAAc1M,EAAAA,EAAAA,IAAkBtL,GAKtC,MAAO,CACLq+C,YAAaz9C,EACb69C,WAAY/xC,EACZm/C,wBAA8C,IAArB5G,EACzBD,8BACA10C,kBACAoH,gBACAoB,cACA8yC,qBACAE,WAbiB9kD,QAAQgR,GAAa1W,IActCmV,oBACAyuC,kBAduBC,EAAAA,EAAAA,IAAuBnlD,GAe9C2C,iBAduBf,EAASe,iBAehCs8C,gBAAiBr9C,EAASoM,aAAaO,UACvCyH,kBACD,GA1CekmC,EA5be,IAe7B,IAf8B,YAClCmC,EAAW,WACXI,EAAU,wBACVoN,EAAuB,4BACvB7G,EAA2B,gBAC3B10C,EAAe,cACfoH,EAAa,YACboB,EAAW,mBACX8yC,EAAkB,WAClBE,EAAU,kBACVr1C,EAAiB,iBACjByuC,EAAgB,iBAChBviD,EAAgB,gBAChBs8C,EAAe,gBACfjpC,GACD,EACC,MAAM,qBACJ+1C,EAAoB,uBACpBC,EAAsB,sBACtBvM,EAAqB,kBACrBwM,EAAiB,oBACjB1M,EAAmB,iBACnB2M,EAAgB,gBAChBC,EAAe,mBACfC,EAAkB,qBAClBC,EAAoB,SACpBhpD,EAAQ,0BACRu8C,IACExpB,EAAAA,EAAAA,MAGEk2B,GAAYhQ,EAAAA,EAAAA,IAAuB,OAClC1vC,EAAS2/C,IAAc/S,EAAAA,EAAAA,IAA4BuG,EAAAA,GAAAA,WACnDyM,EAAgBC,IAAqBjT,EAAAA,EAAAA,IAAS+G,EAAAA,GAAAA,OAC9CxB,EAAgB2N,IAAqBlT,EAAAA,EAAAA,IAAiB,KACtDmT,EAAcrH,IAAmBsH,EAAAA,GAAAA,OAGjCC,EAAeC,IAAoBtT,EAAAA,EAAAA,IAAiB,GAE3D,IAAIuT,EAA2BrB,GAAYsB,KAC3C,OAAQpgD,GACN,KAAKmzC,EAAAA,GAAAA,SACHgN,EAAcrB,GAAYuB,SAC1B,MACF,KAAKlN,EAAAA,GAAAA,SACHgN,EAAcrB,GAAYH,SAC1B,MACF,KAAKxL,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,gBACHgN,EAAcrB,GAAYwB,WAC1B,MACF,KAAKnN,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,cACHgN,EAAcrB,GAAYyB,SAI9B,MAAMC,GAAc1P,EAAAA,EAAAA,KAAa2P,IAC/B,SAASC,IACPf,EAAWxM,EAAAA,GAAAA,UACX2M,EAAkB,IAClBV,EAAuB,CAAEz9C,WAAW,IACpC09C,IACAnjD,YAAW,KACTijD,EAAqB,CAAEnrD,MAAO,KAC9B2+C,EAAoB,CAAE7yC,UAAMnM,IAC5Bk/C,EAAsB,CAAEn+C,QAAIf,IAC5ByrD,EAAuB,CAAEz9C,WAAW,IACpCu+C,EAAiB5gD,KAAKC,MAAM,GAvEF,IAyE9B,CAEA,IAA8B,IAA1BkhD,EAKJ,GAAIzgD,IAAYmzC,EAAAA,GAAAA,cAKhB,GAAInzC,IAAYmzC,EAAAA,GAAAA,gBAAhB,CAKA,GAAInzC,IAAYmzC,EAAAA,GAAAA,cAAiC,CAC/C,MAAMwN,EAAoB79C,SAAS89C,eAAe,2BAC9CD,GACFA,EAAkBvyB,MAEtB,CAEA,GAAIpuB,IAAYmzC,EAAAA,GAAAA,SACd,OAAQyM,GACN,KAAKjM,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,SACL,KAAKA,EAAAA,GAAAA,aAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,sBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,SAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,uBAGpB,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,qBACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,wBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,oBAEH,YADAkM,EAAkB3zC,EAAcynC,EAAAA,GAAAA,gBAAkCA,EAAAA,GAAAA,kBAGpE,KAAKA,EAAAA,GAAAA,8BACL,KAAKA,EAAAA,GAAAA,gBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,iBAGpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,qBAGpB,KAAKA,EAAAA,GAAAA,0BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,2BAGpB,KAAKA,EAAAA,GAAAA,kCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,oBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,mCACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,qBAEpB,KAAKA,EAAAA,GAAAA,gCACL,KAAKA,EAAAA,GAAAA,+BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,+BACL,KAAKA,EAAAA,GAAAA,8BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,iBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,oCACL,KAAKA,EAAAA,GAAAA,mCAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,gCAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,mBAEpB,KAAKA,EAAAA,GAAAA,iBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,eAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,kBAEpB,KAAKA,EAAAA,GAAAA,qBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,yBAEpB,KAAKA,EAAAA,GAAAA,sBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,sBAEpB,KAAKA,EAAAA,GAAAA,0BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,uBAEpB,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,kCAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,cAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,2BAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,wBAEpB,KAAKA,EAAAA,GAAAA,wBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,4BAEpB,KAAKA,EAAAA,GAAAA,mBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,mCAEpB,KAAKA,EAAAA,GAAAA,uBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,oBAGpB,KAAKA,EAAAA,GAAAA,oBACL,KAAKA,EAAAA,GAAAA,kBAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,SAGpB,KAAKA,EAAAA,GAAAA,iCACL,KAAKA,EAAAA,GAAAA,iCAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,+BAGpB,KAAKA,EAAAA,GAAAA,8BAGH,OAFAgM,EAAWxM,EAAAA,GAAAA,eACX0M,EAAkBlM,EAAAA,GAAAA,MAGpB,KAAKA,EAAAA,GAAAA,cACL,KAAKA,EAAAA,GAAAA,YAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,UAGpB,KAAKA,EAAAA,GAAAA,eAEH,YADAkM,EAAkBlM,EAAAA,GAAAA,UAOpB3zC,IAAYmzC,EAAAA,GAAAA,UAA8B8L,EAC5CU,EAAWxM,EAAAA,GAAAA,cAKbuN,GA7KA,MAFEf,EAAWxM,EAAAA,GAAAA,sBALXwM,EAAWxM,EAAAA,GAAAA,oBALXuN,GAyLS,GACV,CACD1gD,EAASi/C,EAAyBG,EAAwBC,EAAmBF,EAC7ExM,EAAqBE,EAAuB+M,EAAgB1zC,IAGxD20C,GAAoB/P,EAAAA,EAAAA,KAAa98C,IACjCgM,IAAYmzC,EAAAA,GAAAA,UAKhBwM,EAAWxM,EAAAA,GAAAA,cAEPn/C,IAAUy9C,GACZ0N,EAAqB,CAAEnrD,WAPvB8rD,EAAkB9rD,EAQpB,GACC,CAACgM,EAASyxC,EAAa0N,IAEpB2B,GAAoBhQ,EAAAA,EAAAA,KAAY,KACpC6O,EAAWxM,EAAAA,GAAAA,cACXgM,EAAqB,CAAEnrD,MAAO,KAC9B6+C,EAAsB,CAAEn+C,GAAIqB,GAAmB,GAC9C,CAACA,EAAkB88C,EAAuBsM,KAE7C/T,EAAAA,EAAAA,KACE,IAAOprC,IAAYmzC,EAAAA,GAAAA,UAA+B8L,IAA4BC,IAAe5G,GACzF3C,EAAAA,GAAAA,IAAsB,IAAM6K,WAC5B7sD,GACJ,CAACsrD,EAAyBj/C,EAASwgD,EAAatB,EAAY5G,IAG9D,MAAMyI,GAAqBjQ,EAAAA,EAAAA,KAAaxsC,IAClCtE,IAAYmzC,EAAAA,GAAAA,eAIhB7uC,EAAEqnC,iBACFgU,EAAWxM,EAAAA,GAAAA,cAA+B,GACzC,CAACnzC,IAEEghD,GAA4BlQ,EAAAA,EAAAA,KAAaxsC,IAC7CA,EAAEqnC,iBACFl1C,EAAS,CAAE/B,GAAIoW,EAAejW,sBAAsB,GAAO,GAC1D,CAACiW,EAAerU,IAEbwqD,GAAsBnQ,EAAAA,EAAAA,KAAaxsC,IACvCA,EAAEqnC,iBACFgU,EAAWxM,EAAAA,GAAAA,SAA2B,GACrC,IAEG+N,GAAuBpQ,EAAAA,EAAAA,KAAaxsC,IACxCA,EAAEqnC,iBACFgU,EAAWxM,EAAAA,GAAAA,SAA2B,GACrC,KAEHS,EAAAA,GAAAA,GAAW,CACT,cAAemN,EACf,cAAeC,KACXnN,EAAAA,IAAU,CACZ,QAASmN,EACT,QAASC,MAEPE,EAAAA,IAAatN,EAAAA,IAAU,CAAE,QAASqN,MAGxC9V,EAAAA,EAAAA,KAAU,KACRmU,IAEIK,IAAmBjM,EAAAA,GAAAA,SACrB2L,GACF,GACC,CAACC,EAAiBD,EAAkBM,KAEvCwB,EAAAA,GAAAA,IAAc,UACeztD,IAAvBqrD,IACFW,EAAWxM,EAAAA,GAAAA,UACX0M,EAAkBb,GAClBhM,EAA0B,CAAEnvC,YAAQlQ,IACtC,GACC,CAACqrD,EAAoBhM,IAExB,MAAM,WACJqO,EAAU,YAAEC,EAAW,cAAEC,GCxYtB,SACLC,EACAC,EACAhP,EACAiP,EACAC,GAEA,MAAO/9C,EAAUg+C,EAAcC,IAAkB/R,EAAAA,GAAAA,MAC1CgS,EAAeC,IAAoBnV,EAAAA,EAAAA,OACnCoV,EAAqBC,IAA0BrV,EAAAA,EAAAA,MAEhDsV,GAAkBpR,EAAAA,EAAAA,KAAa9oC,IACnC,IAAKw5C,EAAWnhC,QACd,OAGF,MAAM8hC,EAAUn6C,EAAS,GAAEA,MAAY,GACvCw5C,EAAWnhC,QAAQ0uB,MAAM/mC,MAAQm6C,EAE/BX,EAAWnhC,QAAQ0uB,MAAMqT,YAAYT,EAAiBQ,EACxD,GACC,CAACR,EAAiBH,IAUrB,SAASD,IACPz+C,SAAS40B,KAAKod,UAAUuN,OAAO,mBACjC,CA8CA,OAxDAC,EAAAA,EAAAA,KAAgB,KACTd,EAAWnhC,SAAYqhC,GAI5BQ,EAAgBR,EAAa,GAC5B,CAACC,EAAiBH,EAAYE,EAAcQ,KAsB/C9W,EAAAA,EAAAA,KAAU,KACR,IAAKxnC,EAAU,OAEf,MAAM2+C,EAAmBj+C,IACvB,MAAMk+C,EAAWliD,KAAKmiD,KAAKT,EAAsB19C,EAAEo+C,QAAUZ,GAC7DI,EAAgBM,EAAS,EAG3B,SAASG,IACPC,IACAnB,EAASD,EAAWnhC,QAASwiC,YAC/B,CAEA,SAASD,IACPrB,IACAz+C,SAASmqC,oBAAoB,YAAasV,GAAiB,GAC3Dz/C,SAASmqC,oBAAoB,UAAW0V,GAAU,GAClD7/C,SAASmqC,oBAAoB,OAAQ0V,GAAU,GAC/Cd,GACF,CAMA,OAJA/+C,SAASkqC,iBAAiB,YAAauV,GAAiB,GACxDz/C,SAASkqC,iBAAiB,UAAW2V,GAAU,GAC/C7/C,SAASkqC,iBAAiB,OAAQ2V,GAAU,GAErCC,CAAO,GACb,CAACZ,EAAqBF,EAAeN,EAAYC,EAAU79C,EAAUi+C,EAAgBK,IAEjF,CAAEb,WA5CT,SAAoB/8C,GAClBA,EAAEqnC,iBAEF7oC,SAAS40B,KAAKod,UAAU1gB,IAAI,oBAE5B2tB,EAAiBz9C,EAAEo+C,SACnBT,EAAuBT,EAAWnhC,QAASwiC,aAC3CjB,GACF,EAoCqBN,YAlCrB,SAAqBh9C,GACnBA,EAAEqnC,iBACFuW,OAAgBvuD,GAChB8+C,GACF,EA8BkC8O,gBACpC,CDyTMuB,CAAUpD,GAAY/5C,GAAM65C,EAAmB,CACjD97C,gBAAiBiC,KACf85C,EAAsB/7C,EAAiB,uBAErCq/C,GAA6BjS,EAAAA,EAAAA,KAAajtC,IAC9C87C,EAAWxM,EAAAA,GAAAA,UACX0M,EAAkBh8C,EAAO,GACxB,IAEH,OACE,0BACEnP,GAAG,aACHs8C,IAAK0O,GAEL,mBAAC1R,GAAA,EAAU,CACTpP,KAAMwZ,EAA8B,OAAS4K,EAAAA,GAC7CrH,YAAaoD,GACb9Q,UAAWkS,EACX9B,eAAa,EACbC,oBAAqBQ,GAAYsB,OAE/Bx8C,IACA,OAAQu8C,GACN,KAAKrB,GAAYuB,SACf,OACE,mBAAC,GAAa,CACZz8C,SAAUA,EACV6uC,QAAS+N,EACTzD,cAAe+D,EACfpI,gBAAiBA,EACjBC,uBAAwBoK,EACxBnK,0BAA2B+G,EAC3BrH,iBAAkBA,EAClBlvC,gBAAiBA,IAGvB,KAAK01C,GAAYH,SACf,OACE,mBAAC,GAAQ,CACP/6C,SAAUA,EACVq/C,cAAerD,EACfG,aAAcA,EACdrH,gBAAiBA,EACjBwK,eAAgBH,EAChBtQ,QAAS+N,EACT9N,qBAAsB0F,IAG5B,KAAK0G,GAAYwB,WACf,OACE,mBAAC,GAAO,CACN3X,IAAKsX,EACLr8C,SAAUA,EACVu/C,WAAS,EACTnjD,QAASA,EACT88C,gBAAiB6C,EACjBlN,QAAS+N,IAGf,KAAK1B,GAAYyB,SACf,OACE,mBAAC,GAAO,CACN5X,IAAKsX,EACLr8C,SAAUA,EACV5D,QAASA,EACT88C,gBAAiB6C,EACjBlN,QAAS+N,IAGf,QACE,OACE,mBAAC,GAAQ,CACPxgD,QAASA,EACTqyC,gBAAiBA,EACjBZ,YAAaA,EACbI,WAAYA,EACZM,eAAgBA,EAChBuG,gBAAiBA,EACjBoE,gBAAiB6C,EACjBvN,cAAeyO,EACflI,uBAAwBoK,EACxBtQ,QAAS+N,EACT9N,qBAAsB0F,EACtBvuC,kBAAmBA,EACnByuC,iBAAkBA,EAClByE,cAAe+D,IAEjB,IAIV,0BACE3gC,UAAU,gBACVijC,YAAa/B,EACbgC,UAAW9B,EACX+B,cAAehC,IAEb,K,qME3TV,SAASiC,GAASjpB,EAAWc,EAAWpzB,EAAeC,EAAgBu7C,GACrE,MAAQ,IAAGlpB,KAAKc,EAAIooB,KAAUA,KAAUA,eACtCx7C,OAAWC,EAAS,EAAIu7C,KAAUA,KAAUA,YAAiBx7C,MACjE,CAoCA,UAAe4jC,EAAAA,EAAAA,KA3M+B,IAExC,IAFyC,MAC7Cz0B,EAAK,MAAE3G,GACR,EAEC,MAAMizC,GAAe/T,EAAAA,EAAAA,IAAuB,MAEtCgU,GAAehV,EAAAA,EAAAA,KAAQ,IA8E/B,SAAyBv3B,EAAe3G,GACtC,MAAMmzC,EAAexsC,EAAQ3G,EAAQ,EAC/BozC,EAmBR,SAAsBzsC,GACpB,IAAIysC,EAAY,EAahB,OAZc,IAAVzsC,EACFysC,EAAY,GACO,IAAVzsC,EACTysC,EAAY,GACO,IAAVzsC,EACTysC,EAAY,IACO,IAAVzsC,GAEAA,EAAQ,KADjBysC,EAAY,KAKPA,CACT,CAlCoBC,CAAa1sC,GACzB2sC,EAmCR,SAAuB3sC,EAAe3G,GACpC,IAAIozC,EAAY,GAahB,OAZc,IAAVzsC,EACFysC,EAAY,GACO,IAAVzsC,EACTysC,EAAY,GACO,IAAVzsC,EACTysC,EAAsB,IAAVpzC,EAAc,GAAK,IACZ,IAAV2G,GAEAA,EAAQ,KADjBysC,EAAY,KAKPA,CACT,CAlDqBG,CAAc5sC,EAAOwsC,GAClCK,EAmDR,SAAwB7sC,EAAeysC,GACrC,OAAOzsC,GAAS,EAAI,GAAKysC,EAAYzsC,EAAQ,GAAKA,EAAQ,EAC5D,CArDsB8sC,CAAe9sC,EAAOysC,GAEpCM,EAAc,WAAU/sC,IACxBgtC,EAoDR,SAAqBzvD,EAAYkvD,EAAmBzsC,GAGlD,IAAIitC,EAAI,GACR,GAAc,IAAVjtC,EACFitC,EAAIb,GAAS,EAAG,EAAG,EAAGK,EAJT,GAKTL,GAAS,EAAG,GAAI,EAAGK,EAAY,EALtB,GAMTL,GAAS,EAAG,GAAI,EAAGK,EANV,QAQb,IAAK,IAAInzC,EAAI,EAAGA,EAAI0G,EAAO1G,IACzB2zC,GAAKb,GAAS,GAAIK,EAAY,GAAKnzC,EAAG,EAAGmzC,EAT9B,GAaf,MACG,iBAAgBlvD,uBACJ0vD,wBAGjB,CAvEmBC,CAAYH,EAAYN,EAAWzsC,GAE9CmtC,EA4ER,SAA2B9zC,EAAeozC,EAAmBzsC,GAC3D,OAAc,IAAVA,EACK,EACY,IAAVA,EACQ,IAAV3G,EAAc,EAAIozC,EAAY,EAGzB,IAAVzsC,EACY,IAAV3G,EACK,EACY,IAAVA,EACF,GAGF,IAECozC,EAAY,GAAKpzC,CAE7B,CA9FyB+zC,CAAkBZ,EAAcC,EAAWzsC,GAC5DqtC,EA+FR,SAA4Bh0C,EAAe2G,EAAeysC,EAAmBI,GAC3E,OAAI7sC,GAAS,GAIT3G,GAAS,EAHJ,EAKEA,GAAS2G,EAAQ,EACnB6sC,EAAc,IAGfJ,EAAY,GAAK,GAAKpzC,EAAQ,IAAMozC,EAAY,EAC1D,CA3G0Ba,CAAmBd,EAAcxsC,EAAOysC,EAAWI,GAC3E,MAAO,CACLF,aACAK,WACAG,iBACAE,kBACAR,cACAE,aAEJ,CAhGWQ,CAAgBvtC,EAAO3G,IAC7B,CAAC2G,EAAO3G,IAyCX,IAvCA46B,EAAAA,EAAAA,KAAU,KACR,IAAKqY,EAAapjC,QAChB,OAGF,MAAM,YACJ2jC,EAAW,gBACXQ,EAAe,WACfV,EAAU,eACVQ,EAAc,WACdJ,EAAU,SACVC,GACET,EAEEiB,EAAalB,EAAapjC,QAAQukC,kBACxC,GAAInB,GAAcpjC,QAAS,CACzB,MAAMwkC,EAAiBpB,EAAapjC,SAC9B,MAAE0uB,GAAU8V,EAClB9V,EAAM9mC,OAAU,GAAE+7C,MAClBjV,EAAM+V,UAAa,eAAcN,OACjCzV,EAAMoV,SAAY,SAAQD,MAC1B,MAAMa,EAAMF,EAAevZ,cAAc,OACnC0Z,EAAMH,EAAevZ,cAAc,OACnC2Z,EAAOJ,EAAevZ,cAAc,QACrCyZ,GACCJ,IACFA,EAAWO,UAAa,oCAAmCf,mBAG3Dc,IACFA,EAAKC,UAAYf,GAEfa,IACFA,EAAIjW,MAAM9mC,OAAU,GAAE67C,MACtBkB,EAAIjW,MAAM+V,UAAa,cAAaR,OAExC,IACC,CAACZ,IAEU,IAAVvsC,EACF,OACE,0BAAKgJ,UAAU,yBACb,0BACEA,UAAU,kCACV6wB,IAAKyS,KAMb,MAAM,YACJO,EAAW,gBAAEQ,EAAe,WAAEV,EAAU,eAAEQ,EAAc,WAAEJ,GACxDR,EAEJ,OACE,0BAAKvjC,WAAW0uB,EAAAA,GAAAA,GAAe,wBAAyB13B,EAnElC,GAmE+D,+BACnF,0BACEgJ,UAAU,gCACV6wB,IAAKyS,EACL1U,MACG,oBAAmBmV,uCACVF,+BAAyCQ,SAGrD,gCACA,0BACErkC,UAAU,6BACV4uB,MAAQ,WAAU+U,8BAAuCQ,WAGzD,I,4BCoDV,UAAe1Y,EAAAA,EAAAA,KA/G2B,IAEpC,IAFqC,QACzCvzC,EAAO,MAAE8e,EAAK,MAAE3G,EAAK,YAAE20C,EAAW,UAAEhlC,EAAS,eAAEilC,EAAc,QAAE1X,EAAO,iBAAE2X,GACzE,EACC,MAAM,qBAAEC,IAAyB97B,EAAAA,EAAAA,MAC3B3xB,GAAO81C,EAAAA,GAAAA,KACP4X,GAAiBC,EAAAA,GAAAA,GAAantD,GAC9BotD,GAAejX,EAAAA,GAAAA,IAASkX,EAAAA,EAAAA,IAAoBrtD,EAAS,cAErDstD,GAAYC,EAAAA,EAAAA,IAAoBvtD,IAE/BwtD,EAAmBC,EAAiBC,IAAoBjW,EAAAA,GAAAA,KAEzDkW,GAAqBlV,EAAAA,EAAAA,KAAY,KACrCiV,IAEIX,GACFA,EAAe/sD,EAAQ3D,GACzB,GACC,CAACqxD,EAAkBX,EAAgB/sD,EAAQ3D,KAExCuxD,GAAeC,EAAAA,EAAAA,IAA6B7tD,GAE5C8tD,GAA0BrV,EAAAA,EAAAA,KAAY,KACtCmV,GACFX,EAAqB,CAAExrD,UAAWzB,EAAQ3D,GAAIw8B,OAAQ+0B,GACxD,GACC,CAACX,EAAsBW,EAAc5tD,EAAQ3D,MAEzC0xD,EAAcC,EAAkBC,IAAsBxW,EAAAA,GAAAA,KAE7D,OACE,0BAAK3vB,WAAW0uB,EAAAA,GAAAA,GAAe,8BAA+B1uB,IAC3DhJ,EAAQ,GACP,mBAAC+2B,GAAA,EAAM,CACLjjC,OAAK,EACLkjC,KAAK,UACLJ,MAAM,cACN5tB,UAAU,kBACVg0B,UAAWt8C,EAAK,gCAChB61C,QAAS2X,GAET,wBAAGllC,UAAU,mBAGhBilC,GACC,mBAAClX,GAAA,EAAM,CACLjjC,OAAK,EACLkjC,KAAK,UACLJ,MAAM,cACNoG,UAAWt8C,EAAK,0BAChBsoB,UAAU,eACVutB,QAASoY,GAET,wBAAG3lC,UAAU,gBAGjB,mBAAComC,GAAA,EAAa,CACZpxD,OAAQ0wD,EACRtU,QAASwU,EACTrvD,KAAK,wCACL8vD,aAAa,QACbC,eAAgBT,IAElB,0BACE7lC,WAAW0uB,EAAAA,GAAAA,GAAe,sBAAuBuX,GAAgB,YACjE1Y,QAASA,EACTE,IAAK/1C,EAAKg2C,MAAQ,WAAQl6C,GAE1B,mBAAC,GAAuB,CACtBwjB,MAAOA,EACP3G,MAAOA,IAER+0C,GA2BT,SAAyBmB,EAAsBzjB,EAAkB0iB,GAC/D,MAAM,MAAE39C,EAAK,OAAEC,IAAW0+C,EAAAA,GAAAA,MACpBC,EAAS3jB,GAAWyjB,EAE1B,OACE,0BAAKvmC,UAAU,iBACXwlC,GAAa,0BAAKxlC,UAAU,qBAAqBgvB,IAAKyX,EAAQ5+C,MAAOA,EAAOC,OAAQA,EAAQmnC,IAAI,KAClG,mBAACyX,GAAA,EAAY,CAACH,aAAcE,EAAQE,UAAW1sD,QAAQurD,GAAY39C,MAAOA,EAAOC,OAAQA,IAG/F,CArC2B8+C,CAAgBxB,EAAgBE,EAAcE,GACjE,0BAAKxlC,UAAU,gBACb,0BAAKA,UAAU,QAAQytB,IAAI,QACxBuX,GAAc6B,EAAAA,GAAAA,GAAW7B,GAAgB,GAAEttD,EAAK,oBAAoB2Y,EAAQ,EAAK,KAAG2G,EAAQ3G,GAAU,MAEzG,wBAAGo9B,IAAI,QACL,mBAACqZ,GAAA,EAAc,CAACpvD,KAAMA,EAAMQ,QAASA,EAAS6uD,QAAS9sD,QAAQmrD,MAEjE,mBAAC4B,GAAA,EAAY,OAEdlB,GACC,mBAAC/X,GAAA,EAAM,CACLC,KAAK,OACLhuB,UAAU,gBACVutB,QAASyY,EACTiB,uBAAqB,EACrBjJ,aAAej/C,EAAAA,QAAkCvL,EAAnB0yD,EAC9BjI,aAAel/C,EAAAA,QAAoCvL,EAArB2yD,GAE7BL,EAAavvD,OAIhB,I,oDCnIV,MAAM2wD,GAAiB,IAEhB,SAASC,GAAWC,EAAsBC,GAAkE,IAAnDC,EAAqB,UAAH,6CAAG,YACnF,MAAMxgD,EAAMsgD,aAAiBG,KAAO9sC,IAAI+sC,gBAAgBJ,GAASA,EAC3DK,EAAM,IAAIC,MAChB,OAAO,IAAIhqC,SAASiqC,IAClBF,EAAIG,OAAS,KACXC,GAAMJ,EAAKA,EAAI5/C,MAAQw/C,EAAOI,EAAI3/C,OAASu/C,EAAOC,GAC/Ch+C,MAAMw+C,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOttC,IAAI+sC,gBAAgBM,EAAK,IAEjCx+C,KAAKq+C,GACLK,SAAQ,KACHZ,aAAiBG,MACnB9sC,IAAIwtC,gBAAgBnhD,EACtB,GACA,EAEN2gD,EAAIzY,IAAMloC,CAAG,GAEjB,CAyBAoF,eAAe27C,GACbJ,EAAuB5/C,EAAeC,GAChB,IADgCw/C,EAAqB,UAAH,6CAAG,YAG3E,KAAI,sBAAuBtxD,QA6BzB,OAAOkyD,GAAaT,EAAK5/C,EAAOC,OAAQtU,EAAW8zD,GA5BnD,IACE,MAAMa,QAAenyD,OAAOoyD,kBAAkBX,EAC5C,CAAEY,YAAaxgD,EAAOygD,aAAcxgD,EAAQygD,cAAe,SAC7D,GAAIJ,EAAOrgD,SAAWA,GAAUqgD,EAAOtgD,QAAUA,EAC/C,MAAM,IAAIkgD,MAAM,sCAElB,MAAMS,QAAqBC,EAAAA,GAAAA,IAAgBhB,EAAIzY,KACzC0Z,GAAYC,EAAAA,GAAAA,IAAaH,GAAgBtB,GAAiB,OAAS,OACzE,aAAa,IAAIxpC,SAASkrC,IACxB,MAAMC,EAASlmD,SAASmmD,cAAc,UACtCD,EAAOhhD,MAAQsgD,EAAOtgD,MACtBghD,EAAO/gD,OAASqgD,EAAOrgD,OACvB,MAAMihD,EAAQF,EAAOG,WAAW,MAChCD,EAAME,UAAYP,EAClBK,EAAMG,SAAS,EAAG,EAAGL,EAAOhhD,MAAOghD,EAAO/gD,QAC1C,MAAMqhD,EAAMN,EAAOG,WAAW,kBAC1BG,EACFA,EAAIC,wBAAwBjB,GAE5BY,EAAMM,UAAUlB,EAAQ,EAAG,GAE7BU,EAAOS,OAAOV,EAAKtB,EAAW,GAKlC,CAHE,MAAOnjD,GAEP,OAAO+jD,GAAaT,EAAK5/C,EAAOC,OAAQtU,EAAW8zD,EACrD,CAIJ,CAEAp7C,eAAeg8C,GACbT,EAAuB5/C,EAAeC,GAChB,IADgC6wB,EAAe,UAAH,6CAAG,GAAK2uB,EAAqB,UAAH,6CAAG,YAE/F,MAAMuB,EAASlmD,SAASmmD,cAAc,UAChCK,EAAMN,EAAOG,WAAW,MACxBO,EAAK5mD,SAASmmD,cAAc,UAC5BU,EAAOD,EAAGP,WAAW,MAK3B,GAHAH,EAAOhhD,MAAQA,EACfghD,EAAO/gD,OAASA,EAEZ2/C,EAAI5/C,MAAQ8wB,EAAO9wB,EAAO,CAC5B,MAAM4hD,EAAM,EAAI9wB,EAChB,IAAI+wB,EAAM,CACR7hD,MAAO1H,KAAKG,MAAMmnD,EAAI5/C,MAAQ8wB,GAC9B7wB,OAAQ3H,KAAKG,MAAMmnD,EAAI3/C,OAAS6wB,IAQlC,IALA4wB,EAAG1hD,MAAQ6hD,EAAI7hD,MACf0hD,EAAGzhD,OAAS4hD,EAAI5hD,OAEhB0hD,EAAKH,UAAU5B,EAAK,EAAG,EAAGiC,EAAI7hD,MAAO6hD,EAAI5hD,QAElC4hD,EAAI7hD,MAAQ8wB,EAAO9wB,GACxB6hD,EAAM,CACJ7hD,MAAO1H,KAAKG,MAAMopD,EAAI7hD,MAAQ8wB,GAC9B7wB,OAAQ3H,KAAKG,MAAMopD,EAAI5hD,OAAS6wB,IAElC6wB,EAAKH,UAAUE,EAAI,EAAG,EAAGG,EAAI7hD,MAAQ4hD,EAAKC,EAAI5hD,OAAS2hD,EAAK,EAAG,EAAGC,EAAI7hD,MAAO6hD,EAAI5hD,QAGnFqhD,EAAIE,UAAUE,EAAI,EAAG,EAAGG,EAAI7hD,MAAO6hD,EAAI5hD,OAAQ,EAAG,EAAG+gD,EAAOhhD,MAAOghD,EAAO/gD,OAC5E,MACEqhD,EAAIE,UAAU5B,EAAK,EAAG,EAAGoB,EAAOhhD,MAAOghD,EAAO/gD,QAGhD,MAAM0gD,QAAqBC,EAAAA,GAAAA,IAAgBhB,EAAIzY,KACzC0Z,GAAYC,EAAAA,GAAAA,IAAaH,GAAgBtB,GAAiB,OAAS,OAIzE,OAHAiC,EAAIF,UAAYP,EAChBS,EAAIQ,yBAA2B,mBAC/BR,EAAID,SAAS,EAAG,EAAGL,EAAOhhD,MAAOghD,EAAO/gD,QACjC,IAAI4V,SAASiqC,IAClBkB,EAAOS,OAAO3B,EAASL,EAAW,GAEtC,C,6EC9GMsC,GAAkB,CAAE/hD,MAAO,IAAKC,OAAQ,KACxC+hD,GAAe,I,4BCgCrB,MAAMC,GAAyC,CAC7C,GAAK,IACL,IAAM,GACN,EAAG,EACH,IAAK,IACL,EAAG,KAECC,GAAuBxvD,OAAOC,KAAKsvD,IAAgBzxD,OAAOL,IAAI4C,QA2SpE,IAAeu0C,EAAAA,EAAAA,KACb,CAACl8C,EAAQ,KAA4B,IAA5B,QAAEiF,GAAS,EAClB,MAAMS,GAASC,EAAAA,EAAAA,IAAa3F,EAAQiF,GAC9B8I,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQiF,EAAQ9E,SAClC,OACJ+H,EAAM,aAAEC,EAAY,QAAEC,EAAO,qBAAEG,IAC7BvH,EAAAA,EAAAA,IAAehB,GAAQqI,YAE3B,MAAO,CACL3C,SACAqI,OACA7F,SACAC,eACAI,uBACAH,UACD,GAfL,EAtS+C,IAUzC,IAV0C,QAC9CnD,EAAO,UACP8nB,EAAS,KACTgqC,EAAI,OACJrxD,EAAM,KACNqI,EAAI,OACJ7F,EAAM,aACNC,EAAY,qBACZI,EAAoB,QACpBH,GACD,EACC,MAAM,qBACJ4uD,EAAoB,2BACpBC,EAA0B,oBAC1BC,EAAmB,aACnBlvD,EAAY,iBACZ6tB,IACEO,EAAAA,EAAAA,MAGEwnB,GAAMtB,EAAAA,EAAAA,IAAuB,MAC7B73C,GAAO81C,EAAAA,GAAAA,MACP,SAAE0C,IAAaC,EAAAA,EAAAA,OACf,MAAEia,EAAK,MAAEj4C,EAAK,MAAEywB,IAAUC,EAAAA,EAAAA,IAAkB3qC,GAC5CmyD,EAAUpwD,QAAQkY,GAASywB,GAC3B0nB,EAA6BD,IAAYD,GAAOG,UAAY,GAAKC,EAAAA,IACjEC,EAAa9xD,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,QAAUnF,EACrDk3D,EAAY7vB,GAAAA,IAA0B0qB,EAAAA,EAAAA,IAAoBrtD,EAAS,WACnEyyD,EDrEwB,EAC9BzyD,EAAqBS,EAA4BqI,KAEjD,MAAMtJ,GAAO81C,EAAAA,GAAAA,MAEP,MAAE4c,EAAK,MAAEj4C,IAAU0wB,EAAAA,EAAAA,IAAkB3qC,GACrCgL,EAAQknD,EAASA,EAAMlnD,OAASknD,EAAMQ,SAAYz4C,EAAQ,gBAAkB,GAC5E04C,EAAST,GAAOU,WAAcnyD,IAAUG,EAAAA,EAAAA,IAAepB,EAAMiB,GAC7DoyD,EAAS/pD,IAAQkK,EAAAA,EAAAA,GAAaxT,EAAMsJ,IAAU,WAE9CgqD,EAAkBZ,IAASa,EAAAA,EAAAA,IAAiBb,KAAU7E,EAAAA,EAAAA,IAAoBrtD,EAAS,aACnF8yB,EAAaryB,IAAUuyD,EAAAA,EAAAA,IAAkBvyD,EAAQ,OACjD4L,EAAQ6lD,GAASY,GAAoB74C,GAAS6Y,EAC9C+b,GAAQsH,EAAAA,GAAAA,GAAS9pC,GAEjBypC,GAAOO,EAAAA,EAAAA,KAAQ,IA2BvB,SAAsB6b,EAAkBj4C,EAAkBrL,GACxD,IAAKA,EAAK,OAAO8iD,GACjB,GAAIQ,EAAO,CACT,IAAKA,EAAMe,gBAAgBxwD,OAAQ,OACnC,MAAMywD,EAAYhB,EAAMe,eAAe/sD,MAAM4vC,GAAuB,MAAdA,EAAKv5C,OAC3D,OAAO22D,GAAahB,EAAMe,eAAe,EAC3C,CAEA,OAAIh5C,EACKk5C,GAAAA,QADT,CAKF,CAvCWC,CAAalB,EAAOj4C,EAAO40B,IACjC,CAACqjB,EAAOrjB,EAAO50B,KACV3Z,OAAQsO,IAAQykD,EAAAA,GAAAA,IAAS,IAanC,SAAyBzkD,EAAcknC,GACrC,IAAKlnC,EAAK,OAAO4W,QAAQiqC,QAAQ6D,IACjC,IAAKxd,EAAM,OD/BN,SACLoZ,EAAsBv/C,EAAeC,GACpB,IADoCw/C,EAAqB,UAAH,6CAAG,YAE1E,MAAMxgD,EAAMsgD,aAAiBG,KAAO9sC,IAAI+sC,gBAAgBJ,GAASA,EAC3DK,EAAM,IAAIC,MAChB,OAAO,IAAIhqC,SAASiqC,IAClBF,EAAIG,OAAS,KACXC,GAAMJ,EAAK5/C,EAAOC,EAAQw/C,GACvBh+C,MAAMw+C,IACL,IAAKA,EAAM,MAAM,IAAIC,MAAM,wBAC3B,OAAOttC,IAAI+sC,gBAAgBM,EAAK,IAEjCx+C,KAAKq+C,GACLK,SAAQ,KACHZ,aAAiBG,MACnB9sC,IAAIwtC,gBAAgBnhD,EACtB,GACA,EAEN2gD,EAAIzY,IAAMloC,CAAG,GAEjB,CCUoB2kD,CAAY3kD,EAAK+iD,GAAcA,IACjD,MAAMtvB,EAAMp6B,KAAKo6B,IAAIyT,EAAKnmC,MAAOmmC,EAAKlmC,QACtC,OAAIyyB,EAAMsvB,GAED1C,GAAWrgD,EADJ+iD,GAAetvB,GAGxB7c,QAAQiqC,QAAQ7gD,EACzB,CArBI4kD,CAAgB3kB,EAAOiH,IACtB,CAACjH,EAAOiH,GAAOwd,IAClB,OAAOjd,EAAAA,EAAAA,KAAQ,KACNod,EAAAA,GAAAA,IAAmB,CACxBzoD,QACA2nD,SACAE,QACAa,QAAS,CAAC,CAAE5c,IAAKloC,OAElB,CAACikD,EAAOF,EAAQ3nD,EAAO4D,GAAK,ECyCT+kD,CAAwB3zD,EAASS,EAAQqI,IAEzD,UACJ8qD,EAAS,KACTC,EAAI,UACJC,EAAS,iBACTC,EAAgB,qBAChBC,EAAoB,QACpBt3C,EAAO,OACPu3C,EAAM,UACNC,EAAS,YACTC,EAAW,gBACXC,IACEC,EAAAA,GAAAA,IACFC,EAAAA,GAAAA,IAAYt0D,IACZu0D,EAAAA,EAAAA,IAAiBv0D,GACjBmyD,EAAU,QAAU,QACpBK,OACAl3D,EACAm3D,OACAn3D,GACA,OACAA,OACAA,GACAqoC,EAAAA,EAAAA,IAAe3jC,IACf,IAGI,kBACJw0D,EAAiB,wBACjBC,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBlc,GAErBmc,GAAcrc,EAAAA,EAAAA,KAAY,KAC9B11C,EAAa,CAAE7H,OAAQ8E,EAAQ9E,OAAQuG,UAAWzB,EAAQ3D,IAAK,GAC9D,CAAC0G,EAAc/C,EAAQ9E,OAAQ8E,EAAQ3D,KAEpC6nD,GAAczL,EAAAA,EAAAA,KAAY,KAC1Bqb,GACFF,IAEFhjC,KACAmkC,EAAAA,GAAAA,MACAlB,GAAM,GACL,CAACjjC,EAAkBkjC,EAAWF,EAAWC,IAEtCmB,GAAqBvc,EAAAA,EAAAA,KAAajY,IACtCuxB,EAAqB,CAAE9uD,OAAQu9B,EAAQ,MAEvC0zB,EAAU1zB,EAAQ,IAAI,GACrB,CAACuxB,EAAsBmC,IAEpBe,GAAoBxc,EAAAA,EAAAA,KAAY,KAChC5xC,EAAAA,KAAiByS,EAAAA,KACrB66C,IACAlC,EAAoB,CAAE9uD,SAAUA,IAAU,GACzC,CAACA,EAAS8uD,EAAqBkC,IAE5Be,GAAqBzc,EAAAA,EAAAA,KAAY,SAAC0c,GAAqC,IAApB5pD,IAAW,UAAH,+CAC/D,MAAM6pD,EAAOxD,GAAeuD,GACtBE,EA5FoB,IA4FHF,GAAqC5pD,EAC5DymD,EAA2B,CAAE9uD,aAAckyD,EAAM9xD,qBAAsB+xD,IACvEjB,EAAgBiB,EAAiBD,EA9FP,EA+F5B,GAAG,CAACpD,EAA4BoC,IAE1BkB,GAAsB7c,EAAAA,EAAAA,KAAY,KACtCkc,IACA,MAAMY,EAAU7yD,OAAOL,OAAOqe,QAAQkxC,IAAgB1rD,MAAK,QAAE,CAAEkvD,GAAK,SAAKA,IAASlyD,CAAY,MAAI,KAnGxE,EAqGpBsyD,GAAelyD,EAErB4xD,EACEM,GAxGwB,IAwGTD,EAvGc,EAuGmDA,EAChFC,EACD,GACA,CAACb,EAAwBrxD,EAAsBJ,EAAcgyD,IAE1DO,GAAqBhd,EAAAA,EAAAA,KAAY,KACrC,MAAMid,EAAcrzD,OAAOqe,QAAQkxC,IAAgB1rD,MAAK,QAAE,CAAEkvD,GAAK,SAAKA,IAASlyD,CAAY,MAAI,IA9GrE,EAgHpB7E,EAAQ,GAhHY,IAgHV6E,EA/Ge,EA+GuDwyD,KACtF,OACE,0BAAK5tC,UAAU,oBACZ0sC,GAAqB,0BAAK1sC,UAAU,oBAAoButB,QAASsf,IAElE,mBAAC9e,GAAA,EAAM,CACLjjC,OAAK,EACLkV,WAAW0uB,EAAAA,GAAAA,GACT,kBAAmBlzC,GAAwB,UAAWkxD,GAAqB,UAE7E9e,MAAM,cACNI,KAAK,UACLgG,UAAU,gBACVlD,QAASZ,EACT8N,aAAc4O,EACdrf,QAASigB,EACTvK,YAAa0J,EACbkB,cAAejB,GAEf,2BAAM5sC,WAAW0uB,EAAAA,GAAAA,GACf,wBACgB,IAAhBn4C,EAAKoE,QAAgB,QACL,IAAhBpE,EAAKoE,QAAgB,SAGpBpE,IAGD,GAEP,CACDo2D,EAAyBC,EAAmBC,EAAwBW,EAAqBd,EACzFxc,EAAU10C,EAAsBJ,IAG5B0yD,IAAavf,EAAAA,EAAAA,KAAQ,IACV,IAAXpzC,GAAgBE,EAAgB,aAChCF,EAAS,GAAY,gBACrBA,EAAS,GAAY,gBAClB,iBACN,CAACA,EAAQE,IAEZ,IAAI2uD,EAIJ,OACE,0BAAKhqC,WAAW0uB,EAAAA,GAAAA,GAAe,cAAe1uB,GAAYytB,IAAK/1C,EAAKg2C,MAAQ,WAAQl6C,EAAWq9C,IAAKA,GAClG,0BAAK7wB,UAAU,sBAAsButB,QAASyf,GAC3C5C,EA+FT,SAAqBA,GACnB,MAAM,MAAElnD,EAAK,UAAE4nD,EAAS,SAAEF,GAAaR,EAEvC,OACE,sCACE,0BAAKpqC,UAAU,QAAQytB,IAAI,SAAQoZ,EAAAA,GAAAA,GAAW3jD,GAAS0nD,IACtDE,GACC,0BAAK9qC,UAAU,WAAWytB,IAAI,SAAQoZ,EAAAA,GAAAA,GAAWiE,IAIzD,CA1GiBiD,CAAY3D,GA4G7B,SAAqB4D,EAAkBvD,GACrC,OACE,sCACE,0BAAKzqC,UAAU,QAAQytB,IAAI,QAAQgd,IAAc5D,EAAAA,GAAAA,GAAW4D,IAC5D,0BAAKzqC,UAAU,WAAWytB,IAAI,QAAQugB,GAG5C,CAnHsCC,CAAYv2D,EAAK,eAAgB+yD,GAC/D,mBAACzD,GAAA,EAAY,OAGf,mBAACjZ,GAAA,EAAM,CACLjjC,OAAK,EACLgmC,QAASZ,EACTtC,MAAM,cACNI,KAAK,UACLhuB,UAAU,gBACVkuC,SAAUt5C,IACV24B,QAAS2e,EACTlY,UAAU,kBAEV,wBAAGh0B,UAAU,wBAEf,mBAAC+tB,GAAA,EAAM,CACLjjC,OAAK,EACLgmC,QAASZ,EACTtC,MAAM,cACNI,KAAK,UACLhuB,WAAW0uB,EAAAA,GAAAA,GAAe,cAAe,gBAAiBsd,EAAY,QAAU,QAChFze,QAASue,EACT9X,UAAWgY,EAAY,cAAgB,cAEvC,wBAAGhsC,UAAU,cACb,wBAAGA,UAAU,gBAEf,mBAAC+tB,GAAA,EAAM,CACLjjC,OAAK,EACLgmC,QAASZ,EACTtC,MAAM,cACNI,KAAK,UACLhuB,UAAU,gBACVkuC,SAAU/B,IACV5e,QAAS0e,EACTjY,UAAU,cAEV,wBAAGh0B,UAAU,oBAGf,0BAAKA,UAAU,yBACb,mBAAC+tB,GAAA,EAAM,CACLjjC,OAAK,EACLkV,UAAU,8BACV4tB,MAAM,cACNI,KAAK,UACLgG,UAAU,SACVzG,QAAS4f,EACTrc,QAASZ,GAET,wBAAGlwB,UAAW8tC,OAGdt8C,EAAAA,IACA,0BAAKwO,UAAU,yBACb,0BAAKA,UAAU,yBACf,0BAAKA,UAAU,iBACb,mBAACmuC,GAAA,EAAW,CAACC,MAAI,EAAC11B,MAAOr9B,EAAU,EAAa,IAATF,EAAco8C,SAAU2V,OAMtE5C,GACC,mBAAC9T,GAAA,EAAY,CACX6X,UAAW3B,EACX9V,UAAU,QACV2F,UAAU,MACVv8B,UAAU,qBACVy2B,QAASkX,EACTvc,QAASyb,EACTyB,OAAQxB,EACRyB,qBAAsB1B,GAErB9C,GAAqB/xD,KAAKs1D,GA0CrC,SACEA,EAAckB,EAAqBjhB,EACnC/xC,GAEA,MAAMizD,EAAcD,IAAgB1E,GAAewD,IAAS9xD,GA1RhC,IA2RtB8xD,IAAmC9xD,EACzC,OACE,mBAACy6C,GAAA,EAAQ,CACPzN,IAAK8kB,EAEL/f,QAAS,IAAMA,EAAQ+f,GACvBpX,KAAMuY,EAAa,aAAUj7D,EAC7Bk7D,WAAaD,OAAkDj7D,EAArC,wBAAGwsB,UAAU,sBAEtCstC,EAAI,IAGX,CA1DmBqB,CAA2BrB,EAAMlyD,EAAcgyD,EAAoB5xD,MAKhF,mBAACuyC,GAAA,EAAM,CACLjjC,OAAK,EACLkV,UAAU,eACV4tB,MAAM,cACNI,KAAK,UACLT,QAAS6O,EACTpI,UAAU,gBAEV,wBAAGh0B,UAAU,gBAEX,I,2BCzRV,MAgJA,IAAeyrB,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAAF,IAAE,OAAEG,GAAQ,QAAkB,CACnCuX,cAAe1X,EAAO0X,cACtB3J,MAAMvL,EAAAA,EAAAA,IAAWxC,EAAQG,GACzBgiB,MAAM8X,EAAAA,EAAAA,IAAS95B,IAAUiiB,EAAAA,EAAAA,IAAWpiB,EAAQG,QAAUI,EACvD,GALiB27C,EAhJ+B,IAE7C,IAF8C,OAClD/7C,EAAM,UAAE4sB,EAAS,KAAEhf,EAAI,KAAEoU,EAAI,SAAEpN,EAAQ,cAAE2C,GAC1C,EACC,MAAM,qBACJikD,EAAoB,aACpBC,EAAY,WACZC,EAAU,WACVC,EAAU,aACVC,EAAY,eACZC,EAAc,cACdC,EAAa,mBACbC,EAAkB,oBAClBC,IACE/lC,EAAAA,EAAAA,MAEE3xB,GAAO81C,EAAAA,GAAAA,MACN6hB,EAAsBC,EAAoBC,IAAuB5f,EAAAA,GAAAA,MACjE6f,EAAkBC,IAAuBhjB,EAAAA,EAAAA,KAAkB,IAC3DijB,EAAkBC,IAAuBljB,EAAAA,EAAAA,KAAkB,IAC5D,WAAEtxB,GAAena,GAAQ,CAAC,GAC1B,eACJ4uD,EAAc,cAAEC,EAAa,cAAEC,EAAa,gBAAEC,GAC5C/nD,GAAY,CAAC,EACXgoD,EAAehvD,IAAQivD,EAAAA,EAAAA,IAAiBjvD,GAExCkvD,GAAmBvf,EAAAA,EAAAA,KAAY,KACnCie,EAAqB,CAAEvsD,OAAQjP,IAC3Bw8D,GACFT,EAAmB,CAAE56D,GAAInB,GAC3B,GACC,CAACw7D,EAAsBgB,EAAgBT,EAAoB/7D,IAExD+8D,GAAqBxf,EAAAA,EAAAA,KAAY,KACrC4e,IACAV,EAAa,CAAEuB,UAAWh9D,EAAQ+nB,WAAYA,IAC1C00C,GAAiBL,GACnBV,EAAW,CAAE17D,WAEXs8D,GACFX,EAAW,CAAE37D,UACf,GACC,CACD+nB,EAAY0zC,EAAcU,EAAqBR,EAAYD,EAAYe,EAAeH,EACtFF,EAAkBp8D,IAGdi9D,GAAyB1f,EAAAA,EAAAA,KAAY,KACzCye,EAAoB,CAAEh8D,UAAS,GAC9B,CAACA,EAAQg8D,IAENkB,GAAuB3f,EAAAA,EAAAA,KAAY,KACvC4e,IACAT,EAAW,CAAE17D,WACT48D,GACFf,EAAe,CAAE77D,SAAQiP,OAAQsI,IACjCukD,EAAc,CAAE97D,SAAQ8iB,oBAAoB,KAE5C84C,EAAa,CAAE57D,UACjB,GACC,CACDA,EAAQm8D,EAAqB5kD,EAAeskD,EAAgBC,EAAec,EAAchB,EAAcF,IAGzG,GAAK9mD,EAIL,OACE,0BAAKgY,WAAW0uB,EAAAA,GAAAA,GAAe,kBAAmB1uB,GAAYytB,IAAK/1C,EAAKg2C,MAAQ,WAAQl6C,GACrFs8D,GACC,mBAAC/hB,GAAA,EAAM,CACLwiB,QAAM,EACNnS,OAAK,EACLpQ,KAAK,OACLhuB,UAAU,0BACVutB,QAAS2iB,GAERx4D,EAAK,wBAGTq4D,GACC,mBAAChiB,GAAA,EAAM,CACLH,MAAM,SACN2iB,QAAM,EACNnS,OAAK,EACLpQ,KAAK,OACLhuB,UAAU,0BACVutB,QAAS+hB,GAER53D,EAAK,0BAGTm4D,IAAkBE,GACjB,mBAAChiB,GAAA,EAAM,CACLH,MAAM,SACN2iB,QAAM,EACNnS,OAAK,EACLpQ,KAAK,OACLhuB,UAAU,0BACVutB,QAAS+hB,GAER53D,EAAK,8BAGV,mBAACq2C,GAAA,EAAM,CACLjjC,OAAK,EACLgmC,QAAM,EACN9C,KAAK,OACLJ,MAAM,cACNL,QAAS8iB,EACTrc,UAAWt8C,EAAK,UAEhB,wBAAGsoB,UAAU,gBAEf,mBAAComC,GAAA,EAAa,CACZpxD,OAAQq6D,EACRje,QAASme,EACTrsD,MAAOxL,EAAK,iBAAkB0d,GAAOmR,EAAAA,EAAAA,IAAuBnR,IAAQlK,EAAAA,EAAAA,GAAaxT,EAAMsJ,IACvFzK,KAAM6e,EACF1d,EAAK,mCAAmC4jB,EAAAA,EAAAA,IAAgBlG,IACxD1d,EAAK,mCACT84D,sBAAoB,EACpBnK,aAAc3uD,EAAK,SACnB4uD,eAAgBlxC,EAAO+6C,EAAqBG,GAE3Cl7C,GACC,mBAACq7C,GAAA,EAAQ,CACPra,MAAO1+C,EAAK,kBACZ2+C,QAASqZ,EACTgB,QAASf,IAGZv6C,GAAQy6C,GACP,mBAACY,GAAA,EAAQ,CACPra,MAAO1+C,EAAK,cACZ2+C,QAASmZ,EACTkB,QAASjB,KAIX,KCoTV,IAAehkB,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAES,IAFT,OACPG,EAAM,SAAEC,EAAQ,gBAAEoE,EAAe,SAAEy4C,GACpC,EACC,MAAM,kBACJrsC,EAAiB,4BAAEo0C,EAA2B,YAAE38C,EAAW,aAAEwI,IAC3D7P,EAAAA,EAAAA,IAAehB,IACb,aAAE+1B,GAAiB/1B,EACnB+N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,IAExBA,OAAQw1B,EAAajvB,UAAWkvB,GAAmBvtB,EACrDq1D,EAAe/nC,GAAeC,GAChC3hB,EAAAA,EAAAA,IAAkBjU,EAAQ21B,EAAaC,QACvCr1B,EAEJ,IAAI6oB,EACoB,WAApB5kB,EAEF4kB,GADkBipB,EAAAA,EAAAA,IAAgBryC,EAAQG,EAAQC,IACvBsH,OACE,cAApBlD,EAET4kB,GADqBwoB,EAAAA,EAAAA,IAAmB5xC,EAAQG,EAAQC,IAC1BsH,OACD,WAApBlD,GAAgCpE,IAAamB,EAAAA,KAEtD6nB,GADmBvhB,EAAAA,EAAAA,IAAiB7H,EAAQG,EAAQC,IACxBgpB,eAAiB,GAG/C,MAAMu0C,EAAmC,WAApBn5D,GAAgCpE,IAAamB,EAAAA,GAC5Dq8D,EAAgB7vD,IAAQ8vD,EAAAA,EAAAA,IAAoB79D,EAAQ+N,GACpD+vD,EAAgB92D,QAAQ42D,IAAiBG,EAAAA,EAAAA,IAAoB/9D,EAAQG,IACrE69D,EAAcJ,IAAkBE,GAAiB92D,SAAQi3D,EAAAA,EAAAA,IAA0Bj+D,EAAQG,IAC3F+9D,EAAel3D,QACnB+G,IAAS4vD,GAAgB5vD,EAAKtL,YAAa07D,EAAAA,EAAAA,IAAcpwD,KAASqwD,EAAAA,EAAAA,IAAiBrwD,KAAUA,EAAKs+B,aAE9FgyB,EAAwBr3D,QAAQ+G,GAAMs+B,aAAet+B,EAAKuwD,eAC1D9xB,GAAeE,EAAAA,EAAAA,IAAkB1sC,EAAQG,EAAQC,EAAU,gBAC3Dm+D,GAAiBv9D,EAAAA,EAAAA,IAAehB,GAAQu+D,eAExCvnB,EAAoB,CACxBxK,eACA57B,oBACA4tD,oBAAoB91D,EAAAA,EAAAA,IAAyB1I,EAAQi9C,GACrDwhB,oBAAoBC,EAAAA,EAAAA,IAAqB1+D,GACzC09D,eACA3vD,OACAqb,gBACAu1C,gBAAgBC,EAAAA,EAAAA,IAAqB5+D,EAAQG,GAC7C41B,eACAivB,8BACA6Z,qBAAsB3xD,KAAKC,IAAI,EAAG0D,EAAanJ,OAAS,GACxDwuB,gBAAiBl2B,EAAOk2B,gBACxBzC,UAAWzzB,EAAOyzB,UAClBqrC,kBAAmBd,GAAeF,GAAiBI,GAAgBG,EACnEU,0BAA2BR,GAAkBA,EAAeS,mBAGxDtsB,GAAe7tC,EAAAA,EAAAA,IAAmB7E,EAAQG,GAChD,GAAwB,WAApBqE,IAAiCkuC,EACnC,OAAOsE,EAKT,GAFA1vC,OAAO23D,OAAOjoB,EAAO,CAAEtE,iBAEnBtyC,IAAamB,EAAAA,KAAmBwM,GAAMtL,QAAS,CACjD,MAAMy8D,GAAkBzgD,EAAAA,EAAAA,IAAyBze,EAAQG,EAAQC,GAC3D6E,EAAUi6D,GAAkBjrD,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ++D,QAAmB3+D,EACjF4+D,EAAmBl6D,GAAUm6D,EAAAA,EAAAA,IAAsBp/D,EAAQiF,QAAW1E,EACtEk0B,GAAa5sB,EAAAA,EAAAA,IAAiB7H,EAAQG,EAAQC,GAEpD,MAAO,IACF42C,EACHqoB,iBAAkBH,EAClBI,UAAU,EACVH,mBACAI,WAAYv4D,QAAQytB,GAAYQ,iBAEpC,CAEA,MAAMoqC,GAAmBhtB,EAAAA,EAAAA,IAAgBryC,EAAQG,EAAQC,GACzD,GAAIi/D,GAAkB33D,OAAQ,CAC5B,MAAM83D,EAAqB9sB,EAAa2sB,EAAiB,KACnD,SACJC,GACGE,IAAsBt6D,EAAAA,EAAAA,IAA4BlF,EAAQw/D,EAAoBp/D,IAAc,CAAC,EAElG,MAAO,IACF42C,EACHqoB,mBACAC,WAEJ,CAEA,OAAOtoB,CAAK,GA5FIkF,EA1X4B,IA0B1C,IA1B2C,OAC/C/7C,EAAM,SACNC,EAAQ,gBACRoE,EAAe,QACfi7D,EAAO,SACPxiB,EAAQ,iBACRoiB,EAAgB,aAChB3sB,EAAY,SACZ4sB,EAAQ,iBACRH,EAAgB,aAChB3yB,EAAY,mBACZiyB,EAAkB,kBAClB7tD,EAAiB,mBACjB4tD,EAAkB,aAClBd,EAAY,KACZ3vD,EAAI,cACJqb,EAAa,WACbm2C,EAAU,eACVZ,EAAc,aACd5oC,EAAY,kBACZ+oC,EAAiB,4BACjB9Z,EAA2B,qBAC3B6Z,EAAoB,gBACpB3oC,EAAe,yBACf6oC,EAAwB,UACxBtrC,GACD,EACC,MAAM,iBACJ4K,EAAgB,WAChBqhC,EAAU,aACV13D,EAAY,SACZ3E,EAAQ,iBACRs8D,EAAgB,yBAChBC,EAAwB,mBACxBC,EAAkB,iBAClBC,EAAgB,sBAChB39D,IACEi0B,EAAAA,EAAAA,MAEE3xB,GAAO81C,EAAAA,GAAAA,KACPwlB,GAAqBzjB,EAAAA,EAAAA,KAAO,IAC3B0jB,EAAgCC,IAAmCzmB,EAAAA,EAAAA,KAAS,IAC7E,SAAE0mB,IAAahjB,EAAAA,EAAAA,OAEdijB,EAAoBC,IAAyB5mB,EAAAA,EAAAA,IAAS,GACvD0lB,EAAkBj+B,MAAMo/B,QAAQhB,GAAoBA,EAAiBc,GAAsBd,EAC3FiB,EAAgB5tB,GAAgBwsB,EAAkBxsB,EAAawsB,QAAmB3+D,EAClFggE,EAAsBt/B,MAAMo/B,QAAQhB,GACtCA,EAAiB33D,OAAU23D,EAAmB,OAAI9+D,EAChDigE,EAAkBzyD,IAAQkK,EAAAA,EAAAA,GAAaxT,EAAMsJ,GAAMrG,OACnD+4D,EAAkBtB,GAAmBt5D,EAAAA,EAAAA,IAAepB,EAAM06D,QAAoB5+D,GAC9E,SAAEwU,GAAahH,GAAQ,CAAC,EACxBtL,GAAUsL,GAAMtL,SAEtBu1C,EAAAA,EAAAA,KAAU,KACJjiB,GAAgB0pC,IAAYr/D,IAAamB,EAAAA,IAAkBkB,KAC7Do9D,EAAmB,CAAE1/D,SAAQC,YAC/B,GACC,CAACD,EAAQ0/D,EAAoB9pC,EAAc31B,EAAUq/D,EAASh9D,MAGjEu1C,EAAAA,EAAAA,KAAU,KACRooB,EAAsB,GACtBH,GAAgC,EAAM,GACrC,CAACZ,KAEJrnB,EAAAA,EAAAA,KAAU,KACR,GAAI+mB,GAA4BiB,EAAgC,CAC9DJ,EAAyB,CAAEv2D,YAAY,IACvC42D,GAAgC,GAEhC,MAAMz4D,GAAWk5D,EAAAA,GAAAA,GAAcH,GAAuB,EAAGJ,EAAqB,GAC9EC,EAAsB54D,EACxB,IACC,CACDu3D,EAA0BiB,EAAgCG,EAAoBI,EAC9EX,KAGFe,EAAAA,GAAAA,GAAiBxgE,EAAQ++D,EAAiBoB,GAE1C,MAAQ1rD,MAAOuyB,KAAgBy5B,EAAAA,GAAAA,KAEzBC,GAAuB15B,IAAeI,EAAAA,IACtCu5B,GAAwBZ,GAAYtvD,EAGpCmwD,IAAezkB,EAAAA,EAAAA,IAAuB,MACtC0kB,IAAqB1kB,EAAAA,EAAAA,KAAgB,GAErC2kB,IAAoBvjB,EAAAA,EAAAA,KAAY,KACpCrf,EAAiB,CAAE/8B,GAAInB,EAAQC,YAAW,GACzC,CAACi+B,EAAkBl+B,EAAQC,IAExBwyD,IAAqBlV,EAAAA,EAAAA,KAAah3C,IACtCg5D,EAAW,CAAEh5D,YAAWmc,SAAS,GAAO,GACvC,CAAC68C,IAEEwB,IAA2BxjB,EAAAA,EAAAA,KAAY,KACvC4iB,IACFt4D,EAAa,CACX7H,OAAQmgE,EAAcngE,OAAQC,WAAUsG,UAAW45D,EAAch/D,GAAII,mBAAmB,IAG1Fu+D,GAAgC,GAClC,GACC,CAACK,EAAet4D,EAAc5H,IAE3B+gE,IAAuBzjB,EAAAA,EAAAA,KAAY,KACvCr6C,EAAS,CAAE/B,GAAInB,EAAQC,WAAUoB,KAAM,UAAW,GACjD,CAAC6B,EAAUlD,EAAQC,IAEhBghE,IAAsB1jB,EAAAA,EAAAA,KAAY,KACtC50C,YAAW,KACTi3D,EAAmB9yC,SAAU,CAAI,GApJL,IAqJD,GAC5B,IAEGo0C,IAAkB3jB,EAAAA,EAAAA,KAAaxsC,IACnC,GAAK6uD,EAAmB9yC,QAAxB,CASA,GANA8yC,EAAmB9yC,SAAU,EACzBgwB,GACmBvtC,SAASwoC,cAA8BopB,EAAAA,MAC9CtmC,OAGZyjC,EAGF,OAFAt8D,SACAi/D,KAIF,GAAwB,WAApB58D,GAAyD,IAAzBq6D,EAUlC,OATKqB,GAAYY,IACf5vD,EAAEovC,kBACFj9C,EAAS,CAAE/B,QAAIf,GAAa,CAAEmmD,uBAAuB,KAErDoZ,SAGFsB,KAKFzB,IACAyB,IA7BuC,CA6BlB,GACpB,CACDnkB,EAAUwhB,EAAoBj6D,EAAiBq6D,EAAsBuC,GAAqBlB,EAC1FY,KAGIS,GACJp6B,IAAeI,EAAAA,KACZJ,GAAcq6B,EAAAA,KAEjBr6B,GAAcs6B,EAAAA,KACXt6B,GAAcI,EAAAA,OACZi5B,GAAmBA,EAAkB,IAEtCkB,GAA6BH,IACjCp6B,GAAcE,EAAAA,KACXF,GAAcw6B,EAAAA,IAGbC,GAAkB56D,QAAQ+N,GAAU8nD,eAAiB9nD,GAAU+nD,iBAAmB/nD,GAAU6nD,gBAEhGrV,aAAcsa,GACdpa,qBAAsBqa,KACpBpa,EAAAA,GAAAA,GAAkBka,IAChBG,IAAwBC,EAAAA,GAAAA,GAAiBJ,GAAkB7sD,OAAWxU,GAAW,IAGrFgnD,aAAc0a,GACdxa,qBAAsBya,KACpBxa,EAAAA,GAAAA,GAAkB1gD,QAAQ02D,IAExByE,IAAwBH,EAAAA,GAAAA,GAAiBtE,GAAc,IAG3DnW,aAAc6a,GACd3a,qBAAsB4a,KACpB3a,EAAAA,GAAAA,GAAkB1gD,QAAQs5D,IAExBgC,IAAyBN,EAAAA,GAAAA,GAAiB1B,GAAe,GACzDiC,IAA+BP,EAAAA,GAAAA,GAAiBzB,GAAqB,GACrEiC,IAAoBR,EAAAA,GAAAA,GAAiB1C,GAAU,GAC/CmD,IAA8BT,EAAAA,GAAAA,GAAiBvB,GAE/CiC,IAAoBC,EAAAA,GAAAA,GAAY9D,GAChC3T,QACkB3qD,IAAtBmiE,IAAmCA,GAAoB7D,EAAuB6D,QAAoBniE,EAG9FqiE,GAAkBR,IAA6BE,IAC/CL,IAA2BE,IAGjCnqB,EAAAA,EAAAA,KAAU,KACR,MAAM6qB,EAAc9B,GAAa9zC,QACjC,GAAK41C,EAIL,OAAKnB,IAA+BkB,QAMhCpE,GAAsB+C,IACpBP,GAAmB/zC,UACrB41C,EAAYnhB,UAAU1gB,IAAI,gBAAiB,YAC3CggC,GAAmB/zC,SAAU,GAI/BnkB,YAAW,KACT+5D,EAAYnhB,UAAUuN,OAAO,WAAW,GA/PrB,OAkQrB4T,EAAYnhB,UAAUuN,OAAO,iBAC7B+R,GAAmB/zC,SAAU,KAjB7B41C,EAAYnhB,UAAUuN,OAAO,gBAAiB,iBAC9C+R,GAAmB/zC,SAAU,GAiB/B,GACC,CAACy0C,GAA4BkB,GAAgBrB,GAA6B/C,IAE7E,MAAM,qBAAEnkB,IAAyBlB,GAAoB10C,EAAMyxB,EAAiBzC,GAAW,GAiEvF,SAASqvC,KAA6D,IAA5CC,EAAU,UAAH,8CAAUC,EAAoB,UAAH,8CAC1D,OACE,0BAAKj2C,UAAU,eACb,mBAAC+tB,GAAA,EAAM,CACLjjC,OAAK,EACLkjC,KAAK,UACLJ,MAAM,cACNL,QAAS+mB,GACTtgB,UAAWt8C,EAAKs+D,EAAU,QAAU,SAEpC,0BAAKh2C,WAAW0uB,EAAAA,GAAAA,GAAe,uBAAwBsnB,GAAW,iBAEnEC,GAAqB,mBAAC,GAAa,MAG1C,CAEA,MAAMC,GAAwBj8D,QAAQi7D,IAA2BE,IAC3De,GAA4BD,KAC3BhmB,GAAY6hB,GAAqB33B,GAAcg8B,EAAAA,IAEtD,OACE,0BAAKp2C,UAAU,eAAe6wB,IAAKmjB,IACjC,mBAACnmB,GAAA,EAAU,CACTpP,KAAMwZ,EAA8B,OAAS,aAC7CnK,UAAWgkB,EACX5T,eAAa,EACbC,oBAAqBA,IAzFD,WAApB1mD,GACEpE,IAAamB,EAAAA,KAAkBwM,GAAMtL,QAMzC,sCACGqgE,KACD,kCACqBviE,IAAlB6oB,EACqB,WAApB5kB,EACEC,EAAK86D,EAAa,gBAAkB,UAAWn2C,EAAe,KACxC,WAApB5kB,EAAgCC,EAAK,sBAAuB2kB,EAAe,KACrD,cAApB5kB,EACAm6D,EAAiBl6D,EAAK,aAAeA,EAAK,WAAY2kB,EAAe,UACnE7oB,EACNkE,EAAK,aAQb,uCACIo8D,IAAwBhC,EAAuB,IAAMiE,GAAiBhC,IAAuB,GAC/F,0BAAK/zC,UAAU,oBAAoButB,QAAS2mB,KACzChnC,EAAAA,EAAAA,IAAS95B,GACR,mBAACijE,GAAA,EAAe,CACd7tB,IAAKp1C,EACLiP,OAAQjP,EACRqsC,aAAcA,EACdr0B,OAAQkiC,GACRgpB,SAAUr8D,QAAQqzC,IAClBipB,cAAY,EACZC,iBAAe,EACfC,oBAAkB,EAClBC,gBAAiBhE,EACjBiE,gBA/SY,GAgTZC,OAAK,IAGP,mBAACC,GAAA,EAAa,CACZruB,IAAKp1C,EACLA,OAAQA,EACRC,SAAUA,EACVosC,aAAcA,EACdr0B,OAAQkiC,GACRgpB,SAAUr8D,QAAQqzC,IAClBkpB,gBAAiBnjE,IAAamB,EAAAA,GAC9B+hE,aAAcljE,IAAamB,EAAAA,GAC3BiiE,oBAAkB,EAClBC,gBAAiBhE,EACjBkE,OAAK,OAwCZvjE,IAAamB,EAAAA,KAAmBwM,GAAMtL,SACrC,mBAACohE,GAAA,EAAgB,CACfC,gBACG1B,IAA6Bp7D,QAAQs7D,KACpCL,IAA2Bj7D,QAAQm7D,IAEvChiE,OAAQA,IAIXiiE,IAA6BE,IAC5B,mBAAC,GAAmB,CAClB/sB,IAAKp1C,EACL8E,QAASq9D,GACTv+C,MAAOw+C,IAAgC,EACvCnlD,MAAO+iD,EACPpO,YAAa0Q,GACb11C,WAAW0uB,EAAAA,GAAAA,GAAe4mB,GAAyBa,IAA6B,cAChFlR,eAAgBwQ,GAAoB5P,QAAqBryD,EACzD+5C,QAAS4mB,GACTjP,iBAAkBkP,KAIrBU,IACC,mBAAC,GAAe,CACdtsB,IAAKp1C,EACLA,OAAQA,EACR4U,SAAUgtD,GACVh1C,UAAW+0C,KAIf,0BAAK/0C,UAAU,gBACZk2C,IACC,mBAAC,GAAW,CACV1tB,KAAKwuB,EAAAA,EAAAA,IAAc5B,IACnBl9D,QAASk9D,GACTp1C,UAAWm1C,KAGf,mBAAC8B,GAAA,EAAa,CACZ7jE,OAAQA,EACRC,SAAUA,EACVoE,gBAAiBA,EACjBy4C,SAAUA,EACVgnB,kBAAmBhB,MAGnB,KC5cH,SAASiB,GAAQC,GACtB,MAAO,YAAaA,CACtB,CAEO,SAASC,GAAct/D,EAAwB2rC,GACpD,IAMI4zB,EANAC,EAAkC,GAClCC,EAAmB,CACrBC,aAAc1/D,EAAS,GAAG4H,KAC1B+3D,UAAUC,EAAAA,GAAAA,IAAiC,IAAnB5/D,EAAS,GAAG4H,MACpCi4D,aAAc,CAACL,IAIjB,MAAMM,EAAiC,CAACL,GAiExC,OA/DAz/D,EAASoG,SAAQ,CAACjG,EAASmY,KACrBnY,EAAQ8jC,UACLs7B,GAOHA,EAAav/D,SAASc,KAAKX,GACvBA,EAAQ2H,QAAQtJ,OAClB+gE,EAAaQ,YAAc5/D,IAR7Bo/D,EAAe,CACbS,QAAS7/D,EAAQsE,UACjBzE,SAAU,CAACG,GACX4/D,YAAa5/D,GASjBq/D,EAAmB1+D,KAAKX,GAG1B,MAAM8/D,EAAcjgE,EAASsY,EAAQ,GASrC,IANEinD,GACKU,GAAgBA,EAAYx7D,WAAaw7D,EAAYx7D,YAAc86D,EAAaS,UAErFR,EAAmB1+D,KAAKy+D,GACxBA,OAAe9jE,GAEbwkE,EAAa,CACf,MAAMC,GAAyBN,EAAAA,GAAAA,IAAiC,IAAnBK,EAAYr4D,MACrD63D,EAAiBE,WAAaO,GAChCT,EAAmB,CACjBC,aAAcO,EAAYr4D,KAC1B+3D,SAAUO,EACVL,aAAc,IAEhBC,EAAWh/D,KAAK2+D,GAEhBD,EAAqB,GACrBC,EAAiBI,aAAa/+D,KAAK0+D,KAEnCS,EAAYzjE,KAAOmvC,GAChBxrC,EAAQmP,WAAa2wD,EAAY3wD,UACjCnP,EAAQ6H,aAAei4D,EAAYj4D,aACnCm4D,EAAAA,EAAAA,IAAgBhgE,KAChBggE,EAAAA,EAAAA,IAAgBF,IAEjB9/D,EAAQigE,aAAeH,EAAYG,cAEjCjgE,EAAQigE,YAAYC,eAAiBJ,EAAYG,YAAYC,cAC1DlgE,EAAQigE,YAAY56D,aAAey6D,EAAYG,YAAY56D,YAC3DrF,EAAQigE,YAAYE,iBAAmBL,EAAYG,YAAYE,iBAGnEngE,EAAQogE,eACRN,EAAYM,eACXN,EAAYr4D,KAAOzH,EAAQyH,KA9ER,OAgFvB43D,EAAqB,GACrBC,EAAiBI,aAAa/+D,KAAK0+D,GAEvC,KAGKM,CACT,C,oEC5FA,MCUA,GAVoC,CAClCxpD,EAAqCkqD,EAAiBC,KAEtD,MAAMC,GAAW7C,EAAAA,GAAAA,GAAe2C,GAChC,OAAOpW,EAAAA,EAAAA,KAAgB,IACd9zC,EAAGoqD,GAAY,KAErBF,EAAcC,EAAS,E,2BCA5B,MACME,GAAkCjrC,EAAAA,GAAa,IAAO,ICOrD,SAASkrC,GAAiBC,EAAmBC,GAClD,OAAOD,EACFC,EANwC,IADb,IAQ3BA,EAT+B,IADd,GAWxB,CAEO,SAASC,GACd5gE,EAAqB6gE,EAAuBC,EAAqB9oB,GAEjE,MAAM+oB,GAAQC,EAAAA,EAAAA,IAAahhE,GACrBqxB,GAAQ4vC,EAAAA,EAAAA,IAAgBjhE,KAAYkhE,EAAAA,EAAAA,IAAuBlhE,GAC3D0qC,GAAQy2B,EAAAA,EAAAA,IAAgBnhE,GAExBohE,EAAiBr/D,SAAQm/D,EAAAA,EAAAA,IAAuBlhE,IAChDqhE,EAAiBt/D,SAAQu/D,EAAAA,EAAAA,IAAuBthE,KAChD,MAAE2P,EAAK,OAAEC,GAAWyhB,GACtBkwC,EAAAA,GAAAA,IAA+BlwC,EAAO0vC,EAAOF,EAAaO,EAAgBN,EAAW9oB,IACrFwpB,EAAAA,GAAAA,IAAyB92B,EAAQq2B,EAAOF,EAAaQ,EAAgBP,EAAW9oB,GAG9EypB,EAAgBhB,GADN1+D,SAAQ2qC,EAAAA,EAAAA,IAAe1sC,KAGvC,IAAI0hE,EAAgB,EAChB/xD,EAAQ8xD,GAAiBA,EAAgB9xD,EAzBjB,KA0B1B+xD,EAAgBD,EAAgB9xD,GAE9BC,EAAS8xD,EA7BU,OA6B6C9xD,EAAS8xD,EA5BjD,KA6B1BA,EA9BqB,GA8Bc9xD,GAGrC,MAAM+xD,EAAa15D,KAAK2K,MAAMjD,EAAQ+xD,GAChCE,EAAc35D,KAAK2K,MAAMhD,EAAS8xD,GAExC,MAAO,CACL/xD,MAAOgyD,EACP/xD,OAAQgyD,EACRC,QAASF,EAAaF,GAAiBG,EAvClB,GAyCzB,C,gBCUA,SAASE,GAAWC,EAAgBC,GAClC,OAAOD,EAAKxhE,QAAO,CAAC0hE,EAAaC,IAASD,EAAcC,GAAMF,EAChE,CAQA,SAASG,GAAuBC,GAC9B,MAAMxrB,EAAwB,CAAEjnC,MAAO,EAAGC,OAAQ,GAalD,OAZAwyD,EAAOn8D,SAAQ,IAGT,IAHU,WACdo8D,EAAU,MACVC,GACD,EAlEM,EAmEDA,IACF1rB,EAAOjnC,MAAQ0yD,EAAW1yD,MAAQ0yD,EAAWpgC,GAnEzC,EAqEFqgC,IACF1rB,EAAOhnC,OAASyyD,EAAWzyD,OAASyyD,EAAWt/B,EACjD,IAGK6T,CACT,CAEO,SAAS2rB,GACdxB,EACAF,EACAC,EACAjO,EACA7a,GAEA,MACMwqB,EArDR,SAAmB3iE,EAAwBm4C,GACzC,OAAOn4C,EAASC,KACbE,IACC,MAAMqiE,EAAazB,GAAyB5gE,OAAS1E,OAAWA,EAAW08C,GAE3E,OAAOqqB,EAAW1yD,MAAQ0yD,EAAWzyD,MAAM,GAGjD,CA6CiB6yD,CAAU5P,EAAMhzD,SAAUm4C,GACnC0qB,EA5CR,SAAwBF,GACtB,OAAOA,EAAO1iE,KAAKqvD,GAAWA,EAAQ,IAAM,IAAOA,EAAQ,GAAM,IAAM,MAAOluD,KAAK,GACrF,CA0CsB0hE,CAAeH,GAC7BI,EAzCR,SAAyBJ,GACvB,OAAOA,EAAOjiE,QAAO,CAACD,EAAQ6uD,IAAUA,EAAQ7uD,GAAQ,GAAKkiE,EAAO//D,MACtE,CAuCuBogE,CAAgBL,GAC/BM,EAAaN,EAAO//D,OACpBsgE,EAAYP,EAAOr+B,MAAMgrB,GAAUA,EAAQ,IAC3C6T,GAAWC,EAAAA,GAAAA,IAAkBlC,EAAOF,GAAa,EAAOC,EAAW9oB,IAAa6oB,EAAc,IAAM,GAAKl/B,GAAAA,GAG/G,IAAIygC,EAEJ,MAAMxpD,EAAS,CACb4pD,SACAE,cACAE,eACAI,WACAE,SAAU,IACVC,UAVgBH,EAWhBI,QAlBc,GA+BhB,OATEhB,EADEU,GAAc,GAAKC,EAgBzB,SAAmC,GAOjB,IANhBP,OAAQa,EAAc,aACtBT,EAAY,SACZI,EAAQ,SACRE,EAAQ,QACRE,EAAO,UACPD,EAAa,EAAIH,EAAY,GACf,EACd,MAAMR,EA3ER,SAAoBA,EAAkBI,GACpC,OAAOJ,EAAO1iE,KAAKqvD,GACTyT,EAAe,KAAMU,EAAAA,GAAAA,IAAMnU,EAAO,EAAG,OAAQmU,EAAAA,GAAAA,IAAMnU,EAAO,MAAQ,IAE9E,CAuEiBoU,CAAWF,EAAgBT,GACpC9jD,EAAQukD,EAAe5gE,OACvBnC,EAAS,IAAI07B,MAAMld,GACnB0kD,EAAuB,GASvBC,EAAeC,IACnB,MAAMC,EAAoB,GAC1B,IAAI75D,EAAS,EACb45D,EAAWz9D,SAAS29D,IAClBD,EAAQhjE,KAXQ,EAACmJ,EAAgB+5D,KACnC,MACMC,EAAMhC,GADUU,EAAOn7D,MAAMyC,EAAQA,EAAS+5D,GACd,GAEtC,OAAQb,GAAYa,EAAe,GAAKT,GAAWU,CAAG,EAOvCC,CAAYj6D,EAAQ85D,IACjC95D,GAAU85D,CAAY,IAGxBJ,EAAS7iE,KAAK,CACZ+iE,aACAC,WACA,EAGJ,IAAK,IAAIK,EAAQ,EAAGA,IAAUllD,IAASklD,EAAO,CAC5C,MAAMC,EAASnlD,EAAQklD,EACnBA,GAAS,GAAKC,GAAU,GAC1BR,EAAY,CAACO,EAAOC,GAExB,CAEA,IAAK,IAAID,EAAQ,EAAGA,IAAUllD,EAAQ,IAAKklD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWnlD,EAAQklD,IAASC,EAAQ,CACvD,MAAMC,EAAQplD,EAAQklD,EAAQC,EAC1BD,GAAS,GAAKC,IAAWrB,EAAe,IAAO,EAAI,IAAMsB,GAAS,GACpET,EAAY,CAACO,EAAOC,EAAQC,GAEhC,CAGF,IAAK,IAAIF,EAAQ,EAAGA,IAAUllD,EAAQ,IAAKklD,EACzC,IAAK,IAAIC,EAAS,EAAGA,IAAWnlD,EAAQklD,IAASC,EAC/C,IAAK,IAAIC,EAAQ,EAAGA,IAAUplD,EAAQklD,EAAQC,IAAUC,EAAO,CAC7D,MAAMC,EAASrlD,EAAQklD,EAAQC,EAASC,EACpCF,GAAS,GAAKC,GAAU,GAAKC,GAAS,GAAKC,GAAU,GACvDV,EAAY,CAACO,EAAOC,EAAQC,EAAOC,GAEvC,CAIJ,IAAIC,EACAC,EAAc,EAClB,IAAK,IAAIjsD,EAAI,EAAGA,EAAIorD,EAAS/gE,OAAQ2V,IAAK,CACxC,MAAM,QACJurD,EAAO,WACPD,GACEF,EAASprD,GACPksD,EAAYZ,EAAWjhE,OACvB8hE,EAAczC,GAAW6B,EAAS,GAAKP,GAAWkB,EAAY,GAE9DE,EADgBv8D,KAAKo6B,OAAOshC,GACLT,EAAW,IAAM,EACxCuB,EAAO,MACX,IAAK,IAAIC,EAAO,EAAGA,IAASJ,IAAaI,EACvC,GAAIhB,EAAWgB,EAAO,GAAKhB,EAAWgB,GACpC,OAAO,IAIX,OAAO,CACR,EARY,GASPC,EAAO18D,KAAK28D,IAAIL,EAAcpB,GAAaqB,EAAOC,IAEnDL,GAAkBO,EAAON,KAC5BD,EAAiBZ,EAASprD,GAC1BisD,EAAcM,EAElB,CAEA,MAAME,EAAgBT,EAAgBV,WAChCoB,EAAiBV,EAAgBT,QACjCoB,EAAWF,EAAcpiE,OAC/B,IAAI0V,EAAQ,EACR4qB,EAAI,EACR,IAAK,IAAIiiC,EAAM,EAAGA,IAAQD,IAAYC,EAAK,CACzC,MAAMC,EAAWJ,EAAcG,GACzBE,EAAaJ,EAAeE,GAC5Bp1D,EAAS3H,KAAK2K,MAAMsyD,GAC1B,IAAIjjC,EAAI,EAER,IAAK,IAAIkjC,EAAM,EAAGA,IAAQF,IAAYE,EAAK,CACzC,MAAM7C,EAjOJ,GAkOW,IAAR0C,EAjOJ,EADC,IAmOGA,IAAQD,EAAW,EAhOpB,EAHF,IAoOW,IAARI,EAhOH,EAJA,IAqOGA,IAAQF,EAAW,EAnOrB,EAFD,GAsOI9V,EAAQqT,EAAOrqD,GACfxI,EAAQw1D,IAAQF,EAAW,EAAIjC,EAAW/gC,EAAIh6B,KAAK2K,MAAMu8C,EAAQ+V,GACvE5kE,EAAO6X,GAAS,CACdkqD,WAAY,CACVpgC,IACAc,IACApzB,QACAC,UAEF0yD,SAEFrgC,GAAKtyB,EAAQyzD,IACXjrD,CACJ,CACA4qB,GAAKnzB,EAASwzD,CAChB,CAEA,OAAO9iE,CACT,CA3Ia8kE,CAA0BxsD,GACX,IAAfkqD,EA4Ib,SAAmBlqD,GACjB,MAAM,OACJ4pD,EAAM,YACNE,EAAW,aACXE,GACEhqD,EACJ,MAAuB,OAAhB8pD,GAAwBE,EAAe,KAAOJ,EAAO,GAAKA,EAAO,GAAK,GAO/E,SAA4B5pD,GAC1B,MAAM,OACJ4pD,EAAM,SACNQ,EAAQ,QACRI,EAAO,UACPD,GACEvqD,EACEhJ,EAAS3H,KAAK2K,MAAM3K,KAAKo6B,IAAI2gC,EAAWR,EAAO,GAAIv6D,KAAKo6B,IAAI2gC,EAAWR,EAAO,IAAKW,EAAYC,GAAW,KAEhH,MAAO,CAAC,CACNf,WAAY,CACVpgC,EAAG,EACHc,EAAG,EACHpzB,MAAOqzD,EACPpzD,UAEF0yD,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAG,EACHc,EAAGnzB,EAASwzD,EACZzzD,MAAOqzD,EACPpzD,UAEF0yD,MAAO+C,IAEX,CAhCMC,CAAmB1sD,GACH,OAAhB8pD,GAAwC,OAAhBA,EAiC9B,SAAiC9pD,GAC/B,MAAM,OACJ4pD,EAAM,SACNQ,EAAQ,QACRI,EAAO,UACPD,GACEvqD,EACEjJ,GAASqzD,EAAWI,GAAW,EAC/BxzD,EAAS3H,KAAK2K,MAAM3K,KAAKo6B,IAAI1yB,EAAQ6yD,EAAO,GAAIv6D,KAAKo6B,IAAI1yB,EAAQ6yD,EAAO,GAAIW,KAClF,MAAO,CAAC,CACNd,WAAY,CACVpgC,EAAG,EACHc,EAAG,EACHpzB,QACAC,UAEF0yD,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAGtyB,EAAQyzD,EACXrgC,EAAG,EACHpzB,QACAC,UAEF0yD,MAAO+C,GAEX,CA1DQE,CAAwB3sD,GA4DhC,SAA4BA,GAC1B,MAAM,OACJ4pD,EAAM,SACNU,EAAQ,SACRF,EAAQ,QACRI,EAAO,UACPD,GACEvqD,EACE4sD,EAAev9D,KAAK2K,MAAM,IAAMswD,GAChCuC,EAAcx9D,KAAKo6B,IACvBp6B,KAAK2K,MACH3K,KAAKC,IACH,IAAO86D,EAAWI,IACjBJ,EAAWI,GAAWZ,EAAO,IAAM,EAAIA,EAAO,GAAK,EAAIA,EAAO,MAGnEQ,EAAWI,EAAUoC,GAEjBE,EAAa1C,EAAWyC,EAAcrC,EACtCxzD,EAAS3H,KAAKo6B,IAAI8gC,EAAWl7D,KAAK2K,MAAM3K,KAAKo6B,IAAIqjC,EAAalD,EAAO,GAAIiD,EAAcjD,EAAO,MAEpG,MAAO,CAAC,CACNH,WAAY,CACVpgC,EAAG,EACHc,EAAG,EACHpzB,MAAO+1D,EACP91D,UAEF0yD,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAGyjC,EAAatC,EAChBrgC,EAAG,EACHpzB,MAAO81D,EACP71D,UAEF0yD,MAAO+C,GAEX,CAjGQM,CAAmB/sD,EAC3B,CAtJagtD,CAAUhtD,GACK,IAAfkqD,EAuPb,SAAqBlqD,GACnB,MAAM,YAAE8pD,GAAgB9pD,EAExB,MAA0B,MAAnB8pD,EAAY,GAKrB,SAAiC9pD,GAC/B,MAAM,UACJuqD,EAAS,QACTC,EAAO,OACPZ,EAAM,SACNQ,EAAQ,SACRE,GACEtqD,EACEitD,EAAc1C,EACd2C,EAAc79D,KAAK2K,MACvB3K,KAAKo6B,KACF8gC,EAAYC,GAAW,EACvBZ,EAAO,IAAMQ,EAAWI,IAAaZ,EAAO,GAAKA,EAAO,MAGvDuD,EAAeF,EAAcC,EAAc1C,EAC3C4C,EAAa/9D,KAAKC,IACtBg7D,EACAj7D,KAAK2K,MACH3K,KAAKo6B,KACF2gC,EAAWI,GAAW,EACvBn7D,KAAKo6B,IACHyjC,EAActD,EAAO,GACrBuD,EAAevD,EAAO,OAKxByD,EAAYh+D,KAAKo6B,IAAIp6B,KAAK2K,MAAMizD,EAAcrD,EAAO,IAAKQ,EAAWI,EAAU4C,GAErF,MAAO,CAAC,CACN3D,WAAY,CACVpgC,EAAG,EACHc,EAAG,EACHpzB,MAAOs2D,EACPr2D,OAAQi2D,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAGgkC,EAAY7C,EACfrgC,EAAG,EACHpzB,MAAOq2D,EACPp2D,OAAQm2D,GAEVzD,MAAO+C,GACN,CACDhD,WAAY,CACVpgC,EAAGgkC,EAAY7C,EACfrgC,EAAGgjC,EAAe3C,EAClBzzD,MAAOq2D,EACPp2D,OAAQk2D,GAEVxD,MAAO+C,GAEX,CA3DMa,CAAwBttD,GA6D9B,SAAgCA,GAC9B,MAAM,SACJoqD,EAAQ,OACRR,EAAM,UACNW,EAAS,QACTC,GACExqD,EACE8sD,EAAa1C,EACb6C,EAAc59D,KAAK2K,MAAM3K,KAAKo6B,IAAIqjC,EAAalD,EAAO,GAAI,KAAQW,EAAYC,KAC9EqC,GAAezC,EAAWI,GAAW,EACrC2C,EAAe99D,KAAKo6B,IACxB8gC,EAAY0C,EAAczC,EAC1Bn7D,KAAK2K,MAAM3K,KAAKo6B,IACdojC,EAAcjD,EAAO,GACrBiD,EAAcjD,EAAO,MAKzB,MAAO,CAAC,CACNH,WAAY,CACVpgC,EAAG,EACHc,EAAG,EACHpzB,MAAO+1D,EACP91D,OAAQi2D,GAEVvD,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAG,EACHc,EAAG8iC,EAAczC,EACjBzzD,MAAO81D,EACP71D,OAAQm2D,GAEVzD,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAGwjC,EAAcrC,EACjBrgC,EAAG8iC,EAAczC,EACjBzzD,MAtBe+1D,EAAaD,EAAcrC,EAuB1CxzD,OAAQm2D,GAEVzD,MAAO+C,GAEX,CAxGMc,CAAuBvtD,EAC7B,CA5PawtD,CAAYxtD,GAqWzB,SAAoBA,GAClB,MAAM,YAAE8pD,GAAgB9pD,EAExB,MAA0B,MAAnB8pD,EAAY,GAKrB,SAA+B,GAMb,IANa,SAC7BM,EAAQ,OACRR,EAAM,QACNY,EAAO,UACPD,EAAS,SACTD,GACc,EACd,MAAMmD,EAAIrD,EACJsD,EAAKr+D,KAAK2K,MAAM3K,KAAKo6B,IAAIgkC,EAAI7D,EAAO,GAAI,KAAQW,EAAYC,KAC5DmD,EAAIt+D,KAAK2K,OAAOowD,EAAW,EAAII,IAAYZ,EAAO,GAAKA,EAAO,GAAKA,EAAO,KAC1EgE,EAAKv+D,KAAKC,IAAIg7D,EAAUj7D,KAAK2K,MAAM3K,KAAKo6B,IAAI,IAAO2gC,EAAW,EAAII,GAAUmD,EAAI/D,EAAO,MACvFiE,EAAKx+D,KAAK2K,MAAM3K,KAAKC,IAAID,KAAKC,IAAIg7D,EAAU,KAAQF,EAAW,EAAII,IAAWmD,EAAI/D,EAAO,KACzFkE,EAAKL,EAAIG,EAAKC,EAAK,EAAIrD,EACvBuD,EAAK1+D,KAAKo6B,IAAI8gC,EAAYmD,EAAKlD,EAASmD,GAE9C,MAAO,CAAC,CACNlE,WAAY,CACVpgC,EAAG,EACHc,EAAG,EACHpzB,MAAO02D,EACPz2D,OAAQ02D,GAEVhE,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAG,EACHc,EAAGujC,EAAKlD,EACRzzD,MAAO62D,EACP52D,OAAQ+2D,GAEVrE,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAGukC,EAAKpD,EACRrgC,EAAGujC,EAAKlD,EACRzzD,MAAO+2D,EACP92D,OAAQ+2D,GAEVrE,MAjgBM,GAkgBL,CACDD,WAAY,CACVpgC,EAAGukC,EAAKpD,EAAUsD,EAAKtD,EACvBrgC,EAAGujC,EAAKlD,EACRzzD,MAAO82D,EACP72D,OAAQ+2D,GAEVrE,MAAO+C,GAEX,CApDMuB,CAAsBhuD,GAsD5B,SAAgC,GAMd,IANc,UAC9BuqD,EAAS,OACTX,EAAM,SACNQ,EAAQ,QACRI,EAAO,SACPF,GACc,EACd,MAAMqD,EAAIpD,EACJqD,EAAKv+D,KAAK2K,MAAM3K,KAAKo6B,IAAIkkC,EAAI/D,EAAO,GAAI,IAAOQ,EAAWI,KAC1DiD,EAAIp+D,KAAK2K,OAAOuwD,EAAY,EAAIC,IAAY,EAAIZ,EAAO,GAAK,EAAIA,EAAO,GAAK,EAAIA,EAAO,KACvF8D,EAAKr+D,KAAK2K,MAAMyzD,EAAI7D,EAAO,IAC3BmE,EAAK1+D,KAAK2K,MAAMyzD,EAAI7D,EAAO,IAC3BqE,EAAKN,EAAID,EAAKK,EAAK,EAAIvD,EACvBsD,EAAKz+D,KAAKC,IAAIg7D,EAAUj7D,KAAKo6B,IAAI2gC,EAAWwD,EAAKpD,EAASiD,IAEhE,MAAO,CAAC,CACNhE,WAAY,CACVpgC,EAAG,EACHc,EAAG,EACHpzB,MAAO62D,EACP52D,OAAQ22D,GAEVjE,MAAO+C,IACN,CACDhD,WAAY,CACVpgC,EAAGukC,EAAKpD,EACRrgC,EAAG,EACHpzB,MAAO+2D,EACP92D,OAAQ02D,GAEVhE,MAAO+C,GACN,CACDhD,WAAY,CACVpgC,EAAGukC,EAAKpD,EACRrgC,EAAGujC,EAAKlD,EACRzzD,MAAO+2D,EACP92D,OAAQ+2D,GAEVrE,MApjBK,GAqjBJ,CACDD,WAAY,CACVpgC,EAAGukC,EAAKpD,EACRrgC,EAAGujC,EAAKK,EAAK,EAAIvD,EACjBzzD,MAAO+2D,EACP92D,OAAQi3D,GAEVvE,MAAO+C,GAEX,CArGMyB,CAAuBluD,EAC7B,CAzWamuD,CAAWnuD,GAGf,CACLwpD,SACA4E,eAAgB7E,GAAuBC,GAE3C,CCvIA,IAAI6E,GACAC,GACW,SAASC,GAAqB9oE,GAiB3C,OAhBK6oE,KACHA,GAAaE,iBAAiB38D,SAAS48D,iBAAiBC,iBAAiB,kBAGtEL,KACHA,GAAUx8D,SAASmmD,cAAc,QACjCqW,GAAQvwB,MAAM6wB,KAAQ,YAAWL,KACjCD,GAAQvwB,MAAM8wB,WAAa,SAC3BP,GAAQvwB,MAAM93C,SAAW,WACzBqoE,GAAQvwB,MAAMhnC,KAAO,SACrBu3D,GAAQvwB,MAAM+wB,QAAU,MACxBh9D,SAAS40B,KAAKqoC,YAAYT,KAG5BA,GAAQU,YAActpE,EAEf4oE,GAAQzc,WACjB,C,4BCTe,SAASod,GACtBze,EACAjuD,EACA2sE,EACAC,EACAC,EACAtjE,GAEA,MAAM,yBAAEk2D,IAA6BxpC,EAAAA,EAAAA,OAErC84B,EAAAA,EAAAA,KAAgB,KACd,GAAI4d,GAAa1e,EAAWnhC,QAAS,CACnC,MAAMggD,EAAoB7e,EAAWnhC,QAAQigD,QAAwB,gBAErEtN,EAAyB,CACvBv2D,YAAY,KAGd8jE,EAAAA,GAAAA,GACEF,EACA7e,EAAWnhC,QAEX+/C,EAAmB,MAAQ,cAxBd,QA0BMzsE,IAAnBwsE,EA3BuB,SA2BiCxsE,EACxDwsE,OACAxsE,EACAmJ,EAEJ,IACC,CACD0kD,EAAYjuD,EAAQ2sE,EAAWC,EAAgBC,EAAkBtjE,EAAqBk2D,GAE1F,C,eC/BA,MAGMwN,GAA4B,EAAIxmC,GAAAA,GAChCymC,GAA6B1lE,OAAOi/B,GAAAA,IACpC0mC,GAAgC,+BAEvB,SAASC,GACtBC,EACAnd,EACA3pD,EACAw9D,EACAuJ,EACAC,EACAC,EACA/S,EACAlB,EACAv5D,EACAytE,EACAC,EACA7H,EACA8H,GAEA,MAAM,gBAAE/lE,EAAe,oBAAEgmE,IAAwB33C,EAAAA,EAAAA,OAE1C43C,EAAwBC,EAA0BC,IAA8BxxB,EAAAA,GAAAA,MAChFyxB,EAAUC,EAAYC,IAAgB3xB,EAAAA,GAAAA,KACvC4xB,GAAsBhyB,EAAAA,EAAAA,MA8I5B,OA1CAtE,EAAAA,EAAAA,KAAU,KACR,IAAKlsC,EAAAA,IAAgB2hE,IAAmBC,GAAYE,EAClD,OAGF,IAAIW,EACJ,OAAO5nB,EAAAA,GAAAA,IAAc0J,EAAapjC,QAAU,CAC1C25B,wBAAyB,eACzB4nB,wBAAyB,gBACzB3nB,QAAU,CAAC31C,EAAG9G,IACRA,IAAc08C,GAAAA,GAAAA,OACXynB,IACHA,EAAYriE,KAAKC,OAGnBiiE,KAEO,GAKXK,UAAW,KACJF,GAAcb,IAInB3lE,EAAgB,CAAErB,cAElBoC,WAAWulE,EAAcnhE,KAAKC,IAAI,EA3JT,KA2JwCjB,KAAKC,MAAQoiE,KAC9EA,OAAYhuE,EAAS,GAEvB,GACD,CACD8vD,EAAcod,EAAgB/mE,EAAWqB,EAAiBqmE,EAAYC,EAAcX,EAAUE,IAQzF,CACLc,gBAAkBjB,OAAmCltE,EA7IvD,SAAyB2Q,IACvBy9D,EAAAA,GAAAA,GAAwBz9D,GACxBwoD,EAAwBxoD,EAC1B,EA2IE6oD,YAxFF,SAAqB7oD,GACnB,GAAIu8D,EACFD,EAAct8D,QAIhB,GAAKpF,EAAAA,GAEL,OAAIwiE,EAAoBrhD,SACtB5V,cAAci3D,EAAoBrhD,SAClCqhD,EAAoBrhD,aAAU1sB,OAhBhCwtE,EAAoB,CAClB5tE,SACAuG,oBAmBF4nE,EAAoBrhD,QAAUnkB,YAAW,KACvCwlE,EAAoBrhD,aAAU1sB,EAxClC,SAAmB2Q,GACjB,GAAIspB,EAAAA,GAAY,CACd,MAAMo0C,EAAS19D,EAAE09D,OACjB,IAAKA,EAAOltB,UAAUmtB,SAAS,kBAAoBD,EAAOltB,UAAUmtB,SAAS,WAC3E,OAGEznC,GAAAA,EAAAA,uBACFt+B,YAAW,KACT8xD,EAAc1pD,EAAE,GApEa,KAuE/B0pD,EAAc1pD,EAElB,CACF,CA0BI49D,CAAU59D,EAAE,GAlGsB,KAoGtC,EAsEEyoD,kBAAoB8T,EAAsCE,EAAcoB,GAAAA,OAAYxuE,EApEtF,SAA2B2Q,GACzB,GAAIspB,EAAAA,GAAY,CACd,GAAKtpB,EAAE09D,OAAuBI,QAAQ,YAAcpB,EAClD,OAGF18D,EAAEqnC,iBACFi1B,GACF,MACE5S,EAAc1pD,EAElB,EA0DE+9D,kBAAoBxB,OAA8CltE,EAxDpE,YACMuL,EAAAA,IAAiB4hE,GAErB3lE,EAAgB,CAAErB,aACpB,EAqDEwoE,yBAA2BpjE,EAAAA,QAAiCvL,EAnD9D,SAAyB2Q,GACvBA,EAAEovC,iBACJ,EAkDE6O,gBA7IF,SAAyBj+C,GACvB,MAAMi+D,EAAYtB,EAAW5gD,QAC7B,IAAKkiD,EAAW,OAEhB,MAAM,QAAE7f,EAAO,QAAE8f,GAAYl+D,GACvB,EACJg2B,EAAC,MAAEtyB,EAAK,EAAEozB,EAAC,OAAEnzB,GACXs6D,EAAUE,wBAERC,EAAapiE,KAAK28D,IAAK7D,EAAS1W,EAAUpoB,EAAMA,EAAItyB,EAAQ06C,GAAa8d,GACzEmC,EAAariE,KAAK28D,IAAI7hC,EAAInzB,EAASu6D,GAAW/B,GAChDiC,GAAcC,EAChBtB,IAEAC,GAEJ,EA8HEsB,wBA5HF,WACEzB,EAAoB,CAClB5tE,SACAuG,aAEJ,EAwHE4jD,iBAbF,SAA0Bp5C,GACxBg9D,IACIJ,GAyBR,SAAuC58D,GACrC,MAAMu+D,EAAmBC,GAA8Bx+D,EAAEy+D,eACrDF,GACFA,EAAiBG,gBAAgBtC,GAErC,CA9BgCuC,CAA8B3+D,EAC5D,EAWEi9D,WACAH,yBACA8B,iCAEJ,CAEA,SAASA,GAA8B5+D,GACrC,MAAMu+D,EAAmBC,GAA8Bx+D,EAAEy+D,eACrDF,GACFA,EAAiBM,aAAazC,GAA+B,GAEjE,CASA,SAASoC,GAA8BxD,GACrC,IAAIj/C,EAA0Bi/C,EAE9B,GACEj/C,EAAUA,EAAQ+iD,yBACX/iD,IAAYA,EAAQy0B,UAAUmtB,SAAS,2BAEhD,OAAO5hD,CACT,C,ocChNA,IAAIgjD,GACJ,MAAMC,GAAyB,ICZhB,MAObx1C,cAAc,6EACZI,KAAKq1C,QAAU,IAAI1lD,SAAQ,CAACiqC,EAAS0b,KACnCt1C,KAAKs1C,OAASA,EACdt1C,KAAK45B,QAAUA,CAAO,GAE1B,GDEF5rD,YAEA,WACOmnE,KACHA,IAASI,EAAAA,GAAAA,GACP,IAAIC,OAAO,IAAI9oD,IAAI,qBAErB0oD,GAAuBxb,UAE3B,GAjB0B,K,4BEC1B,MAQA,IAAelc,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAE12C,GAAW02C,EACb83B,GAAuB53B,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB72C,GAGrF,OAAOwuE,EAAuB,mBAACA,EAAyB93B,QAAYl4C,CAAS,I,4BCY/E,MAoGA,IAAei4C,EAAAA,EAAAA,KApGoC,IAG7C,IAH8C,QAClDvzC,EAAO,QACP2H,GACD,EACC,MAAM,gBACJ4jE,EAAe,mBAAEC,EAAkB,iBAAE5kE,IACnCuqB,EAAAA,EAAAA,OAEE,WAAEtpB,GAAe7H,EAEjBR,GAAO81C,EAAAA,GAAAA,MACNm2B,EAAeC,IAAoBn3B,EAAAA,EAAAA,OACnCo3B,EAAkBC,EAAgBC,IAAmBp0B,EAAAA,GAAAA,IAAQ,GAC9Dq0B,GAAoB31B,EAAAA,GAAAA,IAASkX,EAAAA,EAAAA,IAAoBrtD,EAAS,SAC1DyyC,EAAUzyC,EAAQ2H,QAAQ4H,OAAQ8hB,OAAOohB,QAEzCs5B,GAAyBtzB,EAAAA,EAAAA,KAAY,KACzC7xC,EAAiB,CACfoE,MAAOxL,EAAK,wBACZQ,QAASR,EAAK,mBACd+P,OAAQ,CACNA,OAAQ,4BACR7T,QAAS,CACP8P,OAAQ8vC,EAAAA,GAAAA,OAGZ0wB,WAAYxsE,EAAK,SACjB,GACD,CAACA,EAAMoH,IAEJqlE,GAA2BxzB,EAAAA,EAAAA,KAAaxqB,IAC5Cy9C,OAAiBpwE,GACjBkwE,EAAmB,CAAEv9C,SACrB89C,GAAwB,GACvB,CAACA,EAAwBP,IAEtBU,GAAuBzzB,EAAAA,EAAAA,KAAY,KACvCizB,OAAiBpwE,EAAU,GAC1B,IAEG6wE,GAAiB1zB,EAAAA,EAAAA,KAAYzkC,UACjC63D,IACAE,IAGA,MAAM16C,EAAQrxB,EAAQ2H,QAAQ4H,OAAQ8hB,MAChCuZ,QAAgBjI,GAAAA,GAAmB,cAAatR,EAAMh1B,YAAaumC,EAAAA,GAAAA,SACnEgtB,QAAaz+C,MAAMy5B,GAASx5B,MAAM2zB,GAAMA,EAAE6qB,SAChD4b,EAAmB,CACjBv9C,KAAM,IAAIm+C,KAAK,CAACxc,GAAO,cACvBnd,SAAS,EACT45B,QAASh7C,EAAMi7C,YAAYpmE,MAAMgI,QAAyB5S,IAAnB4S,EAAEq+D,gBAA6BA,cACtE,GACD,CAACV,EAAiB7rE,EAAQ2H,QAAQ4H,OAAQw8D,EAAwBP,IAmBrE,OACE,2BAAM1jD,UAAU,kCAAkCq8B,SAAU,EAAGqoB,KAAK,SAASn3B,QAlB7CrhC,WAC3BnM,GAAcikE,EACbr5B,EACFm5B,IAEAF,QAAuBv6D,MAAM26D,GAAmB16D,MAAM2zB,GAAMA,EAAE6qB,UAGhE2b,EAAgB,CACdrwE,OAAQ8E,EAAQ9E,OAChBoY,QAAStT,EAAQ3D,GACjBlB,SAAUmB,EAAAA,GACV0G,OAAQypE,EAAAA,GAAAA,iBAEZ,GAKE,mBAACC,GAAA,EAAM,CACLr7C,MAAOrxB,EAAQ2H,QAAQ4H,OAAQ8hB,MAC/Bs7C,oBAAkB,EAClBC,kBAAgB,EAChBC,UAAWp6B,EACXqD,KAAK,UAEP,+BAAOnuC,GAEP,2BAAMmgB,UAAU,yBAAyBtoB,EAAKizC,EAAU,kBAAoB,oBAC5E,mBAACq6B,GAAA,EAAS,CACR7+C,KAAMw9C,EACNvyB,QAASgzB,EACT7sB,SAAU4sB,IAEZ,mBAAC/d,GAAA,EAAa,CACZpxD,OAAQ6uE,EACR3gE,MAAOxL,EAAK,kBACZ4uD,eAAgB+d,EAChBjzB,QAAS2yB,EACTkB,UAAWplE,IAER,ICmHX,IAAe4rC,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA4B,IAA5B,QAAEiF,GAAS,EAClB,MAAQiX,KAAM+1D,GAAcjyE,EAAO4b,MAC7BxM,EAASnK,EAAQmP,UACjB,cAAE89D,EAAa,aAAEC,GAAiBltE,EAAQ2H,QAAQ4H,QAAU,CAAC,EAC7D49D,EAAkBntE,EAAQ4a,iBAC1BwyD,EAAgBD,GAClBn+D,EAAAA,EAAAA,IAAkBjU,EAAQiF,EAAQ9E,OAAQiyE,QAC1C7xE,EAEEusE,GAAYwF,EAAAA,EAAAA,IAAuBtyE,EAAQiF,IAE/CmF,UAAW2iE,EACX/jE,YAAagkE,GACVF,IAAa9rE,EAAAA,EAAAA,IAAehB,GAAQu+D,gBAAmB,CAAC,EAEvDxwD,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQiF,EAAQ9E,QAClCoyE,EAASxkE,KAASowD,EAAAA,EAAAA,IAAcpwD,IAASqB,IAAWnK,EAAQ9E,QAC5DqyE,GAAcD,GAAUnjE,GAASgT,EAAAA,EAAAA,IAAWpiB,EAAQoP,QAAU7O,EAC9DkyE,EAAaF,EAASxkE,OAAOxN,EAC7BmyE,EAAqB1yE,EAAO4rB,cAAcva,WAAW,GAG3D,MAAO,CACL4gE,YACAO,aACAC,aACAN,eACAD,gBACAG,gBACAvF,YACA4F,qBACAzuD,OAXY4sB,EAAAA,EAAAA,IAAuB7wC,EAAQiF,MAYvC6nE,GAAa,CAAEC,iBAAgBC,oBACpC,GAlCe9wB,EA3K6B,IAqB3C,IArB4C,QAChDj3C,EAAO,WACP0tE,EAAU,gBACVC,EAAkB,EAAC,aACnBC,EAAY,UACZZ,EAAS,WACTO,EAAU,WACVC,EAAU,cACVP,EAAa,cACbG,EAAa,aACbF,EAAY,UACZrF,EAAS,eACTC,EAAc,iBACdC,EAAgB,mBAChB0F,EAAkB,cAClBI,EAAa,MACb7uD,EAAK,qBACL8uD,EAAoB,8BACpBC,EAA6B,8BAC7BC,EAA6B,8BAC7BC,GACD,EACC,MAAM,iBAAE1+B,EAAgB,gBAAE2+B,IAAoB/8C,EAAAA,EAAAA,MAExC3xB,GAAO81C,EAAAA,GAAAA,KAGPqD,GAAMtB,EAAAA,EAAAA,IAAuB,OAEnC82B,EAAAA,GAAAA,IAAex1B,EAAKo1B,IACpBrS,EAAAA,GAAAA,GAAiB17D,EAAQ9E,OAAQ8E,EAAQ4a,iBAAkBwyD,GAC3DxF,GAAgBjvB,EAAK34C,EAAQ9E,OAAQ2sE,EAAWC,EAAgBC,GAEhE,MAAMqG,EAAwBT,GAAmB,GAC1CjqB,EAAS2qB,IAAa52B,EAAAA,GAAAA,GAAQ22B,GAC/BvtC,EAAS9+B,QAAQ/B,EAAQ2H,QAAQ4H,QAAQlR,KAAK+jD,WAAW,eACzDksB,EAAqD,wBAAjCtuE,EAAQ2H,QAAQ4H,QAAQhT,MAAkCyD,EAAQ2H,QAAQ4H,OAAQ8hB,OAE5G0hB,EAAAA,EAAAA,KAAU,KACJq7B,GAIJvqE,WAAWwqE,EA7CU,GA6CCV,EAAmC,GACxD,CAACA,EAAiBU,EAAWD,IAEhC,MAAM3f,GAAY8f,EAAAA,GAAAA,IAAkB51B,EAAKs1B,GAEnCO,GAAwBn3B,EAAAA,EAAAA,IAAO,MACnC,MAAM9uC,EAAWulE,GAAsB9lD,SAAWhoB,EAAQ3D,IAAMyxE,EAAqB9lD,QACrF,OAAO6Y,IAAW7gC,EAAQ6H,YAAcU,CACzC,EAHoC,KAKrCwqC,EAAAA,EAAAA,KAAU,KACJ0b,GAAa+f,EAAsBxmD,UACrCwmD,EAAsBxmD,SAAU,EAChCkmD,IACF,GACC,CAACzf,EAAWyf,IAEf,MAAM,qBAAE1rB,IAAyBC,EAAAA,GAAAA,GAAkBiB,OAASpoD,EAAW8yE,GAAuB,GAExFK,GAAcp4B,EAAAA,EAAAA,KAAQ,IACnB42B,EACHA,EAAcntE,KAAKqK,GAAW6iE,IAAY7iE,KAASpK,OAAOgC,cAC1DzG,GACH,CAAC2xE,EAAeD,IAEbrlE,GAAU+mE,EAAAA,GAAAA,GACdlvE,EACAQ,EACAutE,EACAC,EACAiB,EACArB,EACAF,EACAluD,EACA,CAAE0uD,cACFM,EACAC,IAEI,kBACJzZ,EAAiB,oBAAEma,EAAmB,wBACtCla,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBlc,GACrBgwB,OAA6CrtE,IAAxBqzE,EAkB3B,GADyBd,GAAkD,0BAAjC7tE,EAAQ2H,QAAQ4H,QAAQlR,KAEhE,OAAO,2BAAMs6C,IAAKA,IAGpB,GAAI+0B,EACF,OAAO,2BAAM/0B,IAAKA,EAAK7wB,UAAU,2BAA2BngB,GAqB9D,MAAMmgB,GAAY0uB,EAAAA,GAAAA,GAChB,kCACAqxB,IAAcE,GAAoB,WACjClnC,GAAUytC,IAAsB,kBACjC3F,GAAsB,gBACtBiF,GAAgB,gBACf/sC,IAAWytC,GAAqB,aACjC9rB,GAGF,OACE,0BACE7J,IAAKA,EACLt8C,IAAIuyE,EAAAA,EAAAA,IAAiB5uE,EAAQ3D,IAC7ByrB,UAAWA,EACX,kBAAiB9nB,EAAQ3D,GACzB0uD,YA1DqB9+C,KACvBy9D,EAAAA,GAAAA,GAAwBz9D,GACxBwoD,EAAwBxoD,EAAE,EAyDxB0pD,cAAejB,IAEb4Z,GAAqB,2BAAMxmD,UAAU,0BAA0BngB,GAChEk5B,GApCD,2BAAM/Y,UAAU,sBAAsBq8B,SAAU,EAAGqoB,KAAK,SAASn3B,QArBtC,KAC7B9F,EAAiB,CACf1O,QAAQ,EACRD,WAAY2sC,GAAYlxE,GACxB0kC,SAAUksC,IAAgB,GAC1BnsC,aAAc9gC,EAAQ2H,QAAQ4H,QAAQ4xB,QAAU,GAChD,GAgBE,mBAAC0tC,GAAA,EAAuB,CACtBv+B,IAAKtwC,EAAQ3D,GACb6P,QAASuhE,EACTqB,MAAI,EACJC,QAAM,EACNC,gBAAc,IAEhB,iCAASxvE,EAAK,2BACd,+BAAOA,EAAK,4BAA6BA,EAAK,SAAUQ,EAAQ2H,QAAQ4H,QAAQ4xB,OAAQ,OAExF,2BAAMrZ,UAAU,yBAAyBtoB,EAAK,2BA0B/C8uE,GACC,mBAAC,GAA4B,CAC3BtuE,QAASA,EACT2H,QAASA,IAGZgnE,GACC,mBAAC,GAAoB,CACnB7xE,OAAQ03D,EACRya,OAAQN,EACR3uE,QAASA,EACTT,gBAAgB,SAChB25C,QAASyb,EACTtO,oBAAqBuO,IAGrB,KC1FV,GA9FsC,IAYhC,IAZiC,UACrC9sC,EAAS,QACT9nB,EAAO,OACPS,EAAM,MACNuK,EAAK,WACLkkE,EAAU,YACVxG,EAAW,aACXyG,EAAY,eACZC,EAAc,8BACdpB,EAA6B,8BAC7BC,EAA6B,QAC7B54B,GACD,EAEC,MAAMsD,GAAMtB,EAAAA,EAAAA,IAAuB,MAC7Bg4B,GAAiBd,EAAAA,GAAAA,IAAkB51B,EAAKq1B,GAExC5gB,GAAejX,EAAAA,GAAAA,GAASn2C,IAAWqtD,EAAAA,EAAAA,IAAoBrtD,EAAS,cAAeqvE,GAC/EniB,GAAiBC,EAAAA,GAAAA,GAAantD,GAC9BsvE,EAAevtE,QAAQ/B,IAAWuvE,EAAAA,EAAAA,IAAqBvvE,IACvDstD,EAAYvrD,QAAQ/B,IAAWutD,EAAAA,EAAAA,IAAoBvtD,IAEnDR,GAAO81C,EAAAA,GAAAA,KAEPk6B,EAAc/uE,GAASG,EAAAA,EAAAA,IAAepB,EAAMiB,GAAUT,GAASigE,aAAaE,eAElF,OACE,0BACExnB,IAAKA,EACL7wB,WAAW0uB,EAAAA,GAAAA,GACT,kBACA1uB,EACArnB,IAAW0uE,GAAiB,UAAQM,EAAAA,EAAAA,IAAgBhvE,MAEtD40C,QAASr1C,EAAUq1C,OAAU/5C,GAE5B4xD,GA6BP,SACEmB,EACAzjB,EACA0kC,EACA5G,EACApb,GAEA,MAAM,MAAE39C,EAAK,OAAEC,IAAW0+C,EAAAA,GAAAA,MAEpBC,EAAS3jB,GAAWyjB,EAE1B,OACE,0BAAKvmC,WAAW0uB,EAAAA,GAAAA,GAAe,iBAAkB84B,GAAgB,WAC7DhiB,GACA,0BACExW,IAAKyX,EACL5+C,MAAOA,EACPC,OAAQA,EACRmnC,IAAI,GACJjvB,UAAU,YACV4nD,WAAW,IAGf,mBAAClhB,GAAA,EAAY,CAACH,aAAcE,EAAQE,UAAW1sD,QAAQurD,GAAY39C,MAAOA,EAAOC,OAAQA,IACxF84D,GAAe,2BAAM5gD,UAAU,cAGtC,CAxDyB4mC,CAAgBxB,EAAgBE,EAAckiB,EAAc5G,EAAapb,GAC5F,0BAAKxlC,UAAU,gBACb,wBAAGytB,IAAI,QACHv1C,GAEEggE,EAAAA,EAAAA,IAAgBhgE,GAClB,mBAAC,GAAa,CACZA,QAASA,EACT0tE,YAAU,EACVM,8BAA+BA,EAC/BC,8BAA+BA,IAGjC,mBAACrf,GAAA,EAAc,CACbpvD,KAAMA,EACNQ,QAASA,EACT6uD,QAAS9sD,QAAQmrD,GACjB8gB,8BAA+BA,EAC/BC,8BAA+BA,IAdjCiB,GA1CC,KA4DL,0BAAKpnD,UAAU,gBAAgBytB,IAAI,SAAQoZ,EAAAA,GAAAA,GAAW6gB,GAAexkE,GA5DhE,OA8DNokE,GAAkB,wBAAGtnD,UAAU,4BAC5B,E,mDCzEV,MAsGA,IAAeyrB,EAAAA,EAAAA,KAtGmB,IAW5B,IAX6B,QACjCvzC,EAAO,eACP2vE,EAAc,UACdC,EAAS,mBACTC,EAAkB,kBAClB3rD,EAAiB,UACjB4rD,EAAS,aACTC,EAAY,QACZ16B,EAAO,mBACP26B,EAAkB,aAClBC,GACD,EACC,MAAM,iBAAErpE,IAAqBuqB,EAAAA,EAAAA,MACvB3xB,GAAO81C,EAAAA,GAAAA,MACN46B,EAAaC,IAAiB14B,EAAAA,GAAAA,KAE/Bqd,EAAe7oD,IACnBA,EAAEovC,kBAEFz0C,EAAiB,CACf5G,QAASR,EAAK,iBACd,EAQEwL,GAAQqrC,EAAAA,EAAAA,KAAQ,KACpB,IAAK65B,EAAa,OAClB,MAAME,GAAiBC,EAAAA,GAAAA,IAAsC,IAAfrwE,EAAQyH,KAAajI,EAAK29B,MAClEmzC,EAAetwE,EAAQuwE,WAAYF,EAAAA,GAAAA,IAA2C,IAApBrwE,EAAQwwE,SAAkBhxE,EAAK29B,MACzFszC,EAAoBzwE,EAAQigE,cAAeoQ,EAAAA,GAAAA,IAAkD,IAA3BrwE,EAAQigE,YAAYx4D,KAAajI,EAAK29B,MAE9G,IAAI9+B,EAAO+xE,EAUX,OATIE,IACFjyE,GAAQ,KACRA,GAAQmB,EAAK,mBAAmBqL,QAAQ,SAAUylE,IAEhDG,IACFpyE,GAAQ,KACRA,GAAQmB,EAAK,sBAAsBqL,QAAQ,SAAU4lE,IAGhDpyE,CAAI,GACV,CAAC6xE,EAAa1wE,EAAMQ,IAEjB0wE,GAAgBl6B,EAAAA,GAAAA,GACpB,cACAq5B,GAAsB,mBACtB7vE,EAAQigE,aAAa0Q,YAAc,eAGrC,OACE,2BACE7oD,UAAW4oD,EACXn7B,IAAK/1C,EAAKg2C,MAAQ,MAAQ,MAC1BH,QAASA,EACT,2BAEC06B,GACC,wBAAGjoD,UAAU,mCAAmCutB,QAAS26B,IAE1DjuE,QAAQ/B,EAAQ+jB,QACf,sCACE,2BAAM+D,UAAU,kBACbksB,EAAAA,GAAAA,IAAqBh0C,EAAQ+jB,QAEhC,wBAAG+D,UAAU,wBAGfgoD,GAAa/tE,QAAQmiB,GAAmBC,gBACxC,2BAAMkxB,QAjDZ,SAA0BppC,GACxBA,EAAEovC,kBACF40B,GACF,GA+CQ,2BAAMnoD,UAAU,mBACd,mBAAC8oD,GAAA,EAAe,CAACvyE,MAAM21C,EAAAA,GAAAA,IAAqB9vB,EAAmBC,kBAEjE,wBAAG2D,UAAU,uBAGhB8nD,GACC,2BAAM9nD,UAAU,sBAAqB6mC,EAAAA,GAAAA,GAAWihB,IAElD,2BAAM9nD,UAAU,eAAe9c,MAAOA,EAAO86C,aAAcqqB,GACxDnwE,EAAQigE,aAAa0Q,YACpB,sCACE,2BAAM7oD,UAAU,mBAAmButB,QAASyf,IACzCub,EAAAA,GAAAA,IAAkD,IAA3BrwE,EAAQigE,YAAYx4D,KAAajI,EAAK29B,MAAM,IAEtE,2BAAMrV,UAAU,mBAAmButB,QAASyf,GAAct1D,EAAK,qBAGlEQ,EAAQuwE,UAAa,GAAE/wE,EAAK,qBAC5BqxE,EAAAA,GAAAA,IAAWrxE,EAAqB,IAAfQ,EAAQyH,OAE3BkoE,GACC,mBAACmB,GAAA,EAAqB,CAAC59D,OAAQy8D,IAE5B,I,4BC3GX,MAoIA,GAvH8B,IAGxB,IAHyB,QAC7B3vE,EAAO,oBAAE+wE,EAAmB,8BAAE9C,EAA6B,WAAE+C,EAAU,aAAElgD,EAAY,iBACrFmgD,EAAgB,aAAEC,EAAY,aAAEC,GACjC,EACC,MAAM,iBAAEvqE,EAAgB,eAAEwqE,IAAmBjgD,EAAAA,EAAAA,MAEvC3xB,GAAO81C,EAAAA,GAAAA,MACP,SAAE0C,IAAaC,EAAAA,EAAAA,MAGfU,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7BnrC,EAAUlM,EAAQ2H,QAAQuE,SAC1B,eAAEuY,EAAc,QAAEguB,EAAO,UAAE4+B,GAAcnlE,EAEzColE,EAAYplE,EAAQ4+B,yBAAsBxvC,GAC9C+xD,EAAAA,EAAAA,IAAoBrtD,EAASyyC,IAAY8+B,EAAAA,GAAoB,YAAc,UAGvEC,GAAUjD,EAAAA,GAAAA,IAAkB51B,EAAKo4B,GACjCU,GAAUlD,EAAAA,GAAAA,IAAkB51B,EAAKs1B,GACjCyD,EAAmB,UAASxlE,EAAQ7P,YACpCs1E,GAAgBx7B,EAAAA,GAAAA,GACpBu7B,GACCF,IAAYH,EACbzuC,EAAAA,GAAAA,QACA9R,IAEK8gD,EAAiBC,EAAoBC,IAAqBr6B,EAAAA,GAAAA,KAE3Ds6B,GAAoBt5B,EAAAA,EAAAA,KAAY,KACpCq5B,IACAX,KAAgB,GACf,CAACA,EAAcW,IAEZE,GAA2BtU,EAAAA,GAAAA,GAAYuT,IAE7Cl+B,EAAAA,EAAAA,KAAU,KACJs+B,GAAaI,IAAYR,GAAoBe,KAC/CH,IACAX,MACF,GACC,CAACG,EAAWI,EAASP,EAAcD,EAAkBe,EAA0BH,IAElF,MAAMI,GAAYx5B,EAAAA,EAAAA,KAAY,KAC5B24B,EAAe,CACb3sD,eAAgBvY,EAAQuY,gBACxB,GACD,CAAC2sD,EAAgBllE,IAEd4oD,GAAcrc,EAAAA,EAAAA,KAAY,KAC9B,GAAI44B,EACF,OAAIO,OACFhrE,EAAiB,CACf5G,QAASR,EAAK,yBACd+P,OAAQ,CACNA,OAAQ,iBACR7T,QAAS,CACP+oB,eAAgBvY,EAAQuY,iBAG5BunD,WAAYxsE,EAAK,iBAInBqyE,SACAX,OAIJe,GAAW,GACV,CACDZ,EAAWO,EAAiBpyE,EAAM0xE,EAAce,EAAWrrE,EAAkBirE,EAC7E3lE,EAAQuY,iBAGJytD,EAAkB,cAAeztD,GACjC,MAAE9U,EAAK,OAAEC,IAAWuiE,EAAAA,GAAAA,IAAqBjmE,EAAS8rC,GAClDlwB,GAAY0uB,EAAAA,GAAAA,GAChB,sBACA07B,GAAmB,WACnBb,IAAcrxE,EAAQ6H,YAAc,YAGtC,OACE,0BACE8wC,IAAKA,EACL7wB,UAAWA,EACX4uB,MAAQ,UAAS/mC,gBAAoBC,OACrCylC,QAAU68B,OAAgC52E,EAAdw5D,GAE5B,mBAACsd,GAAA,EAAW,CACVhnB,aAAczS,EACdzsC,QAASA,EACTmmE,cAAef,EACfgB,mBAAmB,aACnBx8B,KAAMnmC,EACNqhE,WAAYA,EACZuB,QAASf,EACTgB,QAASf,EACT56B,qBAAmB,EACnB47B,YAAa3hD,IAEdugD,GAAaG,GAAWI,GACvB,mBAACc,GAAA,EAAe,CACdpiC,IAAKohC,EACL5pD,UAAU,iBACV6qD,OAAQhB,EACR77B,KAzHqB,KAyHfnmC,EACNm/D,MAAI,EACJ8D,eAAa,EACb7D,QAAM,EACN8D,QAASd,IAGT,E,4BC7IV,MAAMe,GAAO,EAAInxC,GAAAA,GAKF,SAASoxC,GACtB73E,EACAuG,EACAuxE,EACA3vC,EACA09B,EACAlgE,EACAoyE,GAEA,MAAM,0BACJC,EAAyB,qBAAEC,EAAoB,6BAAEC,IAC/CjiD,EAAAA,EAAAA,MAGEwnB,GAAMtB,EAAAA,EAAAA,IAAuB,MAG7Bg8B,GAAWh8B,EAAAA,EAAAA,IAAqC,MAEhDi8B,GAAiBn9B,EAAAA,GAAAA,GAAS68B,EAAW,WAAUA,SAAY13E,GAAY03E,GAEvEl9B,EAAOm9B,GAAiBH,GACxBp8B,GAAQ68B,EAAAA,GAAAA,GAAY,UAASz9B,MAAW,WAAUA,MAAUj1C,GAAS,mBAErEyiC,GAAe+T,EAAAA,EAAAA,SAA6B/7C,GAC5Ck4E,GAAsBn8B,EAAAA,EAAAA,SAA2B/7C,GACjDm4E,GAAuBh7B,EAAAA,EAAAA,KAAY,KACrBE,EAAI3wB,UAItBmrD,EAAqB,CACnBj4E,OAAQA,EACRuG,UAAWA,EACXZ,MAAOA,EACPyiC,aAAcA,EAAatb,UAE7BwrD,EAAoBxrD,aAAU1sB,EAC9BgoC,EAAatb,aAAU1sB,EAAS,GAC/B,CAAC63E,EAAsBj4E,EAAQuG,EAAWZ,IAEvCiuE,GAAOr2B,EAAAA,EAAAA,KAAY,KACvB,MAAMyZ,EAAQmhB,EAASrrD,QACnBsrD,IACEphB,IACFA,EAAM/rC,QACN+rC,EAAMlI,UAERqpB,EAASrrD,QAAU,IAAI0rD,MACvBL,EAASrrD,QAAQ8uB,IAAMw8B,GACvBK,EAAAA,GAAAA,GAASN,EAASrrD,SAClBqrD,EAASrrD,QAAQ2sB,iBAAiB,SAAS,KACzC0+B,EAASrrD,aAAU1sB,CAAS,GAC3B,CAAEs4E,MAAM,IACb,GACC,CAACN,IAEExe,GAAcrc,EAAAA,EAAAA,KAAY,KAC9Bq2B,IAEA,MAAM5E,EAAYvxB,EAAI3wB,QAEtB,KAAKnnB,GAAUqpE,GAAczoE,GAAcvG,GACzC,OAGF,MAAM,EAAE+mC,EAAC,EAAEc,GAAMmnC,EAAUE,wBAE3B8I,EAA0B,CACxBryE,MAAOA,EACPohC,IACAc,IACAC,UAAW8S,EACX7S,YAAa89B,IAGVz9B,EAAatb,UAChBsb,EAAatb,QAAU,GACvBwrD,EAAoBxrD,QAAU6rD,YAAY3sE,MAC1CrD,WAAW4vE,EAnFc,MAsF3BnwC,EAAatb,QAAQrnB,KAAK6yE,EAAoBxrD,SACzC6rD,YAAY3sE,MAAQssE,EAAoBxrD,SAtF9B,IACE,EAsFA,GAChB,CAAC9sB,EAAQ2F,EAAOqyE,EAA2BnS,EAAOt/D,EAAWqtE,EAAM2E,EAAsB39B,IAgC5F,OA7BA/C,EAAAA,EAAAA,KAAU,KACR,MAAMm3B,EAAYvxB,EAAI3wB,QAEjBkiD,GAAc7mC,GAEnBA,EAAwBp9B,SAAQ,IAI1B,IAJ2B,GAC/B5J,EAAE,UACF2mC,EACAvhC,UAAWqyE,GACZ,EACC,GAAI9wC,GAAavhC,IAAcqyE,EAC7B,OAGF,MAAM,EAAE7xC,EAAC,EAAEc,GAAMmnC,EAAUE,wBAE3BgJ,EAA6B,CAC3B/2E,KACAnB,OAAQA,EACRqoC,SAAU1iC,EACVmiC,UAAW8S,EACX7T,IACAc,IACAE,YAAa89B,IAEf+N,GAAM,GACN,GACD,CAACzrC,EAAyBnoC,EAAQ2F,EAAOkgE,EAAOt/D,EAAWqtE,EAAMsE,EAA8Bt9B,IAE3F,CACL6C,MACA7C,OACAY,QACAoe,cAEJ,CCrGA,MAwCA,IAAevhB,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAAqB,CAACl8C,EAAQ,KAA2B,IAA3B,MAAE8F,EAAK,YAAEkzE,GAAa,EACtE,MAAO,CACL7nE,SAAS8nE,EAAAA,EAAAA,IAAoBj5E,EAAQ8F,GACrCozE,OAAQF,GAAcG,EAAAA,EAAAA,IAA0Bn5E,EAAQ8F,QAASvF,EACjE03E,SAASmB,EAAAA,EAAAA,IAAyBp5E,EAAQ8F,GAC3C,GALiBo2C,EAtC6B,IAW3C,IAX4C,MAChD8pB,EAAK,oBACLgQ,EAAmB,aACnBjgD,EAAY,iBACZsjD,EAAgB,UAChB3yE,EAAS,OACTvG,EAAM,wBACNmoC,EAAuB,QACvBn3B,EAAO,OACP+nE,EAAM,QACNjB,GACD,EACC,MAAM,IACJr6B,EAAG,KACH7C,EAAI,MACJY,EAAK,YACLoe,GACEie,GAAiB73E,EAAQuG,EAAWuxE,EAAS3vC,EAAyB09B,EAAOkT,GAAQpzE,OACnFwuE,GAAiBd,EAAAA,GAAAA,IAAkB51B,EAAKo4B,GAE9C,OACE,mBAAClC,GAAA,EAAuB,CACtB3iE,QAASA,EACT4pC,KAAMA,EACNu+B,QA1BU,EA2BV9B,QAASlD,EACTiF,aAAcF,EACdtjD,aAAcA,EACdg+C,KAAMO,EACN5tB,uBAAqB,EACrB9I,IAAKA,EACL7wB,WAAW0uB,EAAAA,GAAAA,GAAe,4BAA6BtqC,GAAS7P,KAAOk4E,GAAAA,IAAmB,sBAC1F79B,MAAOA,EACPrB,QAASyf,GACT,KCDN,IAAevhB,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAAqB,CAACl8C,EAAQ,KAAmC,IAAnC,cAAEy5E,EAAa,YAAET,GAAa,EAC9E,MAAM7nE,EAAUnR,EAAO+R,aAAamK,KAAKu9D,GACzC,MAAO,CACLtoE,UACA+nE,OAAQ/nE,GAASrL,OAASkzE,GAAcG,EAAAA,EAAAA,IAA0Bn5E,EAAQmR,EAAQrL,YAASvF,EAC3F03E,QAAS9mE,GAASrL,QAASszE,EAAAA,EAAAA,IAAyBp5E,EAAQmR,EAAQrL,OACrE,GANiBo2C,EApCmC,IAUjD,IAVkD,MACtD8pB,EAAK,cACLyT,EAAa,UACb/yE,EAAS,OACTvG,EAAM,wBACNmoC,EAAuB,QACvBn3B,EAAO,OACP+nE,EAAM,QACNjB,EAAO,oBACPjC,GACD,EACC,MAAM,IACJp4B,EAAG,KACH7C,EAAI,MACJY,EAAK,YACLoe,GACEie,GACF73E,EAAQuG,EAAWuxE,EAAS3vC,EAAyB09B,EAAOkT,GAAQpzE,OAAO4zE,EAAAA,GAAAA,IAAmB,IAGhG,OACE,mBAAC99B,GAAA,EAAW,CACVgC,IAAKA,EACLnsC,WAAYgoE,EACZ1sD,WAAW0uB,EAAAA,GAAAA,GAAe,4BAA6BtqC,GAAS7P,KAAOk4E,GAAAA,IAAmB,sBAC1F79B,MAAOA,EACPZ,KAAMA,EACN4+B,OAAK,EACL79B,qBAAmB,EACnB4K,uBAAqB,EACrBusB,8BAA+B+C,EAC/B17B,QAASyf,GACT,KCrEA6f,GAA2B,CAC/BC,KAAM,CACJC,SAAU,mBACVC,SAAU,iBAEZC,MAAO,CACLF,SAAU,mBACVC,SAAU,qBAIC,SAASE,GACtBl+B,EAAaiqB,EAAgBkU,EAAwB1e,EAAsBl9B,GAE3E,OAAIk9B,EACK/wC,QAAQiqC,QAAQklB,GAAyBt7C,GAAS,SAAS0nC,EAAQ,WAAa,aAK3F/sD,eAAyC8iC,EAAaiqB,GACpD,MAAMxR,EAAM,IAAIC,MAChBD,EAAIzY,IAAMA,EACVyY,EAAI2lB,YAAc,YAEb3lB,EAAI5/C,aACD,IAAI6V,SAASiqC,IACjBF,EAAIG,OAASD,CAAO,IAIxB,MAAMkB,EAASlmD,SAASmmD,cAAc,UAChCK,EAAMN,EAAOG,WAAW,MAE9BH,EAAOhhD,MAAQ4/C,EAAI5/C,MACnBghD,EAAO/gD,OAAS2/C,EAAI3/C,OAEpBqhD,EAAIE,UAAU5B,EAAK,EAAG,EAAGA,EAAI5/C,MAAO4/C,EAAI3/C,QAExC,MAAMqyB,EAAI8+B,EAAQxR,EAAI5/C,MAAQ,EAAI,EAC5BozB,EAAIwsB,EAAI3/C,OAAS,EAGvB,MAAQ,QADMosB,MAAMzjB,KAAK04C,EAAIkkB,aAAalzC,EAAGc,EAAG,EAAG,GAAG10B,MACjCpN,KAAK,OAC5B,CA3BSm0E,CAA0Bt+B,EAAKiqB,EACxC,C,4BCbe,SAASsU,GAAwBr1E,EAAqBo0C,GACnE,MAAM,SAAE4D,IAAaC,EAAAA,EAAAA,MAErB,OAAOq9B,EAAAA,GAAAA,IACLC,EAAAA,EAAAA,IAA4Bv1E,GAC5B+B,QAAQqyC,GACR4D,IAAaw9B,EAAAA,GAEjB,C,4BC2CA,MA8JA,GA9J4B,IAmBtB,IAnBuB,GAC3Bn5E,EAAE,QACF2D,EAAO,oBACP+wE,EAAmB,UACnBjQ,EAAS,YACT2U,EAAW,eACXjN,EAAc,WACdjS,EAAU,eACVmf,EAAc,KACd5/B,EAAO,SAAQ,WACfusB,EAAU,YACVxB,EAAW,eACXmO,EAAc,qBACd2G,EAAoB,cACpBC,EAAa,YACblN,EAAW,MACXrvC,EAAK,QACLgc,EAAO,eACPwgC,GACD,EAEC,MAAMl9B,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7BhmB,GAAS4vC,EAAAA,EAAAA,IAAgBjhE,KAAYkhE,EAAAA,EAAAA,IAAuBlhE,GAC5D81E,EAAezkD,EAAMuZ,QAErBykC,GAAiBd,EAAAA,GAAAA,IAAkB51B,EAAKo4B,IAExC,SAAE/4B,IAAaC,EAAAA,EAAAA,OACd89B,EAAeC,IAAoBzhC,EAAAA,EAAAA,IAASkhC,GAC7CQ,EAAaF,GAAiB1G,GAC9B,UACJ7c,EAAS,aAAE0jB,IACTC,EAAAA,GAAAA,IAAyB9oB,EAAAA,EAAAA,IAAoBrtD,EAAS81C,IAAQmgC,GAC5DG,EAAgBN,GAAgBtjB,GAE/B6jB,IAAa9hC,EAAAA,EAAAA,KAAU6hC,GACxBE,EAAUv0E,QAAQq0E,GAClBG,EAAWlB,GAAwBr1E,EAASs2E,GAC5CE,GAAkBC,EAAAA,GAAAA,IAAoBH,GACtCjoB,GAAeknB,EAAAA,EAAAA,IAA4Bv1E,IAE1C02E,EAAe,CAAGC,IAAel/B,EAAAA,GAAAA,GAAQpmB,EAAMi8B,YAGpD4oB,aAAcU,IACZT,EAAAA,GAAAA,IACF9oB,EAAAA,EAAAA,IAAoBrtD,EAAS,aAAc41E,GAAeiB,EAAAA,EAAAA,IAAsB72E,EAAS,cAGrF,YACJ82E,EAAW,eAAEC,EAAc,iBAAEC,IAC3BC,EAAAA,EAAAA,IACFj3E,EACA01E,IAAmBE,EAAgBgB,EAAmBV,GACtDD,IAAeG,GAEXc,GAAiD,KAA/BxZ,EAAAA,GAAAA,GAAYqY,IAGlCzzB,aAAc60B,EACd30B,qBAAsB40B,IACpB30B,EAAAA,GAAAA,GAAkBs0B,OAAgBz7E,EAAW47E,EAAiB,SAEhE50B,aAAc+0B,EACd70B,qBAAsB80B,IACpB70B,EAAAA,GAAAA,IAAmB2zB,IAAkBL,GAEnCjhB,GAAcrc,EAAAA,EAAAA,KAAY,KAC1Bq+B,EACFjB,IAAiB71E,GAIdo2E,EAKDM,EACFC,IAIFthC,IAAUr1C,EAAQ3D,IAThB25E,GAAkBuB,IAAeA,GASd,GACpB,CAACnB,EAAeO,EAAaD,EAAgBI,EAAa92E,EAAS61E,EAAgBxgC,IAEhF0rB,GAAQC,EAAAA,EAAAA,IAAahhE,GAC3Bw3E,IAA4B,IAAgC,IAA9BC,GAAyB,EACrD,IAAK9B,EAIH,YAHI8B,GACF9+B,EAAI3wB,QAASigD,QAAwByP,EAAAA,KAA2B/M,gBAAgBgN,EAAAA,MAKpF,MAAMC,EAAYj/B,EAAI3wB,QAASigD,QAAwByP,EAAAA,KACnDtB,EACFpB,GAAoBoB,EAAerV,EAAOyH,EAAgBjS,EAAYl9B,GAAOjoB,MAAMymE,IACjFD,EAAUlhC,MAAMqT,YAAY,gBAAiB8tB,GAC7CD,EAAU9M,aAAa6M,EAAAA,IAA2B,GAAG,IAGvDC,EAAUn7B,UAAU1gB,IAAI,qBAC1B,GACC,CAAC45C,EAAsBS,EAAerV,EAAOyH,EAAgBjS,EAAYl9B,IAE5E,MAAM,MAAE1pB,EAAK,OAAEC,EAAM,QAAEiyD,IAAYQ,GAAczB,GAAyB5gE,EAAS6gE,EAAaC,EAAW9oB,GAErGlwB,IAAY0uB,EAAAA,GAAAA,GAChB,eACCsgC,IAAgB9H,GAAkB,cACnCnN,IAAW,cACXlyD,IAAUC,GAAU,gBAGhBkoE,GAAkBzV,EAAc,WAAU1yD,cAAkB0yD,EAAWpgC,aAAaogC,EAAWt/B,OAAS,GACxG2T,GAAiB,WAATZ,EAAqB,WAAUlmC,OAAYkoE,UAAoBx8E,EAE7E,OACE,0BACEe,GAAIA,EACJs8C,IAAKA,EACL7wB,UAAWA,GACX4uB,MAAOA,GACPrB,QAASyhC,OAAcx7E,EAAYw5D,GAEnC,0BACEhe,IAAKs/B,EACLtuD,UAAU,aACVivB,IAAI,GACJ24B,WAAYhH,IAEb2N,GACC,6BAAQ19B,IAAK49B,EAAUzuD,WAAW0uB,EAAAA,GAAAA,GAAe,YAAaggC,KAE/D9N,GAAe,2BAAM5gD,UAAU,cAC/BqvD,IAAwBE,GACvB,0BAAKvvD,UAAY,iBAAgBsvD,KAC/B,mBAACW,GAAA,EAAe,CAACh/D,SAAUi+D,EAAkB3hC,QAASyhC,EAAchiB,OAAcx5D,KAGrF+7E,GAA8B,wBAAGvvD,WAAW0uB,EAAAA,GAAAA,GAAe,gBAAiB8gC,KAC7E,mBAAC9oB,GAAA,EAAY,CACXC,UAAWioB,EACXsB,eAAa,EACb3pB,aAAcA,EACd1+C,MAAOA,EACPC,OAAQA,EACRkY,UAAU,kBAEXivD,GACC,2BAAMjvD,UAAU,6BAA6B7f,KAAK2K,MAAyB,IAAnBokE,GAAuB,KAE7E,E,gBC/JV,MAyMA,GAzM4B,IAgBtB,IAhBuB,GAC3B36E,EAAE,QACF2D,EAAO,8BACPguE,EAA6B,8BAC7BC,EAA6B,UAC7BnN,EAAS,YACT2U,EAAW,YACXwC,EAAW,eACXvC,EAAc,aACd5kD,EAAY,WACZuxC,EAAU,YACVxB,EAAW,cACX+U,EAAa,YACblN,EAAW,QACXrzB,EAAO,eACPwgC,GACD,EAEC,MAAMl9B,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7B6gC,GAAW7gC,EAAAA,EAAAA,IAAyB,MAEpC3M,GAASy2B,EAAAA,EAAAA,IAAgBnhE,KAAYshE,EAAAA,EAAAA,IAAuBthE,GAC5D81E,EAAeprC,EAAME,SAEpB8rC,EAAe,CAAGC,IAAel/B,EAAAA,GAAAA,GAAQ/M,EAAM4iB,WAEhD6qB,GAA2B5J,EAAAA,GAAAA,IAAkB51B,EAAKq1B,GAClDoK,GACJ7J,EAAAA,GAAAA,IAAkB51B,EAAKs1B,IACpBkK,EAECE,GAAoBhhC,EAAAA,EAAAA,IAAO8gC,GAC7BC,IAA6BC,EAAkBrwD,UACjDqwD,EAAkBrwD,SAAU,GAG9B,MAAM,SAAEgwB,IAAaC,EAAAA,EAAAA,OACd89B,EAAeC,IAAoBzhC,EAAAA,EAAAA,IAASkhC,GAC7CQ,EAAal0E,QAAQg0E,GAAiBoC,GAA4BrnD,IACjEwnD,EAAeC,IAAoBhkC,EAAAA,EAAAA,IAAS0jC,IAAgBvB,GAE7DrE,GAAgBhlB,EAAAA,EAAAA,IAAoBrtD,EAAS,WAC5Cw4E,IAAwBjkC,EAAAA,EAAAA,IAASxyC,QAAQswE,GAAiB1vC,GAAAA,GAA0B0vC,MACrF,UAAE7f,EAAS,aAAE0jB,IAAiBC,EAAAA,GAAAA,GAClC9D,GAAgB4D,GAAYY,EAAAA,EAAAA,IAAsB72E,EAAS,UAAW8wB,GAElEslD,EAAgBN,GAAgBtjB,GAC/BimB,EAAeC,IAAmBjhC,EAAAA,GAAAA,KAEnC4W,GAAeknB,EAAAA,EAAAA,IAA4Bv1E,GAC3C24E,EAAW52E,QAAQssD,GAEnBuqB,GAAmBvrB,EAAAA,EAAAA,IAAoBrtD,EAAS,YAC/C64E,IAAsBtkC,EAAAA,EAAAA,IAASxyC,QAAQ62E,GAAoBj2C,GAAAA,GAA0Bi2C,KACtFE,EAAiBX,GAA4BrnD,EAC7Cia,GAAiBoL,EAAAA,GAAAA,GAASyiC,GAAmBE,OAAgBx9E,EAAWw1B,GACxEioD,GAAoBtC,EAAAA,GAAAA,IAAoBkC,GAAY5tC,KAAoB0tC,GAExEnC,GAAWqC,GAAY5tC,GAAkB0tC,EACzClC,EAAWlB,GAAwBr1E,EAASs2E,GAC5CE,GAAkBC,EAAAA,GAAAA,IAAoBH,GAEtC0C,EAAW5C,GAAiBiC,EAAkBrwD,SAE5CkuD,aAAcU,IAAqBT,EAAAA,GAAAA,IACzC9oB,EAAAA,EAAAA,IAAoBrtD,EAAS,aAC5B41E,GACDiB,EAAAA,EAAAA,IAAsB72E,EAAS,YAC/B8wB,IAGI,YAAEgmD,GAAW,eAAEC,GAAc,iBAAEC,KAAqBC,EAAAA,EAAAA,IACxDj3E,EACA01E,IAAmBE,EAAgBgB,EAAmBV,GACrDD,IAAewC,IAAkBD,GAAyB5C,GAGvDsB,IAAiD,KAA/BxZ,EAAAA,GAAAA,GAAYqY,IAElCzzB,aAAc60B,GACd30B,qBAAsB40B,KACpB30B,EAAAA,GAAAA,GAAkBs0B,QAAgBz7E,EAAW47E,KAE/C10B,qBAAsBy2B,KACpBx2B,EAAAA,GAAAA,GAAkB1gD,SAASg0E,GAAiBK,KAAmBkC,IAAkBnB,MAE9E+B,GAAcC,KAAmB5kC,EAAAA,EAAAA,IAAiB,GACnD6kC,IAAmB3gC,EAAAA,EAAAA,KAAaxsC,IACpCktE,GAAgBlxE,KAAKC,IAAI,EAAG+D,EAAEy+D,cAAc2O,YAAc,GAAG,GAC5D,IAEGhnB,GAAW6lB,EAASlwD,SAASqqC,UAAY3nB,EAAM2nB,UAAY,EAE3D0O,IAAQC,EAAAA,EAAAA,IAAahhE,GACrBqhE,GAAiBt/D,SAAQu/D,EAAAA,EAAAA,IAAuBthE,KAChD,MACJ2P,GAAK,OAAEC,IACLyyD,IAAcb,EAAAA,GAAAA,IAAyB92B,EAAOq2B,GAAOF,EAAaQ,GAAgBP,EAAW9oB,GAE3F8c,IAAcrc,EAAAA,EAAAA,KAAY,KAC1Bq+B,GACFjB,IAAiB71E,GAIf41E,GACFzkD,EAAAA,EAAAA,MAAamoD,2BAA2B,CAAEt5E,YAIvCo2E,GAKDA,IAAkBkC,GACpBC,GAAiB,GAGf7B,EACFC,IAIFthC,IAAUr1C,EAAQ3D,KAbhB25E,GAAkBuB,IAAeA,GAad,GACpB,CACDT,GAAalB,EAAeQ,EAAekC,EAAe5B,EAAgBrhC,EAASr1C,EAAS61E,EAC5Fc,IAGI7uD,IAAY0uB,EAAAA,GAAAA,GAAe,oBAAqBsgC,IAAe,eAG/DpgC,GAAS,WAAU9mC,QADDyyD,EAAc,WAAU1yD,eAAkB0yD,EAAWpgC,aAAaogC,EAAWt/B,OAAS,KAG9G,OACE,0BACE4V,IAAKA,EACLt8C,GAAIA,EACJyrB,UAAWA,GACX4uB,MAAOA,GACPrB,QAASyhC,QAAcx7E,EAAYw5D,IAElCkkB,GACC,mBAACO,GAAA,EAAc,CACb5gC,IAAKu/B,EACLphC,IAAKs/B,EACLtuD,UAAU,aACV2pD,QAAS6G,GAAiBF,EAC1BoB,OAAK,EACLC,MAAI,EACJC,aAAW,EACXhK,WAAYhH,EACZiR,aAAcP,GACdQ,QAASlB,IAGb,0BACE5hC,IAAK/L,EACLjjB,WAAW0uB,EAAAA,GAAAA,GAAe,YAAauiC,GACvChiC,IAAI,GACJ24B,WAAYhH,IAEbiQ,IAAaE,GACZ,6BACElgC,IAAK49B,EACLzuD,WAAW0uB,EAAAA,GAAAA,GAAe,YAAaggC,KAG1C9N,GAAe,2BAAM5gD,UAAU,cAChC,wBAAGA,WAAW0uB,EAAAA,GAAAA,GAAe,kBAAmByiC,MAChD,mBAACzqB,GAAA,EAAY,CACXC,UAAWioB,EACXsB,eAAa,EACb3pB,aAAcA,EACd1+C,MAAOA,GACPC,OAAQA,GACRkY,UAAU,kBAEXqvD,IACC,0BAAKrvD,WAAW0uB,EAAAA,GAAAA,GAAe,gBAAiB4gC,KAC9C,mBAACW,GAAA,EAAe,CAACh/D,SAAUi+D,GAAkB3hC,QAASyf,OAGxDihB,IAAkBK,GAClB,wBAAGtuD,UAAU,kBAEdivD,GACC,2BAAMjvD,UAAU,6BACZgvD,IAAelB,EAAkB,GAAE3tE,KAAK2K,MAAyB,IAAnBokE,OAA6B,OAG/E,0BAAKlvD,UAAU,0BACZ4iB,EAAMmvC,MAAQ,OAAQC,EAAAA,GAAAA,IAAoB7xE,KAAKC,IAAImqD,GAAW6mB,GAAc,KAG7E,E,eCjOV,MAiCA,IAAejiC,EAAAA,EAAAA,KACb,CAACl8C,EAAQ,KAA4B,IAA5B,QAAEg/E,GAAS,EAClB,MAAQC,aAAeC,WAAYC,IAAoBn/E,EACvD,MAAO,CACLmiB,MAAMC,EAAAA,EAAAA,IAAWpiB,EAAQg/E,EAAQ5vE,QACjC+vE,gBACArqE,eAAgB9U,EAAO+U,SAASC,MAAMF,eACvC,GAPL,EA/B2C,IAErC,IAFsC,QAC1CkqE,EAAO,KAAE78D,EAAI,cAAEg9D,EAAa,eAAErqE,GAC/B,EACC,MAAM,SAAEzR,IAAa+yB,EAAAA,EAAAA,OAEf,UACJ4C,EAAS,SACTD,EAAQ,YACRc,EAAW,OACXzqB,GACE4vE,EACEI,EAbwB,MAaThwE,EAEf2qD,GAAcrc,EAAAA,EAAAA,KAAY,KAC9Br6C,EAAS,CAAE/B,GAAI8N,GAAS,GACvB,CAAC/L,EAAU+L,IAEd,OACE,0BACE2d,WAAW0uB,EAAAA,GAAAA,GAAe,UAAW2jC,GAAgB,eACrD9kC,QAAS8kC,EAAerlB,OAAcx5D,GAEtC,mBAACoxE,GAAA,EAAM,CAAC52B,KAAK,QAAQ54B,KAAMA,EAAM7e,KAAM01B,GAAaD,EAAUjkB,eAAgBA,EAAgBg9D,WAAS,IACvG,0BAAK/kD,UAAU,gBACb,0BAAKA,UAAU,gBAAgBiM,EAAS,IAAGD,GAC3C,0BAAKhM,UAAU,kBAAiBsyD,EAAAA,GAAAA,IAA0BF,EAAetlD,KAEvE,I,oDC4CV,SAASylD,GAAc75C,EAAe0a,GACpC,OAAOA,EAAQ,GAAM1a,EAAQ0a,EAAS,KAAKo/B,UAAY,CACzD,CAEA,SAnFiC,IAO3B,IAP4B,OAChCC,EAAM,YACNC,EAAW,YACXnsC,EAAW,eACXosC,EAAc,eACdC,EAAc,cACdC,GACD,EACC,MAAMr6E,EAASk6E,GAAeA,EAAYt0E,MAAM6+B,GAAMA,EAAEvlB,SAAW+6D,EAAO/6D,SACpEo7D,EAA0C,IAA1BF,EAAej4E,SAA2D,IAA3Ci4E,EAAe77E,QAAQ07E,EAAO/6D,QAC7Eq7D,EAAYH,EAAej4E,OAAS,GAAKm4E,GAAmBt6E,GAAQ4tC,SACpE4sC,EAAgBx6E,EAAS+5E,GAAc/5E,EAAOquC,YAAaN,GAAe,GAAK,GAC9E0sC,EAAcC,IAAmBzmC,EAAAA,EAAAA,IAASomC,EAAgB,EAAIG,GAE/DG,GAAU5jC,EAAAA,EAAAA,IAAuB,MACjC6jC,EAAY56E,EAAS+5E,GAAc/5E,EAAOquC,YAAa8rC,GAAkB,GAAK,EAC9EU,EAA0BJ,IAAiBD,EA0BjD,IAxBA/nC,EAAAA,EAAAA,KAAU,KACJ4nC,GACFK,EAAgBF,EAClB,GACC,CAACH,EAAeG,KAEnB/nC,EAAAA,EAAAA,KAAU,KACR,MAAMqoC,EAASH,EAAQjzD,QAEvB,GAAIozD,GAAUT,EAAe,CAC3B,MAAMU,EAAQD,EAAO7uB,kBAEf7V,EAAQykC,EAA0B,GAAK,sDACxCE,EAMHA,EAAMvQ,aAAa,QAASp0B,GAL5B0kC,EAAOvuB,UAAa,gFACiDnW,+EAMzE,IACC,CAACykC,EAAyBR,KAExBH,IAAgBl6E,EACnB,OAGF,MAAMg7E,EAAa,UAASJ,wBAAgCC,EAA0B,EAAI,KAE1F,OACE,0BAAKrzD,UAAU,aAAaytB,IAAI,OAC9B,0BAAKztB,UAAY,sBAAsC,QAAlBgzD,EAA0B,cAAgB,KAC5EA,EAAa,IACbD,GACC,2BAAM/yD,WAAW0uB,EAAAA,GAAAA,GACf,sBACCokC,GAAiB,QAClBD,GAAiB,YAGjB,wBAAG7yD,UAAW8yD,EAAgB,aAAe,iBAInD,0BAAK9yD,UAAU,qBACb,0BAAKA,UAAU,mBAAmBytB,IAAI,SACnCoZ,EAAAA,GAAAA,GAAW4rB,EAAOl8E,OAErB,0BAAKypB,WAAW0uB,EAAAA,GAAAA,GAAe,qBAAsBqkC,IAAaD,GAAiB,UACjF,0BAAK9yD,UAAU,qBAAqB6wB,IAAKsiC,IACzC,0BACEnzD,UAAU,mBACV4uB,MAAO4kC,MAIT,ECsQV,SAASjgC,GAAgBpvC,GACvBA,EAAEovC,iBACJ,CAEA,UAAe9H,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAAa,IAAb,KAAEwkB,GAAM,EACf,MAAM,eAAE6uB,GAAmB7uB,EAAKxV,SACxB4M,OAASM,KAAM+1D,IAAgBjyE,EACvC,OAAKqzC,GAA4C,IAA1BA,EAAe3rC,OAI/B,CACL2rC,iBACA4+B,aALO,CAAC,CAMT,GAXe/1B,EA1ToB,IAMlC,IANmC,QACvCj3C,EAAO,KACPuf,EAAI,eACJ6uB,EAAc,UACd4+B,EAAS,WACTuO,GACD,EACC,MAAM,YAAE1gE,EAAW,gBAAE2gE,EAAe,gBAAEtN,IAAoB/8C,EAAAA,EAAAA,OAElD90B,GAAIoF,EAAS,OAAEvG,GAAW8E,GAC5B,QAAEy7E,EAAO,QAAE1xE,GAAYwV,GACtBm8D,EAAcC,IAAmBpnC,EAAAA,EAAAA,KAAkB,IACnDqnC,EAAeC,IAAoBtnC,EAAAA,EAAAA,IAAmB,KACtDunC,EAAiBC,IAAsBxnC,EAAAA,EAAAA,KAAkB,IACzDynC,EAAcC,IAAmB1nC,EAAAA,EAAAA,KAAkB,IACnD2nC,EAAaC,IAAkB5nC,EAAAA,EAAAA,KACnCknC,EAAQW,QAAUX,EAAQY,WAAaZ,EAAQY,UAAY,EACxDp0E,KAAKo6B,IAAIo5C,EAAQY,UAAYp0E,KAAKG,MAAMnB,KAAKC,MAAQ,MAAQkxC,EAAAA,EAAAA,MAAuBqjC,EAAQS,aAC5F,GAGAI,GAAejlC,EAAAA,EAAAA,IAAuB,OACpCttC,QAASywE,EAAW,YAAEnsC,GAAgBtkC,EACxCwyE,EAAW/B,GAAeA,EAAYr2C,MAAMY,GAAMA,EAAEmJ,WACpDsuC,GAAWf,EAAQW,SAAWG,EAC9BE,GAAiBD,GAAWf,EAAQiB,UAAYh6E,OAAOqH,EAAQskC,aAAe,EAC9EsuC,EAAaH,GAAWf,EAAQmB,eAChCnC,EAAiBD,EAAcvyE,KAAKC,OAAOsyE,EAAY16E,KAAKilC,GAAMA,EAAE4J,eAAgBN,EACpFqsC,EAAiBF,EAAcA,EAAYj6E,QAAO,CAACs8E,EAAmB93C,KACtEA,EAAE+3C,WACJD,EAAQl8E,KAAKokC,EAAEvlB,QAGVq9D,IACN,IAAM,GACHA,EAAUpB,EAAQoB,QAAQ/8E,KAAKmgB,IAAC,CACpCi+B,MAAOj+B,EAAE5hB,KACTmiC,MAAOvgB,EAAET,OACTu9D,OAAQh7E,QAAQ05E,EAAQuB,MAAQvB,EAAQS,aAAeA,GAAe,QAGxEnpC,EAAAA,EAAAA,KAAU,KACR,MAAMkqC,EAAS19D,EAAKxV,QAAQA,SAAS7D,MAAM5F,GAAWA,EAAO4tC,WACzDwtC,GAAgBuB,IACdA,EAAOH,WACT5O,IAEFyN,GAAgB,GAClB,GACC,CAACD,EAAcn8D,EAAKxV,QAAQA,QAASmkE,KAExCn7B,EAAAA,EAAAA,KAAU,KACJmpC,EAAc,GAChBr4E,YAAW,IAAMs4E,EAAeD,EAAc,IAAI,KAGpD,MAAMgB,EAAcZ,EAAat0D,QAEjC,GAAIk1D,EAAa,CACf,MAAMC,EAAgB,GAAQl1E,KAAKm1E,GAC7B/B,EAAQ6B,EAAYG,iBACpBC,EAAUJ,EAAY3wB,kBAK5B,GAJI2vB,GAAe,GACjBgB,EAAYzgC,UAAU1gB,IAAI,YAGvBs/C,GAAUiC,EASR,CACL,MAAMC,GAAqB9B,EAAQS,YAAeA,GAAeT,EAAQS,YAAgBiB,EACzFG,EAAQ3V,aAAcmS,EAAAA,GAAAA,IAAoBoC,GACzCb,EAAM9uB,kBAAiCue,aAAa,oBAAsB,IAAGyS,IAChF,MAZEL,EAAYrwB,UAAa,oBACjBitB,EAAAA,GAAAA,IAAoBoC,2LAGJiB,KAAiBA,qEAS7C,IACC,CAACjB,EAAaT,EAAQS,eAEzBnpC,EAAAA,EAAAA,KAAU,KACJ0oC,EAAQuB,OAASd,GAAe,GAAMK,IAAad,EAAQW,SAC7DvhE,EAAY,CAAE3f,SAAQuG,aACxB,GACC,CAACvG,EAAQghF,EAAaK,EAAU1hE,EAAapZ,EAAWg6E,EAAQW,OAAQX,EAAQuB,QAGnFjqC,EAAAA,EAAAA,KAAU,KACR,IAAIyqC,EAQJ,OANI/B,EAAQuB,OAASvB,EAAQW,QAAUX,EAAQS,aAAeT,EAAQS,YAAc,IAClFsB,EAAQ1/E,OAAO+F,YAAW,KACxBgX,EAAY,CAAE3f,SAAQuG,aAAY,GACX,IAAtBg6E,EAAQS,cAGN,KACDsB,GACF1/E,OAAOgH,aAAa04E,EACtB,CACD,GACA,CAAChB,EAASthF,EAAQ2f,EAAapZ,EAAWg6E,EAAQS,YAAaT,EAAQW,OAAQX,EAAQuB,OAE1F,MAAMS,GAAepnC,EAAAA,EAAAA,KAAQ,IACpBjI,EAAiBA,EAAe7tC,QAAO,CAACD,EAAmBjE,KAChE,MAAM6gB,EAAO8vD,EAAU3wE,GAKvB,OAJI6gB,GACF5c,EAAOK,KAAKuc,GAGP5c,CAAM,GACZ,IAAM,IACR,CAAC0sE,EAAW5+B,IAETsvC,GAAoBjlC,EAAAA,EAAAA,KACvBj5B,IACCq8D,EAAiB,CAACr8D,IAClBm8D,GAAgB,GAChBM,GAAgB,GAChBV,EAAW,CAAC/7D,GAAQ,GACnB,CAAC+7D,IAGAoC,GAAuBllC,EAAAA,EAAAA,KAC1Bn5B,IACCu8D,EAAiBv8D,EAAQ,GACxB,IAGCs+D,GAAkBnlC,EAAAA,EAAAA,KACtB,KACEkjC,GAAgB,GAChBM,GAAgB,GAChBV,EAAWK,EAAc,GACxB,CAACL,EAAYK,IAGZiC,GAAyBplC,EAAAA,EAAAA,KAC7B,KACE+iC,EAAgB,CAAEtgF,SAAQuG,aAAY,GACrC,CAACvG,EAAQuG,EAAW+5E,IAGnBsC,GAAqBrlC,EAAAA,EAAAA,KAAY,KACrCsjC,GAAmB,EAAK,GACvB,IAEGgC,GAAqBtlC,EAAAA,EAAAA,KAAY,KACrCsjC,GAAmB,GACnBE,GAAgB,EAAM,GACrB,KAGHlpC,EAAAA,EAAAA,KAAU,KACJipC,GAAgBO,GAAYd,EAAQuB,MAAQjzE,EAAQA,SAAWwV,EAAKxV,QAAQi0E,WACxDj0E,EAAQA,QAAQ7D,MAAM6+B,GAAMA,EAAEmJ,UAAYnJ,EAAE+3C,aAEhEf,GAAmB,GAEvB,GACC,CAACQ,EAAUP,EAAcjyE,EAAQA,QAAS0xE,EAAQuB,KAAMz9D,EAAKxV,QAAQi0E,WAExE,MAAMx+E,GAAO81C,EAAAA,GAAAA,KA4Cb,OACE,0BAAKxtB,UAAU,OAAOytB,IAAK/1C,EAAKg2C,MAAQ,OAAS,OAZ/CsmC,GAAmBv8D,EAAKxV,QAAQi0E,UAC9B,mBAACC,GAAA,EAAY,CACXj+E,SAASk+E,EAAAA,GAAAA,GAAuB3+D,EAAKxV,QAAQi0E,SAAUz+D,EAAKxV,QAAQo0E,kBACpE9rB,SA5MgB,IA6MhB+rB,UAAWL,EACXM,YA/MoB,2BAwNxB,0BAAKv2D,UAAU,kBAAiB6mC,EAAAA,GAAAA,GAAW8sB,EAAQ6C,SAAU,CAAC,QAAS,QACvE,0BAAKx2D,UAAU,aACZtoB,EAuET,SAA2Bi8E,GAEzB,YAAgC,IAArBA,EAAQiB,SAjSR,IAqSPjB,EAAQW,OACH,eAGLX,EAAQuB,KACHvB,EAAQiB,SAAW,WAAa,oBAGlCjB,EAAQiB,SAAW,aAAe,eAC3C,CAtFc6B,CAAkB9C,IA/B1BgC,EAAah7E,OAAS,GACpB,0BAAKqlB,UAAU,sBACZ21D,EAAa39E,KAAKod,GACjB,mBAACwvD,GAAA,EAAM,CACL52B,KAAK,QACL54B,KAAMA,OA4BXg/D,EAAc,GAAKM,GAAW,0BAAK7jC,IAAK2jC,EAAcx0D,UAAU,mBAChE2zD,EAAQuB,MAAQz9D,EAAKxV,QAAQi0E,WAAaxB,GACzC,mBAAC3mC,GAAA,EAAM,CACLjjC,OAAK,EACLkjC,KAAK,OACLJ,MAAM,cACN5tB,UAAU,iBACVkuC,SAAU8lB,EACVzmC,QAASyoC,EACThiC,UAAU,iBAEV,wBAAGh0B,UAAU,gBAIlB00D,GACC,0BAAK10D,UAAU,eAAeutB,QAASgG,IACpCshC,EAEG,mBAAC6B,GAAA,EAAa,CACZl/D,QAASu9D,EACTx9B,SAAUs+B,EACV3nB,SAAUh2D,EAAQwqC,aAAekxC,EACjC+C,eAAgB/C,EAAeE,OAAgBtgF,EAC/CsX,OAAK,IAIP,mBAAC8rE,GAAA,EAAU,CACTn4C,KAAO,QAAO9kC,IACd6d,QAASu9D,EACTx9B,SAAUq+B,EACV1nB,SAAUh2D,EAAQwqC,aAAekxC,EACjCiD,cAAejD,EAAeE,EAAc,QAAKtgF,MAKzDkhF,GACA,0BAAK10D,UAAU,gBACZ2zD,EAAQoB,QAAQ/8E,KAzFzB,SAA4By6E,GAC1B,OACE,mBAAC,GAAU,CACTjqC,IAAKiqC,EAAO/6D,OACZm7D,cAAeqB,IAAiBQ,EAChCjC,OAAQA,EACRC,YAAaA,EACbnsC,YAAaA,EACbosC,eAAgBA,EAChBC,eAAgBA,GAGtB,MAgFM+B,IAAkBE,GAClB,0BAAK70D,UAAU,qBA0CvB,SAAgCtoB,EAAcsH,EAA0BgY,GACtE,OAAKA,EAIEtf,EAAKsH,EAAS,SAAW,OAAQgY,EAAO,KAHtCtf,EAAKsH,EAAS,4BAA8B,kCAIvD,CAhD4C83E,CAAuBp/E,EAAMi8E,EAAQuB,KAAMjzE,EAAQskC,cAExFsuC,GACC,mBAAC9mC,GAAA,EAAM,CACLwiB,QAAM,EACNrC,SAAmC,IAAzB4lB,EAAcn5E,OACxBqzC,KAAK,OACLT,QAASuoC,GAERp+E,EAAK,oBAGTi9E,GACC,mBAAC5mC,GAAA,EAAM,CACLwiB,QAAM,EACNviB,KAAK,OACLT,QAASwoC,GAERr+E,EAAK,oBAGN,K,4BCnTV,MA2HA,IAAe+zC,EAAAA,EAAAA,KAzGe,IAcxB,IAdyB,QAC7BvzC,EAAO,oBACP+wE,EAAmB,UACnBjQ,EAAS,YACT2U,EAAW,YACXwC,EAAW,UACX4G,EAAS,YACThe,EAAW,aACX/vC,EAAY,cACZ8kD,GAAgB,EAAK,YACrBlN,EAAW,MACXrvC,EAAK,aACLylD,EAAY,sBACZC,GACD,EACC,MAAMC,GAAUC,EAAAA,EAAAA,IAAkBj/E,IAC5B,SAAEg4C,IAAaC,EAAAA,EAAAA,MAEfinC,GAAmBzmC,EAAAA,EAAAA,KAAY,KACnCqmC,GAAe,GACd,CAACA,IAEJ,IAAKE,EACH,OAGF,MAAM,SACJG,EAAQ,IACRvwE,EAAG,WACHwwE,EAAU,MACVp0E,EAAK,YACLsT,EAAW,MACX+S,EAAK,MACLqZ,GACEs0C,EACEK,GAAuBC,EAAAA,GAAAA,GAAShhE,EArDhB,KAsDhBihE,EAAYx9E,QAAQs9E,GAAwBr0E,GAASm0E,GAC3D,IAAIK,GAAgB,EACpB,GAAID,GAAaP,GAAS3tD,QAAU2tD,EAAQt0C,MAAO,CACjD,MAAM,MAAE/6B,EAAK,OAAEC,GAAWgxD,GAAyB5gE,OAAS1E,OAAWA,EAAW08C,GAClFwnC,EAAgB7vE,IAAUC,CAC5B,CACA,MAAM6vE,GAAsBpuD,GAASqZ,IAAUo0C,IAAiBU,EAE1D13D,GAAY0uB,EAAAA,GAAAA,GAChB,UACAqoC,GAAa,aACbW,GAAiB,qBAChBnuD,IAAUqZ,IAAUm0C,GAAa,gBAClCn0C,GAAS,cACR60C,GAAa,cAGhB,OACE,0BACEz3D,UAAWA,EACX,gBAAeq3D,GAAYC,GAAY,GACvC7pC,IAAI,QAEHlkB,IAAUqZ,GACT,mBAAC,GAAK,CACJ1qC,QAASA,EACT+wE,oBAAqBA,EACrBjQ,UAAWA,EACX2U,YAAaA,EACb3/B,KAAM0pC,EAAgB,YAAc,SACpC3e,YAAaA,EACbmO,gBAAiByQ,EACjB7J,cAAeA,EACflN,YAAaA,EACbrvC,MAAOA,EACPgc,QAASoqC,EAAqBP,OAAmB5jF,EACjDu6E,eAAgBkJ,IAGnBQ,GACC,0BAAKz3D,UAAU,gBACb,mBAAC43D,GAAA,EAAQ,CAAC53D,UAAU,YAAYlZ,IAAKA,EAAKvQ,KAAM8gF,GAAYC,KAC1DP,GAAa7zE,GACb,wBAAG8c,UAAU,eAAc6mC,EAAAA,GAAAA,GAAW3jD,IAEvCq0E,GACC,wBAAGv3D,UAAU,qBAAoB6mC,EAAAA,GAAAA,GAAW0wB,EAAsB,CAAC,QAAS,UAIhFR,GAAan0C,GACb,mBAAC,GAAK,CACJ1qC,QAASA,EACTguE,8BAA+B+C,EAC/BjQ,UAAWA,EACX2U,YAAaA,EACbwC,YAAaA,EACbnnD,aAAcA,EACd+vC,YAAaA,EACb+U,cAAeA,EACflN,YAAaA,EACbrzB,QAASoqC,EAAqBP,OAAmB5jF,EACjDu6E,eAAgBkJ,IAGhB,I,gBC/GV,MAyEA,IAAexrC,EAAAA,EAAAA,KAzEe,IAMxB,IANyB,QAC7BvzC,EAAO,qBACP21E,EAAoB,eACpBnN,EAAc,WACdjS,EAAU,MACVl9B,GACD,EAEC,MAAMsf,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7B73C,GAAO81C,EAAAA,GAAAA,KACPnd,GAAUwnD,EAAAA,EAAAA,IAAkB3/E,IAE5B,MACJgL,EAAK,KACL3M,EAAI,OACJmjC,EAAM,SACNF,EAAQ,OACRs+C,EAAM,MACNvuD,GACE8G,EAEE0nD,GAAW1pC,EAAAA,GAAAA,IAAS2pC,EAAAA,EAAAA,IAAmBzuD,IAmB7C,OAjBAmmD,IAA4B,IAAgC,IAA9BC,GAAyB,EACrD,GAAK9B,GAOL,GAAIkK,EAAU,CACZ,MAAMjI,EAAYj/B,EAAI3wB,QAASigD,QAAwByP,EAAAA,KACvD1C,GAAoB6K,GAAU,EAAOrX,EAAgBjS,EAAYl9B,GAAOjoB,MAAMymE,IAC5ED,EAAUlhC,MAAMqT,YAAY,gBAAiB8tB,GAC7CD,EAAU9M,aAAa6M,EAAAA,IAA2B,GAAG,GAEzD,OAZMF,GACF9+B,EAAI3wB,QAASigD,QAAwByP,EAAAA,KAA2B/M,gBAAgBgN,EAAAA,IAWpF,GACC,CAAChC,EAAsBkK,EAAUrX,EAAgBjS,EAAYl9B,IAG9D,0BACEsf,IAAKA,EACL7wB,UAAU,WAET9c,GACC,wBAAG8c,UAAU,UAAS6mC,EAAAA,GAAAA,GAAW3jD,IAElC3M,GACC,+BAAMswD,EAAAA,GAAAA,GAAWtwD,EAAM,CAAC,QAAS,QAEnC,0BAAKypB,UAAY,gBAAcuJ,EAAQ,YAAc,KAClDwuD,GACC,0BACE/3D,UAAU,gBACVgvB,IAAK+oC,EACL9oC,IAAI,GACJm+B,YAAY,eAGd2K,GAAYxuD,GACZ,mBAAC0uD,GAAA,EAAQ,CAACpwE,MAAO0hB,EAAMgxC,YAAY1yD,MAAOC,OAAQyhB,EAAMgxC,YAAYzyD,OAAQowE,kBAAgB,IAE9F,wBAAGl4D,UAAU,qBACV6qB,EAAAA,GAAAA,GAAenR,EAAQF,EAAU9hC,EAAK29B,MACtCyiD,GAAU,+BAAOpgF,EAAK,yBAGvB,IChGV,IAAgB,KAAO,uBAAuB,SAAW,uBAAuB,IAAM,uBAAuB,QAAU,wBC+EvH,IAAe+zC,EAAAA,EAAAA,KAvD2B,IAGpC,IAHqC,QACzCvzC,EAAO,aACP8wB,GACD,EACC,MAAM,YAAEmI,EAAW,kBAAEgnD,IAAsB9uD,EAAAA,EAAAA,MACrC3xB,GAAO81C,EAAAA,GAAAA,KACPnd,GAAUwnD,EAAAA,EAAAA,IAAkB3/E,IAE5B,OAAE9E,EAAM,GAAEmB,GAAO2D,EAEjBkgF,GAAuBznC,EAAAA,EAAAA,KAAY,KACvCwnC,EAAkB,CAAE/kF,SAAQwJ,IAAK,CAACrI,IAAM,GACvC,CAACnB,EAAQmB,EAAI4jF,KAEhBE,EAAAA,GAAAA,GAAYD,EAAsBpvD,EAhBX,SAgB6Cx1B,GAEpE,MAAM,OACJkmC,EAAM,SACNF,EAAQ,cACRyN,GACE5W,GAEE,MACJxoB,EAAK,OAAEC,EAAM,UAAEi7B,EAAS,SAAEwnB,GACxBtjB,EAEE+lB,GAAcrc,EAAAA,EAAAA,KAAY,KAC9Bxf,EAAY,CACV/9B,SACAuG,UAAWpF,EACXmhC,iBAAiB,GACjB,GACD,CAACtiC,EAAQmB,EAAI48B,IAEhB,OACE,0BACEnR,WAAW0uB,EAAAA,GAAAA,GAAeI,GAAAA,KAAa,eACvCvB,QAASyf,GAET,mBAACtG,GAAA,EAAY,CACXH,aAAcxjB,GAAWu1C,QACzBzwE,MAAOA,EACPC,OAAQA,EACR6+C,WAAS,EACT3mC,UAAW8uB,GAAAA,UAEZ70C,QAAQswD,IAAa,0BAAKvqC,UAAW8uB,GAAAA,WAAkBkjC,EAAAA,GAAAA,IAAoBznB,IAC5E,0BAAKvqC,UAAW8uB,GAAAA,KACd,wBAAG9uB,WAAW0uB,EAAAA,GAAAA,GAAe,YAAaI,GAAAA,QACzCp3C,EAAK,qBAAqBmzC,EAAAA,GAAAA,GAAenR,EAAQF,KAEhD,ICzEJ++C,GAAe,IAAIpqE,IAAI5T,OAAOqe,QAAQ,CAC1C,mBAAoB,UACpB,eAAgB,UAChB,sBAAuB,UACvB,yBAA0B,UAC1B,eAAgB,UAChB,gBAAiB,UACjB,gBAAiB,UACjB,mBAAoB,UACpB4/D,mBAAoB,UACpBC,SAAU,UACVC,UAAW,UACXC,MAAO,UACPC,KAAM,UACNC,KAAM,UACNC,UAAW,UACXC,eAAgB,UAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,aAGFC,GAAgB,CACpB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,W,0CCapFC,GAAiB,KACjBC,GAAqB,CACzBxxE,MAAO,IACPC,OAAQ,IACRwxE,KAAM,GACNzxB,MAAO,GAIH0xB,GAAU,CAAEC,OAAQ,oyBAsP1B,IAAe/tC,EAAAA,EAAAA,KA3OgB,IAOzB,IAP0B,QAC9BvzC,EAAO,KACPue,EAAI,aACJuS,EAAY,eACZ03C,EAAc,WACdjS,EAAU,MACVl9B,GACD,EACC,MAAM,QAAE3B,IAAYvG,EAAAA,EAAAA,MAEdwnB,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7BilC,GAAejlC,EAAAA,EAAAA,IAAuB,MACtC73C,GAAO81C,EAAAA,GAAAA,KACPisC,GAAcC,EAAAA,GAAAA,KAEdxrD,GAAWyrD,EAAAA,EAAAA,IAAmBzhF,IAC9B,KAAEzD,EAAI,IAAEmlF,GAAQ1rD,EAEhB2rD,GAAaj6E,EAAAA,EAAAA,MACbk6E,GAAYC,EAAAA,EAAAA,IAAiB7hF,EAAS2hF,GACtCG,EAA6B,YAATvlF,GAAuBqlF,OAC7CtmF,EAD0D0E,EAAQyH,KAAOuuB,EAAS+rD,OAASJ,GAGxFK,EAAOC,IAAY1tC,EAAAA,EAAAA,IAASmtC,GAE7BQ,EAA4B,UAAT3lF,GAA8B,YAATA,IAAuBqlF,GAC/D,MACJjyE,EAAK,OAAEC,EAAM,KAAEwxE,EAAI,MAAEzxB,GACnBwxB,GAEE7P,EAAYvvE,QAAQ+uB,KAAiBqxD,EAAAA,EAAAA,IAAmBH,EAAOryE,EAAOC,EAAQwxE,EAAMzxB,GACpFvC,GAAejX,EAAAA,GAAAA,GAASm7B,GACxB8Q,GAAmB1kB,EAAAA,GAAAA,GAAYtQ,GAC/Bi1B,EAAaj1B,GAAgBg1B,EAE7BE,EAAa/jE,IAAQyW,EAAAA,EAAAA,IAASzW,EAAKliB,IACnCkmF,EAAchkE,GAAQ+jE,EAAc/jE,OAAkBjjB,EACtDknF,EAAcjkE,IAAS+jE,EAAc/jE,OAAkBjjB,EAEvDylE,GAAQC,EAAAA,EAAAA,IAAahhE,GAErByiF,GAAmBpsC,EAAAA,EAAAA,KAAQ,KAC/B,GAAa,YAAT95C,IAAuBylF,EAAMU,eAC/B,OAAO,EAGT,MAAM,IAAEC,EAAG,eAAED,GAAmBV,EAChC,OAAOU,ED1EJ,SAA2BC,EAAavB,GAE7C,OAAQ,aAAen5E,KAAK26E,IAAID,GAAO16E,KAAKm1E,GAAK,MAAS,GAAKgE,CACjE,CCuE4ByB,CAAkBF,EAAKvB,EAAK,GACnD,CAAC7kF,EAAMylF,EAAOZ,IAOX0B,GAAkBrqC,EAAAA,EAAAA,KAAaykC,IACnC,GAAa,YAAT3gF,EAAoB,OACxB,MACM4gF,EAAgBhyB,GAAaljD,KAAKm1E,GAClC/B,EAAQ6B,EAAYG,iBACpBC,EAAUJ,EAAY3wB,kBAEtBw2B,EAAW/iF,EAAQyH,KAAOuuB,EAAS+rD,QAASr6E,EAAAA,EAAAA,MAC5C61E,GAAoB,EAAIwF,EAAW/sD,EAAS+rD,QAAU5E,EACtD9+E,GAAO2kF,EAAAA,GAAAA,IAAqBxjF,EAAiB,IAAXujF,GAEnC1H,GAAUiC,GAUbA,EAAQ3V,YAActpE,EACtBg9E,EAAM9uB,kBAAmBue,aAAa,oBAAsB,IAAGyS,MAV/DL,EAAYrwB,UAAa,8CACYxuD,8LAGX8+E,KAAiBA,uCACfI,kCAM9B,GACC,CAAChhF,EAAMyD,EAAQyH,KAAMuuB,EAAUx2B,IA4IlC,OA1IAyqD,EAAAA,EAAAA,KAAgB,KACVqyB,EAAat0D,SACf86D,EAAgBxG,EAAat0D,QAC/B,GACC,CAAC86D,IAEJtL,IAA4B,IAA4B,IAA1ByL,GAAqB,EACjD,GAAIf,EACGe,GACHtqC,EAAI3wB,QAASigD,QAAwByP,EAAAA,KAA2B/M,gBAAgBgN,EAAAA,UAKpF,GAAI0K,EAAY,CACd,MAAMzK,EAAYj/B,EAAI3wB,QAASigD,QAAwByP,EAAAA,KACvD1C,GAAoBqN,EAAYthB,EAAOyH,EAAgBjS,EAAYl9B,GAAOjoB,MAAMymE,IAC9ED,EAAUlhC,MAAMqT,YAAY,gBAAiB8tB,GAC7CD,EAAUn7B,UAAU1gB,IAAI,sBACxB67C,EAAU9M,aAAa6M,EAAAA,IAA2B,GAAG,GAEzD,IACC,CAACuK,EAAkBnhB,EAAOyH,EAAgBjS,EAAYl9B,EAAOgpD,KAEhEtvC,EAAAA,EAAAA,KAAU,KAEJ9qC,KAAK28D,IAAI8c,EAAIiB,IAAMX,EAAMW,KAAOzB,IAAkBj5E,KAAK28D,IAAI8c,EAAIwB,KAAOlB,EAAMkB,MAAQhC,GAClFc,EAAMU,iBAAmBhB,EAAIgB,gBAC/BT,EAAS,IACJD,EACHU,eAAgBhB,EAAIgB,iBAK1BT,EAASP,EAAI,GACZ,CAACA,EAAKM,KAET3pC,EAAAA,GAAAA,IAAW,KACTkpC,GAAa,GACXK,OAA6CtmF,EAAP,KAAzBwmF,GAAoB,KAErC3B,EAAAA,GAAAA,IAAY,KACV,MAAMjD,EAAcZ,EAAat0D,QAE7Bk1D,GACF4F,EAAgB5F,EAClB,GACC4E,EAAmB,SAAOxmF,GA2F3B,0BACEq9C,IAAKA,EACL7wB,UAAU,mCACVutB,QA7KgB,KAClB,MAAMzmC,EDlFH,SAAuB+zE,EAAaO,EAAc9B,GACvD,MAAQ,sCAAoBuB,KAAOO,MAASP,KAAOO,KAAQ9B,IAC7D,CCgFgB+B,CAAcnB,EAAMW,IAAKX,EAAMkB,KAAM9B,GACjD1pD,EAAQ,CAAE9oB,OAAM,GA6Kd,0BAAKkZ,UAAU,eAjEZu6D,EAEH,0BACEv6D,UAAU,iBACVgvB,IAAKurC,EACLtrC,IAAI,oBACJL,MAAQ,UAASyqC,GAAmBxxE,oBAAoBwxE,GAAmBvxE,cANvD,mBAACmwE,GAAA,EAAQ,CAACpwE,MAAOA,EAAOC,OAAQA,IA2C1D,WACE,GAAKyyE,EAEL,OACE,sCACGtgF,QAAQ0gF,KAAsBb,GAC7B,0BACE95D,UAAU,oBACV4uB,MAAQ,UAA4B,EAAnB+rC,gBAAsD,EAAnBA,QAxC9D,WACE,MAAMW,GAAe5sC,EAAAA,GAAAA,GACnB,MACAj6C,EACAqlF,GAAa,WAEf,GAAa,YAATrlF,EACF,OACE,0BAAKurB,UAAWs7D,EAAcC,wBAAyBhC,IACrD,mBAAC3U,GAAA,EAAM,CAAC5jE,KAAM05E,EAAYtlE,KAAMqlE,EAAYz6D,UAAU,yBAChCxsB,IAArB06B,EAASstD,SACR,0BAAKx7D,UAAU,YAAY4uB,MAAQ,gBAAe1gB,EAASstD,gBAMnE,GAAa,UAAT/mF,EAAkB,CACpB,MAAMm5C,ED7ML,SAAuBn5C,GAC5B,OAAKA,EACE8jF,GAAaxjE,IAAItgB,IACnB8jF,GAAaxjE,IAAItgB,EAAK+f,MAAM,KAAK,KACjC2kE,IAGiBsC,EAHYhnF,EAI3BgnF,EAAIjnE,MAAM,IAAI/b,QAAO,CAACijF,EAAUC,KAElCD,GAAY,GAAKA,EAAYC,EAAQC,WAAW,GAAM,GAAI,GANrBzC,GAAcx+E,SAHtC,UAMpB,IAAwB8gF,CAFxB,CCwMoBI,CAAc3tD,EAAS4tD,WAC/BC,EDpNL,SAAyBtnF,GAC9B,OAAKA,EACG,0CAAyCA,WAD/B,EAEpB,CCiNsBunF,CAAgB9tD,EAAS4tD,WACzC,OACE,0BAAK97D,UAAWs7D,EAAcC,wBAAyBhC,GAAS3qC,MAAQ,gBAAehB,KACrF,0BAAKoB,IAAK+sC,EAAS/7D,UAAU,aAAaivB,IAAI,KAGpD,CAEA,OACE,0BAAKjvB,UAAWs7D,EAActsC,IAAKitC,GAAQhtC,IAAI,IAEnD,CAaOitC,GAGP,CAUOC,IAhGP,WACE,GAAK/B,EACL,MAAa,UAAT3lF,EAEA,0BAAKurB,UAAU,iBACb,0BAAKA,UAAU,uBACZkO,EAAShrB,OAEZ,0BAAK8c,UAAU,0BACZkO,EAASkuD,UAKL,YAAT3nF,EAEA,0BAAKurB,UAAU,iBACb,0BAAKA,UAAU,uBAAuBtoB,EAAK,uBAC3C,0BAAKsoB,UAAU,2BACZq8D,EAAAA,GAAAA,IAAkB3kF,EAAMmiF,EAAY3hF,EAAQwwE,YAE7CoR,GAAa,0BAAK95D,UAAU,gBAAgB6wB,IAAK2jC,UAPzD,CAYF,CAwEK8H,GACG,IC/MV,IAAe7wC,EAAAA,EAAAA,KA1DY,IAIrB,IAJsB,QAC1BvzC,EAAO,iBACPqkF,EAAgB,aAChBvzD,GACD,EACC,MAAM,qBAAEm8B,IAAyB97B,EAAAA,EAAAA,MAC3BmzD,EAAOtkF,EAAQ2H,QAAQ28E,MACvB,MACJt5E,EAAK,YAAEsT,GACLgmE,EAEEC,EAAYxiF,QAAQ+uB,KAAiB0zD,EAAAA,EAAAA,GAAwBF,GAC7DG,EAAY1iF,QAAQ+uB,KAAiB4zD,EAAAA,EAAAA,IAAwBJ,GAC7DK,GAAexuC,EAAAA,GAAAA,GAASouC,GAAYF,GACpCO,GAAezuC,EAAAA,GAAAA,GAASsuC,GAAYJ,GAS1C,OACE,0BAAKv8D,UAAU,QACb,0BACEA,UAAU,UACV4uB,MAAQ,8BACRrB,QAZkB,KACtB4X,EAAqB,CACnBxrD,UAAWzB,EAAQ3D,GACnBw8B,OAAQ74B,EAAQogE,cAAe,GAAG,IAClC,IAUIukB,IAAiBC,GACjB,mBAAC7E,GAAA,EAAQ,CAACj4D,UAAU,6BAErB68D,GACC,0BACE78D,UAAU,kBACVgvB,IAAK6tC,EACL5tC,IAAK/rC,IAGR45E,GACC,4BACE98D,UAAU,kBACV4xD,aAAW,EACXF,OAAK,EACLqL,yBAAuB,EACvBC,UAAQ,EACRrL,MAAI,EACJ3iC,IAAK8tC,KAIX,0BAAK98D,UAAU,SAAS9c,KACtB0hC,EAAAA,EAAAA,IAAe1sC,IAAY,0BAAK8nB,UAAU,eAAexJ,GACvD,ICpDK,SAASymE,GAAkBC,GAiDxC,OAAOzxC,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACV,CAACl8C,EAAQkqF,KACP,MAAM,QAAEjlF,GAAYilF,EACpB,MAAO,CACLzc,gBAAgB/O,EAAAA,EAAAA,IAAqB1+D,GACrCw7D,YAAY2uB,EAAAA,EAAAA,IAAwBnqF,EAAQiF,EAAQ3D,IACrD,GANO46C,EAhDmDzD,IAC7D,MAAM,eACJg1B,EAAc,WACdjS,EAAU,QACVv2D,EAAO,WACPqiE,GACE7uB,GACE,uBAAE/sC,IAA2B0qB,EAAAA,EAAAA,MAE7Bg0D,GAAsB1sC,EAAAA,EAAAA,KAAaxsC,IACvCA,EAAEovC,kBACF50C,EAAuB,CAAEhF,UAAWzB,EAAQ3D,GAAImK,UAAWyF,GAAGk2C,UAAW,GACxE,CAAC17C,EAAwBzG,IAEtBolF,GAAW/uC,EAAAA,EAAAA,KAAQ,KACvB,MAAQgsB,WAAYgjB,EAAI,QAAEhwC,GAAY7B,EACtC,MAAO,IACFA,EACHg1B,iBACAjS,aACA8L,WAAY,IACPgjB,EACHpjD,EAAG,EACHc,EAAG,GAELsS,QAASmzB,OAAiBltE,EAAY+5C,EACvC,GACA,CAAC7B,EAAOg1B,EAAgBjS,IAE3B,OACE,0BACEzuC,WAAW0uB,EAAAA,GAAAA,GAAe,4BAA6B+f,GAAc,eACrE7f,MAAO2rB,EAAc,SAAQA,EAAWpgC,aAAaogC,EAAWt/B,OAAS,GACzEsS,QAASmzB,EAAiB2c,OAAsB7pF,GAE/CktE,GACC,0BAAK1gD,UAAU,0BACZyuC,GACC,wBAAGzuC,UAAU,iBAKnB,mBAACk9D,EAAqBI,GAClB,IAaZ,CC5DA,MAAME,GAAkBP,GAAkBQ,IACpCC,GAAkBT,GAAkBU,IA2G1C,IAAexuC,EAAAA,EAAAA,KACb,CAACl8C,EAAQ,KAA0B,IAA1B,MAAE83D,GAAO,EAChB,MAAM,OAAE33D,GAAW23D,EAAM+M,YACnBvmC,GAAQogB,EAAAA,EAAAA,IAAY1+C,GACpB2qF,GAAoBC,EAAAA,EAAAA,IAAwB5qF,EAAQG,GAC1D,MAAO,CACLm+B,QACAusD,YAAa7qF,EAAOoe,YAAYC,iBAChCssE,oBACD,GATL,EAxFyC,IAYnC,IAZoC,MACxC7yB,EAAK,oBACLke,EAAmB,kBACnB8U,EAAiB,aACjB/0D,EAAY,MACZiwC,EAAK,YACL2H,EAAW,YACXod,EAAW,aACXhH,EAAY,YACZ8G,EAAW,kBACXF,EAAiB,MACjBrsD,GACD,EACC,MAAM,qBAAE0sD,IAAyB50D,EAAAA,EAAAA,MAE3B60D,EAAanzB,EAAMhzD,SAAS4C,OAE5BwjF,GAAqBxtC,EAAAA,EAAAA,KAAaz4C,IACtC+lF,EAAqB,CAAE7qF,OAAQ8E,EAAQ9E,OAAQuG,UAAWzB,EAAQ3D,IAAK,GACtE,CAAC0pF,KAyDIp2E,MAAOu2E,EAAgBt2E,OAAQu2E,GAAoBL,EAAY9e,eAEvE,OACE,0BACEl/C,UAAU,QACV4uB,MAAQ,UAASwvC,gBAA6BC,QAE7CtzB,EAAMhzD,SAASC,KA9DpB,SAA4BE,EAAqBmY,GAC/C,MAAM,MAAEkZ,EAAK,MAAEqZ,IAAUC,EAAAA,EAAAA,IAAkB3qC,GAErC01E,EADakQ,GAAY9oE,EAAAA,EAAAA,IAAqB9c,KACjB+Y,UAC7B,WAAEspD,EAAU,MAAEC,GAAUwjB,EAAY1jB,OAAOjqD,GAG3Cs9D,GAAc2Q,EAAAA,EAAAA,KAAuBtiF,EAAAA,EAAAA,MAAa9D,GAClDi4E,GAAcoO,EAAAA,EAAAA,KAAuBviF,EAAAA,EAAAA,MAAa9D,GAExD,GAAIqxB,EAAO,CACT,MAAMskD,EAAuBkQ,IAE1B9kB,EAAQ5oD,IAAU6tE,EAAa,EAAIjkF,Q9B9DpC,E8B8D4CugE,G9B/D1C,E8B+DwEA,IAG5E,OACE,mBAACgjB,GAAe,CACdjpF,GAAK,gBAAcuyE,EAAAA,EAAAA,IAAiB5uE,EAAQ3D,MAC5C2D,QAASA,EACTguE,8BAA+B+C,EAC/B0E,YAAaA,EACbE,qBAAsBA,EACtBD,eAAgBA,EAChBrT,WAAYA,EACZqG,YAAaA,EACbrzB,QAASypC,EACTjJ,eAAgBoQ,EAChBrQ,cAAe8P,EAAkBxgF,SAASlF,EAAQ3D,IAClDg9B,MAAOA,GAGb,CAAO,GAAIqR,EACT,OACE,mBAAC86C,GAAe,CACdnpF,GAAK,gBAAcuyE,EAAAA,EAAAA,IAAiB5uE,EAAQ3D,MAC5C2D,QAASA,EACTguE,8BAA+B+C,EAC/B0E,YAAaA,EACbwC,YAAaA,EACbvC,eAAgBA,EAChB5kD,aAAcA,EACduxC,WAAYA,EACZqG,YAAaA,EACbrzB,QAASypC,EACTjJ,eAAgBoQ,EAChBrQ,cAAe8P,EAAkBxgF,SAASlF,EAAQ3D,IAClDg9B,MAAOA,GAMf,IAUQ,ICxFV,IAAIitD,GAEJ,MA4LA,GA5LiC,IAM3B,IAN4B,QAChCtmF,EAAO,oBACP+wE,EAAmB,YACnB0E,EAAW,aACX3kD,EAAY,cACZ8kD,GACD,EAEC,MAAMj9B,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7BkvC,GAAqBlvC,EAAAA,EAAAA,IAAuB,MAE5CmvC,GAAYnvC,EAAAA,EAAAA,IAAyB,MAErC3M,EAAQ1qC,EAAQ2H,QAAQ+iC,MAExB2kC,GAAiBd,EAAAA,GAAAA,IAAkB51B,EAAKo4B,IAEvCgF,EAAeC,IAAoBzhC,EAAAA,EAAAA,IAASkhC,GAC7CQ,EAAal0E,QAAQg0E,GAAiB1G,GAAkBv+C,IACxD,UAAE0hC,EAAS,aAAE0jB,IAAiBC,EAAAA,GAAAA,IAClC9oB,EAAAA,EAAAA,IAAoBrtD,EAAS,WAC5Bi2E,GACDY,EAAAA,EAAAA,IAAsB72E,EAAS,UAC/B8wB,IAGMolD,aAAcU,IAAqBT,EAAAA,GAAAA,IACzC9oB,EAAAA,EAAAA,IAAoBrtD,EAAS,aAC5B41E,EACDhzC,EAAAA,GAAAA,QACA9R,IAGK2nD,EAAeC,IAAmBjhC,EAAAA,GAAAA,KAEnC6+B,GADWv0E,SAAQwzE,EAAAA,EAAAA,IAA4Bv1E,KACxBy4E,EACvBlC,EAAWlB,GAAwBr1E,EAASs2E,GAC5CE,GAAkBC,EAAAA,GAAAA,IAAoBH,GAEtCS,EAAkBhB,IAAkB0C,GAAkB7C,EACtDsB,GAAiD,KAA/BxZ,EAAAA,GAAAA,GAAYqY,IAGlCzzB,aAAcmkC,EACdjkC,qBAAsB40B,IACpB30B,EAAAA,GAAAA,GAAkBs0B,OAAgBz7E,EAAW47E,IAE1ChH,EAAawW,IAAkBnyC,EAAAA,EAAAA,KAAkB,IACjDx7B,EAAU4tE,IAAepyC,EAAAA,EAAAA,IAAiB,IAEjDxB,EAAAA,EAAAA,KAAU,KACR,IAAKm9B,EACH,OAGF,MAAM0W,EAAYC,GAAAA,GAA4B,EAExC1J,EAA0C,GAAzByJ,EADL,GACkC3+E,KAAKm1E,GACnDG,EAAmBJ,EAAgBpkE,EAAWokE,EAE9C2J,EAAWN,EAAUx+D,QACrB++D,EAAoBR,EAAmBv+D,QACvCqzD,EAAQ0L,EAAkBx6B,kBAE3B8uB,EAUFA,EAAM9uB,kBAAiCue,aAAa,oBAAqByS,EAAiB/6E,YAT3FukF,EAAkBl6B,UAAa,yBACfg6B,GAAAA,iBAAwCA,GAAAA,iCACtCD,UAAkBA,SAAiBA,EAXrC,kEAYeA,MAAcA,sCACnBzJ,KAAiBA,sCAChBA,mCAO7BwJ,EAAYG,EAASzN,YAAcyN,EAASz0B,SAAS,GACpD,CAAC6d,EAAan3D,IAEjB,MAAMiuE,EAAajlF,QAAQywD,GAAa6c,GAElC4X,GAAcxuC,EAAAA,EAAAA,KAAY,KACzB+tC,EAAUx+D,UAIf0+D,GAAe,GACfC,EAAY,IACZhT,EAAAA,GAAAA,GAAS6S,EAAUx+D,UAEnBk/D,EAAAA,EAAAA,KAAQ,KACNX,EAAmBv+D,QAAS6kC,UAAY,EAAE,IAC1C,GACD,IAEGs6B,GAAiB1uC,EAAAA,EAAAA,KAAY,KACjC6tC,OACAA,GAAeW,CAAW,GACzB,CAACA,IAEEnyB,GAAcrc,EAAAA,EAAAA,KAAY,KAC9B,IAAK+Z,EAGH,YAFAwjB,GAAkBuB,IAAeA,IAKnC,GAAI3B,EAEF,YADAzkD,EAAAA,EAAAA,MAAamoD,2BAA2B,CAAEt5E,YAI5C,MAAM8mF,EAAWN,EAAUx+D,QACvBkoD,EACE4W,EAASM,SACXzT,EAAAA,GAAAA,GAASmT,IACTO,EAAAA,GAAAA,OAEAP,EAAS3gE,SAGXghE,IAEAL,EAAS3gE,QACT2gE,EAASzN,YAAc,GACvB1F,EAAAA,GAAAA,GAASmT,IACTO,EAAAA,GAAAA,MAEAX,GAAe,GACjB,GACC,CAACS,EAAgBjX,EAAa0F,EAAepjB,EAAWxyD,IAErDo5E,GAAmB3gC,EAAAA,EAAAA,KAAaxsC,IACpC,MAAM66E,EAAW76E,EAAEy+D,cAEnBic,EAAYG,EAASzN,YAAcyN,EAASz0B,SAAS,GACpD,IAEH,OACE,0BACE1Z,IAAKA,EACL7wB,UAAU,yBACVutB,QAASyf,GAERtC,GACC,0BAAK1qC,UAAU,iBACb,mBAACyxD,GAAA,EAAc,CACb9H,QAASuV,EACTruC,IAAK6tC,EACL1vC,IAAK0b,EACL1qC,UAAU,aACVnY,MAAOk3E,GAAAA,GACPj3E,OAAQi3E,GAAAA,GACR/B,UAAQ,EACRD,yBAAuB,EACvBrL,OAAQtJ,EACRuJ,MAAOvJ,EACPwJ,aAAW,EACX7G,QAAS3C,EAAc+W,OAAc3rF,EACrCq+E,aAAczJ,EAAckJ,OAAmB99E,EAC/Cs+E,QAASlB,KAIf,6BACE//B,IAAK49B,EACLzuD,WAAW0uB,EAAAA,GAAAA,GAAe,YAAaggC,GACvC9/B,MAAQ,UAASmwC,GAAAA,iBAAwCA,GAAAA,SAE3D,0BAAK/+D,UAAU,WAAW6wB,IAAK4tC,IAC9BE,GACC,0BAAK3+D,UAAY,iBAAgBsvD,KAC/B,mBAACW,GAAA,EAAe,CAACh/D,SAAU68D,EAAgBgB,EAAmBV,MAGhE1jB,IAAcujB,GACd,wBAAGjuD,UAAU,kBAEf,0BAAKA,UAAU,0BACZooD,GAAc4J,EAAAA,GAAAA,IAAoB0M,EAAUx+D,QAASqxD,cAAeS,EAAAA,GAAAA,IAAoBpvC,EAAM2nB,YAC5F6d,GAAesW,EAAUx+D,QAASo/D,SAAW,wBAAGt/D,UAAU,gBAE3D,ECjKV,GAhDoC,IAA0B,IAAzB,QAAE9nB,EAAO,QAAEq1C,GAAS,EACvD,MAAM71C,GAAO81C,EAAAA,GAAAA,KAyBb,OACE,0BAAKxtB,UAAU,iBACZ9nB,EAAQogE,cAAetgE,KAAKklE,GAC3B,0BAAKl9C,UAAU,OACZk9C,EAAIllE,KAAK+4B,GACR,mBAACgd,GAAA,EAAM,CACLC,KAAK,OACL8C,QAAM,EACNod,SAA0B,gBAAhBn9B,EAAOt8B,KAEjB84C,QAAS,IAAMA,EAAQ,CAAE5zC,UAAWzB,EAAQ3D,GAAIw8B,YAEhD,2BAAM/Q,UAAU,uBAAsB6mC,EAAAA,GAAAA,GAAWnvD,EAAKq5B,EAAOx6B,QAnCrDw6B,KAClB,MAAM,KAAEt8B,GAASs8B,EACjB,OAAQt8B,GACN,IAAK,MACH,IAAK2lB,EAAAA,IAAAA,KAAiB2W,EAAOjqB,KAC3B,OAAO,wBAAGkZ,UAAU,qBAEtB,MAEF,IAAK,UACH,OAAO,wBAAGA,UAAU,qBACtB,IAAK,MACL,IAAK,UACH,OAAO,wBAAGA,UAAU,cACtB,IAAK,kBACH,OAAO,wBAAGA,UAAU,sBACtB,IAAK,UACL,IAAK,gBACH,OAAO,wBAAGA,UAAU,gBAER,EAgBLw/D,CAAWzuD,SAKhB,ECqCV,IAAe0a,EAAAA,EAAAA,KA5EqB,IAG9B,IAH+B,WACnC/jB,EAAU,SACVwmC,GACD,EACC,MAAM,aAAEuxB,IAAiBp2D,EAAAA,EAAAA,MAEnB3xB,GAAO81C,EAAAA,GAAAA,MACP,SACJn6C,EAAQ,OAAED,EAAM,cAAEipB,EAAa,cAAEthB,EAAa,uBAAEqc,EAAsB,iBAAEsoE,EAAgB,gBAAEx3D,GACxFR,EAEEslC,GAAcrc,EAAAA,EAAAA,KAAY,KAC9B8uC,EAAa,CAAElrF,GAAInB,EAAQC,WAAU60B,mBAAkB,GACtD,CAACu3D,EAAcrsF,EAAQC,EAAU60B,IAE9By3D,GAAiBpxC,EAAAA,EAAAA,KAAQ,KAC7B,IAAKmxC,GAAkB/kF,OACrB,OAIF,MAAQkU,OAASM,KAAM+1D,GAAa3jE,OAAS4N,KAAMoiC,KAAgBv1C,EAAAA,EAAAA,MAEnE,OAAO0jF,EAAiB1nF,KAAK45B,IACpB1E,EAAAA,EAAAA,IAAS0E,GAAUszC,EAAUtzC,GAAU2f,EAAU3f,KACvD35B,OAAOgC,QAAQ,GACjB,CAACylF,IAEJ,QAAsBlsF,IAAlB6oB,EACF,OAoBF,MAAMujE,EAAY3lF,QAAQmd,GAA0Brc,GAAiBqc,EAAyBrc,GAExF8kF,EAAexjE,EAAiB3kB,EAAK,WAAY,wBAAoBlE,EAAW6oB,GACnF7H,MAAM,KACNxc,KAAKyM,GACU,mBAANA,EAAyB,mBAACqkE,GAAA,EAAe,CAACvyE,MAAM21C,EAAAA,GAAAA,IAAqB7vB,KAAqB5X,SAElGjR,EAEJ,OACE,0BACE,YAAU04C,EAAAA,GAAAA,IAAqB7vB,GAC/B2D,WAAW0uB,EAAAA,GAAAA,GAAe,gBAAiBkxC,GAAa,aAAc1xB,GAAY,YAClFzgB,IAAK/1C,EAAKg2C,MAAQ,MAAQ,MAC1BH,QAASyf,GAET,wBAAGhtC,UAAU,4BACV2/D,GAA4C,IAA1BA,EAAehlF,SAAiB,wBAAGqlB,UAAU,kBAhClE2/D,GAAkBA,EAAehlF,OAAS,GACxC,0BAAKqlB,UAAU,kBAAkBytB,IAAK/1C,EAAKg2C,MAAQ,MAAQ,OACxDiyC,EAAe3nF,KAAKod,GACnB,mBAACwvD,GAAA,EAAM,CACLp8B,IAAKpzB,EAAK7gB,GACVy5C,KAAK,QACL54B,MAAM8X,EAAAA,EAAAA,IAAS9X,EAAK7gB,IAAM6gB,OAAkB5hB,EAC5CwN,MAAOksB,EAAAA,EAAAA,IAAS9X,EAAK7gB,SAAwBf,EAAlB4hB,OA2BnC,0BAAK4K,UAAU,QAAQytB,IAAI,QACxBpxB,EAAgBwjE,EAAenoF,EAAK,kBAEvC,wBAAGsoB,UAAU,cACT,I,4BC9FV,UAAgB,KAAO,uBAAuB,kBAAkB,uBAAuB,cAAgB,uBAAuB,gBAAgB,uBAAuB,aAAe,uBAAuB,OAAS,uBAAuB,UAAY,wBCkCjP8/D,GAAmB,IAAMjmD,GAAAA,GACzBkmD,GAAc,IAAMlmD,GAAAA,GA0H1B,IAAe4R,EAAAA,EAAAA,KAxH6B,IAMtC,IANuC,SAC3C9P,EAAQ,eACRqkD,EAAc,gBACd7qF,EAAe,mBACf6lC,EAAkB,oBAClBiuC,GACD,EACC,MAAM,mBAAEgX,IAAuB52D,EAAAA,EAAAA,MAGzBwnB,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7BuI,EAAW,eAAgBnc,EAE3BhB,GAAoB4T,EAAAA,EAAAA,KAAQ,IAChCvT,GAAoB58B,MAAM6+B,IAAMV,EAAAA,EAAAA,IAAeU,EAAEtB,SAAUA,MAC1D,CAACX,EAAoBW,IAClBukD,EAAevlD,GAAmBI,YAAYxmC,GAE9C4kB,GAAcgnE,EAAAA,GAAAA,GAAeroC,EAAWnc,EAASj3B,gBAAalR,GAE9D4sF,GAAmB7xC,EAAAA,EAAAA,KAAQ,KAC/B,IAAKuJ,EAAU,OAAOnd,GAAmBC,iBAAiBrmC,GAE1D,IAAK4kB,EAAa,OAClB,MAAMknE,EAAarlD,GAAoB58B,MAAMkiF,GAAcA,EAAU3kD,SAASF,WAAatiB,EAAYpgB,SACnG6hC,iBAAiBrmC,GACrB,OAAO8rF,CAAU,GAChB,CAAC1lD,EAAmBK,EAAoB7hB,EAAa2+B,IAElDyoC,GAAWhyC,EAAAA,EAAAA,KAAQ,KACvB,GAAI6xC,EACF,OAAOA,EAGT,IAAKJ,GAAgB17E,SACnB,OAGF,MAAM,SAAEA,GAAa07E,EAGrB,OAAO17E,EAFanE,KAAKG,MAAMH,KAAKwZ,SAAWrV,EAAS3J,SAE3BpG,EAAE,GAC9B,CAAC6rF,EAAkBJ,IAEhBzY,GAAiBd,EAAAA,GAAAA,IAAkB51B,EAAKo4B,GAExCuX,EAAsBN,GAAiB,UAASA,IAChDtW,EAAkB2W,GAAa,UAASA,IAExCE,GAAsBpyC,EAAAA,GAAAA,GAASmyC,GAAsBN,GACrDQ,GAAkBryC,EAAAA,GAAAA,GAASu7B,GAAkB2W,GAE7CI,GAAiBpyC,EAAAA,EAAAA,KAAQ,IAC7Bp5C,GAAiBiJ,MAAMg/B,IAAWb,EAAAA,EAAAA,IAAea,EAAOzB,SAAUA,MACjE,CAACxmC,EAAiBwmC,IAEfujD,EAAajlF,QAAQ0mF,IAAmB7oC,GAAY2oC,IAAwBC,IAEhFlmC,aAAcomC,EACdlmC,qBAAsBmmC,IACpBlmC,EAAAA,GAAAA,GAAkBukC,OAAY1rF,GAAW,EAAM,QAE7CstF,GAAcnwC,EAAAA,EAAAA,KAAY,KACzBgwC,GAAgBhnF,WACrBsmF,EAAmB,CAAEtmF,UAAWgnF,EAAehnF,UAAWgiC,YAAW,GACpE,CAACglD,GAAgBhnF,UAAWgiC,EAAUskD,KAElCc,EAAmBC,EAAqBC,IAAyBtxC,EAAAA,GAAAA,KAClEuxC,IAAsBppC,GAAconC,GAAe6B,GAEnD/gE,GAAY0uB,EAAAA,GAAAA,GAChBI,GAAAA,KACA8xC,GAAyB9xC,GAAAA,UACzBgJ,GAAYhJ,GAAAA,eAGd,OACE,0BAAK9uB,UAAWA,EAAW6wB,IAAKA,GAC7BqwC,GAAsB,mBAACC,GAAA,EAAmB,CAACxlD,SAAUA,EAAUX,mBAAoBA,IACnF8c,GACC,mBAACjJ,GAAA,EAAW,CACVnqC,WAAYi3B,EAASj3B,WACrBsb,UAAW8uB,GAAAA,YACXq3B,8BAA+B8C,IAGlC2X,GACC,sCACE,mBAAChW,GAAA,EAAe,CACdpiC,IAAK+3C,EACLvgE,WAAW0uB,EAAAA,GAAAA,GAAeI,GAAAA,OAAe+xC,GACzC7yC,KAAM+xC,GACNlV,OAAQ6V,EACR1Z,KAAMO,EACNN,QAAM,EACNttB,uBAAqB,EACrBoxB,QAAS+V,IAEVhpC,GACEsoC,GAAoB7Y,GAAkB,mBAAC,GAAiB,CAAC5rC,SAAUA,IAEpE,mBAACivC,GAAA,EAAe,CACdpiC,IAAK03C,EACLlgE,WAAW0uB,EAAAA,GAAAA,GAAeI,GAAAA,aAAqB+xC,GAC/C7yC,KAAM8xC,GACNjV,OAAQ4V,EACRzZ,KAAMO,EACNN,QAAM,EACNttB,uBAAqB,EACrBynC,OAAQJ,EACRjW,QAASkW,KAKb,ICrEV,IAAex1C,EAAAA,EAAAA,KAxDV,IAQC,IARA,SACJ9P,EAAQ,QACRzjC,EAAO,gBACP/C,EAAe,mBACf6lC,EAAkB,mBAClBqmD,EAAkB,eAClBrB,EAAc,oBACd/W,GACD,EACC,MAAM,eAAEntC,IAAmBzS,EAAAA,EAAAA,OACrB,gBAAE6T,GAAoBhlC,EAAQwkC,UAE9B4kD,GAAiB/yC,EAAAA,EAAAA,KAAQ,KAC7B,IAAK8yC,IAAuBnkD,EAC1B,OAIF,MAAMgoC,GAAYlpE,EAAAA,EAAAA,MAAY6S,MAAMM,KAEpC,OAAO+tB,EACJjlC,QAAQspF,IAAmBhlD,EAAAA,EAAAA,IAAeglD,EAAe5lD,SAAUA,EAASA,YAC5E3jC,KAAKupF,GAAmBrc,EAAUqc,EAAel/E,UACjDpK,OAAOgC,QAAQ,GACjB,CAAC0hC,EAASA,SAAUuB,EAAiBmkD,IAElCr0B,GAAcrc,EAAAA,EAAAA,KAAY,KAC9B7U,EAAe,CACbH,SAAUA,EAASA,SACnBvoC,OAAQ8E,EAAQ9E,OAChBuG,UAAWzB,EAAQ3D,IACnB,GACD,CAAC2D,EAASyjC,EAAUG,IAEvB,OACE,mBAACiS,GAAA,EAAM,CACL/tB,WAAW0uB,EAAAA,GAAAA,IAAe5R,EAAAA,EAAAA,IAAiBnB,IAAa,UACxDqS,KAAK,OACLT,QAASyf,GAET,mBAAC,GAAqB,CACpB73D,gBAAiBA,EACjBwmC,SAAUA,EAASA,SACnBX,mBAAoBA,EACpBglD,eAAgBA,EAChB/W,oBAAqBA,IAEtBqY,GAAgB3mF,OACf,0BAAKqlB,UAAU,WACZshE,EAAetpF,KAAKod,GAAS,mBAACwvD,GAAA,EAAM,CAACxvD,KAAMA,EAAM44B,KAAK,aAEvD,mBAAC86B,GAAA,EAAe,CAACvyE,MAAM21C,EAAAA,GAAAA,IAAqBvQ,EAAS3kB,SAClD,IChBb,IAAey0B,EAAAA,EAAAA,KArCiB,IAU1B,IAV2B,QAC/BvzC,EAAO,UACPspF,EAAS,SACTtmB,EAAQ,gBACR/lE,EAAe,mBACf6lC,EAAkB,aAClBymD,EAAY,eACZzB,EAAc,oBACd/W,EAAmB,iBACnByY,GACD,EACC,MAAM1/D,GAAausB,EAAAA,EAAAA,KAAQ,IACzBr2C,EAAQwkC,UAAWz6B,QAAQxJ,QAAO,CAACC,EAAKijC,IAAajjC,EAAMijC,EAAS3kB,OAAO,IAC1E,CAAC9e,IAEJ,OACE,0BACE8nB,WAAW0uB,EAAAA,GAAAA,GAAe,YAAa8yC,GAAa,cACpD5yC,MAAOssB,EAAY,cAAaA,WAAe1nE,GAE9C0E,EAAQwkC,UAAWz6B,QAAQjK,KAAK2jC,GAC/B,mBAAC,GAAc,CACb6M,KAAKm5C,EAAAA,EAAAA,IAAqBhmD,EAASA,UACnCA,SAAUA,EACVzjC,QAASA,EACT/C,gBAAiBA,EACjB6lC,mBAAoBA,EACpBqmD,mBAAoBr/D,GA7BH,IA6BwC0/D,EACzD1B,eAAgBA,EAChB/W,oBAAqBA,MAGxBwY,EACG,IC0BV,IAAeh2C,EAAAA,EAAAA,KAlEwB,IAIjC,IAJkC,UACtCzB,EAAS,QACT9xC,EAAO,OACP9E,GACD,EACC,MAAM,4BAAEwuF,IAAgCv4D,EAAAA,EAAAA,MAElC3xB,GAAO81C,EAAAA,GAAAA,MACP,WAAEztC,EAAU,QAAE4qC,EAAO,OAAEp0B,GAAWyzB,EAClC63C,EAAsB,WAAXtrE,EACXurE,EAAyB,SAAXvrE,IAAsBxW,EAEpCgiF,GAAapxC,EAAAA,EAAAA,KAAY,KAC7BixC,EAA4B,CAAEj3C,UAAStoC,OAAQjP,GAAS,GACvD,CAACA,EAAQu3C,EAASi3C,IAEfI,GAAazzC,EAAAA,EAAAA,KAAQ,IACrB5D,EACEm3C,EAAoB,mCACpBD,EAAiB9hF,EAAa,iCAAmC,iCAE9DA,EAAa,2BAA6B,2BAE7C+hF,EAAoB,8BACpBD,EAAiB9hF,EAAa,4BAA8B,4BAEzDA,EAAa,sBAAwB,uBAE7C,CAAC+hF,EAAaD,EAAU9hF,EAAY4qC,IAEjC4f,GAAWhc,EAAAA,EAAAA,KAAQ,IAChBvE,EAAUugB,UAAW03B,EAAAA,GAAAA,IAAmBvqF,EAAMsyC,EAAUugB,eAAY/2D,GAC1E,CAACkE,EAAMsyC,EAAUugB,WAEd23B,GAAgBnZ,EAAAA,GAAAA,IAAWrxE,EAAqB,IAAfQ,EAAQyH,MAC/C,OACE,0BAAKqgB,UCxDc,wBDyDjB,mBAAC+tB,GAAA,EAAM,CACLC,KAAK,UACLJ,MAAM,cACN9iC,OAAK,EACLgmC,QAAM,EACNvD,QAASw0C,EACT/hE,UC/D+C,uBDgE/CkuC,UAAWnkB,EAAAA,GACXiK,UAAWt8C,EAAKqI,EAAa,YAAc,aAE3C,wBAAGigB,UAAW2qB,EAAU,sBAAwB,gBAElD,0BAAK3qB,UCrE0E,wBDsE7E,0BAAKA,UCtEwG,wBDsE7EtoB,EAAKsqF,IACrC,0BAAKhiE,UCvEuO,wBDwE1O,wBACEA,WAAW0uB,EAAAA,GAAAA,GACT,mBC1EsI,uBD0EpGmzC,GC1EsK,wBD0E1I9hF,GC1E0G,0BD6E5K,2BAAMigB,UC7EsQ,wBD8EzQuqC,EAAW7yD,EAAK,0BAA2B,CAACwqF,EAAe33B,IAAa23B,KAI3E,I,+EE5DV,MAAMC,GAAkB,MAAQtoD,GAAAA,GAwBhC,IAAe4R,EAAAA,EAAAA,KAtBiB,IAI1B,IAJ2B,MAC/Bv0B,EAAK,UACL8I,EAAS,QACTutB,GACD,EACC,MAAM71C,GAAO81C,EAAAA,GAAAA,KACb,OACE,0BACExtB,WAAW0uB,EAAAA,GAAAA,GChCM,uBDgCsB1uB,GACvC4uB,MAAQ,qCAAmCwzC,EAAAA,GAAAA,IAAyBlrE,GAAOmrE,cAC3E90C,QAASA,GAERr2B,EACG,mBAACorE,GAAA,EAAS,CAACprE,MAAOA,EAAO82B,KAAMm0C,KAC/B,0BAAKnzC,IAAKuzC,GAAUtzC,IAAI,KAC3B/3B,GAAOhU,OAAQ2jD,EAAAA,GAAAA,GAAW3vC,EAAMhU,OAASxL,EAAK,WAC9Cwf,GAAO0hB,UAAY,wBAAG5Y,UAAU,cACjC,wBAAGA,UAAU,cACT,IEuNJwiE,GAAe,CAAEhJ,OAAQ,kvBAEzBiJ,GAAmB,CAAEjJ,OAAQ,qvBAG7BkJ,GAAsB,KAAO7oD,GAAAA,GAC7B8oD,GAA4B,KAAO9oD,GAAAA,GA0+BzC,IAAe4R,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQkqF,KACP,MAAM,eACJ3rB,EAAc,gBAAEj8D,EAAe,gBAAEJ,EAAe,wBAAEomC,IAChDtnC,EAAAA,EAAAA,IAAehB,IACb,aAAE+1B,GAAiB/1B,GACnB,QACJiF,EAAO,MAAE6yD,EAAK,eAAE63B,EAAc,WAAEC,EAAU,SAAExvF,EAAQ,gBAAEoE,EAAe,sBAAEqrF,EAAqB,eAAEC,GAC5F5F,GACE,GACJ5oF,EAAE,OAAEnB,EAAM,SAAEgU,EAAQ,cAAE47E,EAAa,iBAAElwE,EAAgB,WAAE/S,EAAU,kBAAEqc,EAAiB,YAAE+7C,EAAW,gBACjGp/C,GACE7gB,EAEE8I,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1Bw+D,GAAiBC,EAAAA,EAAAA,IAAqB5+D,EAAQG,GAC9C6vF,GAAgBC,EAAAA,EAAAA,IAAqB9vF,GACrC4vD,EAAYhiD,IAAQowD,EAAAA,EAAAA,IAAcpwD,GAClC+8B,EAAU/8B,IAAQmiF,EAAAA,EAAAA,IAAYniF,GAC9BoiF,EAAgBpiF,GAAMiyB,UAEtBowD,EAAe9tF,EAAgBiC,YAAcjC,EAAgBiC,WAAW4F,SAAS7I,GACjF+uF,GAAmB1xB,IAAkB2xB,EAAAA,EAAAA,IAAsBrrF,GAC3DsrF,EAAgBZ,GAAkBC,GAAcS,EAChD3qF,GAASC,EAAAA,EAAAA,IAAa3F,EAAQiF,GAC9BurF,GAAepxB,EAAAA,EAAAA,IAAsBp/D,EAAQiF,GAC7C66B,EAAY3rB,GAAWiO,EAAAA,EAAAA,IAAWpiB,EAAQmU,QAAY5T,EACtDkwF,EAAoB/qF,GAAQpE,IAAMwpC,EACpC/8B,EAAKuY,UAAUuoB,mBAAmBnpC,GAAQpE,SAC1Cf,EAEEmwF,EAAqBtwF,GAAWqe,EAAAA,EAAAA,IAAyBze,EAAQG,EAAQC,QAAYG,EACrFowF,EAAc1rF,EAAQ3D,KAAOovF,EAE7BE,EAAkB/wE,IAAqB6wE,EACvC9wE,EAAeC,IAAqB+wE,GACtC38E,EAAAA,EAAAA,IAAkBjU,EAAQgwF,GAAiBD,EAAgBA,EAAgB5vF,EAAQ0f,QACnFtf,EACEswF,EAAqBjxE,IAAgBkxE,EAAAA,EAAAA,IAAkB9wF,EAAQ4f,EAAc5Y,QAAQk+D,IACrF6rB,EAA6D,gBAAvCnxE,GAAchT,QAAQ4H,QAAQhT,KAEpDm5E,GAAiBqW,EAAAA,EAAAA,IAAqBhxF,EAAQiF,GAC9C6nE,EAAgC,WAApBtoE,IAChBszD,EACIA,EAAMhzD,SAASskC,MAAM/jB,IAAMitD,EAAAA,EAAAA,IAAuBtyE,EAAQqlB,MAC1DitD,EAAAA,EAAAA,IAAuBtyE,EAAQiF,KAInCmF,UAAW2iE,EAAgB/jE,YAAagkE,EAAgB,oBAAEtjE,GACvDojE,GAAavO,GAAmB,CAAC,GAE9B39D,MAAOqwF,IAActgE,EAAAA,EAAAA,IAAwB3wB,IAAW,CAAC,EAE3DkxF,GAAcC,EAAAA,EAAAA,IAA6BlsF,GAC3CmsF,GAAgBF,IAAejY,EAAAA,EAAAA,IAAoBj5E,EAAQkxF,GAAeA,OAAc3wF,EACxF8wF,IAAsBC,EAAAA,EAAAA,IAA4BrsF,GAExD,IAAIu2D,GAEFA,GADE1D,GAAOhzD,SACIgzD,EAAMhzD,SAASysF,OAAM,QAAGjwF,GAAIoF,GAAW,SAAKyjF,EAAAA,EAAAA,IAAwBnqF,EAAQ0G,EAAU,KAEtFyjF,EAAAA,EAAAA,IAAwBnqF,EAAQsB,GAG/C,MAAM,SAAEosE,IAAkC,WAApBlpE,IAAgCU,EAAAA,EAAAA,IAA4BlF,EAAQiF,EAAS7E,IAAc,CAAC,EAC5Gy6E,IAAgB2W,EAAAA,EAAAA,IAAoBxxF,EAAQiF,GAC5CwsF,GAA0BtoE,GAC5BthB,EAAAA,EAAAA,IAAiB7H,EAAQmpB,EAAkBhpB,OAAQgpB,EAAkB/oB,WAAa+oB,OAClF5oB,EAEEuoC,GAAoB9hC,QAAQ/B,EAAQsE,aAAetE,EAAQ8jC,UAC3DC,GAA8BF,IAChCr+B,EAAAA,EAAAA,IAA0BzK,EAAQG,EAAQ8E,EAAQsE,WAAa,QAC/DhJ,EACEmxF,GAAkB5oD,GACtB+mD,GAAwB57E,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ6oC,SAAgCzoC,EACxF0E,EAEE0sF,GAAoB5jF,GAAM28B,iBAAiBvgC,SAASlF,EAAQ3D,IAE5DswF,GAAexxF,IAAamB,EAAAA,IAAkBwM,GAAMtL,SAAWqtF,EAC/D+B,GAAeD,IAAgB/gD,EAAAA,EAAAA,IAAuB7wC,EAAQiF,IAAY8I,GAAMmK,SAAS45E,EAAAA,UAC3FvxF,EAEEwxF,GAAa/qF,SAAQ0/E,EAAAA,EAAAA,IAAmBzhF,IACxC+sF,IAAmBC,EAAAA,EAAAA,IAAuBjyF,EAAQG,GAClD+xF,IAA+BrkF,EAAAA,EAAAA,IAAmC7N,EAAQG,EAAQ8E,EAAQ3D,IAEhG,MAAO,CACLg9B,OAAOogB,EAAAA,EAAAA,IAAY1+C,GACnBmwF,gBACAE,kBACAE,gBACAC,eACA1wD,YACA8wD,gBAAiBA,GAAmBG,EACpCJ,cACA/wE,eACAixE,qBACA/nD,qBACA6kC,aAAawkB,EAAAA,EAAAA,IAAyBnyF,EAAQiF,GAC9CmtF,iBAAiBC,EAAAA,EAAAA,IAAsBryF,EAAQG,GAC/C2sE,YACAsjB,eACAsB,mBACA/yB,iBACAqxB,gBACAjgC,YACAjlB,UACA4iC,YACA33C,eACAk7D,YACAG,iBACAC,uBACA5jB,gBAAgB/O,EAAAA,EAAAA,IAAqB1+D,GACrCw7D,cACA82B,gBACEtrF,QAAQ/B,EAAQsE,aACZtE,EAAQ8jC,YACTwpD,EAAAA,EAAAA,IAA8BvyF,EAAQG,EAAQ8E,EAAQsE,WAE3DnJ,WACAy6E,iBACA2X,aAAkC,WAApBhuF,EACd8kF,kBAAkB+B,EAAAA,EAAAA,IAAuBrrF,EAAQiF,GACjDwtF,kBAAkBnH,EAAAA,EAAAA,IAAuBtrF,EAAQiF,GACjDytF,sBAAuB1yF,EAAO+U,SAASC,MAAM09E,sBAC7CC,oBAAoBC,EAAAA,EAAAA,IAAyB5yF,GAC7CmpB,kBAAmBsoE,GACnB1pD,mBAAoB/nC,EAAO+nC,mBAC3BsC,iBAAiBzB,EAAAA,EAAAA,IAAe3jC,QAAW1E,GAAYooC,EAAAA,EAAAA,IAAsB3oC,EAAQG,GACrF+B,gBAAiBwvF,IAAmBxvF,EAAgBwvF,GAAgBpwF,IACpEgnC,0BACAqpD,qBACAkB,oBAAoCtyF,IAApBulB,GAAiC9lB,EAAOi0C,eAAenuB,IAAkBgD,UACzFgqE,qBAAqCvyF,IAApBulB,EAAgC9lB,EAAOi0C,eAAenuB,IAAkBxiB,UAAO/C,EAChGusB,WAAW/H,EAAAA,EAAAA,IAA2B/kB,GACtC8U,eAAgB9U,EAAO+U,SAASC,MAAMF,eACtC27E,oBACAoB,gBACA9E,eAAgB/sF,EAAOssB,oBACvBslE,gBACAI,oBACAe,uBAAwB/yF,EAAO+U,SAASC,MAAMg+E,aAC9Cd,oCACK3B,GAAiBwB,KAAe,CAAErsF,aACnCoH,GAAc,CAAE8nE,gBAAgBqe,EAAAA,EAAAA,IAAqBjzF,EAAQiF,EAA6B,cAApBT,OAC5C,iBAAnBm2E,GAA+B,CAAEA,qBACxC7N,GAAa,CAAEC,iBAAgBC,mBAAkBtjE,uBACtD,GAtJewyC,EAt+BuB,IA6ErC,IA7EsC,QAC1Cj3C,EAAO,cACPkrF,EAAa,6BACb+C,EAA4B,8BAC5BjgB,EAA6B,8BAC7BC,EAA6B,MAC7Bpb,EAAK,UACLiO,EAAS,WACT6pB,EAAU,eACVD,EAAc,WACdwD,EAAU,UACVpe,EAAS,gBACTnC,EAAe,eACfkd,EAAc,UACdhjE,EAAS,cACTsmE,EAAa,uBACbC,EAAsB,sBACtBxD,EAAqB,eACrBgD,EAAc,gBACdC,EAAe,aACfjgB,EAAY,MACZv0C,EAAK,gBACL+xD,EAAe,OACf3qF,EAAM,cACN6qF,EAAa,aACbC,EAAY,UACZ1wD,EAAS,YACT6wD,EAAW,gBACXC,EAAe,aACfhxE,EAAY,mBACZixE,EAAkB,eAClBjc,EAAc,eACd+F,EAAc,kBACd7xC,EAAiB,YACjB6kC,EAAW,gBACXykB,EAAe,UACftlB,EAAS,eACTC,EAAc,iBACdC,EAAgB,oBAChBtjE,EAAmB,aACnB0mF,EAAY,eACZzxB,EAAc,cACdqxB,EAAa,UACbjgC,EAAS,QACTjlB,EAAO,SACP4iC,GAAQ,aACR33C,GAAY,UACZk7D,GAAS,cACTG,GAAa,oBACbC,GAAmB,eACnBtE,GAAc,eACdtf,GAAc,WACdjS,GAAU,gBACV82B,GAAe,SACflyF,GAAQ,gBACRsxF,GAAe,mBACf3pD,GAAkB,gBAClBsC,GAAe,gBACfnoC,GAAe,wBACfomC,GAAuB,gBACvB9jC,GAAe,aACfguF,GAAY,cACZ3X,GAAa,iBACbyO,GAAgB,iBAChBmJ,GAAgB,mBAChBE,GAAkB,sBAClBD,GAAqB,kBACrBvpE,GAAiB,kBACjBwoE,GAAiB,qBACjB5e,GAAoB,eACpBj+D,GAAc,kBACd27E,GAAiB,aACjBoB,GAAY,aACZD,GAAY,iBACZI,GAAgB,uBAChBe,GAAsB,6BACtBb,IACD,EACC,MAAM,uBACJxmF,GAAsB,qBACtBwmD,GAAoB,uBACpBtmD,GAAsB,sBACtB0nF,GAAqB,iBACrBlqF,KACEgtB,EAAAA,EAAAA,MAGEwnB,IAAMtB,EAAAA,EAAAA,IAAuB,MAE7Bi3C,IAAkBj3C,EAAAA,EAAAA,IAAuB,MAEzCuxB,IAAavxB,EAAAA,EAAAA,IAAuB,MAEpCk3C,IAAmBl3C,EAAAA,EAAAA,IAAO,GAE1B73C,IAAO81C,EAAAA,GAAAA,MAENk5C,GAAuBC,KAA0Bl6C,EAAAA,EAAAA,KAAS,IAC1Dm6C,GAAwBC,GAAoBC,KAAqBn3C,EAAAA,GAAAA,MAClE,SAAEO,KAAaC,EAAAA,EAAAA,OAErBk2B,EAAAA,GAAAA,IAAemgB,GAAiBL,GAEhC,MAAM,kBACJz5B,GAAiB,oBAAEma,GAAmB,wBACtCla,GAAyBC,kBAAmBiB,GAAa,uBACzDhB,GAAsB,sBAAEC,KACtBC,EAAAA,GAAAA,GAAuBlc,GAAK9xC,EAAAA,IAAgB2hE,IAAgB,EAAMjzC,EAAAA,KAEtEwd,EAAAA,EAAAA,KAAU,KACJyhB,IACF7tD,IACF,GACC,CAAC6tD,GAAmB7tD,KAEvB,MAAMynE,GAAwBT,GAAmB,GAC1CjqB,GAAS2qB,KAAa52B,EAAAA,GAAAA,GAAQ22B,KACrCr7B,EAAAA,EAAAA,KAAU,KACJq7B,IAIJvqE,WAAWwqE,GAjIU,GAiICV,EAAmC,GACxD,CAACA,EAAiBU,GAAWD,KAChC,MAAM,qBAAE5rB,KAAyBC,EAAAA,GAAAA,GAAkBiB,QAASpoD,EAAW8yE,IAAuB,IAG5F/xE,GAAIoF,GAAS,OAAEvG,GAAM,YAAE+kE,GAAW,SAAE/wD,GAAQ,qBAAE4R,IAC5C9gB,EAEEqd,IAAUsmB,EAAAA,EAAAA,IAAe3jC,GACzB+gE,IAAQC,EAAAA,EAAAA,IAAahhE,GACrBwqC,GAAkC,cAApBjrC,IAAmCS,EAAQwqC,YACzDqkD,IAAWC,EAAAA,EAAAA,IAAe9uF,KAAa2rF,EACvCoD,GAAYhtF,QAAQmiB,KAA0C,WAApB3kB,GAC1CyvF,IAAgBC,EAAAA,EAAAA,IAAsBjvF,GACtCkvF,GAAmBF,KAAkB7C,IAAiBC,IACtD+C,GAAe1C,IAAiBjoD,aAAc4qD,EAAAA,EAAAA,IAAkB3C,GAAgBjoD,WAChFq8B,GACJZ,MACKvG,GAAkBlvB,MACnBugD,IACA9qB,GAAYovB,sBACZL,GAEA/vB,GAAUl9D,QAAQ8wD,IAAUA,EAAOhzD,SAAS4C,OAAS,IACrDowD,GAAOhzD,SAASskC,MAAMmrD,GAA4C,IAApCjtF,OAAOC,KAAKgtF,EAAI3nF,SAASlF,SACvD8sF,GAA4B1rD,IAAsBuqD,EAClDoB,GAA2B3rD,IAAsB+mD,EACjDjiB,QAA6CrtE,IAAxBqzE,GACrB8gB,KACF9mB,IAAsBH,IAAkB2iB,GACtCqE,IAEAE,GAAa5kC,IAActgB,IAAexqC,EAAQ2vF,sBAAwBxC,EAC1EyC,GAAW7tF,QAAQwrF,IACnBttB,KACEA,GAAY4vB,eAAkBn2B,IAAmBqH,IAAUgqB,IAC5D9qB,GAAY6vB,eAGbC,GAAepD,IAAgBkC,GAE/BtmB,IAAgB9vB,EAAAA,EAAAA,KAAY,CAACxsC,EAAkD3H,KACnFmC,GAAuB,CACrBhF,aACA6C,eACI2H,GAAGk2C,UAAY,CAAE37C,WAAW,MAC5By4D,IAAW,CAAE14D,gBAAiBssD,EAAOhzD,SAASC,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,MACpE,GACD,CAACoK,GAAwBhF,GAAWw9D,GAASpM,IAE1Cm9B,GAAgB1E,EAAgB7qF,OAASnF,EACzC20F,GAAyBluF,SAASysF,KAA0B1tE,IAAwB+sE,IAEpFqC,GAAajwB,KAAgBvG,GAAkBqxB,IAAkBiF,IAAiBzE,EAAeyE,GACjGG,GAAalwB,GAAcsrB,EAAeyE,IAE1C,gBACJvmB,GAAe,YACf3U,GAAW,kBACXJ,GAAiB,kBACjBsV,GAAiB,yBACjBC,GAAwB,gBACxB/f,GAAe,wBACfqgB,GAAuB,iBACvBllB,GAAgB,SAChB6jB,GAAQ,uBACRH,GAAsB,8BACtB8B,IACEvC,GACFC,GACA5vB,GACAl3C,GACAw9D,EACAl9D,QAAQymE,IACRzmE,QAAQ0mE,IACR1mE,QAAQ2mE,GACR/S,GACAlB,GACAv5D,GACAytE,GACAC,GACA7H,GACAyuB,KAGI,kBACJY,GAAiB,kBACjBC,GAAiB,kBACjBC,GAAiB,iBACjBC,GAAgB,iBAChBrR,GAAgB,gBAChBsR,GAAe,sBACfC,GAAqB,gBACrBC,GAAe,uBACfC,GAAsB,iBACtBC,GAAgB,gBAChBC,GAAe,mBACf5K,GAAkB,eAClB6K,GAAc,mBACdC,GAAkB,cAClBC,GAAa,YACbC,GAAW,qBACXC,GAAoB,6BACpBC,GAA4B,qBAC5BC,ICleW,SACb5xF,EACA+oE,EACAvoE,EACA9E,EACAC,EACA0oC,EACAg9B,EACAr2B,EACAwgD,EACAn4B,EACAq9B,EACAC,EACAt1D,EACA+xD,GAEA,MAAM,SACJxuF,EAAQ,iBAAEwI,EAAgB,aAAE7D,EAAY,gBAAEwoE,EAAe,gBAAE8lB,EAAe,iBAC1EzvE,EAAgB,qBAAEmkE,EAAoB,aAAEuL,EAAY,gBAAEzrF,EAAe,uBAAE0rF,EAAsB,yBAC7FC,IACErgE,EAAAA,EAAAA,OAGF90B,GAAIoF,EAAS,YAAEw+D,EAAW,iBAAErlD,EAAgB,cAAEkwE,EAAa,oBAAE3vE,EAAmB,UAAE7W,GAChFtE,EAEEowF,GAAoB33C,EAAAA,EAAAA,KAAY,KAC/By3C,GAIL9xF,EAAS,CAAE/B,GAAI6zF,EAAW7zF,IAAK,GAC9B,CAAC6zF,EAAY9xF,IAEViyF,GAAoB53C,EAAAA,EAAAA,KAAY,KAC/B03C,EAMDtvB,GAAeZ,GAAawxB,cAC9B1uF,EAAa,CAAE7H,OAAQi1F,EAAW9zF,GAAIoF,UAAWw+D,EAAYwxB,gBAE7DrzF,EAAS,CAAE/B,GAAI8zF,EAAW9zF,KAR1BuK,EAAiB,CAAE5G,QAASR,EAAK,eASnC,GACC,CACDqhE,EAAa99D,EAAck9D,EAAazgE,EAAMpB,EAAU+xF,EAAYvpF,IAGhE0pF,GAAoB73C,EAAAA,EAAAA,KAAY,KAC/B5d,GAILz8B,EAAS,CAAE/B,GAAIw+B,EAAUx+B,IAAK,GAC7B,CAACw+B,EAAWz8B,IAETmyF,GAAmB93C,EAAAA,EAAAA,KAAY,KACnC11C,EAAa,CACX7H,OAAQ8vF,GAAwBF,EAAgBA,EAAgB5vF,EAChEC,WACAsG,UAAWmZ,EACXpW,eAAgBwmF,GAAwBF,OAAgBxvF,EAAYmG,EACpEhF,mBAAmB,GACnB,GACD,CAACsG,EAAcioF,EAAsBF,EAAe5vF,EAAQC,EAAUyf,EAAkBnZ,IAErFy9E,GAAmBzmC,EAAAA,EAAAA,KAAY,KACnC8yB,EAAgB,CACdrwE,SACAC,WACAmY,QAAS7R,EACTuB,OAAQwnC,EAAciiC,EAAAA,GAAAA,gBAAoCA,EAAAA,GAAAA,QAC1D,GACD,CAACvxE,EAAQC,EAAUsG,EAAW8pE,EAAiB/gC,IAE5CgmD,GAAkB/3C,EAAAA,EAAAA,KAAY,KAClC44C,EAAgB,CAAEn2F,SAAQuG,aAAY,GACrC,CAACvG,EAAQuG,EAAW4vF,IAEjBZ,GAAwBh4C,EAAAA,EAAAA,KAAai5C,IACzCnmB,EAAgB,CACdrwE,SACAC,WACAmY,QAASo+E,EACT1uF,OAAQwnC,EAAciiC,EAAAA,GAAAA,eAAmCA,EAAAA,GAAAA,OACzD,GACD,CAACvxE,EAAQC,EAAUowE,EAAiB/gC,IAEjCqmD,GAAkBp4C,EAAAA,EAAAA,KAAY,KAClC72B,EAAiB,CAAEtiB,WAAY,CAACmC,IAAa,GAC5C,CAACA,EAAWmgB,IAETqkE,GAAqBxtC,EAAAA,EAAAA,KAAY,KACrCstC,EAAqB,CAAE7qF,SAAQuG,aAAY,GAC1C,CAACskF,EAAsB7qF,EAAQuG,IAE5BqvF,GAAiBr4C,EAAAA,EAAAA,KAAan5B,IAClCgyE,EAAa,CAAEp2F,SAAQuG,YAAW6d,WAAU,GAC3C,CAACpkB,EAAQuG,EAAW6vF,IAEjBP,GAAqBt4C,EAAAA,EAAAA,KAAY,KACrC5yC,EAAgB,CAAER,WAAYnK,EAAQoJ,aAAY,GACjD,CAACuB,EAAiB3K,EAAQoJ,IAEvB0sF,GAAgBv4C,EAAAA,EAAAA,KAAY,KAChC,GAAIoa,GAASA,EAAMhzD,SAAU,CAC3B,MAAMP,EAAauzD,EAAMhzD,SAASC,KAAI,QAAC,GAAEzD,GAAI,SAAKA,CAAE,IACpDwJ,EAAgB,CAAER,WAAYnK,EAAQoE,cACxC,MACEuG,EAAgB,CAAER,WAAYnK,EAAQoE,WAAY,CAACmC,IACrD,GACC,CAACoxD,EAAOhtD,EAAiB3K,EAAQuG,IAE9BwvF,GAAcx4C,EAAAA,EAAAA,KAAY,KAC9B11C,EAAa,CACX7H,SAAQC,SAAUmB,EAAAA,GAAgBmF,aAClC,GACD,CAACsB,EAAc7H,EAAQuG,IAEpByvF,GAAuBz4C,EAAAA,EAAAA,KAAY,KACnC5U,EACF9gC,EAAa,CACX7H,OAAQ+kE,EAAa56D,WAAaf,YAAWC,cAAerJ,EAAQuG,UAAWw+D,EAAa6vB,gBAK5F9E,GAAwBF,EAC1ByG,EAAuB,CACrBr2F,OAAQ4vF,EACR3vF,SAAUggB,EACV1Z,UAAWw+D,EAAa6vB,gBAG1B/sF,EAAa,CACX7H,OAAQ+kE,EAAa56D,WAAa5D,UAAWw+D,EAAa6vB,eAE9D,GACC,CACDjsD,EAAmBmnD,EAAsBF,EAAe/nF,EAAck9D,EAAa37D,EAAWpJ,EAC9Fq2F,EAAwBp2E,IAGpBw2E,GAAsBl5C,EAAAA,EAAAA,KAAaxsC,IACvCA,EAAEovC,kBAEFktB,EAAct8D,EAAG3H,EAAU,GAC1B,CAACikE,EAAejkE,IAwBnB,MAAO,CACL8rF,oBACAC,oBACAC,oBACAC,mBACArR,mBACAsR,kBACAC,wBACAC,gBAAiBiB,EACjBhB,wBA/B6Bl4C,EAAAA,EAAAA,KAAaxsC,IAC1CA,EAAEovC,kBAEFm2C,EAAyB,CAAEt2F,SAAQmB,GAAIoF,GAAY,GAClD,CAACvG,EAAQuG,EAAW+vF,IA4BrBZ,kBA1BuBn4C,EAAAA,EAAAA,KAAY,KACnCr6C,EAAS,CACP/B,GAAI2D,EAAQ9E,OACZC,SAAU6E,EAAQ3D,IAClB,GACD,CAAC2D,EAAQ9E,OAAQ8E,EAAQ3D,GAAI+B,IAsB9ByyF,kBACA5K,qBACA6K,iBACAC,qBACAC,gBACAC,cACAC,uBACAC,6BAA8BQ,EAC9BP,sBA5B2B34C,EAAAA,EAAAA,KAAY,KAClCm0C,GACL7pF,EAAa,CACX7H,OAAQ8vF,GAAwBF,EAAgBA,EAAgB5vF,EAChEC,SAAUyxF,EAAavwF,GACvBoF,aACA,GACD,CAACvG,EAAQ6H,EAAcioF,EAAsB4B,EAAcnrF,EAAWqpF,IAuB3E,CDiSM8G,CACFpyF,GACA+oE,GACAvoE,EACA9E,GACAC,GACA0oC,EACAg9B,GACAr2B,GACAugD,EACAl4B,EACAq9B,GACAC,GACAt1D,EACA+xD,KAGF75C,EAAAA,EAAAA,KAAU,KACH66B,GAIDqiB,IAA0BpC,GAC5B1pF,IACF,GACC,CAACA,GAAkBypE,EAAcigB,EAAiBoC,KAErD,MAAM4B,IAAqBr7C,EAAAA,GAAAA,GACzB,4BACAq0C,GAAkB,iBAClBniB,GAAe,eACfylB,GAAiB,gBACjBC,GAA0B,0BAC1BxD,GAAyB,yBACzBhd,GAAgB,eAChB7M,IAAS,MACTh/D,QAAQ/B,EAAQ+jB,QAAU,YAC1B/jB,EAAQuwE,UAAY,aACpBse,IAAY,YACZlmB,IAAsB,gBACtBd,IAAcE,GAAoB,UAClCojB,GAAgB,gBAChBnrF,EAAQ8a,YAAc,cACtB+oB,GAAqB,uBACrBo7B,IAAW,WACXj/D,EAAQ4nC,kBAAoB,qBAC5B2uB,IAAc,cACdiS,IAAkB,uBAClBkjB,IAAgBf,GAAc,gBAC9B5oF,QAAQ/B,EAAQogE,gBAAkB,qBAClC8I,IAAY,YACZ1mB,IACCzgD,QAAQ9E,KAAoByxF,KAA2B,wBAGpD,KACJrwF,GAAI,MAAEgzB,GAAK,MAAEqZ,GAAK,MAAEwnB,GAAK,MAAEj4C,GAAK,SAAExP,GAAQ,QAAEyB,GAAO,QAAE6tE,GAAO,KAAEx6D,GAAI,QAAEy/D,GAAO,QAAE7mD,GAAO,SAAEnC,GAAQ,OAAEzmB,GAAM,KAAE+0E,KACtG35C,EAAAA,EAAAA,IAAkB3qC,IAEdM,OAAQwxF,IEviBH,SAAyBzzF,GACtC,MAAMiqB,GAAW+qC,EAAAA,GAAAA,IAAS,IAAOh1D,ExCqB5B2V,eAA8B3V,GAA6C,IAA/B0zF,EAAY,UAAH,6CAjBlC,GAoBxB,OAFK/mB,UAAcC,GAAuBC,cACrBF,GAAQ9zC,QAAQ,CAAEqP,KAAM,iBAAkByrD,KAAM,CAAC3zF,EAAM0zF,IAE9E,CwCzB0CE,CAAe5zF,GAAQmnB,QAAQiqC,aAAQn0D,IAAa,CAAC+C,QAAO/C,GACpG,OAAOgtB,CACT,CFoiBuC4pE,CAAgBpE,GAAyBzvF,IAAMA,UAAO/C,IAEnFuoB,UAAWsuE,GAAoB,eAAEC,IGxiB5B,SACbrF,EACA7xF,EACAuG,EACA4wF,GAEA,MAAM,kBAAEC,IAAsBnhE,EAAAA,EAAAA,MACxBohE,EAAqBF,EACvBtF,GAAkByF,WAAWH,KAAyB5wF,QAAanG,GAEjE,UAAEuoB,EAAS,KAAExlB,GAASk0F,GAAsB,CAAC,EAQnD,OANAx/C,EAAAA,EAAAA,KAAU,KACH10C,GAASwlB,IAAawuE,GACzBC,EAAkB,CAAEp3F,SAAQoE,WAAY,CAACmC,GAAY+hB,eAAgB6uE,GACvE,GACC,CAACn3F,EAAQmD,EAAMwlB,EAAWpiB,EAAW4wF,EAAuBC,IAExD,CACLzuE,YACAuuE,eAAgB/zF,EAEpB,CHkhB8Do0F,CAC1D1F,GAAkB7xF,GAAQuG,GAAWwrF,IAGjCyF,IAAyBh1B,EAAAA,GAAAA,GAAY00B,IAAgB,GAErDO,GAAcR,GAAwBO,IAA0Br0F,GAAQ+zF,GACxEQ,GAAwBR,IAAkBM,IAE1C,UAAE5gD,IAAcviC,IAAU,CAAC,EAE3BsjF,GAAoB3uE,KAAsBsrE,IAAgD,WAApBjwF,KACtE2uF,EACA4E,IAA2BjsF,EAAAA,KAAiBirC,KAAc02B,IAAkBpjC,KAC5EoqD,GAEAuD,GIvjBD,SACL/yF,GA0BA,IAzBA,aACE+vF,EAAY,cACZf,EAAa,cACbb,EAAa,YACbttB,EAAW,UACXkuB,EAAS,gBACT3D,EAAe,YACf4H,EAAW,gBACXC,EAAe,aACf9D,EAAY,gBACZ+D,EAAe,uBACfjD,GAaE,UAAH,6CAAG,CAAC,EAEL,MAAM,KACJ5xF,EAAI,MAAEgzB,EAAK,MAAEqZ,EAAK,MAAEwnB,EAAK,MAAEj4C,EAAK,SAAExP,EAAQ,KAAE8U,EAAI,QAAEy/D,EAAO,QAAEjF,EAAO,SAAE/jD,EAAQ,QAAEmC,IAC5EwS,EAAAA,EAAAA,IAAkB3qC,GAEhBmzF,EAAa,CAACC,EAAAA,KACdC,EAAUhiE,GAASqZ,GAAS1U,GAAYmC,GAAS4W,cACjD2xB,EAAUriE,GAA2B,UAAnB23B,GAAUz5B,MAAoB22F,EAChDI,EAAoBD,IAAY3yB,EAChC6yB,EAAWxxF,QAAQ/B,EAAQkP,UA4FjC,OA1FKmkF,GAAWrzF,EAAQwzF,gBACtBL,EAAWxyF,KAAK,cACZX,EAAQwzF,gBAAkBC,EAAAA,KAC5BN,EAAWxyF,KAAM,cAAaX,EAAQwzF,mBAE/B9yB,GACTyyB,EAAWxyF,KAAK,QAGdsyF,GACFE,EAAWxyF,KAAK,qBAGdquF,IACFmE,EAAWxyF,KAAK,gBACZ+pC,GAAOgpD,SACTP,EAAWxyF,KAAK,SAGdqyF,GACFG,EAAWxyF,KAAK,iBAGhB0yF,EACFF,EAAWxyF,KAAK,SACPuxD,EACTihC,EAAWxyF,KAAK,SACPsZ,GACTk5E,EAAWxyF,KAAK,SACZsvF,GACFkD,EAAWxyF,KAAK,6BAET8J,EACT0oF,EAAWxyF,KAAK,YACPo5E,EACToZ,EAAWxyF,KAAK,WACP4e,EACT4zE,EAAWxyF,KAAK,QACPq+E,IACTmU,EAAWxyF,KAAK,aAEZq+E,EAAQ3tD,OAAS2tD,EAAQt0C,QAC3ByoD,EAAWxyF,KAAK,UAIhBw3B,IAAYA,EAAQ4W,eACtBokD,EAAWxyF,KAAK,WAGdkgE,GACFsyB,EAAWxyF,KAAK,gBAGdovF,GACFoD,EAAWxyF,KAAK,iBAGdouF,GACFoE,EAAWxyF,KAAK,eAGdwuF,GACFgE,EAAWxyF,KAAK,iBAGd4yF,GACFJ,EAAWxyF,KAAK,cAGdyqF,GACF+H,EAAWxyF,KAAK,qBAGbquF,IACHmE,EAAWxyF,KAAK,cAEZ0yF,GAAWL,GACbG,EAAWxyF,KAAK,mBAGdovF,GAAgBlvB,GAAe0yB,IAAaD,GAAqBlI,IACnE+H,EAAWxyF,KAAK,wBAGdwtF,IAAkB98D,GAAU2E,IAAa0qC,IAAa4yB,IACxDH,EAAWxyF,KAAK,iBAIbwyF,EAAWlyF,KAAK,IACzB,CJsb2B0yF,CAAsB3zF,EAAS,CACtD+vF,gBACAf,iBACAb,gBACAttB,eACAkuB,UAAWA,KAAcb,EACzB9C,kBACA4H,YAAa9uE,IAAqBA,GAAkBC,cAAgB,EACpE8uE,gBAAiBvD,IAAcE,GAC/BT,gBACA+D,gBAAoC,YAAnBl9D,IAAUz5B,QAAuBslF,EAAAA,EAAAA,IAAiB7hF,GAAS0H,EAAAA,EAAAA,OAC5EuoF,4BAGI2D,GAAeb,GAAiB7tF,SAAS,gBACzCw7D,IAAUmzB,EAAAA,EAAAA,IAAe7zF,GACzB8zF,IAAYrf,EAAAA,GAAAA,IAAmBz0E,EAAQwzF,gBAE7C,IAAIO,GAWAC,GATFD,GADEjiD,IAEO09C,GADM,QAGN9uB,IAAYse,IAAYkQ,GAGlB,aAFA,UAMbC,GACEH,KAAmB39D,IAASqZ,MAAWg2B,GACzCszB,GAAoB,UACXnzB,IACTkzB,GAAe,aACfC,GAAoB,UAEpBA,GAAoB,SAGtBA,GAAoB,QAGtBt4B,EAAAA,GAAAA,GACEqvB,GAAiB/qF,EAAQ8qF,cAAgB9qF,EAAQ8qF,cAAgB5vF,GACjE2zF,GAAW7uF,EAAQ4a,sBAAmBtf,EACtCqf,EACA3a,EAAQ3D,IAEVurE,GAAgBjvB,GAAKz9C,GAAQ2sE,EAAWC,EAAgBC,EAAkBtjE,GAE1E,MAAMwvF,GAAsB9F,EAEtB+F,IAAez7C,EAAAA,EAAAA,KAAa07C,IAChC,MAAMC,EAAa7F,GAAiBvmE,QAE9BqsE,EAAYF,EAAMxqB,OAAO2qB,aAE/B,GADA/F,GAAiBvmE,QAAUqsE,GACvBE,EAAAA,GAAAA,OAAwBH,GAAcC,GAAaD,EAAY,OAEnE,MAAMlqB,EAAYiqB,EAAMxqB,OAAO1B,QAAwB,gBACvD,IAAKiC,EAAW,OAEhB,MAAMsqB,EAAaH,EAAYD,GACzB,aAAEK,EAAY,aAAEC,EAAY,UAAEC,GAAczqB,EACtBjiE,KAAK2K,MAAM8hF,EAAeC,EAAYF,GACfD,GArXjB,GAwXhCrwF,IACF,GACC,CAACA,KAEEywF,IAAkBC,EAAAA,GAAAA,GAAqBX,GAAc,CAACA,IA3X1C,KA2XsE,IAExFY,EAAAA,GAAAA,GAAkBb,GAAsBt7C,QAAMr9C,EAAWs5F,KAEzD7hD,EAAAA,EAAAA,KAAU,KACR,MAAMgiD,EAAezG,GAAgBtmE,QACjC0kE,IAAqBqI,IAAgBC,EAAAA,GAAAA,GAAoBD,IAC3D1G,GAAsB,CAAE/uF,WAAY,CAACmC,KACvC,GACC,CAACirF,GAAmBjrF,GAAW4sF,KAElC,IACI4G,GACAC,GAFAx+C,GAAQ,GAGRy+C,IAAiB,EACrB,MAAMrP,IAAczvC,EAAAA,EAAAA,KAAQ,IACnB4oB,GACHsD,GAAqBxB,GAAOh/D,QAAQ8+D,IAAc9+D,QAAQ++D,GAAYjO,EAAQ7a,SAC9E18C,GACH,CAAC2jE,GAAS8B,GAAOF,GAAaC,EAAWjO,EAAO7a,KAE7Co9C,GAAev0B,GAAc,GAAK,EACxC,IAAK5B,KAAY5tC,IAASqZ,IAASvS,IAAS4W,eAAgB,CAC1D,IAAIp/B,EACJ,GAAI0hB,GACF1hB,EAAQixD,GAAyB5gE,EAAS6gE,GAAaC,EAAW9oB,IAAUroC,WACvE,GAAI+6B,GAEP/6B,EADE+6B,GAAMgpD,QACA7M,GAAAA,GAEAjmB,GAAyB5gE,EAAS6gE,GAAaC,EAAW9oB,IAAUroC,WAEzE,GAAIwoB,IAAS4W,eAClB5W,GAAQ4W,cAAcp/B,OAASwoB,GAAQ4W,cAAcn/B,OACpD,CACD,MAAQD,MAAO0lF,EAAczlF,OAAQ0lF,GAAkBn9D,GAAQ4W,cAC/Dp/B,GAAQ4lF,EAAAA,GAAAA,IAAmC,CACzC5lF,MAAO0lF,EACPzlF,OAAQ0lF,EACRE,eAAgBz0B,GAChBF,eACAC,YACA9oB,cACCroC,KACL,CAEIA,IACFslF,GAAkBhtF,KAAKC,IAAIu4D,GAAiB1+D,QAAQ4wF,IAAcE,IAAoBljF,GAClFwoB,IAAS4W,eAAiBkmD,GAAkBtlF,EA/anB,KAgb3BwlF,IAAiB,GAGvB,MAAWrP,KACTmP,GAAkBhtF,KAAKC,IACrBu4D,GAAiB1+D,QAAQ4wF,IAAcE,IAAoB/M,GAAY9e,eAAer3D,OAEpFslF,GAAkBnP,GAAY9e,eAAer3D,MAvblB,KAwb7BwlF,IAAiB,IAIjBF,KACFv+C,GAAS,UAASu+C,GAAkBG,OACpCF,GAAoBD,GAAkBxK,IAGxC,MAAM7a,GAAa9kB,GAAa9qD,EAAQy1F,kBACjC50B,IAAeZ,IAAaw1B,sBAC9Bn6F,EACCo6F,IAAsBr/C,EAAAA,EAAAA,KAAQ,IAC3Bu5B,GAAYzI,GAAqByI,SAAat0E,GACpD,CAACs0E,KAuBJ,SAAS5uE,GAAkB20F,GACzB,OACE,mBAACC,GAAA,EAAW,CACV51F,QAASA,EACToyF,eAAgBnF,GAA+B2F,QAAwBt3F,EACvEq6F,eAAgBA,EAChB7B,UAAWA,GACX9H,UAAWA,GACXtjB,YAAaA,EACbsF,8BAA+BA,EAC/BC,8BAA+BA,EAC/B4nB,sBAAuB7G,IAG7B,CAEA,SAAS8G,KACP,MAAMC,EACJ,mBAAC,GAAW,CACV/1F,QAASA,EACT8vE,UAAWA,EACX5rD,kBAAmBA,GACnByrD,eAAgBA,EAChBC,UAAWA,GACXC,mBAA0C,WAAtBmkB,GACpBlxD,mBAAoBA,GACpBitC,aAAchuE,QAAQkrF,GAA+B2F,QAAwBt3F,GAC7E+5C,QAASq7C,GACT1gB,mBAAoB2gB,GACpB1gB,aAAc2gB,KAIlB,MAA0B,WAAtBoD,GACK+B,EAIP,mBAAC,GAAS,CACR94F,gBAAiBA,GACjB+C,QAASysF,GACTlD,aAAcwM,EACdjzD,mBAAoBA,GACpBglD,eAAgBA,GAChB/W,oBAAqB9C,EACrBub,iBAAkB1+B,GAGxB,CAwVA,MAAMkrC,GAAgBnwD,GAAWg7B,GAAc7gE,EAAQy1F,qBAAkBn6F,EACnE26F,IAAe5/C,EAAAA,EAAAA,KAAQ,IAAM60C,GAAehlF,MAAMgwF,GAAMA,EAAE3qF,YAAW,CAAC2/E,IAE5E,OACE,0BACEvyC,IAAKA,GACLt8C,IAAIuyE,EAAAA,EAAAA,IAAiB5uE,EAAQ3D,IAC7ByrB,UAAW+pE,GACXn7C,MAAOg/C,GAAuB,6BAA4BA,YAA0Bp6F,EACpF,kBAAiBmG,GACjBspD,YAAa0e,GACbp0B,QAASyf,GACTa,cAAejB,GACfzJ,cAAe+e,GACflkB,aAAc0pC,GAA2B3kB,QAAgCvvE,EACzE66F,YAAarD,GAA0B5oC,QAAkB5uD,EACzDyqD,aAAe+sC,IAA2BtD,GAA4BnqC,QAAmB/pD,GAEzF,0BACEq9C,IAAK21C,GACLxmE,UAAU,gBACV,kBAAiBrmB,GACjB,uBAAsBoxD,EAAQA,EAAMhzD,SAASgzD,EAAMhzD,SAAS4C,OAAS,GAAGpG,QAAKf,EAC7E,0BAAyB0E,EAAQ4nC,uBAAoBtsC,EACrD,2BAA0BoxF,SAAqBpxF,KAE/CuoC,GACA,0BAAK/b,UAAU,0BACZyuC,IAAc,wBAAGzuC,UAAU,iBAG/B8iE,GACC,0BACE9iE,WAAW0uB,EAAAA,GAAAA,GAAe,sCAAuC62C,IAAmB,eACpFh4C,QAAS87C,IAER9D,IACC,wBAAGvlE,UAAU,iBAIlB6iE,GAtcL,WACE,MAAMyL,EAAmBlG,KAAcl7D,EAAAA,EAAAA,IAASk7D,GAAW7zF,IACrDkmF,EAAc2N,IAAckG,EAAoBlG,QAAwB50F,EACxEknF,EAAc0N,KAAekG,EAAoBlG,QAAwB50F,EACzE+6F,GAAenG,IAAcjwB,GAAeA,GAAYE,oBAAiB7kE,EAE/E,OACE,mBAACoxE,GAAA,EAAM,CACL52B,KAAMkC,GAAW,eAAiB,QAClC96B,KAAMqlE,EACNz5E,KAAM05E,EACNnkF,KAAMg4F,EACNvlE,aAAcA,GACdukB,QAAUktC,GAAcC,EAAc4N,QAAoB90F,EAC1Dy1E,oBAAqB/C,EACrBn+D,eAAgBA,GAChBg9D,WAAS,GAGf,CAmbmBypB,GACf,0BACExuE,WAAW0uB,EAAAA,GAAAA,GAAe,0BAA2Bu8C,GAAiB7tF,SAAS,SAAW,oBAE1F,0BACEyzC,IAAKiwB,GACL9gD,UAAWirE,GACXr8C,MAAOA,GACPnB,IAAI,QAEHsrB,KAAgB0uB,IACf,0BAAKznE,UAAU,iBACZtoB,GAAK,oBACLw2F,IAAiB,2BAAMluE,UAAU,cAAcytB,IAAI,QAAQygD,KA5YxE,WACE,MAAMluE,GAAY0uB,EAAAA,GAAAA,GAChB,gBACAqqB,IAAe,oBACfkvB,IAAgB,iBAChBoF,IAAkB,oBAEdtP,EAAoBsI,IAAkBztB,KAAYG,KAAgBgyB,GAClE0D,GAAmB//C,EAAAA,GAAAA,GACvB,eACA,WACiB,YAAjBu9C,IAA8B,YAC9BpkB,GAAkB,sBAGpB,OACE,0BAAK7nD,UAAWA,EAAWmjC,cAAegf,GAA0B10B,IAAI,QA2P5E,WAME,GAJuBy5C,KAAkB9/E,MACtCw7E,MAFWr5D,IAASqZ,IAAS1U,KAEA22D,KAAkB9rB,IAAe3xD,IAAYk8E,IACvEmE,IAA+BV,IAAYG,GAG/C,OAGF,IAAIxf,EACAgnB,GACArG,IAAgBnB,IAAiB9/E,GAM1B+wD,IAAaE,iBACtBqP,EAAcvP,GAAYE,iBAN1BqP,GAAc5uE,EAAAA,EAAAA,IAAepB,GAAM2wF,IAE9BtvB,IAAgBE,KACnBy1B,EAAe,UAAQ/mB,EAAAA,EAAAA,IAAgB0gB,QAK3C,MAAMsG,EAAoBtG,IAAc,gBAAiBA,IAAcA,GAAW/6D,YAC5EshE,EAAkBvG,IAAc,cAAeA,IAAcA,GAAWtoE,UAE9E,OACE,0BAAKC,UAAU,gBAAgBytB,IAAI,OAChCi6B,EACC,2BACE1nD,WAAW0uB,EAAAA,GAAAA,GAAe,iCAAkCggD,GAC5DnhD,QAASg7C,GACT96C,IAAI,QAEHoZ,EAAAA,GAAAA,GAAW6gB,IACV3O,IAAe41B,GACf,mBAAC9/C,GAAA,EAAW,CACVnqC,WAAYiqF,EAAkBjqF,WAC9BqsC,UAAWC,EAAAA,IACXk1B,8BAA+BA,EAC/BC,8BAA+BA,KAGjCpN,KAAgB41B,GAAqBC,GAAmB,mBAAC39C,GAAA,EAAW,MACrEo3C,IAAYwG,UAAY,mBAACC,GAAA,EAAQ,CAACD,SAAUxG,GAAWwG,YAEvD97D,OAEDv/B,EA90BC,IA+0BJu/B,GACC,sCACE,2BAAM/S,UAAU,OAAOtoB,GAAK,WAC5B,2BACEsoB,UAAU,cACVutB,QAASi7C,KAER3hC,EAAAA,GAAAA,GAAY,IAAG9zB,EAAUE,UAAW,GAAG5V,cAI7C86C,IAAaovB,oBACZ,2BAAMvnE,UAAU,cAAcytB,IAAI,QAAQ/1C,GAAK,mBAC7CQ,EAAQigE,aAAaw1B,iBAAmB5vD,GAAWg7B,GACrD,2BAAM/4C,UAAU,cAAcytB,IAAI,QAAQv1C,EAAQigE,aAAaw1B,iBAC7Dz1F,EAAQy1F,iBAAmB5vD,IAAYg7B,GACzC,2BAAM/4C,UAAU,cAAcytB,IAAI,QAAQv1C,EAAQy1F,iBAChDjK,KAAsB3qB,GACxB,2BAAM/4C,UAAU,cAAcytB,IAAI,QAC/Bi2C,GAAkB1+B,aAAettD,GAChCgsF,GAAkB/hD,QAAU,uBAAyB,8BAGvDnuC,EAGV,CAnUOu7F,GACA9G,IACC,0BAAKjoE,UAAU,qBACZ6kE,IACC,mBAAC,GAAS,CACR3tE,MAAO4tE,GACPv3C,QAAS+7C,GACTtpE,UAAU,kBAGb+mE,IACC,mBAAC,GAAe,CACd7uF,QAAS2a,EACTw0D,aAAcpO,IAASjW,EACvB4d,YAAaA,EACbjoE,OAAQmrF,EACR5d,8BAA+BA,EAC/BC,8BAA+BA,EAC/B54B,QAASk7C,MAKhBrkF,IACC,mBAAC,GAAO,CACNlM,QAASA,EACT+wE,oBAAqB/C,EACrBC,8BAA+BA,EAC/B+C,WAAY0c,GACZ58D,aAAcA,GACdmgD,iBACE/kE,GAAQmlE,YACNvD,GAAqB9lD,SAAWvmB,IAAaqsE,GAAqB9lD,SAC/D3K,UACF/hB,EACL41E,aAAcyd,GACdxd,aAAcyd,KAGjBM,IAAoB9C,IACnB,mBAAC,GAAmB,CAClB5X,cAAe4X,GACfrY,aAAa/+C,EAAAA,EAAAA,IAAS95B,IACtB6lE,MAAOA,GACPgQ,oBAAqB/C,EACrBl9C,aAAcA,GACdsjD,iBAAkB/2D,GAClB5b,UAAWA,GACXvG,OAAQA,GACRmoC,wBAAyBA,KAG5B6rD,IAAoB/C,IACnB,mBAAC,GAAa,CACZtrF,MAAOsrF,GACPpY,aAAa/+C,EAAAA,EAAAA,IAAS95B,IACtB6lE,MAAOA,GACPgQ,oBAAqB/C,EACrBl9C,aAAcA,GACdsjD,iBAAkB/2D,GAClB5b,UAAWA,GACXvG,OAAQA,GACRmoC,wBAAyBA,KAG5B47B,IACC,mBAAC,GAAK,CACJpM,MAAOA,EACPizB,YAAaA,GACb/U,oBAAqB/C,EACrBjN,MAAOA,GACP2H,YAAaA,EACbmd,kBAAmBA,EACnB/0D,aAAcA,GACdguD,aAAc2R,KAGjB3+C,IACC,mBAAC,GAAgB,CACf9xC,QAASA,EACT8xC,UAAWA,GACX52C,OAAQA,MAGV+jE,IAAW5tC,IACX,mBAAC,GAAK,CACJrxB,QAASA,EACT+wE,oBAAqB/C,EACrBlN,UAAWA,EACX2U,YAAa4O,GACb3O,eAAgBA,EAChBC,qBAAsBkQ,EACtBjQ,cAAeA,GACflN,YAAaA,EACb7H,YAAaA,GACbxnC,MAAOA,EACPgc,QAAS6pC,GACTrJ,eAAgBoQ,MAGlBhnB,IAAWv0B,IAASA,GAAMgpD,SAC1B,mBAAC,GAAU,CACT1zF,QAASA,EACT+wE,oBAAqB/C,EACrByH,YAAa4O,GACbvzD,aAAcA,GACd8kD,cAAeA,MAGjB3W,IAAWv0B,KAAUA,GAAMgpD,SAC3B,mBAAC,GAAK,CACJ1zF,QAASA,EACTguE,8BAA+BA,EAC/BC,8BAA+BA,EAC/BnN,UAAWA,EACX2U,YAAa4O,GACbpM,YAAauV,GACb9X,eAAgBA,EAChB5kD,aAAcA,GACd8kD,cAAeA,GACflN,YAAaA,EACb7H,YAAaA,GACbxrB,QAAS6pC,GACTrJ,eAAgBoQ,MAGlB/zB,IAASj4C,KACT,mBAAC,MAAK,CACJof,MAAOA,EACPr5B,QAASA,EACTgD,OAAQ8zF,EAAAA,GAAAA,OACRphB,eAAgBA,EAChB5kD,aAAcA,GACdimE,aAAclzD,EACd0yB,WAAYA,GACZuK,UAAWA,EACXk2B,OAAQxG,GACRyG,aAAah9E,IAAW8mD,KAASrH,OAAoCp+D,EAAlBu1F,GACnDhb,eAAgBoQ,GAChBrQ,cAAeA,GACfgY,eAAgBA,EAChBY,sBAAuBA,GACvB0I,cAAen1F,QAAQ8rF,GACvB/sE,qBAAsBA,GACtB3a,aAAcuiE,EACdyuB,oBAAqB1I,GACrB2I,cAAevvE,IAGlBpd,IACC,mBAAC4sF,GAAA,EAAQ,CACPr3F,QAASA,EACT+wE,oBAAqB/C,EACrByH,YAAa4O,GACboJ,sBAAuBA,GACvB/X,eAAgBA,EAChBqhB,aAAclzD,EACd0yB,WAAYA,GACZuoB,aAAcI,GACdrJ,eAAgBoQ,GAChBrQ,cAAeA,KAGlBmE,IACC,mBAAC,GAAO,CAACA,QAASA,KAEnBx6D,IACC,mBAAC,GAAI,CAACvf,QAASA,EAASuf,KAAMA,GAAMg8D,WAAYuV,KAEjDxM,IACC,mBAAC,GAAI,CACHtkF,QAASA,EACTqkF,iBAAkBA,GAClBvzD,aAAcA,KAGjBqH,IAAS4W,eACR,mBAAC,GAAmB,CAClB/uC,QAASA,EACT8wB,aAAcA,KAIjBm/D,IACC,wBACEnoE,WAAW0uB,EAAAA,GAAAA,GACT,iBACCg4C,IAAyB1tE,IAAwB,uBAEpDy0B,IAAI,QAEFz0B,GAAuBthB,GAAK,qBAC5BouF,GAAkBC,EAAkB,mBAACyJ,GAAA,EAAY,CAAC3vF,QAASkmF,IAAsBA,IAKrFqB,IAAoBxuB,IACpB,0BAAK54C,UAAWyuE,EAAkBhhD,IAAI,QACnCv0C,KACAmxF,IACC,0BAAKrqE,UAAU,yBACb,0BAAKA,UAAU,gBACZ9mB,IAAkB,KAIP,YAAjB+yF,IAA8B+B,MAIlC9W,IACC,mBAAC,GAAO,CACNh/E,QAASA,EACT+wE,oBAAqB/C,EACrBlN,UAAWA,EACX2U,YAAa4O,GACbpM,YAAauV,GACb3sB,YAAaA,GACb/vC,aAAcA,GACd8kD,cAAeA,GACflN,YAAaA,EACbrvC,MAAOA,EACPylD,aAAcI,GACdH,sBAAuBkH,KAG1B9tD,KAAYA,GAAQ4W,eACnB,mBAAC,GAAO,CACN/uC,QAASA,EACT21E,qBAAsBkQ,EACtBrd,eAAgBA,GAChBjS,WAAYA,GACZl9B,MAAOA,IAGVrD,IACC,mBAAC,GAAQ,CACPh2B,QAASA,EACT8wB,aAAcA,GACd03C,eAAgBA,GAChBjS,WAAYA,GACZl9B,MAAOA,EACP9a,KAAM9d,IAKhB,CAsIS82F,IACC/H,IAA6C,eAAjBuE,IAAiC+B,KAC9DrG,IAAuBC,GACtB,mBAAC75C,GAAA,EAAM,CACL/tB,UAAU,wBACV4tB,MAAM,oBACN9iC,OAAK,EACLkjC,KAAK,OACLgG,UAAWt8C,GAAK,2BAChB61C,QAASu1C,EAAwBmG,GAAqBC,IAEtD,wBAAGlpE,UAAU,uBAEb2nE,IAAuBG,GACzB,mBAAC/5C,GAAA,EAAM,CACL/tB,UAAU,wBACV4tB,MAAM,oBACN9iC,OAAK,EACLkjC,KAAK,OACLgG,UAAU,gBACVzG,QAASk4C,GAAe0D,GAAcC,IAEtC,wBAAGppE,UAAU,2BAEbxsB,EACHu3F,IAAqB,mBAAC,GAAa,CAACrjE,WAAYtL,GAAoB8xC,SAAUk4B,IAC9E0F,IACC,0BAAK9rE,UAAU,eAAeu7D,wBAAyBtiB,GAAQupB,GAAeC,KAE/EuI,IACC,0BACEhrE,WAAW0uB,EAAAA,GAAAA,GAAe,iBAAkBuyB,KAA2B9rE,IAAmB,WAC1Fo4C,QAASk1B,IAET,mBAAC0e,GAAA,EAAmB,CAClBxlD,SAAU2B,GACV0Q,KAAM00C,GACN1nD,mBAAoBA,GACpBiuC,oBAAqB9C,MAK5BjuE,EAAQogE,eACP,mBAAC,GAAa,CAACpgE,QAASA,EAASq1C,QAAS4X,KAErB,YAAtB+mC,IACC,mBAAC,GAAS,CACRh0F,QAASysF,GACTnD,WAAS,EACTtmB,SAAUkyB,GACVj4F,gBAAiBA,GACjB6lC,mBAAoBA,GACpBglD,eAAgBA,GAChB/W,oBAAqB9C,EACrBub,iBAAkB1+B,KAIvB6jB,IACC,mBAAC,GAAoB,CACnB7xE,OAAQ03D,GACRya,OAAQN,GACR3uE,QAASA,EACT6yD,MAAOA,EACPojC,aAAcA,IAAc9wE,SAC5B5lB,gBAAiBA,GACjB25C,QAASyb,GACTtO,oBAAqBuO,GACrB1wC,kBAAmBA,GACnB4rD,UAAWA,EACXgiB,iBAAkBA,KAGlB,KK/tCV,IAAev+C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,OAAE12C,GAAW02C,EACbgkD,GAAgB9jD,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB72C,GAGvE,OAAO06F,EAAgB,mBAACA,EAAkBhkD,QAAYl4C,CAAS,ICKjE,IAAei4C,EAAAA,EAAAA,KAVkDC,IAC/D,MAAM,OAAE12C,GAAW02C,EACbikD,GAAuC/jD,EAAAA,GAAAA,GAC3CC,GAAAA,GAAAA,MAAe,wCAAyC72C,GAI1D,OAAO26F,EAAuC,mBAACA,EAAyCjkD,QAAYl4C,CAAS,ICkJ/G,IAAei4C,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA2B,IAA3B,OAAEG,GAAQ,EACjB,MAAM8E,GAAUwhB,EAAAA,EAAAA,IAAuBzmB,EAAQG,IACvCA,OAAQmK,EAAU,MAAEqyF,GAAU13F,GAAW,CAAC,EAElD,MAAO,CACLA,UACAw2B,IAAKnxB,GAAcqyF,GAAQv6E,EAAAA,EAAAA,IAAWpiB,EAAQsK,QAAc/J,EAC5Dq8F,SAAUD,GAASryF,GAAa9H,EAAAA,EAAAA,IAAWxC,EAAQsK,QAAc/J,EAClE,GATe27C,EAzHgC,IAM9C,IAN+C,OACnD/7C,EAAM,QACN8E,EAAO,aACPorD,EAAY,IACZ50B,EAAG,QACHmhE,GACD,EACC,MAAM,qBACJC,EAAoB,SACpBx5F,EAAQ,iBACRy5F,EAAgB,SAChBC,EAAQ,aACR/0F,IACEouB,EAAAA,EAAAA,MACE3xB,GAAO81C,EAAAA,GAAAA,KAEPqD,GAAMtB,EAAAA,EAAAA,IAAuB,MAE7BuxB,GAAavxB,EAAAA,EAAAA,IAAuB,MACpC0gD,EAAgBh2F,QAAQ/B,IAE5Bg4F,QAASjnB,IACPknB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9sC,EACT+sC,WA1B6B,IA2B7BpG,UAAW,KAEP,kBACJv9B,EAAiB,oBAAEma,EAAmB,wBACtCla,EAAuB,kBAAEC,EAAiB,uBAC1CC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBlc,EAAK9xC,EAAAA,IAAc,EAAM0uB,EAAAA,KAC7C6iE,EAAqBC,EAAmBC,IAAsB7gD,EAAAA,GAAAA,IAAQ,IAE7E1E,EAAAA,EAAAA,KAAU,IACDglD,EAAgBhnB,EAAoBnI,EAAW5gD,SAAW2hD,IAC3DA,EAAO0F,gBACTuoB,EAAqB,CAAE18F,UACzB,SACGI,GACJ,CAACJ,EAAQ68F,EAAehnB,EAAqB6mB,IAEhD,MAKM9iC,GAAcrc,EAAAA,EAAAA,KAAY,KACzBz4C,IACDA,EAAQu4F,eACVV,EAAiB,CAAExrF,KAAMrM,EAAQu4F,iBACxBv4F,EAAQyxF,cACjB1uF,EAAa,CAAE7H,OAAQ8E,EAAQ9E,OAASuG,UAAWzB,EAAQyxF,iBAE3DrzF,EAAS,CAAE/B,GAAI2D,EAAQ9E,SAEnB8E,EAAQs7B,YACVw8D,EAAS,CACP7oF,MAAOjP,EAAQ9E,OACfkgC,MAAOp7B,EAAQs7B,cAGrB,GACC,CAACv4B,EAAc/C,EAAS5B,EAAUy5F,EAAkBC,IAEvD,GAAK93F,EAIL,OACE,0BACE24C,IAAKA,EACLrI,IAAI,oBACJxoB,UAAU,gCACVijC,YAhCqB9+C,KACvBy9D,EAAAA,GAAAA,GAAwBz9D,GACxBwoD,EAAwBxoD,EAAE,EA+BxB0pD,cAAejB,GAEf,0BAAK5sC,UAAU,kDAAkDytB,IAAI,QACnE,0BAAKztB,UAAU,gBAAgBytB,IAAI,QACjC,0BAAKztB,UAAU,gBAAgBytB,IAAI,OAChC/e,IAAOm4B,EAAAA,GAAAA,IAAWvrC,EAAAA,EAAAA,IAAgBoT,IAAQ,IAC1CmhE,IAAWhpC,EAAAA,GAAAA,GAAW3uD,EAAQw4F,kBAAmBxlF,EAAAA,EAAAA,GAAaxT,EAAMm4F,EAASnhE,IAAQ,KAGxF,0BAAK1O,UAAU,yBAAyBytB,IAAI,OAAOoD,IAAKiwB,GACtD,2BAAM9gD,UAAU,qBAAqBytB,IAAI,SACtC2oC,EAAAA,GAAAA,GAAuBl+E,EAAQ3B,KAAKA,KAAM2B,EAAQ3B,KAAKyd,WAG1D,2BAAMgM,UAAU,cAAcytB,IAAI,OAChC,2BAAMztB,UAAU,qBACb9nB,EAAQy4F,cAAgBj5F,EAAK,4BAA8BA,EAAK,uBAKvE,mBAACq2C,GAAA,EAAM,CAACH,MAAM,YAAYI,KAAK,OAAO8C,QAAM,EAACvD,QAASyf,EAAahtC,UAAU,4BAC1EtoB,EAAKQ,EAAQ03F,MACV,uBACC13F,EAAQyxF,cAAgB,wBAA0B,+BAI5D9iB,GACC,mBAAC,GAAoC,CACnC7xE,OAAQ03D,EACRya,OAAQN,EACR3uE,QAASA,EACT04F,WAAYL,EACZn/C,QAASyb,EACTtO,oBAAqBuO,IAGzB,mBAAC,GAAa,CACZ93D,OAAQs7F,EACRl/C,QAASo/C,IAEP,KC8HV,IAAe/kD,EAAAA,EAAAA,KAlO0B,IA0BnC,IA1BoC,qBACxC1zB,EAAoB,OACpB3kB,EAAM,SACNC,EAAQ,WACRmE,EAAU,cACVq5F,EAAa,iBACbC,EAAgB,SAChBrwF,EAAQ,WACR+xD,EAAU,UACVu+B,EAAS,cACTC,EAAa,UACbh4B,EAAS,aACT1V,EAAY,YACZ2tC,EAAW,6BACXC,EAA4B,qBAC5BlrB,EAAoB,KACpBvxE,EAAI,QACJi+D,EAAO,eACPy+B,EAAc,uBACdC,EAAsB,mBACtBzN,EAAkB,cAClB0N,EAAa,WACbC,EAAU,sBACVhrB,EAAqB,YACrBirB,EAAW,cACXC,GACD,EACC,MAAM,oBAAEC,IAAwBpoE,EAAAA,EAAAA,OAE1B,8BACJ48C,EAA6B,8BAC7BC,EAA6B,8BAC7BC,GpD3EW,SACb1xE,EACA6uD,EACA0iB,GAEA,MAAM,oBAAE/gC,EAAmB,iBAAEysD,EAAgB,sBAAEnL,IAA0Bl9D,EAAAA,EAAAA,OAEnE,SAAE6mB,IAAaC,EAAAA,EAAAA,MACfwhD,EAAkCzhD,EAAW,IAAM,KAGvDggD,QAASjqB,EAA+B2rB,OAAQC,EAAkBC,SAAUC,IAC1E5B,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9sC,EACT0uC,WAjBsC,MAkBpCp5E,IACF,GAAa,WAATnkB,EACF,OAGF,IAAIyL,EAAQ,EACZ,MAAM+xF,EAAuB,GACvBC,EAAwB,GAE9Bt5E,EAAQza,SAASkuF,IACf,MAAM,eAAE9kB,EAAc,OAAE1F,GAAWwqB,EAEnC,IAAK9kB,EACH,OAGF,MAAM,QAAE4qB,GAAYtwB,EAEdloE,EAAYiB,OAAOu3F,EAAQp3F,eAAiBo3F,EAAQx4F,WACtDA,EAAYuG,IACdA,EAAQvG,GAGNw4F,EAAQryD,kBACVmyD,EAAWp5F,KAAKc,GAGdw4F,EAAQvN,mBACVsN,EAAYr5F,KAAKc,EACnB,IAGEqsE,EAAqB9lD,SAAWhgB,GAAS8lE,EAAqB9lD,SAChE+kB,EAAoB,CAAE/kC,UAGpB+xF,EAAWt3F,QACb+2F,EAAiB,CAAEl6F,WAAYy6F,IAG7BC,EAAYv3F,QACd4rF,EAAsB,CAAE/uF,WAAY06F,GACtC,KAGFE,EAAAA,GAAAA,GAAkBP,EAAkBE,GAEpC,MACE7B,QAAShqB,IACPiqB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9sC,EACT0uC,WAAYt5B,GACZ25B,OAAQV,KAGFzB,QAAS/pB,IAAkCgqB,EAAAA,GAAAA,IAAwB,CACzEC,QAAS9sC,EACT0uC,WAAYt5B,KAGd,MAAO,CACLuN,gCACAC,gCACAC,gCAEJ,CoDJMmsB,CAAoB79F,EAAM6uD,EAAc0iB,IAEtC,oBACJusB,EAAmB,mBACnBC,EAAkB,cAClBC,GC7EW,SACbh+F,EACA6uD,EACA9rD,EACAs5F,EACArwF,EACA8wF,EACAC,EACA9+B,EACAy+B,EACAC,GAEA,MAAM,qBAAE9zF,IAAyB+rB,EAAAA,EAAAA,OAE1BqpE,EAAmBC,IAAoBpkD,EAAAA,EAAAA,KAC5C,IAAgB,WAAT95C,EAAoB,EACzB2O,EAAAA,EAAAA,KAAS,IAAM9F,EAAqB,CAAED,UAAWqR,EAAAA,GAAAA,aAAgC,KAAM,GAAM,IAC7FtL,EAAAA,EAAAA,KAAS,IAAM9F,EAAqB,CAAED,UAAWqR,EAAAA,GAAAA,YAA+B,KAAM,GAAM,IAC1F,IAEJ,CAACpR,EAAsB9F,IAInB+6F,GAAsBhjD,EAAAA,EAAAA,IAAuB,MAE7CijD,GAAqBjjD,EAAAA,EAAAA,IAAuB,MAE5CkjD,GAAgBljD,EAAAA,EAAAA,IAAuB,MAE7C,SAASqjD,IACP,IAAKlgC,EAAS,OAEd,IAAKl7D,IAAeA,EAAWmD,OAG7B,OAFA42F,GAAY,QACZC,GAAc,GAIhB,IAAKV,EAGH,OAFAS,GAAY,QACZC,GAAc,GAIhB,IAAKluC,EAAapjC,QAChB,OAGF,MAAM,aAAEysE,EAAY,aAAEC,EAAY,UAAEC,GAAcvpC,EAAapjC,QACzD2yE,EAAe1yF,KAAK2K,MAAM8hF,EAAeC,EAAYF,GAErDmG,EAAaD,GAvDC,EAyDC,IAAjBjG,IAEJ2E,EAAY9wF,GAAYqyF,IALHD,GAvDH,KA6DlBrB,GAAesB,GACjB,CAEA,MACE5C,QAASjnB,IACPknB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9sC,EACT+uC,OAAQU,EAAAA,KACNn6E,IACF,IAAK+5E,IAAqBD,EACxB,OAKF,GAD4Bl7F,EAAW,GAAKw7F,EAAAA,IAE1C,OAGF,MAAMC,EAAer6E,EAAQxa,MAAK,QAAC,eAAEmpE,GAAgB,SAAKA,CAAc,IACxE,IAAK0rB,EACH,OAGF,MAAM,OAAEpxB,GAAWoxB,EAEM,sBAArBpxB,EAAO7hD,WAEPkzE,EAAAA,IAA0B/B,EAAejxE,SAAW1oB,EAAWmD,QAAUgU,EAAAA,MAEzEyiF,EAAuBlxE,SAAU,GAGnCwyE,KAC8B,qBAArB7wB,EAAO7hD,WAChB2yE,GACF,KAGFtsB,EAAAA,GAAAA,IAAeksB,EAAqBtpB,IACpC5C,EAAAA,GAAAA,IAAemsB,EAAoBvpB,GAEnC,MACEinB,QAASiD,EACTvB,OAAQwB,EACRtB,SAAUuB,IACRlD,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9sC,EACT+uC,OAAQiB,KACPV,IAEHvsB,EAAAA,GAAAA,IAAeosB,EAAeU,GAE9B,MACEjD,QAASqD,EACT3B,OAAQ4B,EACR1B,SAAU2B,IACRtD,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9sC,EACT+uC,OAvHoB,GAwHnBO,IAEHvsB,EAAAA,GAAAA,IAAeosB,EAAec,GAE9B,MAAMG,GAAuBnkD,EAAAA,EAAAA,MAmB7B,OAlBAmkD,EAAqBxzE,QAAU0yE,GAC/B3xC,EAAAA,GAAAA,IAAc,KACRyR,GACFghC,EAAqBxzE,SACvB,GACC,CAACwyC,KAGJzR,EAAAA,GAAAA,IAAc,KACZmyC,IACAI,IAEAz3F,YAAW,KACT03F,IACAJ,GAAgB,GA1IO,IA2ID,GACvB,CAACD,EAAcI,EAAgBh8F,EAAY67F,EAAgBI,IAEvD,CAAElB,sBAAqBC,qBAAoBC,gBACpD,CD/DMkB,CACFl/F,EACA6uD,EACA9rD,EACAs5F,EACArwF,EACA8wF,EACAC,EACA9+B,EACAy+B,EACAC,GAGI15F,GAAO81C,EAAAA,GAAAA,KAEPomD,EACJ,0BAAK5zE,WAAW0uB,EAAAA,GAAAA,GAzDS,iBAyD4B,wBAAyBlG,IAAI,mBAChF,+BAAO9wC,EAAK,oBAIVm8F,EAAwBvtB,EAAwB,EAAIuqB,EAAcp4F,QAAO,CAACC,EAAKo7F,IAC5Ep7F,EAAMo7F,EAAal8B,aAAam8B,OAAOp5F,QAC7C,GACH,IAAIq5F,EAAkB,EAEtB,MAAMn8B,EAAag5B,EAAc74F,KAAI,CACnCi8F,EACAC,EACAC,KAEA,MAAMv8B,EAAeq8B,EAAUr8B,aAAa5/D,KAAI,CAC9Co8F,EACAC,EACAC,KAEA,GACyB,IAAvBF,EAAYz5F,SACRw8D,GAAQi9B,EAAY,MACrBl8B,EAAAA,EAAAA,IAAgBk8B,EAAY,MAC3BA,EAAY,GAAGv0F,QAAQ4H,QAAQuiC,UACnC,CACA,MAAM9xC,EAAUk8F,EAAY,GACtBtuB,EACJuuB,IAAqBC,EAAkB35F,OAAS,GAC7Cu5F,IAAmBC,EAAgBx5F,OAAS,EAGjD,OAAOmC,EAAAA,EAAAA,IAAQ,CACb5E,EAAQ3D,KAAO28F,EAA6BhxE,SAAW0zE,EACvD,mBAAC,GAAa,CACZprD,IAAKtwC,EAAQ3D,GACb2D,QAASA,EACT6tE,cAAe9rE,QAAQ5G,GAAYA,IAAamB,EAAAA,IAChDyxE,8BAA+BA,EAC/BC,8BAA+BA,EAC/BC,8BAA+BA,EAC/BH,qBAAsBA,EACtBH,gBAAiBguB,IAA0BG,EAC3CluB,aAAcA,KAGpB,CAEA,IAAIyuB,EAEJ,OAAOH,EAAYp8F,KAAI,CACrBo/D,EACAo9B,KAEA,MAAMt8F,EAAUi/D,GAAQC,GAAkBA,EAAeU,YAAcV,EACjErM,EAAQoM,GAAQC,GAAkBA,OAAiB5jE,EACnDylE,GAAQC,EAAAA,EAAAA,IAAahhE,GACrBu8F,EAAiBt9B,GAAQC,GACzBY,EAAco8B,EAAYI,EAAe,GAE3Ct8F,EAAQqI,iBAAmB0wF,EAAY/wE,WAAY4mD,EAAAA,EAAAA,IAAiB5uE,EAAQqI,mBAC9E0wF,EAAY/wE,SAAU4mD,EAAAA,EAAAA,IAAiB5uE,EAAQ3D,KAGjD,MAAMmgG,GAAmBD,GAAkBv8F,EAAQsE,UAAYtE,EAAQsE,eAAYhJ,EAC7EmhG,EAAsB38B,IAAgBb,GAAQa,GAAeA,EAAYx7D,eAAYhJ,EAErFsD,EAAW,CACfisF,eAAiC,IAAjByR,EAChBnO,cAAemO,IAAiBJ,EAAYz5F,OAAS,EACrD2rF,uBAAwBrsF,QAAQy6F,GAAmBA,IAAoBH,GACvEzR,sBAAuB7oF,QAAQy6F,GAAmBA,IAAoBC,GACtE7uB,aACE0uB,IAAiBJ,EAAYz5F,OAAS,GACnC05F,IAAqBC,EAAkB35F,OAAS,GAChDu5F,IAAmBC,EAAgBx5F,OAAS,GAInD45F,EAAyBG,EAEzB,MAAME,GAAa5/E,EAAAA,EAAAA,IAAqB9c,GAElCswC,GAAMjwB,EAAAA,EAAAA,IAA6BrgB,GAAY,GAAEA,EAAQyH,QAAQi1F,IAAeA,EAEhFxO,GAA+B,IAAlBiL,IAA4BL,EAEzC6D,EAAoB38F,EAAQ3D,KAAOovF,EAEzC,OAAO7mF,EAAAA,EAAAA,IAAQ,CACb5E,EAAQ3D,KAAO28F,EAA6BhxE,SAAW0zE,EACvD,mBAAC,GAAO,CACNprD,IAAKA,EACLtwC,QAASA,EACTiuF,6BAA8BlgB,EAC9BC,8BAA+BA,EAC/BC,8BAA+BA,EAC/Bpb,MAAOA,EACPiO,UAAWA,EACX6pB,WAAY/rF,EAASuvF,eAAiB0K,IAAc93B,KAAW47B,IAAsBriC,GACrFowB,eAAgB9rF,EAASisF,gBAAkBgO,IAAc93B,EACzD5lE,SAAUA,EACVoE,gBAAiBhD,EACjB2xF,WAAYA,EACZpe,WAAYoe,GAAc/yF,IAAamB,EAAAA,GACvCqxE,gBAAiBguB,IAA0BG,EAC3CjR,eAAgBjsF,EAASisF,eACzBsD,cAAevvF,EAASuvF,cACxBC,uBAAwBxvF,EAASwvF,uBACjCxD,sBAAuBhsF,EAASgsF,sBAChChd,aAAchvE,EAASgvE,aACvBE,qBAAsBA,IAExB9tE,EAAQ3D,KAAOovF,GACb,0BAAK3jE,UAAU,uBAAuBwoB,IAAI,sBACxC,+BAAO9wC,EAAK,wBAGhB,IACDq8F,MAAM,IAGX,OACE,0BACE/zE,UAAU,qBACVwoB,IAAKyrD,EAAUv8B,SACfzU,YAAa2e,GAAAA,EACbkzB,eAAa,GAEb,0BACE90E,WAAW0uB,EAAAA,GAAAA,GAAe,eAAgB4iD,GAAc,eACxD9oD,IAAI,cACJya,YAAa2e,GAAAA,EACbr0B,QAAU+jD,OAA6E99F,EAAhE,IAAMi+F,EAAoB,CAAEzqF,WAAYitF,EAAUv8B,YAEzE,2BAAMjqB,IAAI,QACP6jD,GAAc2C,EAAUx8B,eAAiBs9B,EAAAA,KACxCr9F,EAAK,+BAEN45F,GAAc2C,EAAUx8B,eAAiBs9B,EAAAA,KACxCr9F,EAAK,sBAAsBs9F,EAAAA,GAAAA,IAAgBt9F,EAAMu8F,EAAUv8B,cAAUlkE,GAAW,KAEhF89F,IAAc0D,EAAAA,GAAAA,IAAgBt9F,EAAMu8F,EAAUv8B,YAGnDE,EAAam8B,OACV,IAIV,OACE,0BAAK/zE,UAAU,qBAAqB80E,eAAa,GAC/C,0BAAKjkD,IAAK0hD,EAAqB/pD,IAAI,oBAAoBxoB,UAAU,sBAChE63C,EAAWk8B,QACVh8E,GAAwB+4E,GACxB,mBAAC,GAAgB,CAACtoD,IAAKp1C,EAAQA,OAAQA,EAAQkwD,aAAcA,IAE/D,0BACEzS,IAAK2hD,EACLhqD,IAAI,mBACJxoB,UAAU,qBAEZ,0BACE6wB,IAAK4hD,EACLjqD,IAAI,cACJxoB,UAAU,gBAER,I,gBE3PV,MAqEA,IAAeyrB,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA2B,IAA3B,OAAEoP,GAAQ,EACjB,MAAM,SAAEiC,GAAarR,EAAOqR,SAASoa,SAC/Bu2E,GAAWC,EAAAA,EAAAA,IAAkB7yF,IAAU6yF,EAAAA,EAAAA,IAAkBjiG,EAAO0X,eAChEvG,EAAUE,GAAU3J,OAAS2J,EAAS2wF,EAAW3wF,EAAS3J,aAAUnH,EACpEwN,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQoP,GAChC,OAAKrB,EAIE,CACLoD,UACA+wF,oBAAqBn0F,EAAKnG,aAAemG,EAAKnG,YAAYtG,KAAOyM,EAAKoW,uBAClEpW,EAAKnG,YAAYtG,QACjBf,EACJ21B,gBAAiBl2B,EAAOk2B,iBARjB,CAAC,CAST,GAhBegmB,EAnE+B,IAI7C,IAJ8C,QAClD/qC,EAAO,gBACP+kB,EAAe,oBACfgsE,GACD,EACC,MAAM,qBACJC,EAAoB,YACpBvkF,EAAW,oBACXo0B,IACE5b,EAAAA,EAAAA,MAEE3xB,GAAO81C,EAAAA,GAAAA,KAEP8V,GAAe/T,EAAAA,EAAAA,IAAuB,OAE1C2gD,QAASjnB,IACPknB,EAAAA,GAAAA,IAAwB,CAC1BC,QAAS9sC,EACT+sC,WApB6B,OAsB/BplD,EAAAA,EAAAA,KAAU,KACJ7mC,GAA+B,yBAApB+kB,GAIfisE,GAAsB,GACrB,CAACjsE,EAAiBisE,EAAsBhxF,KAE3C6mC,EAAAA,EAAAA,KAAU,KACgB,yBAApB9hB,GAA8CgsE,GAChDlwD,EAAoB,CAAE/kC,MAAOi1F,GAC/B,GACC,CAAChsE,EAAiB8b,EAAqBkwD,IAE1C,MAAME,GAAsB1kD,EAAAA,EAAAA,KAAa2kD,IACvCA,EAAkB,IACbA,EACHtyD,qBAAqB,GAEvBnyB,EAAY,CAAEzM,QAASkxF,GAAkB,GACxC,CAACzkF,IAEJ,OACE,0BAAKmP,UAAU,kBAAkB6wB,IAAKyS,GACpC,0BAAKtjC,UAAU,WACb,wBAAGA,UAAU,QAAQytB,IAAI,QAAQ/1C,EAAK,kCACtC,wBAAGsoB,UAAU,cAAcytB,IAAI,QAAQ/1C,EAAK,8BAE5C,0BAAKsoB,UAAU,WACZ5b,GACC,mBAACmxF,GAAA,EAAa,CACZnxF,QAASA,EACTmpC,QAAS8nD,EACT19C,SAAUvzC,EACV6kE,oBAAqBA,EACrBj7B,KAAM,IACNhuB,UAAU,QACVw1E,eAAa,EACbz9E,sBAAoB,MAKxB,KC7EJ09E,GAAY,EAAI57D,GAAAA,GA2FtB,IAAe4R,EAAAA,EAAAA,KAjFkB,IAK3B,IAL4B,eAChCmmB,EAAc,KACdn9D,EAAI,uBACJihG,EAAsB,MACtBx+E,GACD,EACC,MAAMxf,GAAO81C,EAAAA,GAAAA,KAEb,MAAa,cAAT/4C,EAiCN,SAAyBiD,GACvB,OACE,0BAAKsoB,UAAU,SAAQ,+BAAOtoB,EAAK,uCAEvC,CApCWi+F,CAAgBj+F,GAGrBk6D,EAmCN,SAA6Bl6D,GAC3B,OACE,0BAAKsoB,UAAU,cACb,0BAAKA,UAAU,WACb,wBAAGA,UAAU,6BACb,yBAAIA,UAAU,SAAStoB,EAAK,wCAC5B,yBAAIsoB,UAAU,eACZ,6BAAKtoB,EAAK,+CACV,6BAAKA,EAAK,+CACV,6BAAKA,EAAK,+CACV,6BAAKA,EAAK,iDAKpB,CAjDWk+F,CAAoBl+F,GAGzBg+F,EAgDN,SAAqBh+F,GACnB,OACE,0BAAKsoB,UAAU,cACb,0BAAKA,UAAU,UAAUytB,IAAK/1C,EAAKg2C,MAAQ,WAAQl6C,GACjD,yBAAIwsB,UAAU,SAAStoB,EAAK,yBAC5B,wBAAGsoB,UAAU,eAAetoB,EAAK,4BACjC,yBAAIsoB,UAAU,mBACZ,6BAAKtoB,EAAK,yBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,yBACV,6BAAKA,EAAK,2BAKpB,CA9DWm+F,CAAYn+F,GAGjBwf,EASN,SAAqBxf,EAAcwf,GACjC,OACE,0BAAK8I,UAAU,cACb,0BAAKA,UAAU,WACb,mBAACsiE,GAAA,EAAS,CAACprE,MAAOA,EAAO82B,KAAMynD,GAAWz1E,UAAU,oBACpD,yBAAIA,UAAU,SAAStoB,EAAK,qCAC5B,wBAAGsoB,UAAU,kCAAiC6mC,EAAAA,GAAAA,GAAWnvD,EAAK,mCAAoC,CAAC,SAI3G,CAlBWo+F,CAAYp+F,EAAMwf,GAIzB,0BAAK8I,UAAU,SAAQ,+BAAOtoB,EAAK,eAA2B,IC4E5Dq+F,IAAwB3yF,EAAAA,EAAAA,KAAUiL,GAAOA,KANvB,KAM8C,GA8gBtE,IAAeo9B,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA2C,IAA3C,OAAEG,EAAM,SAAEC,EAAQ,KAAEoB,GAAM,EACjC,MAAMuM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAChC,IAAK4N,EACH,MAAO,CAAC,EAGV,MAAMxJ,GAAaw+F,EAAAA,EAAAA,IAAwB/iG,EAAQG,EAAQC,EAAUoB,GAC/DkxC,EAAwB,cAATlxC,GACjBoD,EAAAA,EAAAA,IAA4B5E,EAAQG,IACpC0E,EAAAA,EAAAA,IAAmB7E,EAAQG,GACzBuwF,GAAqBjyE,EAAAA,EAAAA,IAAyBze,EAAQG,EAAQC,GAC9Dq0B,GAAa5sB,EAAAA,EAAAA,IAAiB7H,EAAQG,EAAQC,GAEpD,KACEA,IAAamB,EAAAA,IAAmBwM,GAAMtL,SACjCiwC,GAAgBg+C,GAAsBh+C,EAAag+C,IAExD,MAAO,CAAC,EAGV,MAAM,aAAEvxE,EAAY,kBAAE6jF,EAAiB,YAAEp7F,GAAgBmG,EACnDk1F,GAAa3jF,EAAAA,EAAAA,IAAuBtf,EAAQG,GAE5C+iG,EACJ9iG,IAAamB,EAAAA,KACTgD,IAAewJ,EAAK8V,cAAgBo/E,GAAcr7F,IAAgBA,EAAY2B,UAG9E45F,GAAUrkE,EAAAA,EAAAA,IAAc9+B,EAAQG,GACtC,IACIy0C,EADAwuD,GAAmB,GAEnBnlC,EAAAA,EAAAA,IAA0Bj+D,EAAQG,KAChCgjG,EAAQ78E,SACVsuB,EAAUuuD,EAAQ78E,SAASsuB,QAE3BwuD,GAAmB,GAIvB,MAAMn/E,EAAQlW,EAAKmK,SAAS9X,GAE5B,MAAO,CACL0kB,sBAAsBC,EAAAA,EAAAA,IAA2B/kB,GACjDqjG,cAAc,EACdlkF,eACA6jF,oBACAjF,eAAe5/B,EAAAA,EAAAA,IAAcpwD,GAC7Bu1F,aAAapT,EAAAA,EAAAA,IAAYniF,GACzBw1F,UAAWx1F,EAAKw1F,UAChB5kC,gBAAgBC,EAAAA,EAAAA,IAAqB5+D,EAAQG,GAC7C6vF,eAAeC,EAAAA,EAAAA,IAAqB9vF,GACpCw8F,MAAO31F,QAAQm8F,GACf5+F,aACAmuC,eACA6sB,WAAYv4D,QAAQytB,GAAYQ,iBAChCwb,eAAe7sB,EAAAA,EAAAA,IAAoB5jB,EAAQG,EAAQC,GACnDy9F,iBAA2B,WAATr8F,IAAqB4F,EAAAA,EAAAA,IAAuBpH,EAAQG,EAAQC,GAC9EojG,sBAAsBC,EAAAA,EAAAA,IAAqBzjG,EAAQG,EAAQC,GAC3D6iG,aACAxkC,oBAAoBC,EAAAA,EAAAA,IAAqB1+D,GACzCojG,mBACAxuD,UACA87C,qBACA0N,cAAerwF,EAAKuY,UAAa,iBAAkBvY,EAAKuY,SACpDtf,QAAQ+G,EAAKuY,SAASo9E,mBACtBnjG,EACJw1B,aAAc/1B,EAAO+1B,aACrB9R,WACIi/E,GAAiC,CAAEt7F,eACxC,GAtEes0C,EA5gB2B,IAoCzC,IApC0C,OAC9C/7C,EAAM,SACNC,EAAQ,KACRoB,EAAI,SACJmiG,EAAQ,YACRrF,EAAW,cACXC,EAAa,qBACbz5E,EAAoB,aACpBu+E,EAAY,cACZtF,EAAa,YACbuF,EAAW,QACXM,EAAO,QACPnkC,EAAO,eACPd,EAAc,cACdqxB,EAAa,UACbuT,EAAS,MACT5G,EAAK,WACLp4F,EAAU,aACVmuC,EAAY,cACZjC,EAAa,WACb8uB,EAAU,iBACVs+B,EAAgB,qBAChB2F,EAAoB,aACpBrkF,EAAY,kBACZ6jF,EAAiB,WACjBC,EAAU,mBACVxkC,EAAkB,YAClB72D,EAAW,iBACXw7F,EAAgB,QAChBxuD,EAAO,mBACP87C,EAAkB,cAClB0N,EAAa,aACbroE,EAAY,gBACZ8tE,EAAe,cACfC,EAAa,MACb7/E,GACD,EACC,MAAM,qBACJ5Z,EAAoB,gBAAE05F,EAAe,sBAAEC,EAAqB,qBAAEC,EAAoB,kBAAEC,EAAiB,iBACrGC,IACE/tE,EAAAA,EAAAA,MAGEi6B,GAAe/T,EAAAA,EAAAA,IAAuB,MAItC8nD,GAAkB9nD,EAAAA,EAAAA,IAAyB,WAAT96C,IACnC6iG,EAAAA,EAAAA,KAAmBt7F,EAAAA,EAAAA,MAAa5I,EAAQC,KACxCkkG,EAAAA,EAAAA,KAAuBv7F,EAAAA,EAAAA,MAAa5I,EAAQC,IAC5C,GAEC49F,IAAc1hD,EAAAA,EAAAA,MACdioD,IAAejoD,EAAAA,EAAAA,MACfkoD,IAAsBloD,EAAAA,EAAAA,MACtBy2B,IAAuBz2B,EAAAA,EAAAA,MACvB2hD,IAA+B3hD,EAAAA,EAAAA,MAC/BmoD,IAAoBnoD,EAAAA,EAAAA,MACpBooD,IAA4BpoD,EAAAA,EAAAA,KAAO,GACnCqoD,IAA6BroD,EAAAA,EAAAA,IAAOt1C,QAAQY,KAE3CwjF,GAAiBwZ,KAAsBprD,EAAAA,EAAAA,MAExCqrD,IAAkBzpD,EAAAA,GAAAA,GAASxG,GAASte,OAAQwuE,EAAAA,EAAAA,IAAqBlwD,EAAQte,YAAS/1B,GAClFwkG,IAAgB3pD,EAAAA,GAAAA,GAASxG,GAASnoB,KAAMu4E,EAAAA,EAAAA,IAAqBpwD,EAAQnoB,UAAOlsB,GAC5E0kG,GAAoBrwD,GAASte,OAAQ4uE,EAAAA,EAAAA,IAAuBtwD,EAAQte,OAASse,GAASnoB,KACxF04E,EAAAA,EAAAA,IAAmBvwD,EAAQnoB,UAAOlsB,EAChC6kG,GAAwBH,IAAqB,CACjDrwF,MAAOqwF,GAAkBrwF,MAAQywF,EAAAA,GACjCxwF,OAAQowF,GAAkBpwF,OAASwwF,EAAAA,IAG/BtxE,GAAoB/sB,QAAQzC,IAElCypD,EAAAA,GAAAA,IAAc,KAERj6B,KACF3U,EAAAA,EAAAA,KAAU,KACRulF,GAA2B13E,SAAU,CAAK,GAE9C,GACC,CAAC8G,MAGJi6B,EAAAA,GAAAA,IAAc,KACZ+kB,GAAqB9lD,QAAUwjB,CAAa,GAC3C,CAACA,KAEJuH,EAAAA,EAAAA,KAAU,MACHlzB,GAAwBi5E,GAAiBt+B,GAAW1pC,GACvDiuE,EAAsB,CAAE7jG,UAC1B,GACC,CAAC2kB,EAAsB3kB,EAAQs/D,EAASs+B,EAAehoE,EAAciuE,KAGxEh2C,EAAAA,GAAAA,IAAc,KACRj6B,KACFkqE,GAA6BhxE,QAAU8lD,GAAqB9lD,QAC9D,GACC,CAAC8G,MAEJi6B,EAAAA,GAAAA,IAAc,KACZy2C,GAAkBx3E,QAAUg2E,CAAU,GACrC,CAACA,I1DpOiCiB,MAUrC1jD,EAAAA,GAAAA,GAAW,CAAE,QATb,SAAoBtvC,GAClB,MAAM3M,GAAa+gG,EAAAA,GAAAA,KAEf/gG,GAAcA,EAAWmD,OAAS,IACpCwJ,EAAEqnC,iBACF2rD,EAAkB,CAAE3/F,eAExB,GAEmC,E0D4NnCghG,CAA8BrB,GAE9B,MAAMtG,IAAgBtiD,EAAAA,EAAAA,KAAQ,KAC5B,IAAK/2C,IAAemuC,EAClB,OAGF,MAAM9rC,GAAc8pF,GAAsB8S,IAAyB9S,GAC5DnsF,EAAW,IAAMi/F,IAAyBj/F,EAAW,GAExDA,EADA,CAACmsF,KAAuBnsF,GAG5B,IAAKqC,EAAYc,OACf,OAGF,MAAM89F,EAAiB5+F,EAAY7B,KAAKzD,GAAOoxC,EAAapxC,KAAK0D,OAAOgC,SACxE,OAAOw+F,EAAe99F,OAClB08D,IAAcqhC,EAAAA,EAAAA,IAAQD,EAAgB,MAAOvH,GAA6BhxE,cAC1E1sB,CAAS,GACZ,CAACgE,EAAYmuC,EAAc8wD,EAAsB9S,KAEpDtL,EAAAA,GAAAA,IAAY,KACV,IAAK7gF,IAAemuC,EAClB,OAEF,MAAM/oC,EAAMpF,EAAWS,QAAQ1D,GAAOoxC,EAAapxC,IAAKmoC,YAEnD9/B,EAAIjC,QAETu8F,EAAqB,CAAE9jG,SAAQwJ,OAAM,GApJE,OAuJzCy7E,EAAAA,GAAAA,IAAY,KACV,IAAK7gF,IAAemuC,GAAgBtyC,IAAamB,EAAAA,GAC/C,OAEF,MAAMoI,EAAMpF,EAAWS,QAAQ1D,GAAOoxC,EAAapxC,IAAK6nB,mBAAmBo2C,aAEtE51D,EAAIjC,QAETy8F,EAAiB,CAAEhkG,SAAQwJ,OAAM,GA9JK,MAiKxC,MAAM+7F,IAAiBpqD,EAAAA,EAAAA,KAAQ,KAC7B,GAAa,WAAT95C,EAIJ,OAAO2O,EAAAA,EAAAA,KAAS,IAAM9F,EAAqB,CAAED,UAAWqR,EAAAA,GAAAA,UAA6B,KAAM,GAAM,EAAM,GAEtG,CAACpR,EAAsB9F,KAEpB,WAAEohG,GAAU,kBAAEC,ICpRP,WAGb,MAAOD,EAAYE,IAAkBnpD,EAAAA,GAAAA,IAAQ,GAEvCopD,GAAeC,EAAAA,GAAAA,GATN,KASgC,GA4B/C,MAAO,CACLJ,aACAC,mBA5BwBloD,EAAAA,EAAAA,KAAY,CAACyxB,EAA2Bw0B,KAChEkC,IAEKn2F,SAAS40B,KAAKod,UAAUmtB,SAAS,2BACpCsd,EAAAA,EAAAA,KAAQ,KACNz8E,SAAS40B,KAAKod,UAAU1gB,IAAI,wBAAwB,IAIxD8kE,GAAa,MACX3Z,EAAAA,EAAAA,KAAQ,KACN,MAAM6Z,EAAet2F,SAASwoC,cAAc,UACxC8tD,GACFA,EAAatkD,UAAUuN,OAAO,SAGhC,MAAMg3C,EAgBd,SAAuB92B,EAAwBw0B,GAC7C,MAAMuC,EAAc/2B,EAAUx/D,iBAAiC,gBACzDw2F,EAAeh3B,EAAUyqB,UAE/B,OAAO34D,MAAMzjB,KAAK0oF,GAAa/6F,MAAM2rB,IACnC,MAAM,UAAEsvE,EAAS,aAAE1M,GAAiB5iE,EAC9BpiB,EAAM0xF,EAAYD,EACxB,OAAQzM,GAAgBhlF,GAAOA,IAAQivF,EAhDb,GADX,GAiDsE,GAEzF,CAzB4B0C,CAAcl3B,EAAWw0B,GACzCsC,GACFA,EAAYvkD,UAAU1gB,IAAI,SAG5BtxB,SAAS40B,KAAKod,UAAUuN,OAAO,wBAAwB,GACvD,GACF,GACD,CAAC42C,EAAgBC,IAMtB,CD+O4CQ,GAEpCpI,IAAiB5hD,EAAAA,EAAAA,MACjB6hD,IAAyB7hD,EAAAA,EAAAA,MAEzBiqD,IAAe7oD,EAAAA,EAAAA,KAAY,KAC/B,GAAIgnD,GAA0Bz3E,QAE5B,YADAy3E,GAA0Bz3E,SAAU,GAItC,MAAMkiD,EAAY9e,EAAapjC,QAC1BkiD,IAIL+uB,GAAejxE,SAAU,EAEpBw3E,GAAkBx3E,SACrB24E,GAAkBz2B,EAAWw0B,GAG/Bb,IAAsB,KACpB5E,GAAejxE,SAAU,GAEzBk/D,EAAAA,EAAAA,KAAQ,KACDhd,EAAUq3B,gBAIfpC,EAAgBn3E,QAAUkiD,EAAUwqB,aAAexqB,EAAUyqB,UAEhD,WAATp4F,GACFuiG,EAAgB,CAAE5jG,SAAQC,WAAUoG,aAAc49F,EAAgBn3E,UACpE,GACA,IACF,GACD,CAAC24E,GAAmBjC,EAAUniG,EAAMuiG,EAAiB5jG,EAAQC,IAG1D+4F,IAAez7C,EAAAA,EAAAA,KAAa07C,IAChCwL,GAAmBxL,EAAMqN,YAAY5xF,OAAO,GAC3C,KACHklF,EAAAA,GAAAA,GAAkB1pC,EAAc8oC,IAGhC,MAAQtkF,OAAQ6xF,KAAiB9lC,EAAAA,GAAAA,MAEjC5oB,EAAAA,EAAAA,KAAU,KACRqY,EAAapjC,QAASiyE,QAAQyH,aAAeC,OAAOv2C,EAAapjC,QAASysE,aAAa,GACtF,CAACgN,GAAc9C,KAGlB5rD,EAAAA,EAAAA,KAAU,KACR,IAAK0tD,KAAmBrC,GAAgBlkF,GAAgB8jF,EACtD,OAKF,GAD2B1+F,GAAcA,EAAWA,EAAWmD,OAAS,GAAKq4F,EAAAA,IAE3E,OAGF,MAAM5wB,EAAY9e,EAAapjC,UAE1B1oB,GACHA,EAAWmD,OAASgU,EAAAA,IAAqB,GACrCyzD,EAAU3d,kBAAqC+nC,cAAgBpqB,EAAUuqB,eAE7EgM,IACF,GACC,CAACrC,EAAc9+F,EAAYmhG,GAAgBzC,EAAY9jF,KAG1D6uC,EAAAA,GAAAA,IAAc,KACZ,IAAKzpD,IAAeigG,GAAoBv3E,QACtC,OAGF,MAAM45E,EAAwBrC,GAAoBv3E,QAC/CjoB,QAAQknE,GAAY3nE,EAAW4F,SAASxC,OAAOukE,EAAQgzB,QAAQx4F,cAI5DwtE,EAAS2yB,EAAsB,IAAMA,EAAsB,GAC5D3yB,IAIL8pB,GAAY/wE,QAAUinD,EAAO5yE,GAC7BijG,GAAat3E,QAAUinD,EAAO7E,wBAAwB36D,IAAG,GAExD,CAACnQ,EAAYs5F,EAAkBzS,GAAiBuY,IAGnDlnB,IAA4B,IAEtB,IADJqqB,EAAgBC,EAAsBC,GACvC,EACC,MAAM73B,EAAY9e,EAAapjC,QAC/Bu3E,GAAoBv3E,QAAUgU,MAAMzjB,KAAK2xD,EAAUx/D,iBAAiC,uBAEpF,MAAMs3F,EACJ1iG,GAAcuiG,GAAkBviG,EAAWA,EAAWmD,OAAS,KAAOo/F,EAAeA,EAAep/F,OAAS,GAEzGw/F,EACJ3iG,IAAa,KAAOuiG,IAAiB,IAAMviG,GAAYmD,SAAYgU,EAAAA,IAAqB,EAAI,EAExFyrF,EAAkBF,IAA0BC,EAC5CE,EAAoB7iG,GAAckgG,GAAkBx3E,UAAY1oB,EAAWA,EAAWmD,OAAS,GAI/F2/F,EACJxJ,GACGsJ,GACC5iG,GAAcA,EAAWmD,OAASgU,EAAAA,IAAqB,IACvDyzD,EAAUq3B,cAAe9kD,UAAUmtB,SAAS,0BAC5CM,EAAU3d,kBAAsC+nC,cAAyC,EAAzBpqB,EAAUuqB,aAG5E2N,IACFl4B,EAAUq3B,cAAe9kD,UAAU1gB,IAAI,yBAEvCl4B,YAAW,KACLqmE,EAAUq3B,eACZr3B,EAAUq3B,cAAc9kD,UAAUuN,OAAO,wBAC3C,GApS2B,MAwS/B,MAAM,UAAE2qC,EAAS,aAAED,EAAY,aAAED,GAAiBvqB,EAC5C3oE,EAAe49F,EAAgBn3E,QAC/Bq6E,EAAkB9C,GAAoBv3E,QAAQu3E,GAAoBv3E,QAAQvlB,OAAS,GAEzF,IAAI6/F,EAAe/gG,GAAgBwgG,GAAuBtN,GACtDyN,IAKFI,GADuBD,EAAkBA,EAAgB5N,aAAe,GAG1E,MAAMmG,EAAahC,GAAoBkJ,GAAwBQ,GAxT1C,GA0TrB,IAAIC,EAEJ,GAAIL,GAAmBtH,IAAeuH,IAChCE,IACFnb,EAAAA,EAAAA,KAAQ,MACNhf,EAAAA,GAAAA,GACEgC,EACAm4B,EACA,MA7TgB,GA+TjB,IAILE,EAAe7N,EAAeD,EAC9B0K,EAAgBn3E,QAAU/f,KAAKC,IAAID,KAAKmiD,KAAKsqC,EAAe6N,GAAe9N,IAGtE2N,GACH,OASJ,MAAMI,OAAoClnG,IAAxBymG,GAAqCA,IAAwB5b,GACzElX,EAAS8pB,GAAY/wE,SAAWkiD,EAAUj3B,cAAe,IAAG8lD,GAAY/wE,WACxE0zE,GACHzsB,GACE+pB,GAA6BhxE,SAC7BkiD,EAAUj3B,cAA+B,mBAG9C,GAAI2nD,GAAc4H,EAAW,CAC3B,IAAIjO,EAAAA,GAAAA,KACF,OAGFgO,EAAe7N,EAAeD,CAChC,MAAWxlB,GACLiqB,GAAuBlxE,UACzBkxE,GAAuBlxE,SAAU,GACjCy6E,EAAAA,GAAAA,GAAoBv4B,IAItBq4B,EAAe5N,GADM1lB,EAAO7E,wBAAwB36D,KACR6vF,GAAat3E,SAAW,KAEpEu6E,EADS7G,EACMzzF,KAAKo6B,IAClBq5D,EAAcyF,WAAazC,EA5WG,GADX,IA8WnBhK,EAAenzF,GAGFmzF,EAAenzF,GAGhCmhG,EAAAA,GAAAA,GAAYx4B,EAAWjiE,KAAKmiD,KAAKm4C,IAE5B/C,GAAkBx3E,UACrBy3E,GAA0Bz3E,SAAU,GACpCk/D,EAAAA,EAAAA,KAAQ,KACNuY,GAA0Bz3E,SAAU,CAAK,KAI7Cm3E,EAAgBn3E,QAAU/f,KAAKC,IAAID,KAAKmiD,KAAKsqC,EAAe6N,GAAe9N,EAEtC,GAMpC,CAACn1F,EAAYs5F,EAAkBzS,GAAiBuY,KAEnDpmD,EAAAA,GAAAA,IAAsB,IAA8B,IAA5BqqD,GAAuB,OACdrnG,IAA3BqnG,IACFC,EAAAA,GAAAA,IApYiC,IAoY4BzjG,EAAAA,IAC/D,GACC,CAACq6D,IAEJ,MAAMh6D,IAAO81C,EAAAA,GAAAA,KAEPvgB,GAAYhzB,QAAQ7G,IAAU85B,EAAAA,EAAAA,IAAS95B,IACvC29F,GAAY92F,SAAUgzB,KAAc+jE,GAAkBp/B,GAAkBqxB,GACxEjqB,GAAY/+D,SAAS82F,IAAaC,GAClC+J,IAAuB7tE,EAAAA,EAAAA,IAAS95B,KAAYw+D,IAAmBg+B,KAG9DiB,KAAkBh2F,GAAerD,KAE7BigG,GAAoBv3E,SAAkD,IAAvCu3E,GAAoBv3E,QAAQvlB,SAEvC,IAAvBnD,GAAYmD,QAAwE,kBAAxDgrC,IAAenuC,EAAW,KAAKqI,QAAQ4H,QAAQhT,MACpC,kBAAvCoG,GAAagF,SAAS4H,QAAQhT,MAGhCihG,GAAyBa,GAAeC,GAClB,IAAvBh/F,GAAYmD,QAAwE,eAAxDgrC,IAAenuC,EAAW,KAAKqI,QAAQ4H,QAAQhT,KAC1EumG,GAAsC,IAAvBxjG,GAAYmD,QAC4B,gBAAxDgrC,IAAenuC,EAAW,KAAKqI,QAAQ4H,QAAQhT,KAE9CwmG,GAAiBpzD,IAAYA,EAAQrxB,cAAgBqxB,EAAQnoB,MAAQmoB,EAAQte,MAE7EvJ,IAAY0uB,EAAAA,GAAAA,GAChB,4BACAsqB,IAAa,cACZ69B,GAAW,cACH,WAATpiG,GAAqB,cACrBqiG,GAAmB,oBACnBC,GAAiB,kBACjBrlC,GAAsB,qBACtBknC,IAAc,YACblmC,GAAW,gBAGd,OACE,0BACE7hB,IAAKyS,EACLtjC,UAAWA,GACXk7E,SAAU1B,GACVv2C,YAAa2e,GAAAA,GAEZxvD,EACC,0BAAK4N,UAAU,SACb,+BACGi2E,EAAoBA,EAAkB1/F,KAAQ,sBAAoBy6F,EAAgB,UAAY,UAGjGnpD,EACF,0BAAK7nB,UAAU,SACZq2E,GAAoB,+BAAO3+F,GAAK,YAChCujG,KAAmB5E,GAAoB,+BAAO3+F,GAAK,eACnDmwC,GACC,0BACE7nB,UAAU,WACV4uB,MAAOypD,IACJ,UAASA,GAAsBxwF,WAGjCiwF,IACC,0BACE9oD,IAAK8oD,GACLjwF,MAAOwwF,IAAuBxwF,MAC9BC,OAAQuwF,IAAuBvwF,OAC/BmnC,IAAI,aAGP+oD,IACC,mBAACvmB,GAAA,EAAc,CACb9H,SAAO,EACP36B,IAAKgpD,GACLrmB,MAAI,EACJoL,yBAAuB,EACvBrL,OAAK,EACLE,aAAW,IAGdsmB,KAAsBJ,KAAoBE,IACzC,mBAAC/f,GAAA,EAAQ,CACPpwE,MAAOwwF,IAAuBxwF,MAC9BC,OAAQuwF,IAAuBvwF,SAGlC+/B,EAAQrxB,aACP,0BAAKwJ,UAAU,wBACb,wBAAGA,UAAU,kBAAkBtoB,GAAK,kBACnCmvD,EAAAA,GAAAA,GAAWhf,EAAQrxB,YAAa,CAAC,KAAM,QAAS,aAMzDukF,GACF,mBAAC,GAAe,CAAC14F,OAAQjP,IACvBoE,KAAgBq5F,IAAiB6E,IAA0BsF,IAC7D,mBAAC,GAAU,CACT5nG,OAAQA,EACR8jB,MAAOA,EACPziB,KAAMA,EACNm9D,eAAgBA,EAChB8jC,uBAAwBA,KAEtBl+F,GAAcq5F,IAAkBh2F,EACpC,mBAAC,GAAkB,CACjBkd,qBAAsBA,EACtB3kB,OAAQA,EACRo/D,WAAYA,EACZw+B,cAAeA,EACfx5F,WAAYA,GAAc,CAACqD,EAAatG,IACxCs8F,cAAeA,IAAiBx5B,GAAc,CAACx8D,IAC/Ci2F,iBAAkB72F,QAAQ62F,GAC1BrwF,SAAUxG,QAAQypC,GAClBqtD,UAAWA,GACX/3B,UAAWA,GACX1V,aAAcA,EACd2tC,YAAaA,GACbC,6BAA8BA,GAC9BlrB,qBAAsBA,GACtB3yE,SAAUA,EACVoB,KAAMA,EACNi+D,QAASA,EACTy+B,eAAgBA,GAChBC,uBAAwBA,GACxBzN,mBAAoBA,EACpB0N,cAAeA,EACfC,aAAYT,IAAyB,cAATp8F,EAC5B6xE,uBAAwBuqB,KAAkB+G,GAA2B13E,QACrEqxE,YAAaA,EACbC,cAAeA,IAGjB,mBAAC91C,GAAA,EAAO,CAAC9N,MAAM,QAAQutD,gBAAgB,SAErC,KEjkBV,IAAe1vD,EAAAA,EAAAA,KAhDwB,IAOjC,IAPkC,KACtCyK,EAAI,cACJklD,EAAa,YACbtkF,EAAW,QACXy2B,EAAO,UACP8tD,EAAS,UACTr7E,GACD,EACC,MAAMtoB,GAAO81C,EAAAA,GAAAA,KAGPqD,GAAMtB,EAAAA,EAAAA,IAAuB,OAC7B,kBACJmd,EAAiB,kBACjBE,EAAiB,uBACjBC,EAAsB,sBACtBC,IACEC,EAAAA,GAAAA,GAAuBlc,GAAMwqD,GAEjC,OACE,0BAAKr7E,WAAW0uB,EAAAA,GAAAA,GC1CG,uBD0CyB1uB,GAAY6wB,IAAKA,GAC3D,mBAAC9C,GAAA,EAAM,CACLH,MAAM,YACN9iC,OAAK,EACLkV,UC9C+C,uBD+C/CutB,QAASA,EACTsgB,cAAejB,EACf5Y,UAAWt8C,EAAK0jG,IAEhB,wBAAGp7E,WAAW0uB,EAAAA,GAAAA,GCnD+D,uBDmDlC,QAAOwH,QAEnDj8C,QAAQ6c,IAAgB,0BAAKkJ,UCrD4H,yBDqD5FksB,EAAAA,GAAAA,IAAqBp1B,IAClFukF,GACC,mBAAC/+C,GAAA,EAAI,CACHtnD,OAAQ03D,EACRtb,QAASyb,EACTtO,oBAAqBuO,EACrBtQ,WAAS,EACT5F,UAAU,QACV2F,UAAU,UAEV,mBAACtG,GAAA,EAAQ,CAACC,KAAK,YAAY3I,QAAS8tD,GAAY3jG,EAAK,mBAGrD,IElEV,GAAuD,uBC+HvD,IAAe+zC,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACjBl8C,IACC,MAAM2B,GAAqBtB,EAAAA,EAAAA,IAAyBL,GACpD,IAAK2B,EACH,MAAO,CAAC,EAGV,MAAM,OAAExB,EAAM,SAAEC,EAAUoB,KAAMgD,GAAoB7C,EAC9CoM,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAE1BkoG,EAAkBt6F,GAAQ3N,IAAamB,EAAAA,IAAsC,WAApBiD,EAE/D,MAAO,CACLA,kBACArE,SACAmoG,eAAgBD,EAAkBt6F,EAAK08B,0BAAuBlqC,EAC9DgoG,cAAeF,EAAkBt6F,EAAK+Y,yBAAsBvmB,EAC5DsjB,YAAawkF,EAAkBt6F,EAAK8V,iBAActjB,EACnD,GAlBe27C,EA/FqC,IASnD,IAToD,QACxDyM,EAAO,QACPi7C,EAAO,gBACPp/F,EAAe,OACfrE,EAAM,YACN0jB,EAAW,eACXykF,EAAc,cACdC,EAAa,eACbC,GACD,EACC,MAAM,eACJC,EAAc,kBAAEC,EAAiB,iBAAEC,EAAgB,qBAAEh+D,EAAoB,gBACzEi+D,EAAe,iBAAEC,EAAgB,oBAAEC,IACjC1yE,EAAAA,EAAAA,MAGEg4B,GAAa9R,EAAAA,EAAAA,IAAuB,MAEpCysD,EAAqB/hG,QAAQshG,GAC7BU,EAAoBhiG,QAAQuhG,IAElCvwD,EAAAA,EAAAA,KAAU,KACJ+wD,GAAsB5oG,GACxBwqC,EAAqB,CAAExqC,UACzB,GACC,CAACA,EAAQwqC,EAAsBo+D,KAElC/wD,EAAAA,EAAAA,KAAU,KACJgxD,GAAqB7oG,GACvB2oG,EAAoB,CAAE3oG,UACxB,GACC,CAACA,EAAQ2oG,EAAqBE,IAEjC,MAAMjvC,GAAcrc,EAAAA,EAAAA,KAAY,KAC9B,GAAKiL,EAIL,GAAwB,WAApBnkD,EACFikG,QACK,CACL,MAAMx7B,EAAoB7e,EAAWnhC,QAASu5E,cAAetuD,cAA8B,gBACrF+wD,EAAkBh8B,EAAkBt9D,iBAAiC,sBACrEu5F,EAAqBD,EAAgBA,EAAgBvhG,OAAS,GACpE,IAAKwhG,EACH,QAGF/7B,EAAAA,GAAAA,GAAiBF,EAAmBi8B,EAAoB,MAlDzC,GAmDjB,IACC,CAACvgD,EAASnkD,EAAiBikG,IAExBx/C,GAAexN,EAAAA,GAAAA,GDpFA,wBCsFlBkN,GAAW3hD,QAAQshG,IAAmBthG,QAAQuhG,KDtFwL,wBCuFtOvhG,QAAQshG,IAAmBthG,QAAQuhG,MAAoB5/C,GDvFqZ,wBCwF5ci7C,GDxF+S,wBCyF/S4E,GDzF6X,wBC4FhY,OACE,0BAAK5qD,IAAKwQ,EAAYrhC,UAAWk8B,GAC/B,mBAAC,GAAgB,CACfhG,KAAK,gBACLklD,cAAc,8BACd7tD,QAASouD,EACTN,UAAWS,EACXhlF,YAAaykF,EACbv7E,WAAW0uB,EAAAA,GAAAA,GDpGuE,wBCsG/EstD,GAAsBltD,IACtBmtD,GDvG8J,0BC2GnK,mBAAC,GAAgB,CACf/lD,KAAK,UACLklD,cAAc,sBACd7tD,QAASquD,EACTP,UAAWQ,EACX/kF,YAAa0kF,EACbx7E,WAAYi8E,GAAqBntD,KAGnC,mBAAC,GAAgB,CACfoH,KAAK,aACLklD,cAAc,mBACd7tD,QAASyf,EACTl2C,YAAaA,EACbkJ,UDzHiM,yBC2H/L,K,gBC7GV,MAEMo8E,GAAiB,YAERlwF,eAAemwF,GAC5BC,EAAkBx0C,EAAYtwC,GAE9B,MAAMsrB,EAAUroB,IAAI+sC,gBAAgBM,IAC5BrzD,KAAMsd,EAAQ,KAAEi8B,GAAS8Z,EACjC,IAAIy0C,EACAnyC,EACAnnB,EACAnxB,EAEJ,GAAIE,EAAAA,IAAAA,IAAkCD,GAAW,CAC/C,MAAM01C,QAAY+0C,EAAAA,GAAAA,IAAa15D,IACzB,MAAEj7B,EAAK,OAAEC,GAAW2/C,EAC1B31C,GAAoB2qF,GAAoB50F,EAAOC,GAE/C,MAAM40F,EAAev8F,KAAKC,IAAIyH,EAAOC,GAnBd,KAoBjBiqE,EAAQhgE,IAAa4qF,EAAAA,IAE3B,IAAK7qF,EAAkB,CACrB,IAAK0F,GAASolF,oBAAsB7qB,IAAU2qB,GAA6B,eAAb3qF,GAA4B,CACxF,MAAM8qF,QAAmB11C,GACvBrkB,EAAS45D,EAzBQ,KAyB4Bv8F,KAAKC,IAAIyH,EAAOC,GAAU,EAAG,cAG5E,OADA2S,IAAIwtC,gBAAgBnlB,GACbu5D,GAAgBC,EAAUx0C,EAAM,CACrC80C,kBAAmBC,GAEvB,CAEiB,eAAb9qF,IACFuqF,EAAWA,EAASv5F,QAAQq5F,GAAgB,SAG9CG,EAAQ,CAAE10F,QAAOC,SACnB,CAEAm7B,EAAiBH,CACnB,MAAO,GAAI7wB,EAAAA,IAAAA,IAAkCF,GAAW,CACtD,MAAQ+qF,WAAYj1F,EAAOk1F,YAAaj1F,EAAM,SAAEyiD,SAAmByyC,EAAAA,GAAAA,IAAal6D,GAChFhxB,GAAoB2qF,GAAoB50F,EAAOC,GAE1CgK,IACHyqF,EAAQ,CAAE10F,QAAOC,SAAQyiD,aAG3BtnB,QAAuBg6D,EAAAA,GAAAA,IAAqBn6D,EAC9C,MAAO,GAAI5wB,EAAAA,IAAAA,IAAkCH,GAAW,CACtD,MAAM,SACJw4C,EAAQ,MAAErnD,EAAK,UAAE4nD,EAAS,SAAEoyC,SC5D3BhxF,eAAkCpF,GACvC,MAAM,aAAEq2F,EAAY,YAAEC,SAAsB,qCACtCC,QAAiBF,EAAar2F,IAC5Bw2F,QAAQ,MAAEp6F,EAAK,OAAE2nD,EAAM,QAAE0yC,GAAWC,QAAQ,SAAEjzC,IAAe8yC,EAE/DI,EAAQL,EAAYG,GAG1B,MAAO,CACLr6F,QACA4nD,UAAWD,EACXN,WACA2yC,SANeO,EAAS,QAAOA,EAAMD,iBAAiBC,EAAMl3F,KAAK7L,SAAS,iBAAclH,EAQ5F,CD+CckqG,CAAmB56D,GAC7BsnB,EAAQ,CACNG,SAAUA,GAAY,EACtBrnD,QACA4nD,aAEF7nB,EAAiBi6D,CACnB,CAEA,MAAO,CACLp6D,UACAw5D,WACAvqF,WACAi8B,OACAuuD,QACAnyC,QACAnnB,iBACAnxB,iBAAkBA,QAAoBte,EACtCmqG,SAAW,GAAEx+F,KAAKC,SAASe,KAAKwZ,cAC7BnC,EAEP,CAEO,SAASomF,GACdhqF,EAA8BiqF,GAE9B,OAAOjqF,EAAY5b,KAAK8lG,GAClBD,EACEC,EAAOlB,kBACF,IACFkB,EACHh7D,QAASg7D,EAAOlB,mBAGbkB,EAGF,IACFA,EACHhsF,kBAAmBgsF,EAAO3rF,YAAe3e,EACzCuqG,yBAAqBvqG,IAG3B,CAEA,SAASipG,GAAoB50F,EAAeC,GAE1C,OADuB3H,KAAKC,IAAIyH,EAAOC,GAAU3H,KAAKo6B,IAAI1yB,EAAOC,IAlG1C,EAoGzB,C,gBEpHe,SAASk2F,GAAoCC,GAC1D,MAAMC,EAAYv7F,SAASmmD,cAAc,OACzCo1C,EAAUC,gBAAkB,OAC5BD,EAAUtvD,MAAM93C,SAAW,WAC3BonG,EAAUtvD,MAAMhnC,KAAO,WACvBs2F,EAAUtvD,MAAMjnC,IAAM,WACtBu2F,EAAUn5C,UAAYk5C,EACtBt7F,SAAS40B,KAAKqoC,YAAYs+B,GAC1B,IAAI/+B,EAAU++B,EAAUE,UAExB,GAAIj/B,EAAQi/B,UAEV,KAAOj/B,EAAQi/B,WACbj/B,EAAUA,EAAQi/B,UAKtB,MAAMC,EAAal/B,EAAQU,YAAallE,OAClC2jG,EAAQ37F,SAAS47F,cACjBC,EAAYxoG,OAAOyoG,eAGzBH,EAAMI,SAASv/B,EAASk/B,GACxBC,EAAMK,OAAOx/B,EAASk/B,GACtBG,EAAUI,kBACVJ,EAAUK,SAASP,GACnB37F,SAASm8F,YAAY,UAAU,GAE/B,MAAMtmG,EAAS0lG,EAAUn5C,UAGzB,OAFApiD,SAAS40B,KAAKwnE,YAAYb,GAEnB1lG,CACT,C,gBC/BA,IAAIwmG,GASW,SAASC,GAA8BC,GACpDF,GAAW7wE,QACX+wE,EAAQ/wE,OACV,CAVI3c,EAAAA,KACFwtF,GAAar8F,SAASmmD,cAAc,SACpCk2C,GAAWrqD,UAAU1gB,IAAI,kCACzBtxB,SAAS40B,KAAKqoC,YAAYo/B,K,wFCS5B,MACMG,GAAiC,IAAIC,OAAQ,IAAGC,EAAAA,IAAAA,UAA2B,K,gBCbjF,MAEMC,GAAmB,CAAEC,YAFP,IAAI9kF,IAAI,cAAyD3X,KAE7C08F,aAAa,GAC/CC,GAAc,CAAEhrG,KAAM,aAI5B,IAAIirG,GACAC,GACAC,GAEG1zF,eAAe2B,KAOpB,OANK6xF,KACHA,GAAsB,oCACtBC,UAAsBD,IAAqBG,QAC3CD,GAAgB,IAAID,GAAaL,KAG5BI,EACT,CAEOxzF,eAAe4zF,GAAMC,SA6C5B7zF,uBACQ2B,WACA+xF,GAAcE,OACtB,CA/CQE,GAEN,MAAMx+B,EAAYriE,KAAKC,MACvB,IAAI6gG,EACJ,MAAMC,EAAuB,GACvBC,EAAqB,GAE3BP,GAAcQ,gBAAmBC,IAC/BH,EAAOrnG,KAAKwnG,EAAW,EAGzB,MAAMC,EAsCR,SAA6BC,EAAyBlyF,GACpD,MAAMmyF,EAASD,EAASE,WAClBC,EAAWF,EAAOG,QAAQC,iBAChCF,EAASG,QAtEM,GAuEfL,EAAOM,QAAQJ,GAEf,MAAMK,EAAaL,EAASM,kBACtBC,EAAY,IAAIC,WAAWH,GACjC,IAAII,GAAc,EAoBlB,OAlBA,SAASC,IACP,GAAID,EACF,OAGFT,EAASW,qBAAqBJ,GAE9B,MAEM9lG,EAFM8lG,EAAUxoG,QAAO,CAACC,EAAKwnB,IAAYxnB,EAAMwnB,GAAS,GAC1C6gF,EACE,IAzDoC5lG,KAC1DglG,EAAStnG,KAAc,IAATsC,GACd4kG,EAAiB5kG,EAAO,EAyDxBkT,CAAGlT,EAvFY,GAuFU,EAAIA,GAE7BmmG,sBAAsBF,EACxB,CAEAA,GAEO,KACLD,GAAc,CAAI,CAEtB,CArE0BI,CAAoB3B,IAK5C,MAAO,CACL7zC,KAAM,IAAM,IAAIruC,SAAgB,CAACiqC,EAAS0b,KACxCu8B,GAAc4B,OAAS,KACrB75C,EAAQ,CACNG,KAAM,IAAIP,KAAK24C,EAAQT,IACvBl1C,SAAUpqD,KAAK2K,QAAQm1F,GAAY9gG,KAAKC,OAASoiE,GAAa,KAC9D2+B,YACA,EAEJP,GAAc6B,QAAUp+B,EAExB,MAAMq+B,EAAYvhG,KAAKC,IAAI,EAAGohE,EAhDT,IAgD0CriE,KAAKC,OACpErD,YAAW,KACT6jG,GAAc7zC,OACdu0C,GAAiB,GAChBoB,EAAU,IAEfrjF,MAAO,KACL,MAAMqjF,EAAYvhG,KAAKC,IAAI,EAAGohE,EAvDT,IAuD0CriE,KAAKC,OACpErD,YAAW,KACT6jG,GAAcvhF,QACd4hF,EAAW9gG,KAAKC,MAChBkhG,GAAiB,GAChBoB,EAAU,EAGnB,C,gBChEA,MAAMC,GAA0B,0BAqB1BnrE,GAAU,CACd,KACA,KACA,KACA,KACA,KACA,MAGF,SAASorE,GAAU3D,GAIjB,OAHe,IAAI4D,WACAC,gBAAgB7D,EAAM,aAE9B1mE,IACb,CAEA,SAASwqE,GAAeC,EAAYl/F,GAClC,MAAMqkE,EAASxkE,SAASmmD,cA1BhB,KA8BR,OAHAqe,EAAOrkE,KAAOA,EACdqkE,EAAOvH,YAAYoiC,EAAKC,WAAU,IAE3B96B,CACT,CAEA,SAAS+6B,GAAeF,EAAYpzD,GAClC,MAAM7kB,EAAKpnB,SAASmmD,cAAcla,GAGlC,OAFA7kB,EAAG61C,YAAYoiC,EAAKC,WAAU,IAEvBl4E,CACT,CAEA,SAASo4E,GAASC,EAAoB5pG,GACpC,IAAI6pG,EAAU7pG,EAAOypG,WAAU,GAC/B,OAAKG,GAGDA,EAAMxzD,OAtDJ,QAsDawzD,EAAMxzD,MAAM0zD,aAC7BD,EAAUH,GAAeG,EA7CrB,WA+CFD,EAAMxzD,OAxDF,WAwDWwzD,EAAMxzD,MAAM2zD,YAC7BF,EAAUH,GAAeG,EA/CnB,OAiDJD,EAAMxzD,OA1DC,cA0DQwzD,EAAMxzD,MAAM4zD,iBAC7BH,EAAUH,GAAeG,EAjDhB,MAmDPD,EAAMxzD,OA5DK,iBA4DIwzD,EAAMxzD,MAAM4zD,iBAC7BH,EAAUH,GAAeG,EAnDZ,QAqDXD,EAAMxzD,OA9DG,UA8DMwzD,EAAMxzD,MAAM6zD,gBAC7BJ,EAAUH,GAAeG,EArDd,QAuDTD,EAAMxzD,OAhEC,QAgEQwzD,EAAMxzD,MAAM6zD,gBAC7BJ,EAAUH,GAAeG,EAvDhB,QA0DJA,GArBEA,CAsBX,CAiBA,SAASK,GAAkBC,GACzB,MAAMX,EAAOW,EAAMV,WAAU,GAC7B,IAAII,EAAU1/F,SAASigG,eAAeZ,EAAKniC,aAAe,IACtDgjC,EAAab,EAQjB,MAPsB,MAAlBA,EAAKc,WACPT,EAAUN,GAAeM,EAAUL,EAA2Bl/F,MAC1D,UAAWk/F,EAAKe,WAAW,IAAM9oG,QAAQ+nG,EAAKe,WAAW,GAAGn0D,SAC9Di0D,EAAab,EAAKe,WAAW,KAGjCV,EAAUF,GAASU,EAA2BR,GACvCA,CACT,CAEA,SAASW,GAAahB,GACpB,GAAIA,EAAKe,aAAef,EAAKe,WAAWpoG,QAAU,GAAuB,OAAlBqnG,EAAKc,UAAuC,OAAlBd,EAAKc,UAAoB,CACxG,IAAIG,EACAZ,EAAU1/F,SAASigG,eAAeZ,EAAKniC,aAAe,IAC1D,GAAsB,OAAlBmiC,EAAKc,UAAuC,OAAlBd,EAAKc,UAAuC,OAAlBd,EAAKc,SAAmB,CAC9EG,EAAatgG,SAASmmD,cAAck5C,EAAKc,UACzCT,EAAU1/F,SAASugG,yBACnB,MAAMC,EAAQ,GACd,IAAK,IAAI7yF,EAAI,EAAGA,EAAI0xF,EAAKe,WAAWpoG,OAAQ2V,IAC1C6yF,EAAMtqG,QAAQmqG,GAAahB,EAAKe,WAAWzyF,KAE7C6yF,EAAMnrG,KAAKsY,GAAkB+xF,EAAQziC,YAAYtvD,IACnD,MAA+C,IAApCkmB,GAAQz/B,QAAQirG,EAAKc,WAC9BG,EAAatgG,SAASmmD,cAAck5C,EAAKc,UACzCT,EAAUK,GAAkBV,EAAKe,WAAW,KACjB,MAAlBf,EAAKc,UACdG,EAAatgG,SAASmmD,cAAc,KACpCu5C,EA9CN,SAA0BM,GACxB,MAAMX,EAAOW,EAAMV,WAAU,GAC7B,IAAII,EAAU1/F,SAASigG,eAAeZ,EAAKniC,aAAe,IACtDgjC,EAAalgG,SAASigG,eAAe,IASzC,MARI,UAAWZ,EAAKe,WAAW,IAAM9oG,QAAQ+nG,EAAKe,WAAW,GAAGn0D,SAC9Di0D,EAAab,EAAKe,WAAW,IAE3Bf,EAAKe,WAAW,IAAsC,MAAhCf,EAAKe,WAAW,GAAGD,WAC3CT,EAAUN,GAAeM,EAAQJ,WAAU,GAAQD,EAAKe,WAAW,GAAyBjgG,MAC5F+/F,EAAab,EAAKe,WAAW,GAAGA,WAAW,IAE7CV,EAAUF,GAASU,EAA2BR,GACvCA,CACT,CAiCgBe,CAAiBpB,IACA,OAAlBA,EAAKc,SACdT,EAAUL,GAEViB,EAAatgG,SAASmmD,cAAc,QACpCu5C,EAAUK,GAAkBV,IAE9B,OAAIiB,GACFA,EAAWrjC,YAAYyiC,GAChB,CAACY,IAGH,CAACjB,EAAKC,WAAU,GACzB,CAEA,GAAID,EAAKe,WAAY,CACnB,MAAMM,EAAQ,GACd,IAAK,IAAI/yF,EAAI,EAAGA,EAAI0xF,EAAKe,WAAWpoG,OAAQ2V,IAC1C+yF,EAAMxqG,QAAQmqG,GAAahB,EAAKe,WAAWzyF,KAE7C,OAAO+yF,CACT,CAEA,MAAO,CAACrB,EACV,CAEA,SAASsB,GAAWtB,GAClB,OAAyB,IAAlBA,EAAKuB,QACd,C,gBChJA,MAEMC,GAAkB,0BAwHxB,GAtE0B,CACxB//F,EACAggG,EACAC,EACAC,EACAC,EACAC,MAEA54D,EAAAA,EAAAA,KAAU,KACR,GAAKxnC,EAqDL,OAFAd,SAASkqC,iBAAiB,QAASi3D,GAAa,GAEzC,KACLnhG,SAASmqC,oBAAoB,QAASg3D,GAAa,EAAM,EAlD3D53F,eAAe43F,EAAY3/F,GACzB,IAAKA,EAAE4/F,cACL,OAGF,MAAMC,EAAQrhG,SAASshG,cACvB,GAAID,IAAU,CAACE,EAAAA,IAAmBC,EAAAA,KAAyB/mG,SAAS4mG,EAAMzvG,IACxE,OAGF,MAAM6vG,EAAajgG,EAAE4/F,cAAcM,QAAQ,QAAQC,UAAU,EA3ExC,MA4EfrG,EAAO95F,EAAE4/F,cAAcM,QAAQ,aACrC,IAAIE,EAAsBtG,GAAOn+F,EAAAA,EAAAA,IAzEvC,SAA2Bm+F,GACzB,IAAIuG,EAAW7hG,SAASmmD,cAAc,OACtC,IACEm1C,GD4JkCwG,EC5JbxG,GD6JD9jF,MAAMwnF,IAlB9B,SAA0BgB,GACxB,MAAMprE,EAAO50B,SAASmmD,cAAc,QAC9Bu6C,EAAQV,EAAMI,WACd2B,EAAgBxwE,MAAMzjB,KAAK4yF,GAAOprG,OAAOqrG,IACzCqB,EAAa,GAEnB,IAAK,MAAM3C,KAAQ0C,EACjBC,EAAW9rG,QAAQmqG,GAAahB,IAGlC,IAAK,IAAI1xF,EAAI,EAAGA,EAAIq0F,EAAWhqG,OAAQ2V,IACrCinB,EAAKqoC,YAAY+kC,EAAWr0F,GAAG2xF,WAAU,IAG3C,OAAO1qE,CACT,CAOSqtE,CAAiBhD,GAAU6C,EAAiB1hG,QAAQ,eAAgB,MAAMgiD,UAHxE68C,GAAU6C,EAAiB1hG,QAAQ,eAAgB,KAAKgiD,SCxJjE,CALE,MAAOl+C,GACH+C,EAAAA,KAEFC,QAAQC,MAAMjD,EAElB,CDsJa,IAAuB49F,ECrJpCD,EAASz/C,UAAYk5C,EAAKl7F,QAAQ,UAAW,KAAKA,QAAQygG,GAAiB,IAE3E,MAAMqB,EAAeL,EAAS5hG,iBAAiC,iBAiC/D,OAhCIiiG,EAAalqG,SACf6pG,EAAWK,EAAaA,EAAalqG,OAAS,IAGhDu5B,MAAMzjB,KAAK+zF,EAASM,qBAAqB,MAAM3mG,SAAS6jG,IACtD,GAAMA,aAAgB+C,YAiBtB,OAhBA/C,EAAKn/B,gBAAgB,SAGA,OAAjBm/B,EAAKgD,SAAkBhD,EAAKiD,YAAY,MACvB,MAAjBjD,EAAKgD,SAAiBhD,EAAKpiC,YAAYj9D,SAASigG,eAAe,OAC9C,QAAjBZ,EAAKgD,SAAsBhD,EAAK7P,QAAQ+S,YAAYlD,EAAKiD,YAAYjD,EAAK32D,aAAa,QAAU,IAEjG22D,EAAK7P,QAAQgT,eAAenD,EAAK9/C,SAEjCkjD,EAAAA,GAA0BpD,EAAKgD,UACjChD,EAAKh/B,aAAa,mBAAoBoiC,EAAAA,GAA0BpD,EAAKgD,UAGlEhD,EAAK7P,QAAQ+S,YAAclD,EAAKniC,cAAgBmiC,EAAKqD,WAAWrD,EAAKiD,YAAYjD,EAAKniC,aAEvFmiC,EAAK7P,QAAQljD,KAAK+yD,EAAKh/B,aAAa,MAAOg/B,EAAK7P,QAAQljD,KACpD+yD,EAAK7P,QAAQ+S,YACnB,KAAKI,EAAAA,GAAAA,YACHtD,EAAKiD,YAAYjD,EAAKniC,aAAe,IACrC,MACF,KAAKylC,EAAAA,GAAAA,YACHtD,EAAKniC,YAAcmiC,EAAK7P,QAAQljD,KAAO,GACjC,IAILu1D,EAASz/C,UAAUwgD,SAC5B,CA4BQC,CAAkBvH,QAAOzqG,GAAW,QAClCA,EAEA+wG,IAAuBkB,EAAAA,GAAAA,IAAoBlB,IAAwBX,IACrEW,GAAsBmB,EAAAA,GAAAA,IAAiBnB,GACvCV,OAGF,MAAM,MAAEV,GAAUh/F,EAAE4/F,cACpB,IAAIvtG,EAA4B,GAOhC,GALA2N,EAAEqnC,iBACE23D,EAAMxoG,OAAS,IACjBnE,QAAcmvG,EAAAA,GAAAA,GAA8BxC,KAGzC3sG,GAAOmE,SAAWypG,EACrB,OAGF,GAAI5tG,GAAOmE,SAAWgpG,EAAe,CACnC,MAAMiC,QAAuBloF,QAAQC,IAAInnB,EAAMwB,KAAKmuB,GAC3Ck2E,GAAgBl2E,EAAKsY,KAAMtY,MAEpCu9E,GAAgB9vF,GAAgBA,EAAY1E,OAAO02F,IACrD,CAEA,MAAMC,EAActB,GAAqBvwF,UAAUrZ,OAAS4pG,EAAsB,CAAEhuG,KAAM6tG,GAEtFyB,GACFpC,EAA0BoC,EAAa7B,GAAOzvG,GAElD,CAMC,GACA,CACDkvG,EAA2BE,EAAeD,EAAgBjgG,EAAUmgG,EAAwBC,GAC5F,E,oDCvHJ,MACMiC,GAA0B,0CAC1BC,GAAe,4CACfC,GAAiB,CACrB3oF,SAAU,GACVxpB,MAAO,GACPoyG,aAAa,EACbC,gBAAiB,IAGbC,GAASxjG,SAASmmD,cAAc,OA0EtC,MAAMs9C,IAAsBC,EAAAA,GAAAA,IAAS,CAAChpF,EAAkBxpB,EAAeoyG,KAAyB,CAC9F5oF,WACAxpB,QACAoyG,cACAC,gBAAiB7oF,EAAS8vB,kBC3FtBm5D,GAAa,sB,4BCmGnB,SAASz0F,GAAkBb,GACzB,OAAIA,EAAWc,iBAAyB,OAEpCE,EAAAA,IAAAA,IAAkChB,EAAWe,UACxC,QAGLE,EAAAA,IAAAA,IAAkCjB,EAAWe,UACxC,QAGLG,EAAAA,IAAAA,IAAkClB,EAAWe,UACxC,QAGF,MACT,C,4BC1GA,IAAIw0F,IAAW,EASf,MCbA,IAAe96D,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAE12C,GAAW02C,EACb86D,GAAqB56D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuB72C,GAGjF,OAAOwxG,EAAqB,mBAACA,EAAuB96D,QAAYl4C,CAAS,I,oDCX3E,SAAwD,uBCqBlDizG,GAAwB,SA4B9B,IAAeh7D,EAAAA,EAAAA,KA1BqB,IAE9B,IAF+B,KACnCyK,EAAI,MAAE3kB,GACP,EACC,MAAMm5B,GAAYrc,EAAAA,GAAAA,IAAS4pD,EAAAA,EAAAA,IAAqB/hD,IAAO,EAAOpb,EAAAA,GAAAA,MAExD4rE,GAAUn4D,EAAAA,EAAAA,KAAQ,KACtB,IAAKmc,EAAW,MAAO,GACvB,MAAM9c,EAAkB,SAAVrc,EAXO,qBACC,qBAYhBo1E,EAA8Bj8C,EAAU3nD,QAAQ0jG,GAAuB74D,GACvEg5D,GAAM,IAAI/E,WAAYC,gBAAgB6E,EAA6B,iBAMzE,OALAC,EAAIhkG,iBAAiB,QAAQzE,SAASwwC,IACpCA,EAAKC,MAAMi4D,OAASj5D,EACpBe,EAAKC,MAAMk4D,YAlBe,OAkBsB,IAG1C,2BAA0BF,EAAIrnC,gBAAgBwnC,WAAW,GAChE,CAACr8C,EAAWn5B,IAEf,OACE,wBAAGvR,WAAW0uB,EAAAA,GAAAA,GD3CK,uBC2CuBs4D,EAAAA,IAAmBl4D,KAC3D,0BAAKE,IAAK03D,EAASz3D,IAAI,GAAGjvB,WAAW0uB,EAAAA,GAAAA,GD5C4C,uBC4Cfs4D,EAAAA,IAAmBl4D,MACnF,ICyDR,IAAerD,EAAAA,EAAAA,KA7EqB,IAO9B,IAP+B,IACnC/c,EAAG,MACH6C,EAAK,OACLn+B,EAAM,SACNC,EAAQ,aACR4zG,EAAY,aACZC,GACD,EACC,MAAM,cAAExyE,EAAa,gBAAEjG,IAAoBpF,EAAAA,EAAAA,MAErC3xB,GAAO81C,EAAAA,GAAAA,KAEP0I,GAAO3H,EAAAA,EAAAA,KAAQ,IACZ7f,EAAIy4E,MAAM/oG,MAAK,QAAC,KAAEqgC,GAAM,QAAc,mBAATA,CAAyB,KAAG97B,UAC/D,CAAC+rB,EAAIy4E,SAEDnrD,EAAYorD,EAAUC,IAAa13D,EAAAA,GAAAA,MACnC23D,EAAcC,IAAmB96D,EAAAA,EAAAA,SAAsCj5C,GAExEo5D,GAAoBjc,EAAAA,EAAAA,KAAaxsC,IACrCA,EAAEqnC,iBACF,MAAMg8D,EAAOrjG,EAAEy+D,cAAcN,wBAC7BilC,EAAgB,CAAEptE,EAAGqtE,EAAKC,MAAOxsE,EAAGusE,EAAKE,SACzCT,IACAG,GAAU,GACT,CAACH,EAAcG,IAEZO,GAAkBh3D,EAAAA,EAAAA,KAAY,KAClC02D,IACAH,GAAc,GACb,CAACG,EAAWH,IAETU,GAA0Bj3D,EAAAA,EAAAA,KAAY,KAC1C42D,OAAgB/zG,EAAU,GACzB,IAEGq0G,GAAkBl3D,EAAAA,EAAAA,KAAY,KAClCliB,EAAgB,CACdtnB,MAAOunB,EAAIn6B,GACXo6B,WAAW,GACX,GACD,CAACD,EAAIn6B,GAAIk6B,IAEZ,OACE,mBAACwnB,GAAA,EAAQ,CACPzN,IAAK9Z,EAAIn6B,GACTm6D,WAAYxY,GAAQ,mBAAC,GAAa,CAACA,KAAMA,EAAM3kB,MAAOA,IACtD2kB,KAAOA,OAAgB1iD,EAAT,OAEd+5C,QAAS,IAAM7Y,EAAc,CAC3BhG,MACAt7B,SACAC,aAEFw6D,cAAejB,GAEdl+B,EAAI7R,UACJyqF,GACC,mBAACQ,GAAA,EAAM,KACL,mBAACxrD,GAAA,EAAI,CACHtnD,OAAQgnD,EACRpF,UAAU,QACVhI,MAAQ,SAAQ04D,EAAantE,YAAYmtE,EAAarsE,OACtDjb,UAAU,0BACVw8B,WAAS,EACTpL,QAASu2D,EACTppD,oBAAqBqpD,GAErB,mBAAC3xD,GAAA,EAAQ,CAACC,KAAK,OAAO6xD,aAAW,EAACx6D,QAASs6D,GAAkBnwG,EAAK,uBAK/D,ICiGf,IAAe+zC,EAAAA,EAAAA,KArJkB,IAgB3B,IAhB4B,OAChCr4C,EAAM,SACNC,EAAQ,gBACR20G,EAAe,eACfC,EAAc,eACdC,EAAc,cACdviG,EAAa,cACbC,EAAa,iBACbC,EAAgB,cAChBC,EAAa,WACbqiG,EAAU,SACVv/D,EAAQ,YACRlG,EAAW,aACX0lE,EAAY,aACZC,EAAY,MACZ92E,GACD,EACC,MAAO+2E,EAAkBC,EAAgBC,IAAmB74D,EAAAA,GAAAA,MACrD2N,EAAkBC,EAAkBkrD,IAAmBC,EAAAA,GAAAA,GAAeJ,EAAkBE,GAEzFG,EAAuBhjG,GAAiBC,EACxCgjG,EAAsBjjG,GAAiBC,GAEtCijG,EAAyBC,EAA2BC,IAA+Bp5D,EAAAA,GAAAA,MAC1F1E,EAAAA,EAAAA,KAAU,KACJq9D,GACFG,GACF,GACC,CAACH,EAAkBG,IAEtB,MAAMO,GAAyBr4D,EAAAA,EAAAA,KAAY,KACrC23D,EACFE,IAEAD,GACF,GACC,CAACD,EAAkBC,EAAgBC,IAEhCS,GAAmBt4D,EAAAA,EAAAA,KAAY,CAACxsC,EAAU+kG,KAC9C,MAAM,MAAE1yG,GAAU2N,EAAE09D,OACdsnC,GAAiBC,EAAAA,GAAAA,IAAc5yG,GAEjC2yG,GAAgBxuG,QAClBytG,EAAae,EAAgBD,EAC/B,GACC,CAACd,IAEEiB,GAAoB14D,EAAAA,EAAAA,KAAY,MACpC24D,EAAAA,GAAAA,GACEp1E,MAAMzjB,KAAKk4F,EAAuBY,EAAAA,IAChC5jG,EAAgBqM,EAAAA,IAAgCC,EAAAA,KAC/C9Y,KAAK,MACPgL,GAAM8kG,EAAiB9kG,GAAG,IAC5B,GACA,CAACwB,EAAegjG,EAAsBM,IAEnCO,GAAuB74D,EAAAA,EAAAA,KAAY,MACvC24D,EAAAA,GAAAA,IAAuBzjG,GAAoBC,EACvCouB,MAAMzjB,KAAKyB,EAAAA,KAA+B/Y,KAAK,KAC/C,KACEgL,GAAM8kG,EAAiB9kG,GAAG,IAAO,GACtC,CAAC2B,EAAeD,EAAkBojG,IAE/Bl6E,GAAOwf,EAAAA,EAAAA,KAAQ,IACZh0C,OAAO2S,OAAOi7F,GAAYlwG,QAAQy2B,KAClCka,MACY,SAAbA,GAAuBla,EAAIn6B,KAAOnB,IAAUs7B,EAAI8F,UAAUp3B,SAAS,UAGhEsxB,EAAI8F,UAAUp3B,SAASwrC,OAE/B,CAACu/D,EAAY/0G,EAAQw1C,IAElBlxC,GAAO81C,EAAAA,GAAAA,KAEb,GAAKw6D,EAIL,OACE,0BAAKhoF,UAAU,cACb,mBAACypF,GAAA,EAAqB,CACpBl1G,GAAG,qBACHyrB,UAAWsoF,EAAmB,+BAAiC,qBAC/Dx9F,OAAK,EACL8iC,MAAM,cACN87D,WAAYV,EACZh1D,UAAU,oBACV21D,aAAa,uBACbC,UAAQ,GAER,wBAAG5pF,UAAU,iBAEf,mBAACs8B,GAAA,EAAI,CACH/nD,GAAG,uBACHS,OAAQszG,GAAoBO,EAC5BrsD,WAAS,EACT5F,UAAU,QACV2F,UAAU,SACVnL,QAASo3D,EACTxoF,UAAU,yBACVu+B,oBAAqBiqD,EACrBxqD,aAAej/C,EAAAA,QAAkCvL,EAAnB8pD,EAC9BW,aAAel/C,EAAAA,QAAkCvL,EAAnB+pD,EAC9BssD,mBAAoB9qG,EAAAA,GACpB+qG,eAAe,uBAMb7B,GACA,mBAAChyD,GAAA,EAAQ,CAACj2B,UAAU,iBAAiBkuC,UAAQ,0DAE9C+5C,GACC,sCACGW,GACC,mBAAC3yD,GAAA,EAAQ,CAACC,KAAK,QAAQ3I,QAAS87D,GAC7B3xG,EAAKixG,EAAuB,8BACxBhjG,EAAgB,4BAA8B,+BAGrDE,GAAoBC,IAElB,mBAACmwC,GAAA,EAAQ,CAACC,KAAK,WAAW3I,QAASi8D,GAChC9xG,GAAMmO,GAAoBC,EAAgB,4BAA8B,oBAKlFoiG,GACC,mBAACjyD,GAAA,EAAQ,CAACC,KAAK,OAAO3I,QAAS86D,GAAe3wG,EAAK,SAGpDuwG,IAAmBvlE,GAAe3T,EAAK/2B,KAAK02B,GAC3C,mBAAC,GAAa,CACZA,IAAKA,EACLt7B,OAAQA,EACRC,SAAUA,EACVk+B,MAAOA,EACP01E,aAAc6B,EACd5B,aAAc6B,OAIhB,ICjLV,IAAet9D,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE12C,GAAW02C,EACbq+D,GAAmBn+D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB72C,GAG7E,OAAO+0G,EAAmB,mBAACA,EAAqBr+D,QAAYl4C,CAAS,ICGvE,IAAei4C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE12C,GAAW02C,EACbs+D,GAAiBp+D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmB72C,GAGzE,OAAOg1G,EAAiB,mBAACA,EAAmBt+D,QAAYl4C,CAAS,I,gBCLnE,MAQA,IAAei4C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE12C,GAAW02C,EACbu+D,GAAiBr+D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmB72C,GAGzE,OAAOi1G,EAAiB,mBAACA,EAAmBv+D,QAAYl4C,CAAS,I,4BCLnE,MAQA,IAAei4C,EAAAA,EAAAA,KAR+BC,IAC5C,MAAM,OAAE12C,GAAW02C,EACbw+D,GAAoBt+D,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAAsB72C,GAG/E,OAAOk1G,EAAoB,mBAACA,EAAsBx+D,QAAYl4C,CAAS,IC0DzE,IAAei4C,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA8B,IAA9B,UAAE0G,GAAW,EACpB,MAAM,OAAEvG,IAAWE,EAAAA,EAAAA,IAAyBL,IAAW,CAAC,EACxD,OAAKG,EAIE,CAAE8E,SAASgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQuG,IAH3C,CAAC,CAGsD,GAPhDw1C,EA7C+B,IAE7C,IAF8C,OAClDn6C,EAAM,QAAEkD,EAAO,QAAEk5C,GAClB,EACC,MAAM,qBAAE+T,IAAyB97B,EAAAA,EAAAA,OAE1Bi0B,EAAkBC,IAAoBmrD,EAAAA,GAAAA,GAAe1zG,EAAQo8C,IAC9D,oBAAE+4D,GAAwBjyG,GAAW,CAAC,EAE5C,GAAKA,GAAYA,EAAQkyG,gBAIzB,OACE,mBAAC9tD,GAAA,EAAI,CACHtnD,OAAQA,EACRwnD,UAAW2tD,EACXvzD,UAAU,QACV2F,UAAU,SACVnL,QAASA,EACTpxB,UAAU,kBACVu+B,oBAAqBnN,EACrB4M,aAAej/C,EAAAA,QAAkCvL,EAAnB8pD,EAC9BW,aAAel/C,EAAAA,QAAkCvL,EAAnB+pD,EAC9B8sD,WAAS,GAET,0BAAKrqF,UAAU,WACZ9nB,EAAQkyG,gBAAgBpyG,KAAKklE,GAC5B,0BAAKl9C,UAAU,OACZk9C,EAAIllE,KAAK+4B,GACR,mBAACgd,GAAA,EAAM,CACL+C,QAAM,EACNod,SAA0B,gBAAhBn9B,EAAOt8B,KAEjB84C,QAAS,IAAM4X,EAAqB,CAAExrD,UAAWzB,EAAQ3D,GAAIw8B,YAE5DA,EAAOx6B,YAMb,K,oDCPX,MA6NA,IAAek1C,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA2C,IAA3C,uBAAEq3G,GAAwB,EACjC,MAAM,OAAEl3G,EAAM,SAAEC,EAAUoB,KAAMgD,IAAoBnE,EAAAA,EAAAA,IAAyBL,IAAW,CAAC,EACzF,IAAKG,IAAWC,IAAaoE,EAC3B,MAAO,CAAC,EAGV,MACElC,iBAAiB,WACfgI,EAAU,SAAE/H,EAAUgC,WAAY+yG,EAAiB,UAAE3sG,EAAS,WAAEC,KAEhE5J,EAAAA,EAAAA,IAAehB,GAEbkH,GAAeC,EAAAA,EAAAA,IAAmBnH,EAAQG,EAAQC,GAClD8iB,EAAgC,cAApB1e,GACd4e,EAAAA,EAAAA,IAAyBpjB,EAAQG,IACjCgjB,EAAAA,EAAAA,IAAgBnjB,EAAQG,EAAQC,GAC9Bw/E,EAAgB5/E,EAAO+U,SAASC,MAAMF,gBAAkB,EACxDs7E,EAAe7tF,IAAapC,EAC5Bo3G,EAAoBD,GAAmBvyG,KAAKzD,IAAO2S,EAAAA,EAAAA,IAAkBjU,EAAQsK,EAAahJ,KAEhG,IAAI2D,EASAS,EACJ,GATIwB,IAAiBmwG,EACnBpyG,GAAUgP,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQ+G,GACnCgc,EACTje,GAAU2c,EAAAA,EAAAA,IAAqB5hB,EAAQG,EAAQC,EAAUoE,GAChD4rF,GAA8C,IAA9BknB,EAAmB5vG,SAC5CzC,EAAUsyG,IAAoB,IAI5BrwG,GAAgBjC,IAAYoyG,EAAwB,CACtD,MAAM,YAAEnyC,GAAgBjgE,EAClB05D,GAAiBC,EAAAA,EAAAA,IAAqB5+D,EAAQG,GAChD+kE,IAAgBA,EAAY4vB,eAAiBn2B,KAC/Cj5D,GAAS05D,EAAAA,EAAAA,IAAsBp/D,EAAQiF,IAGpCS,GAAWw/D,GAAaE,iBAC3B1/D,GAASC,EAAAA,EAAAA,IAAa3F,EAAQiF,GAElC,MAAWmrF,IACLnrF,IACFS,GAAS05D,EAAAA,EAAAA,IAAsBp/D,EAAQiF,GAClCS,IACHA,GAASC,EAAAA,EAAAA,IAAa3F,EAAQiF,KAG7BS,IACHA,GAASu0B,EAAAA,EAAAA,IAAS3vB,IAAe8X,EAAAA,EAAAA,IAAWpiB,EAAQsK,IAAe9H,EAAAA,EAAAA,IAAWxC,EAAQsK,KAI1F,MAAMktG,EAAuBD,GAAmBnuE,MAAMquE,GACpDA,GAAS7qG,QAAQtJ,MAAQgE,OAAOC,KAAKkwG,EAAQ7qG,SAASlF,OAAS,IAGjE,MAAO,CACLR,eACAgc,YACAje,UACAS,SACAk6E,gBACA83B,uBAAwBtnB,EAAeknB,EAAmB5vG,YAASnH,EACnEoK,YACAC,aACA4sG,uBACA1yF,sBAAsBC,EAAAA,EAAAA,IAA2B/kB,GAClD,GApEek8C,EA3NuC,IAarD,IAbsD,aAC1Dh1C,EAAY,UACZgc,EAAS,QACTje,EAAO,OACPS,EAAM,cACNk6E,EAAa,uBACb83B,EAAsB,UACtB/sG,EAAS,WACTC,EAAU,qBACV4sG,EAAoB,uBACpBH,EAAsB,qBACtBvyF,EAAoB,QACpB6yF,GACD,EACC,MAAM,gBACJ5vG,EAAe,aACf8Z,EAAY,aACZ7Z,EAAY,uBACZ4vG,EAAsB,oBACtBC,EAAmB,qBACnBC,EAAoB,gBACpBC,IACE3hF,EAAAA,EAAAA,MAEEwnB,GAAMtB,EAAAA,EAAAA,IAAuB,MAC7B73C,GAAO81C,EAAAA,GAAAA,KAEP61C,EAAeppF,QAAQ0wG,GACvB/uD,EAAU3hD,SACZE,GAAgBgc,IAAcje,GAC5BS,GAAUgyG,GAEVM,GAAaC,EAAAA,GAAAA,GACjB,CAACP,GACDA,EApC4B,SAoCuBn3G,IAG/C,aACJgnD,EAAY,qBAAEE,IACZC,EAAAA,GAAAA,GAAkBswD,GAAcrvD,OAASpoD,GAAYq/E,OAAer/E,GAAYq/E,GAE9Es4B,GAAgBx6D,EAAAA,EAAAA,KAAY,KAC5Bx2C,IAAiBmwG,EACnBtvG,EAAgB,CAAErB,eAAWnG,IACpB2iB,EACTrB,EAAa,CAAEnb,eAAWnG,IACjBm3G,GACTK,IAEFJ,KAAW,GACV,CACDzwG,EAAcmwG,EAAwBn0F,EAAWw0F,EAAwBC,EAAS5vG,EAAiB8Z,EACnGk2F,KAGF//D,EAAAA,EAAAA,KAAU,IAAO2Q,GAAUpG,EAAAA,GAAAA,GAAsB21D,QAAiB33G,GAAY,CAACooD,EAASuvD,IAExF,MAAMC,GAAqBz6D,EAAAA,EAAAA,KAAY,KACjC0yC,GACJpoF,EAAa,CAAE7H,OAAQ8E,EAAS9E,OAAQuG,UAAWzB,EAAS3D,GAAII,mBAAmB,GAAO,GACzF,CAACsG,EAAcooF,EAAcnrF,IAE1BmzG,GAAmB16D,EAAAA,EAAAA,KAAaxsC,IACpCA,EAAEovC,kBACF43D,GAAe,GACd,CAACA,IAEEG,GAA6B36D,EAAAA,EAAAA,KAAY,KAC7Ck6D,GAAwB,GACvB,CAACA,KAEE,kBACJn+C,EAAiB,oBAAEma,EAAmB,kBAAEja,EAAiB,uBACzDC,EAAsB,sBAAEC,IACtBC,EAAAA,GAAAA,GAAuBlc,GAErB06D,GAAoB56D,EAAAA,EAAAA,KAAY,IAAME,EAAI3wB,SAAS,IACnDsrF,GAAiB76D,EAAAA,EAAAA,KAAY,IAAME,EAAI3wB,SAAU,IACjDurF,GAAiB96D,EAAAA,EAAAA,KAAY,IAAME,EAAI3wB,QAASirB,cAAc,kCAAkC,KAEhG,UACJyL,EAAS,UAAE2F,EAAS,iBAAEmvD,EAAgB,iBAAEC,EAAkB/8D,MAAOg9D,IAC/DC,EAAAA,GAAAA,GACFhlC,EACA0kC,EACAC,EACAC,GAGIzrF,GAAY0uB,EAAAA,GAAAA,GAAe,0BAA2BgM,GAEtDoxD,GAAWv9D,EAAAA,EAAAA,KAAQ,IACnBp0C,IAAiBmwG,EACZ,aAELn0F,EACK,YAELktE,EACK,oBADT,GAKC,CAACltE,EAAWktE,EAAclpF,EAAcmwG,IAErCljC,EAAaujC,GAA0BA,EAAyB,EAClEjzG,EAAK,wBAAyBizG,QAC9Bn3G,EAEEu4G,GAAkBx9D,EAAAA,EAAAA,KAAQ,KAC9B,IAAKr2C,IAAYmrF,IAAiBnrF,EAAQ2H,QAAQtJ,OAASqH,GAAama,EAAsB,OAAO7f,EAErG,MAAM8zG,GAAetG,EAAAA,EAAAA,IAAiBxtG,EAAQ2H,QAAQtJ,MACtD,MAAO,IACF2B,EACH2H,QAAS,IACJ3H,EAAQ2H,QACXtJ,KAAMy1G,GAET,GACA,CAACj0F,EAAsBsrE,EAAcnrF,EAAS0F,IAEjD,GAAK48C,EAIL,OACE,0BAAKx6B,UAAWA,EAAW6wB,IAAKA,EAAKgd,cAAejB,EAAmBrf,QAASqf,GAC9E,8BACE,0BAAK5sC,UAAU,sBACb,wBAAGA,UAAW8rF,KAEhB,mBAAC,GAAe,CACd9rF,UAAU,eACV9nB,QAAS6zG,EACTpzG,OAASiF,OAAqBpK,EAATmF,EACrByuE,WAAYA,EACZlkE,MAAOiT,EAAYze,EAAK,eAAiBkG,EAAYlG,EAAK,qCAAkClE,EAC5F+5C,QAAS69D,EACT9jC,eAAgB+b,IAElB,mBAACt1C,GAAA,EAAM,CACL/tB,UAAU,kBACVlV,OAAK,EACLmhG,OAAK,EACLr+D,MAAM,cACNoG,UAAWt8C,EAAK,UAChB61C,QAAS89D,GAET,wBAAGrrF,UAAU,gBAEdqjE,GACC,mBAAC/mC,GAAA,EAAI,CACHtnD,OAAQ03D,EACRg/C,iBAAkBA,EAClBC,iBAAkBA,EAClB/0D,UAAWA,EACX2F,UAAWA,EACX3N,MAAOg9D,EACP5rF,UAAU,uBACVoxB,QAASyb,EACTtO,oBAAqBuO,GAErB,mBAAC7W,GAAA,EAAQ,CACPC,KAAOt4C,OAAkCpK,EAAtB,oBACnBk7D,WAAY9wD,EAAY,wBAAGoiB,UAAU,0BAAwBxsB,EAE7D+5C,QAAS,IAAMu9D,EAAoB,CACjCltG,WAAW,KAGZlG,EAAKizG,EAAyB,EAAI,kBAAoB,oBAEzD,mBAAC10D,GAAA,EAAQ,CACPC,KAAMt4C,EAAY,yBAAsBpK,EACxCk7D,WAAa9wD,OAAiDpK,EAArC,wBAAGwsB,UAAU,qBAEtCutB,QAAS,IAAMu9D,EAAoB,CACjCltG,WAAW,KAGZlG,EAAKizG,EAAyB,EAAI,kBAAoB,oBAExDF,GACC,sCACE,mBAACyB,GAAA,EAAa,MACd,mBAACj2D,GAAA,EAAQ,CACPC,KAAOr4C,OAAmCrK,EAAtB,oBACpBk7D,WAAY7wD,EAAa,wBAAGmiB,UAAU,0BAAwBxsB,EAE9D+5C,QAAS,IAAMw9D,EAAqB,CAClCltG,YAAY,KAGbnG,EAAKizG,EAAyB,EAAI,0CAA4C,gBAEjF,mBAAC10D,GAAA,EAAQ,CACPC,KAAMr4C,EAAa,yBAAsBrK,EACzCk7D,WAAa7wD,OAAkDrK,EAArC,wBAAGwsB,UAAU,qBAEvCutB,QAAS,IAAMw9D,EAAqB,CAClCltG,YAAY,KAGbnG,EAAKizG,EAAyB,EAAI,0CAA4C,iBAIrF,mBAACuB,GAAA,EAAa,MACd,mBAACj2D,GAAA,EAAQ,CAACC,KAAK,UAAU3I,QAAS+9D,GAC/B5zG,EAAK,sBAKV,KCrQV,IAAe+zC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,YAAE93B,GAAgB83B,EAClBygE,GAAkBvgE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoBj4B,EAAYjZ,QAGvF,OAAOwxG,EAAkB,mBAACA,EAAoBzgE,QAAYl4C,CAAS,ICGrE,IAAei4C,EAAAA,EAAAA,KAR4BC,IACzC,MAAM,OAAE12C,GAAW02C,EACb0gE,GAAiBxgE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,kBAAmB72C,GAGzE,OAAOo3G,EAAiB,mBAACA,EAAmB1gE,QAAYl4C,CAAS,ICGnE,IAAei4C,EAAAA,EAAAA,KARuBC,IACpC,MAAM,OAAE12C,GAAW02C,EACb2gE,GAAYzgE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAc72C,GAG/D,OAAOq3G,EAAY,mBAACA,EAAc3gE,QAAYl4C,CAAS,ICGzD,IAAei4C,EAAAA,EAAAA,KARsBC,IACnC,MAAM,OAAE12C,GAAW02C,EACb4gE,GAAW1gE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,YAAa72C,GAG7D,OAAOs3G,EAAW,mBAACA,EAAa5gE,QAAYl4C,CAAS,IC2BjD+4G,GAAU,IAAInN,OAAOoN,EAAAA,IAAkB,KAyF7C,IAAe/gE,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAAqC,IAArC,OAAEG,EAAM,SAAEC,GAAU,EAC3B,MAAMigB,GAAYC,EAAAA,EAAAA,IAAgBtgB,EAAQG,EAAQC,GAClD,MAAO,CACLk+B,OAAOogB,EAAAA,EAAAA,IAAY1+C,GACnBskB,gBAAgBtjB,EAAAA,EAAAA,IAAehB,GAAQskB,eACvCjE,YACD,GAPe67B,EAvF8B,IAQ5C,IAR6C,OACjD/7C,EAAM,SACNC,EAAQ,QACRo5G,EAAO,WACPngE,EAAU,eACV/0B,EAAc,UACdjE,EAAS,MACTie,GACD,EACC,MAAM,mBACJm7E,EAAkB,oBAClBh5F,EAAmB,qBACnBi5F,IACEtjF,EAAAA,EAAAA,MAEEujF,GAAsBC,EAAAA,GAAAA,IAAqB,KAC/C,MAAM,KAAEt2G,EAAI,SAAEyd,IAAalU,EAAAA,EAAAA,IAAkB2sG,KACvCK,EAAa94F,GAAU5V,MAAM2uG,GACjCA,EAAOt4G,OAAS6wG,EAAAA,GAAAA,UAGlB,OAAOwH,GAAYhmG,KAAOvQ,EAAK4jB,MAAMoyF,MAAW,EAAE,GACjD,CAACE,GAzBc,KAyBS,GAErBO,GAAUC,EAAAA,GAAAA,GAAiBL,EAAqB,CAACA,EAAqBH,IAAU,IAEtFxhE,EAAAA,EAAAA,KAAU,KACR,MAAMpoC,EAAOmqG,IAETnqG,EACF6pG,EAAmB,CAAEn2G,KAAMsM,KAE3B6Q,IACAi5F,EAAqB,CAAEv5G,SAAQC,aACjC,GACC,CAAC25G,EAAS55G,EAAQC,EAAUqgB,EAAqBg5F,EAAoBC,KAExE1rD,EAAAA,GAAAA,IAAc,KACZvtC,IACAi5F,EAAqB,CAAEv5G,SAAQC,YAAW,GACzC,CAACD,EAAQsgB,EAAqBrgB,EAAUs5G,IAE3C,MAAM/wD,GAAUsxD,EAAAA,GAAAA,IAAgB,IACvBjzG,QAAQsd,GAAkBk1F,MAAcn5F,IAAcg5B,IAC5D,CAACA,EAAYmgE,EAASn5F,EAAWiE,KAC9B,aAAEijC,EAAY,qBAAEE,IAAyBC,EAAAA,GAAAA,GAAkBiB,GAE3DuxD,GAAmBl4C,EAAAA,GAAAA,GAAiB19C,GAAgB,GAEpD61F,GAA4Bz8D,EAAAA,EAAAA,KAAY,KAC5Cg8D,EAAqB,CAAEv5G,SAAQC,WAAUigB,WAAW,GAAO,GAC1D,CAAClgB,EAAQC,EAAUs5G,IAEtB,IAAKnyD,IAAiB2yD,EACpB,OAIF,MAAM,MAAE5jF,KAAU8jF,GAAwBF,EACpCG,EAAc,CAClBztG,QAAS,CACPq3E,QAASm2B,IAIb,OACE,0BAAKrtF,WAAW0uB,EAAAA,GAAAA,GAAe,iBAAkBgM,IAC/C,8BACE,0BAAK16B,UAAU,4BACb,wBAAGA,UAAU,eAEf,mBAAC,GAAO,CAAC9nB,QAASo1G,EAAav2B,WAAS,EAACxlD,MAAOA,IAChD,mBAACwc,GAAA,EAAM,CACL/tB,UAAU,uBACVlV,OAAK,EACLmhG,OAAK,EACLr+D,MAAM,cACNoG,UAAU,wBACVzG,QAAS6/D,GAET,wBAAGptF,UAAU,iBAGb,KC7GV,IAAeyrB,EAAAA,EAAAA,KARwBC,IACrC,MAAM,OAAE12C,GAAW02C,EACb6hE,GAAa3hE,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAAe72C,GAGjE,OAAOu4G,EAAa,mBAACA,EAAe7hE,QAAYl4C,CAAS,IC+C3D,IAAei4C,EAAAA,EAAAA,KA7CqB,IAK9B,IAL+B,OACnCz2C,EAAM,QACNu4C,EAAO,KACPh3C,EAAI,WACJ+1C,GACD,EAEC,MAAMkhE,GAAUj+D,EAAAA,EAAAA,IAAwB,MAuBxC,OArBAtE,EAAAA,EAAAA,KAAU,KACR,MAAMwiE,EAASD,EAAQttF,QACvB,IAAKutF,EAAQ,OAEb,MAAM5lG,EAAQ4lG,EAAOC,YAAc,EAEhBD,EAAOttC,QAAQ,aACvBvxB,MAAMqT,YAAY,wBAA0B,GAAEp6C,MAAU,GAClE,CAAC7S,EAAQuB,KAEZ00C,EAAAA,EAAAA,KAAU,KACR,MAAMwiE,EAASD,EAAQttF,QACvB,IAAKutF,EAAQ,OAEb,MAAME,EAAaF,EAAOttC,QAAQ,aAElC,MAAO,KACLwtC,EAAW/+D,MAAMg/D,eAAe,wBAAwB,CACzD,GACA,IAGD,mBAAC7/D,GAAA,EAAM,CACL/tB,WAAW0uB,EAAAA,GAAAA,GAAe,WAAY15C,GAAU,QAChD8V,OAAK,EACL8iC,MAAM,cACNsgB,SAAU5hB,EACViB,QAASA,EACTyG,UAAU,6BAEV,wBAAGh0B,WAAW0uB,EAAAA,GAAAA,GAAe,gBAAiB,cAAe15C,GAAU,UACvE,2BAAM67C,IAAK28D,EAASxtF,UAAU,iBAAiBzpB,GACxC,I,ICiJRs3G,G,aAAe,SAAfA,GAAAA,EAAe,YAAfA,EAAe,gBAAfA,EAAe,YAAfA,EAAe,qBAAfA,KAAAA,GAAe,KAWpB,MAAMC,GAA2B,8BA+yCjC,IAAeriE,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAES,UAFT,OACPG,EAAM,SAAEC,EAAQ,gBAAEoE,EAAe,SAAEy4C,GACpC,EACC,MAAMlvC,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BgjG,EAAUhjG,IAAW26G,EAAAA,KAAkBh8E,EAAAA,EAAAA,IAAc9+B,EAAQG,QAAUI,EACvEq9D,EAAgB52D,QAAQm8F,GACxBxkC,GAAiBC,EAAAA,EAAAA,IAAqB5+D,EAAQG,GAC9C46G,GAAiB9gF,EAAAA,EAAAA,IAAS95B,GAC1B66G,GAAgCp9C,IAAkBm9C,KACnDE,EAAAA,EAAAA,IAA0Cj7G,EAAQG,EAAQC,GACzDwlB,GAAegsB,EAAAA,EAAAA,IAAmB5xC,EAAQG,EAAQC,IAClD,SAAEmtB,EAAQ,sBAAE2tF,EAAqB,yBAAEC,GAA6Bn7G,EAAO+U,SAASC,MAChFomG,EAAoBp7G,EAAOytB,cAAc4tF,EAAAA,KACzC5tF,EAAgBF,IAAa8tF,EAAAA,IAA0Br7G,EAAOytB,cAAcF,QAAYhtB,EACxF+6G,EAAuBN,EAA+BA,EAA6B15G,QAAKf,EACxFg7G,EAAkBD,GAAuBrnG,EAAAA,EAAAA,IAAkBjU,EAAQG,EAAQm7G,QAAwB/6G,GACnG,cAAEmX,GAAkB1X,EACpBw7G,EAAkBztG,GAAMuY,SAAWvY,GAAMuY,UAAUF,UAAY1O,OAAgBnX,EAC/E6lB,EAAWrY,GAAMwY,eAAiBi1F,IACtCztG,EAAKwY,cAAc6iB,MAAM5lB,GAASA,EAAKliB,KAAOk6G,IAC1CA,EACCztG,GAAM0tG,aAAaC,UAAY3tG,GAAMzM,QAAKf,GAE3Co7G,EAAav1F,GAAWhE,EAAAA,EAAAA,IAAWpiB,EAAQomB,QAAY7lB,EACvD8lB,GAAcs1F,GAAcv1F,GAAW5jB,EAAAA,EAAAA,IAAWxC,EAAQomB,QAAY7lB,EACtEq7G,GAAqBC,EAAAA,EAAAA,IAAyB77G,EAAQG,GACtD27G,GAAsBC,EAAAA,EAAAA,IAA0B/7G,EAAQG,GACxDwB,GAAqBtB,EAAAA,EAAAA,IAAyBL,GAC9Cg8G,EAA0B77G,IAAWwB,GAAoBxB,QAC1DC,IAAauB,GAAoBvB,UACjCoE,IAAoB7C,GAAoBH,KACvC2gB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQG,GAC1B87G,EAAgE,QAAvC,EAAA95F,IAASA,EAAKmE,UAAU6B,uBAAe,SAEhEiM,EAAmC,cAApB5vB,GACjB03G,EAAAA,EAAAA,IAA4Bl8G,EAAQG,IACpCk0B,EAAAA,EAAAA,GAAmBr0B,EAAQG,EAAQC,GAEjC8G,GAAeC,EAAAA,EAAAA,IAAmBnH,EAAQG,EAAQC,GAElDwB,GAAWZ,EAAAA,EAAAA,IAAehB,GAEhC,MAAO,CACLm8G,gBAAgBv6F,EAAAA,EAAAA,IAAqB5hB,EAAQG,EAAQC,EAAUoE,GAC/D0xB,gBAAiBl2B,EAAOk2B,gBACxBhvB,eACA+a,OAAOU,EAAAA,EAAAA,IAAY3iB,EAAQG,EAAQC,GACnC2N,OACA6vD,gBACAe,iBACAq9C,0BACAI,wBAAwBC,EAAAA,EAAAA,IAA6Br8G,EAAQG,GAC7D4vD,UAAWhiD,GAAOowD,EAAAA,EAAAA,IAAcpwD,QAAQxN,EACxCi+D,oBAAoB91D,EAAAA,EAAAA,IAAyB1I,EAAQi9C,GACrDwhB,oBAAoBC,EAAAA,EAAAA,IAAqB1+D,GACzCs8G,oBACsB,WAApB93G,GACGwC,QAAQ4e,GAAcle,QAE3B60G,eAAoC,cAApB/3G,EAChB82G,uBACAkB,uBAAwBjB,GAAiBkB,oBACzCrsB,aAAcjwF,IAAWyB,EAASU,gBAAgBC,SAClDyJ,UAAWpK,EAASoK,UACpB0wG,iBAAkB18G,EAAOqR,SAAS2Y,SAAS3Y,SAC3CsrG,oBAAqB38G,EAAO+R,aAAaiY,SAAS3Y,SAClDurG,iBAAkB7uG,GAAMuY,UAAUioB,QAClCsuE,gBAAiB78G,EAAOg/B,eAAexO,QACvC9Y,gBACAqe,aAAc/1B,EAAO+1B,aACrB1zB,qBAAsBT,EAASS,qBAC/B64G,wBACAC,2BACAnqG,aAAchR,EAAOgR,aACrBoqG,kBAAmBA,GAAmBztF,SACtCF,cAAeA,GAAeE,SAC9B+J,WAAY91B,EAAS81B,WAAWC,WAChCmlF,mBAAoBl7G,EAAS81B,WAAWve,UACxC4jG,gBAAiBhvG,GAAMuY,UAAYvY,EAAKuY,SAAS02F,YACjDA,YAAa7Z,GAAS78E,SAAY68E,EAAQ78E,SAASsuB,SAASqoE,WAAY,OAAS18G,EACjF28G,cAAe/Z,GAAS78E,UAAUsuB,SAASC,WAC3C8mE,aACAt1F,aACAD,WACAgO,eACAwnF,qBACAE,sBACA5G,WAAYl1G,EAAO67B,WAAWC,KAC9BqhF,oBAAoBC,EAAAA,EAAAA,GAAep9G,EAAQG,GAC3Cm+B,OAAOogB,EAAAA,EAAAA,IAAY1+C,GACnBq9G,eAAe1wF,EAAAA,EAAAA,GAAmB3sB,EAAQ,sBAAwBs9G,EAAAA,IAClEC,cAAc5wF,EAAAA,EAAAA,GAAmB3sB,EAAQ,iBACzC8kB,sBAAsBC,EAAAA,EAAAA,IAA2B/kB,GACjDi8G,wBACA5mG,mBAAoBrV,EAAOqV,mBAC5B,GAhGe6mC,EApyCwB,IAyDtC,IAzDuC,cAC3CshE,EAAa,eACbjB,EAAc,uBACdH,EAAsB,QACtB38C,EAAO,SACPxiB,EAAQ,WACRwgE,EAAU,eACVtB,EAAc,OACdh8G,EAAM,SACNC,EAAQ,gBACRoE,EAAe,MACfyd,EAAK,KACLlU,EAAI,wBACJiuG,EAAuB,qBACvBl3F,EAAoB,sBACpBm3F,EAAqB,gBACrB/lF,EAAe,cACf0nC,EAAa,eACbe,EAAc,UACd5O,EAAS,cACTstD,EAAa,mBACb7+C,EAAkB,mBAClBC,EAAkB,aAClB2xB,EAAY,UACZpkF,EAAS,qBACTsvG,EAAoB,uBACpBkB,EAAsB,oBACtBF,EAAmB,iBACnBI,EAAgB,oBAChBC,EAAmB,iBACnBC,EAAgB,gBAChBC,EAAe,cACfnlG,EAAa,aACb6lG,EAAY,aACZxnF,EAAY,qBACZ1zB,EAAoB,sBACpB64G,EAAqB,yBACrBC,EAAwB,kBACxBC,EAAiB,cACjB3tF,EAAa,aACbzc,EAAY,WACZ0mB,EAAU,mBACVolF,EAAkB,YAClBE,EAAW,gBACXD,GAAe,WACfpB,GAAU,WACVt1F,GAAU,SACVD,GAAQ,aACRgO,GAAY,aACZltB,GAAY,mBACZ00G,GAAkB,oBAClBE,GAAmB,cACnBoB,GAAa,WACbhI,GAAU,mBACViI,GAAkB,mBAClB9nG,GAAkB,MAClBipB,IACD,EACC,MAAM,YACJ1gB,GAAW,WACX8/F,GAAU,WACVt1F,GAAU,gBACV9lB,GAAe,cACfy7B,GAAa,eACb4/E,GAAc,qBACdC,GAAoB,SACpBv6G,GAAQ,eACRw6G,GAAc,oBACdC,GAAmB,WACnBC,GAAU,uBACVC,GAAsB,cACtBv8E,GAAa,qBACbw8E,GAAoB,iBACpBpyG,GAAgB,oCAChB2c,KACE4N,EAAAA,EAAAA,MAEE3xB,IAAO81C,EAAAA,GAAAA,KAGP2jE,IAAc5hE,EAAAA,EAAAA,IAAuB,MAErC6hE,IAAW7hE,EAAAA,EAAAA,IAAuB,OAEjCk9D,GAAS4E,KAAWC,EAAAA,GAAAA,GAAU,IAC/BC,IAAoBC,EAAAA,GAAAA,GAAqBj9C,EAAAA,KACzCk9C,IAA6BliE,EAAAA,EAAAA,MAC7BmiE,IAAoB97C,EAAAA,GAAAA,GAAY66C,IAC9B5oG,MAAOuyB,IAAgBC,GAAAA,EAAAA,MACzB7gB,GAAgBxY,GAAMwY,cACtBm4F,GAAgBn4F,KAChBA,GAAc7e,OAAS,IAAM6e,GAAc6iB,MAAM5lB,GAASA,EAAKliB,KAAOoW,MAErEinG,GAAoBC,GAAqBC,KAA6BniE,EAAAA,GAAAA,KACvEoiE,IAAoBC,EAAAA,GAAAA,GAAqB5+G,EAAQC,IAEvD43C,EAAAA,EAAAA,IAAUgnE,GAAAA,GAAmC,CAACxF,KAE9C,MAAMyF,IAAgC3iE,EAAAA,EAAAA,IAAO,GAEvC4iE,IAAuBxhE,EAAAA,EAAAA,KAAY,KACvCmhE,IAA2B,GAC1B,CAACA,MACGM,GAAiBC,KAAYC,EAAAA,GAAAA,GAAYjD,EAAwB8C,KAExElnE,EAAAA,EAAAA,KAAU,KACRwmE,GAA2BvxF,aAAU1sB,CAAS,GAC7C,CAACJ,KAEJ63C,EAAAA,EAAAA,KAAU,KACJ73C,GAAU41B,GAAgB0pC,GAC5Bm+C,GAAqB,CAAEz9G,UACzB,GACC,CAACs/D,EAASt/D,EAAQy9G,GAAsB7nF,EAAc31B,KAEzD43C,EAAAA,EAAAA,KAAU,KACJ73C,GAAU4N,GAAQgoB,IAAiBxP,IAAiBk5C,IAAWrB,EAAAA,EAAAA,IAAiBrwD,IAClFgwG,GAAW,CAAE59G,UACf,GACC,CAAC4N,EAAM5N,EAAQs/D,EAAS1pC,EAAcgoF,GAAYx3F,KAErD,MAAM+4F,IAA+BhjE,EAAAA,EAAAA,KAAO,IAC5C0R,EAAAA,GAAAA,IAAc,IAAqC,IAAnCuxD,EAAYC,GAAkB,EAE5CF,GAA6BryF,QAAUjmB,QAAQ7G,IAAWo/G,GAAch5F,KAAkBi5F,EAAkB,GAC3G,CAACr/G,EAAQomB,MAEZ2oC,EAAAA,EAAAA,KAAgB,KACTgvD,GAAYjxF,UAEjBixF,GAAYjxF,QAAQ6kC,UApIP,8uBAoI2B,GACvC,IAEH,MAAOnxC,GAAa8vF,KAAkBj3D,EAAAA,EAAAA,IAA0B,IAC1DimE,GAAiBz4G,QAAQ2Z,GAAYjZ,SAErC,gBACJoL,GAAe,YAAE4sG,GAAW,eAAE1K,GAAc,eAAEC,GAAc,oBAAE0K,GAAmB,cACjF3sG,GAAa,iBAAEP,GAAgB,cAAEI,GAAa,cAAEF,GAAa,cAAED,GAAa,iBAAEE,KAC5E0oC,EAAAA,EAAAA,KAAQ,KAAMroC,EAAAA,EAAAA,IAA4BlF,EAAM6vD,IAAgB,CAAC7vD,EAAM6vD,IAErEgiD,IAAqBntG,KAAqB0pG,GAE1C,yBACJlG,GAAwB,uBACxB4J,GAAsB,kBACtBC,GAAiB,kBACjBC,GAAiB,iBACjB/J,GAAgB,gBAChBgK,GAAe,uBACfC,GAAsB,qBACtBC,IpBxWW,SAA4B,GAoBxC,IApBwC,YACzCv/F,EAAW,cACX08F,EAAa,QACbe,EAAO,eACP3N,EAAc,OACdtwG,EAAM,cACN0S,EAAa,cACbF,EAAa,cACbD,EAAa,iBACbE,GAWD,EACC,MAAM,sBAAEye,EAAqB,oCAAE7I,IAAwC4N,EAAAA,EAAAA,OAChE0pF,EAAmBK,IAAwB3mE,EAAAA,EAAAA,KAAkB,IAC7DqmE,EAAwBO,IAA6B5mE,EAAAA,EAAAA,KAAkB,IACvEy8D,EAA0BoK,IAA+B7mE,EAAAA,EAAAA,SAA8Bj5C,GAExF0/G,GAAyBviE,EAAAA,EAAAA,KAAY,KACzC+yD,EAAetvG,EAAAA,EAAiB,GAC/B,CAACsvG,IAEEyP,GAAuBxiE,EAAAA,EAAAA,KAC1B4iE,IACC,MAAM3N,EAAqC,mBAAb2N,EAA0BA,EAAS3/F,GAAe2/F,EAChF,GAAK3N,EAAejrG,OAKpB,GAAIirG,EAAevpE,MAAMrrB,IACvB,MAAMvc,EAAOod,GAAkBb,GAE/B,MAAiB,UAATvc,IAAqBqR,IAAkBD,GAChC,UAATpR,IAAqBmR,IAAkBC,GAC9B,UAATpR,IAAqBkR,IAAkBE,GAC9B,SAATpR,IAAoBoR,CAAiB,IAE3C4V,EAAoC,CAAEroB,gBACjC,GAAIwyG,EAAevpE,MAAK,QAAC,KAAE2R,GAAM,SAAKA,EAAOsiE,CAAa,IAC/DhsF,EAAsB,CACpB/b,MAAO,2BAEJ,CACLm7F,EAAekC,GACf,MAAMzwF,EAAcywF,EAAevpE,MAAMrrB,IACvC,MAAMvc,EAAOod,GAAkBb,GAE/B,MAAiB,UAATvc,IAAqBqR,GACd,UAATrR,IAAqBmR,GACZ,UAATnR,IAAqBkR,CAAc,IAG3CytG,EAAqBn5G,QAAQkb,GAAetP,IAC5CwtG,GAA2BxtG,EAC7B,MA7BEqtG,GA6BF,GACC,CACDt/F,EAAa9N,EAAeD,EAAkBF,EAAeC,EAAexS,EAAQk9G,EACpF4C,EAAwB5uF,EAAuBo/E,EAAgBjoF,IAkBnE,MAAO,CACLytF,2BACA8J,mBAhBwBriE,EAAAA,EAAAA,KAAYzkC,MAAO1V,EAAegvD,KAC1D2tD,EAAqB,IAChBv/F,WACM8J,QAAQC,IAAInnB,EAAMwB,KAAKmuB,GAC9Bk2E,GAAgBl2E,EAAKsY,KAAMtY,EAAM,CAAE43E,oBAAqBv4C,QAAahyD,QAEvE,GACD,CAACogB,EAAau/F,IAUflK,kBARuBt4D,EAAAA,EAAAA,KAAYzkC,MAAO1V,EAAeg9G,KACzDL,QAA2Bz1F,QAAQC,IAAInnB,EAAMwB,KAAKmuB,GAASk2E,GAAgBl2E,EAAKsY,KAAMtY,OACtFmtF,EAA4BE,EAAmB,GAC9C,CAACL,IAMFF,gBAAiB5B,EACjB6B,yBACAC,uBACAL,yBACAC,oBAEJ,CoB2QMU,CAAmB,CACrB7/F,eACAy9F,WACA3N,kBACA4M,gBACAl9G,SACA0S,iBACAF,iBACAD,iBACAE,uBAGK6tG,GAAmBC,GAAiBC,KAAoBjkE,EAAAA,GAAAA,MACxDkkE,GAAsBC,GAAoBC,KAAuBpkE,EAAAA,GAAAA,MACjEqkE,GAAkBC,GAAgBC,KAAmBvkE,EAAAA,GAAAA,MACrDwkE,GAAkBC,GAAgBC,KAAmB1kE,EAAAA,GAAAA,MACrD2kE,GAAmBC,GAAiBC,KAAoB7kE,EAAAA,GAAAA,MACxD8kE,GAAiBC,GAAcC,KAAehlE,EAAAA,GAAAA,MAE/C,oBACJilE,GAAmB,mBACnBC,GAAkB,oBAClBC,GAAmB,qBACnBC,GAAoB,kBACpBC,GACAC,gBAAiBC,GAAa,mBAC9BC,ICtYsB,MAExB,MAAMF,GAAkB1lE,EAAAA,EAAAA,IAA0B,OAC3CwlE,EAAsBK,IAA2B3oE,EAAAA,EAAAA,MAClD0oE,GAAqB5lE,EAAAA,EAAAA,OACpBylE,EAAmBK,IAAwB5oE,EAAAA,EAAAA,OAElDxB,EAAAA,EAAAA,KAAU,KAEJqqE,EAAAA,IAAaC,EAAAA,IACVC,IACP,GACC,IAEH,MAAMZ,GAAsBjkE,EAAAA,EAAAA,KAAYzkC,UACtC,IACE,MAAM,KAAE6/C,EAAI,MAAE1tC,SAAgBm3F,IAAsBC,IAC9CR,EAAgB/0F,UACdi1F,EAAmBj1F,SAAW/gB,KAAKC,MAAQ,GAAM,IACnD61G,EAAgB/0F,QAAQ0uB,MAAM8mE,UAAa,SAA4B,IAAnBD,GAAc,wBAEpEJ,EAAqBl2G,KAAKC,OAC5B,IAEF+1G,EAAmBj1F,QAAU/gB,KAAKC,MAClCi2G,EAAqBl2G,KAAKC,OAE1Bg2G,EAAwB,CAAErpD,OAAM1tC,SAIlC,CAHE,MAAOxX,GAEPgD,QAAQC,MAAMjD,EAChB,IACC,IAEGiuG,GAAsBnkE,EAAAA,EAAAA,KAAY,KACtC,GAAKokE,EAAL,CAIIE,EAAgB/0F,UAClB+0F,EAAgB/0F,QAAQ0uB,MAAM8mE,UAAY,QAE5C,IACE,OAAOX,EAAsB12F,OAK/B,CAJE,MAAOxX,GAGP,YADAgD,QAAQC,MAAMjD,EAEhB,CAXA,CAWA,GACC,CAACkuG,IAEEF,GAAqBlkE,EAAAA,EAAAA,KAAY,KACrC,GAAKokE,EAAL,CAIAK,OAAwB5hH,GACxB2hH,EAAmBj1F,aAAU1sB,EAC7B6hH,OAAqB7hH,GACjByhH,EAAgB/0F,UAClB+0F,EAAgB/0F,QAAQ0uB,MAAM8mE,UAAY,QAE5C,IACE,OAAOX,EAAsBhpD,MAK/B,CAJE,MAAOllD,GAGP,YADAgD,QAAQC,MAAMjD,EAEhB,CAdA,CAcA,GACC,CAACkuG,IAMJ,OAJA9pE,EAAAA,EAAAA,KAAU,IACD8pE,GAAuBv/D,EAAAA,GAAAA,GAAsBq/D,QAAsBrhH,GACzE,CAACuhH,EAAsBF,IAEnB,CACLD,sBACAE,sBACAD,qBACAE,uBACAC,oBACAC,kBACAE,qBACD,EDoTGQ,IAEJt9B,EAAAA,GAAAA,IAAY,KACV05B,GAAkB,CAAEt9G,KAAM,eAAgB,GACzCsgH,IAAwBa,EAAAA,MAE3B3qE,EAAAA,EAAAA,KAAU,KACH8pE,IACHhD,GAAkB,CAAEt9G,KAAM,UAC5B,GACC,CAACsgH,GAAsBhD,KAE1B,MAAM8D,IAAeC,EAAAA,GAAAA,GAAY77G,QAAQm1G,KACzCnkE,EAAAA,EAAAA,KAAU,KACJwhE,OAAcoJ,GAAa31F,SAC7B6xF,GAAkB,CAAEt9G,KAAM,UAC5B,GACC,CAACg4G,GAASoJ,GAAc9D,KAE3B,MAAMnwE,GAAU5gC,IAAQ+0G,EAAAA,EAAAA,IAAY/0G,GAC9Bg1G,IAAWC,EAAAA,EAAAA,IAAuBj1G,IAElC,mBACJk1G,GAAkB,kBAClBC,GAAiB,eACjBC,GAAc,qBACdC,GAAoB,YACpBC,KACEC,EAAAA,GAAAA,GACFt8G,QAAQy4D,GAAWu8C,GAA2Bd,IAA0BuE,IACxEjG,GACA4E,QACA79G,EACAyQ,EACAoqG,EACA3tF,IAGI,yBACJ81F,GAAwB,wBACxBC,GAAuB,kBACvBC,KACEC,EAAAA,GAAAA,GACF18G,QAAQy4D,GAAWu8C,GAA2Bb,IAA6BsE,IAC3EjG,GACA4E,GACAE,GACAH,GACAxB,IAGI,qBACJgH,GAAoB,oBACpBC,I1BnbW,SACbloF,EACA89E,EACAnoG,GAEA,MAAM,qBAAEwyG,EAAoB,sBAAEC,IAA0B1tF,EAAAA,EAAAA,OAEjD2tF,EAAkBC,EAAoBC,IAAwBvnE,EAAAA,GAAAA,IAAQ,GAEvEwnE,GAAiBlK,EAAAA,GAAAA,IAAiB,KACtC,MAAMhP,EAAOwO,IACb,IAAK99E,IAAcsvE,GAASmZ,EAAAA,IAAsBnZ,EAAKtjG,OAdxC,EAc8D,OAG7E,IADiBsjG,EAAK9jF,MAAMi9F,EAAAA,GAAqBC,GAAAA,EAAehY,EAAAA,KACjD,OAEf,MAAMiY,GAAYC,EAAAA,GAAAA,GAAiBtZ,GAMnC,OALsBqZ,IACnBF,EAAAA,IAA0D,KAApCI,EAAAA,GAAAA,GAAqBF,KACvCF,EAAAA,IAAsBn9G,QAAQgkG,EAAK9jF,MAAMglF,MAI3CiY,EAAAA,GAAqBE,EAAYA,EAAUn9F,MAAM,gBAAgB,QAClE3mB,CAAS,GACZ,CAACi5G,EAAS99E,IAEPlrB,GAAWypG,EAAAA,GAAAA,IAAgB,IAAMjzG,QAAQk9G,MAAmB,CAACA,IAC7DM,EAAcx9G,QAAQqK,GAAU3J,QAiBtC,OAfAswC,EAAAA,EAAAA,KAAU,KACR,IAAKtc,EAAW,OAEhB,MAAMw1D,EAAcgzB,IAChBhzB,EACGszB,GACHX,EAAqB,CAAE/9G,MAAOorF,IAGhC4yB,GACF,GACC,CAACpoF,EAAWwoF,EAAgBM,EAAaX,EAAsBC,KAElE9rE,EAAAA,EAAAA,IAAUisE,EAAsB,CAACA,EAAsBzK,IAEhD,CACLmK,qBAAsB38G,QAAQwJ,GAAYg0G,IAAgBT,GAC1DH,oBAAqBI,EAEzB,C0BmYMS,CACFz9G,QAAQy4D,GAAWu8C,GAA2Bd,GAAyBpoG,KAAoB2sG,IAC3FjG,GACAkD,IAGI,qBACJgI,GAAoB,oBACpBC,GAAmB,cACnBC,GAAa,qBACbC,KACEC,EAAAA,GAAAA,GACF99G,QAAQy4D,GAAWu8C,IAA4ByD,IAC/CjG,GACA4E,GACAE,GACAH,GACAvB,EACAC,EACAnlG,IAIA3V,OAAQgjH,GACR7wG,MAAO8wG,GACPplF,UAAWqlF,GACX9lF,SAAU+lF,GACVl2G,QAASm2G,GACTC,aAAcC,GACd1lF,KAAM2lF,GACNC,SAAUC,ItB5cC,SACb9pF,EACAv7B,EACAq5G,EACA9hF,GAEA,MAAM,eAAE+tF,EAAc,eAAErlF,EAAc,mBAAEslF,IAAuBtvF,EAAAA,EAAAA,OAExD2tF,EAAkBC,EAAoBC,IAAwBvnE,EAAAA,GAAAA,IAAQ,GAEvEipE,GAA2BC,EAAAA,GAAAA,IAAqB,KACpD,MAAM5a,EAAOwO,IACb,OAAO99E,GAAasvE,EAAK3jD,WAAW,KAmExC,SAAuB2jD,GACrB,IAAKA,EAAK3jD,WAAW,KACnB,OAAO0rD,GAGT,MAAMzvG,EASR,SAAsB0nG,GASpB,OARAkI,GAAOphD,UAAYk5C,EAAKl7F,QAAQ,QAAS,MAEzCojG,GAAOvjG,iBAA8B,SAASzE,SAAS4rB,IAChDA,EAAGs7E,YACNt7E,EAAGs7E,UAAYt7E,EAAGshB,aAAa,OACjC,IAGK86D,GAAOd,SAChB,CAnBeyT,CAAa7a,GACpBzlG,EAASjC,EAAK4jB,MAAM2rF,IAC1B,OAAKttG,EAIE4tG,GAAoB5tG,EAAO,GAAIA,EAAO,GAAkB,KAAdA,EAAO,KAAcjC,EAAK4jB,MAAM4rF,KAHxEC,EAIX,CA/E+C+S,CAAc9a,GAAQ+H,EAAc,GAC9E,CAACyG,EAAS99E,GAzBE,MA0BT,SACJtR,EAAQ,MAAExpB,EAAK,YAAEoyG,EAAW,gBAAEC,IAC5BgH,EAAAA,GAAAA,GAAgB0L,EAA0B,CAACA,EAA0BnM,IAAU,IAEnFxrD,EAAAA,GAAAA,IAAc,IAAoB,IAAlB+3D,GAAa,EACvBA,GACF3lF,EAAe,CAAEhW,SAAU27F,GAC7B,GAEC,CAAC37F,EAAUgW,KAEd4X,EAAAA,EAAAA,KAAU,KACHi7D,GAELwS,EAAe,CACbtlH,SAAQiqB,SAAU6oF,EAAiBryG,SACnC,GACD,CAACT,EAAQS,EAAO6kH,EAAgBxS,KAEnCj7D,EAAAA,EAAAA,IAAUisE,EAAsB,CAACA,EAAsBzK,IAEvD,MACEl4G,GAAI4S,EAAK,SACTirB,EAAQ,OACRpwB,EAAM,QACNC,EAAO,UACP4wB,EAAS,KACTD,GACGszE,GAAmBv7E,IAAau7E,IAAqB,CAAC,EAErDlxG,EAASiF,SAASgI,GAAStH,QAAUy3B,KAAc4kF,IAEzD/rE,EAAAA,EAAAA,KAAU,KACHj2C,GAAWqoB,GACds7F,GACF,GACC,CAAC3jH,EAAQ2jH,EAAoBt7F,IAEhC,MAAMm7F,GAAW7nE,EAAAA,EAAAA,KAAY,KACtBu1D,GAELwS,EAAe,CACbtlH,SAAQiqB,SAAU6oF,EAAiBryG,QAAOmO,UAC1C,GACD,CAAC5O,EAAQ4O,EAAQnO,EAAO6kH,EAAgBxS,IAE3C,MAAO,CACLlxG,SACAmS,QACA0rB,YACAT,WACAnwB,UACAo2G,aAAcpB,EACdrkF,KAAMqzE,GAAerzE,EAAQ,IAAGvV,KAAYuV,SAASp/B,EACrDglH,WAEJ,CsBuYMS,CACFh/G,QAAQy4D,GAAWu8C,IAA4ByD,IAAkB1pF,GACjE51B,EACAq5G,GACA9hF,IAIA31B,OAAQkkH,GACR5qF,MAAO6qF,GACPC,oBAAqBC,IrBleV,SACb1qF,EACA89E,EACAwD,EACAD,GAEA,MAAOoJ,EAAqBE,IAA0B7sE,EAAAA,EAAAA,OAC/CuqE,EAAkBC,EAAoBC,IAAwBvnE,EAAAA,GAAAA,IAAQ,GAEvE4pE,GAAyBV,EAAAA,GAAAA,IAAqB,KAClD,MAAM5a,EAAOwO,IACb,OAAO99E,GAAasvE,EAAK3jD,WAAW,MAAOi9D,EAAAA,GAAAA,GAAiBtZ,GAAM9jF,MAAMmsF,MAAc,GAAG98F,YAAShW,CAAS,GAC1G,CAACi5G,EAAS99E,GAdE,KAgBT6qF,GAAavM,EAAAA,GAAAA,GACjBsM,EAAwB,CAACA,EAAwB9M,IAAU,GAqB7D,OAlBAxhE,EAAAA,EAAAA,KAAU,KACR,MAAMzb,EAAUgqF,IACVtJ,EAAWD,GAAeD,EAChC,IAAKxgF,IAAY0gF,EAEf,YADAoJ,OAAuB9lH,GAIzB,MAAMyE,EAASu3B,EAAQ80E,UAAU,GAC3BmV,EAA0BvJ,EAASj4G,QAAQm2F,IAAOn2F,GAAUm2F,EAAE5+D,QAAQ8qB,WAAWriD,KAEvFqhH,EACEG,GAAyB9+G,OAAS8+G,OAA0BjmH,EAC7D,GACA,CAACgmH,EAAYvJ,EAAaD,KAE7B/kE,EAAAA,EAAAA,IAAUisE,EAAsB,CAACA,EAAsBzK,IAEhD,CACLz3G,OAAQiF,QAAQm/G,GAAqBz+G,SAAWq8G,GAChD1oF,MAAO2oF,EACPmC,sBAEJ,CqB0bMM,CACFz/G,QAAQy4D,GAAWu8C,IAA6BgB,GAAeA,GAAat1G,QAAWq1G,IAAiBr1G,SACxG8xG,GACAwD,EACAD,IAGI2J,IAA4BhpE,EAAAA,EAAAA,KAAY,SAACipE,GAAyD,IAAxC7iE,EAAkB,UAAH,6CAAGmtD,EAAAA,IAChF,GAAIntD,IAAYmtD,EAAAA,KAAqB2O,GAAmB,OACxD,MAAMrU,EAAYxoG,OAAOyoG,eACzB,IAAIob,EAOJ,GALEA,EADE9iE,IAAYmtD,EAAAA,IACCvhG,SAASwoC,cAA8BopB,EAAAA,KAEvC5xD,SAAS89C,eAAe1J,GAGrCynD,EAAUsb,WAAY,CACxB,MAAMC,EAAiBvb,EAAUwb,WAAW,GAC5C,IAAIC,EAAAA,GAAAA,GAAuBF,EAAgBhjE,GAGzC,OAFAmjE,EAAAA,GAAAA,GAAsBN,QACtBC,EAAaM,cAAc,IAAIC,MAAM,QAAS,CAAEC,SAAS,IAG7D,CAEAhJ,GAAS,GAAE5E,OAAYmN,KAGvBtY,uBAAsB,MACpBgZ,EAAAA,GAAAA,GAAqBT,EAAa,GAEtC,GAAG,CAAChH,GAAmBpG,GAAS4E,KAE1BkJ,IAAqC5pE,EAAAA,EAAAA,KAAY,SACrDp6C,GACG,IADqBwgD,EAAkB,UAAH,6CAAGmtD,EAAAA,IAE1C,MAAM0V,GAAUY,EAAAA,GAAAA,GAA0BjkH,GAC1CojH,GAA0BC,EAAS7iE,EACrC,GAAG,CAAC4iE,KAEEc,IAAmC9pE,EAAAA,EAAAA,KAAY,SAAC53C,GAA2D,IAAxCg+C,EAAkB,UAAH,6CAAGmtD,EAAAA,IACzFyV,IAA0Be,EAAAA,GAAAA,IAAqB3hH,GAAQg+C,EACzD,GAAG,CAAC4iE,KnBhgBW,EACfzkG,EACA9hB,EACAC,EACAo5G,EACA4E,EACA1N,EACA36E,KAEA,MAAM,UAAE2xF,EAAS,WAAEhK,EAAU,iBAAE5yF,IAAqBsL,EAAAA,EAAAA,MAE9CuxF,EAAY3gH,QAAQ0pG,GAEpBkX,GAAclqE,EAAAA,EAAAA,KAAY,WAAiF,IAAhFmqE,EAAoD,UAAH,6CAAG,CAAC,EAAG3lG,EAAc,UAAH,8CAClG,GAAIylG,IAAc5xF,EAAc,OAEhC,MAAMi1E,EAAOwO,IAEH,QAOH,IAPHxO,EACF0c,EAAU,CACRvnH,OAAwB,QAAlB,EAAE0nH,EAAU1nH,cAAM,QAAIA,EAC5BC,SAA4B,QAApB,EAAEynH,EAAUznH,gBAAQ,QAAIA,EAChC6hB,OAAOpV,EAAAA,EAAAA,IAAkBm+F,GACzB9oF,gBAGFw7F,EAAW,CACTv9G,OAAwB,QAAlB,EAAE0nH,EAAU1nH,cAAM,QAAIA,EAC5BC,SAA4B,QAApB,EAAEynH,EAAUznH,gBAAQ,QAAIA,EAChC8hB,eAGN,GAAG,CAAC/hB,EAAQC,EAAUunH,EAAW5xF,EAAcyjF,EAASkO,EAAWhK,IAE7DoK,GAAmBpqE,EAAAA,EAAAA,KAAY,KACnCkqE,OAAYrnH,GAAW,EAAK,GAC3B,CAACqnH,IAEEG,GAAiBlF,EAAAA,GAAAA,GAAY+E,GAC7BI,GAA2BjiB,EAAAA,GAAAA,GAAgBkiB,EAAAA,KAAgB,OAAM1nH,EAAW,CAACJ,EAAQC,KAG3Fm9C,EAAAA,GAAAA,IAAsB,IAA2C,IAAzCgiE,EAAY2I,EAAcC,GAAU,EAC1D,GAAIhoH,IAAWo/G,GAAcn/G,IAAa8nH,KACnCjmG,GAASkmG,GACZ/J,EAAQ,KAGLn8F,GAAOC,aACV,OAIJ,GAAIwuF,IAAkBzuF,EACpB,OAGFm8F,GAAQmJ,EAAAA,GAAAA,GAA0BtlG,IAElC,MAAMmmG,EAAiBnmG,EAAMlB,UACzBhc,KAAK+0G,GAAWA,EAAOt4G,OAAS6wG,EAAAA,GAAAA,aAAqCyH,EAAOroG,aAC7EzM,OAAOgC,UAAY,GAClBohH,EAAe1gH,QAAQojB,EAAiB,CAAEnhB,IAAKy+G,IAE9Ct8G,EAAAA,IACHuiG,uBAAsB,KACpB,MAAMuY,EAAel3G,SAASwoC,cAA8BopB,EAAAA,KACxDslD,IACFS,EAAAA,GAAAA,GAAqBT,GAAc,EACrC,GAEJ,GAEC,CACDzmH,EAAQC,EAAU6hB,EAAOm8F,EAAS1N,EAAe5lF,KAInDktB,EAAAA,EAAAA,KAAU,IACD,KAEA2vE,GAEHI,EAAe96F,QAAQ,CAAE9sB,SAAQC,aAzFvCkzG,IAAW,EACXjF,uBAAsB,KACpBiF,IAAW,CAAK,GA0FN,GAET,CAACnzG,EAAQC,EAAUunH,EAAWI,IAEjC,MAAMM,GAAYxF,EAAAA,GAAAA,GAAY1iH,GACxBmoH,GAAczF,EAAAA,GAAAA,GAAYziH,IAChC43C,EAAAA,EAAAA,KAAU,KACR,GAAIs7D,GACF,OAGF,IAAKkG,IAGH,YAFAuO,EAAe96F,UAKjB,MAAMs7F,EAAeF,EAAUp7F,QACzBu7F,EAAiBF,EAAYr7F,QAEnC+6F,GAAyB,KACnBK,EAAUp7F,UAAYs7F,GAAgBD,EAAYr7F,UAAYu7F,GAChET,EAAe96F,SACjB,GACA,GACD,CAACo7F,EAAW7O,EAASwO,EAA0BM,EAAaP,KAE/D5oB,EAAAA,GAAAA,GAAkB2oB,GAClBhwE,GAAgBgwE,EAAiB,EmBgZjCW,CAASxmG,EAAO9hB,EAAQC,EAAUo5G,GAAS4E,GAASjC,EAAgBpmF,GAEpE,MAAM2yF,IAAgBhrE,EAAAA,EAAAA,KAAY,WAAiC,IAAhCirE,EAAsB,UAAH,8CAC/CA,GACHvK,GAAQ,IAGV3N,GAAetvG,EAAAA,GAEf+hH,KACAM,KACAI,KACAe,KAEI1nE,EAEFn0C,YAAW,IAAMm4G,MApVY,KAsV7BA,IAEJ,GAAG,CACD7C,GAASnhE,EAAU2mE,GAAqBJ,GAAyBmB,GAAqBzB,GACtFjC,MAGK2H,GAAoBC,GAAkBxR,IEtiB5B,EACjBmC,EACA4E,EACA1N,EACAgY,EACApH,EACAnhH,EACAC,EACAoB,EACAygB,EACAmS,EACAltB,KAEA,MAAM,YAAE4hH,EAAW,gBAAEC,IAAoB3yF,EAAAA,EAAAA,OAClCihF,EAAwB2R,IAA6BxvE,EAAAA,EAAAA,OAE5D+D,EAAAA,GAAAA,IAAsB,IAA2C,IAAzC0rE,EAAmBC,GAAiB,EAC1D,IAAKxY,EACH,OAGF,GAAIxpG,GAAgBgiH,IAAqBhiH,EAGvC,OAFAk3G,EAAQ,SACR4K,GAA0B,GAI5B,GAAIC,GAAmB3nH,KAAOovG,EAAcpvG,IAAM4F,IAAiBgiH,EACjE,OAGF,MAAM5lH,GAAQ2lH,GAAqB70F,GAAc9wB,KAAKoE,OAAS0sB,EAAes8E,EAAc9jG,QAAQtJ,KAC9F0nG,GAAOuc,EAAAA,GAAAA,GAA0BjkH,GAEvC86G,EAAQpT,GACRge,GAA0B,GAE1B3a,uBAAsB,KACpB,MAAMuY,EAAel3G,SAASwoC,cAA8BopB,EAAAA,KACxDslD,IACFS,EAAAA,GAAAA,GAAqBT,GAAc,EACrC,GACA,GAED,CAAClW,EAAexpG,EAAck3G,KAEjCpmE,EAAAA,EAAAA,KAAU,KACR,GAAK04D,EACL,MAAO,KACL,MAAMyY,GAASt8G,EAAAA,EAAAA,IAAkB2sG,KAC3BzwF,EAASogG,EAAO7lH,KAAKoE,OAASyhH,OAAS5oH,EAE7CwoH,EAAgB,CACd5oH,SAAQC,WAAUoB,OAAM8B,KAAMylB,GAC9B,CACH,GACA,CAAC5oB,EAAQuwG,EAAe8I,EAASuP,EAAiB3oH,EAAUoB,IAE/D,MAAM4nH,GAA8B1rE,EAAAA,EAAAA,KAAY,KACzCz7B,IAELkqE,EAAAA,EAAAA,KAAQ,KACNiyB,GAAQmJ,EAAAA,GAAAA,GAA0BtlG,IAClC,MAAM2kG,EAAel3G,SAASwoC,cAA8BopB,EAAAA,KACxDslD,GACFvY,uBAAsB,MACpBgZ,EAAAA,GAAAA,GAAqBT,GAAc,EAAK,GAE5C,GACA,GACD,CAAC3kG,EAAOm8F,IAELyK,GAAmBnrE,EAAAA,EAAAA,KAAY,KACnCgrE,IACAU,GAA6B,GAC5B,CAACV,EAAeU,IAEbR,GAAqBlrE,EAAAA,EAAAA,KAAY,KACrC,MAAM,KAAEp6C,EAAI,SAAEyd,IAAalU,EAAAA,EAAAA,IAAkB2sG,KAExC9I,IAIAptG,IAAS+lH,EAAAA,EAAAA,IAAgB3Y,IAK9BoY,EAAY,CACVxlH,OACAyd,aAGF2nG,IACAU,KAVE9H,IAU2B,GAC5B,CAACwH,EAAapY,EAAe8I,EAAS8H,EAAiBoH,EAAeU,IAEnEE,GAAa5rE,EAAAA,EAAAA,KAAY,KAC7B,IAAKgzD,EAAe,OACpB,MAAMyY,GAASt8G,EAAAA,EAAAA,IAAkB2sG,KAC3BzwF,EAASogG,EAAO7lH,KAAKoE,OAASyhH,OAAS5oH,EAE7CwoH,EAAgB,CACd5oH,SAAQC,WAAUoB,OAAM8B,KAAMylB,GAC9B,GACD,CAAC5oB,EAAQuwG,EAAe8I,EAASuP,EAAiB3oH,EAAUoB,IAK/D,OAHA29F,EAAAA,GAAAA,GAAkBmqB,GAClBxxE,GAAgBwxE,GAET,CAACV,EAAoBC,EAAkBxR,EAAuB,EFubEkS,CACrE/P,GACA4E,GACAjC,EACAuM,GACApH,GACAnhH,EACAC,EACAoE,EACAyd,EACAmS,GACAltB,IAIIsiH,IAAmB3G,EAAAA,GAAAA,GAAY6F,IAC/Be,IAAwB5G,EAAAA,GAAAA,GAAYjB,KAC1C5pE,EAAAA,EAAAA,KAAU,IACD,KAELyxE,GAAsBx8F,UAEtBu8F,GAAiBv8F,SAAS,GAE3B,CAAC9sB,EAAQC,EAAUopH,GAAkBC,KAExC,MAAMC,IAAqChsE,EAAAA,EAAAA,KAAY,KACrD,MAAMisE,EAAqB1K,GAA8BhyF,QAWvDphB,GAVG89G,EAUc,CACf1kH,QAASR,GAAK,2BACd+P,OAAQ,CACNA,OAAQ,WACR7T,QAAS,CAAEW,GAAIoW,EAAejW,sBAAsB,IAEtDwvE,WAAYxsE,GAAK,SAfF,CACfQ,QAASR,GAAK,0BACd+P,OAAQ,CACNA,OAAQ,mBACR7T,QAAS,CAAEilC,eAAgB,mBAE7BqrC,WAAYxsE,GAAK,iBAYrBw6G,GAA8BhyF,QAAUtlB,QAAQgiH,EAAmB,GAClE,CAACjyG,EAAejT,GAAMoH,KAEnB+9G,IAAkB3P,EAAAA,GAAAA,IAAgB,IAClCkC,GAAkB9E,GACbuD,GAAgBiP,MAGrBvH,EAAAA,IAAiCR,IAAyB1xB,GAAkBopB,OAAciG,GAI1FlD,EACK3B,GAAgBkP,SAGlBlP,GAAgBmP,KAPdnP,GAAgBoP,QAQxB,CACDlI,GAAsB3F,EAAgB3C,GAASiG,GAAgBrvB,EAAcinB,GAAwBkF,IAEjG0N,IAAyB1N,GAG7B9iD,kBAAmBywD,GAAoB,kBACvCvwD,GAAiB,uBACjBC,GAAsB,sBACtBC,KACEC,EAAAA,GAAAA,GAAuBmoD,KAAiB2H,KAAoBhP,GAAgBmP,MAAQE,KAExFE,GACEnO,EACAsL,GACApH,GACA/D,GACCr3F,IAAyB65C,EAC1B+qD,IAGF,MAAMU,IAAsB1sE,EAAAA,EAAAA,KAAY,KAClCy+D,GACF0M,IACF,GACC,CAAC1M,EAAgB0M,KAEdwB,IAAqB3sE,EAAAA,EAAAA,KAAY,CAACp6C,EAAcgnH,KACpD,MAAMC,EAAYD,EAAoB/M,EA1bf,KA2bvB,GAAIj6G,GAAMoE,OAAS6iH,EAAW,CAC5B,MAAMC,EAAclnH,EAAKoE,OAAS6iH,EAYlC,OAXAniG,GAAW,CACT9U,KAAM,CACJrO,QAAS,4CACTwlH,WAAY,CACV,sBAAuBD,EAAY/iH,WACnC,aAAc+iH,EAAc,EAAI,IAAM,IAExCj3G,aAAa,MAIV,CACT,CACA,OAAO,CAAI,GACV,CAACgqG,EAAcn1F,KAEZsiG,IAAgBhtE,EAAAA,EAAAA,KAAY,KAChC,GAAIqlE,KAAap0E,GAAS,CACxB,MAAMi4E,EAAel3G,SAASwoC,cAA8BopB,EAAAA,KAEtDqpD,GAAah+G,EAAAA,EAAAA,MACbi+G,EAA0BpM,GAA2BvxF,SACtD/f,KAAKG,MAAMs9G,EAAanM,GAA2BvxF,SAClD49F,EAAyB9H,GAAS+H,cAAgB/H,GAAS+H,aAAeH,EAEhF,GACGC,GAA2BA,EAA0B7H,GAASgI,SAC5DF,EACH,CACA,MAAMG,EAAmBH,EACrB9H,GAAS+H,aAAgBH,EACzB5H,GAASgI,QAAUH,EAWvB,OAVAxiG,GAAW,CACT9U,KAAM,CACJrO,QAASR,GAAK,gBAAgBs6E,EAAAA,GAAAA,IAAoBisC,IAClDC,YAAY,EACZ13G,aAAa,KAIjBqzG,GAAc5rF,QAEP,CACT,CACF,CACA,OAAO,CAAI,GACV,CAAC2T,GAASlqC,GAAM2jB,GAAY26F,KAEzBmI,IAAkBxtE,EAAAA,EAAAA,KAAY,IAY9B,IAXJ/8B,YAAawqG,EAAiB,eAC9BC,EAAiB/1G,GAAmBF,eAAc,YAClDk2G,EAAch2G,GAAmBD,kBAAiB,SAClD2N,EAAQ,YACR7C,GAOD,EACC,GAAwB,yBAApBgW,EACF,OAGF,MAAM,KAAE5yB,EAAI,SAAEyd,IAAalU,EAAAA,EAAAA,IAAkB2sG,OACxCl2G,GAAS6nH,EAAkBzjH,SAG3B2iH,GAAmB/mH,GAAM,IACzBonH,OAEL9sG,GAAY,CACVta,OACAyd,WACAb,cACA6C,WACAuoG,8BAA8B,EAC9B3qG,YAAagqF,GAAyBwgB,EAAmBC,GACzDvqG,oBAAqBwqG,IAGvB7M,GAA2BvxF,SAAUtgB,EAAAA,EAAAA,MAErC+wG,GAAW,CAAEv9G,SAAQuiB,WAAW,IAGhC2rF,uBAAsB,KACpBqa,IAAe,IACf,GACD,CACDrzG,GAAmBF,eAAgBE,GAAmBD,kBAAmB8gB,EAAiBsjF,GAC1F6Q,GAAoBK,GAAe9sG,GAAa8/F,GAAYv9G,EAAQuoH,KAGhE6C,IAAwB7tE,EAAAA,EAAAA,KAAY,CACxC0tE,EACAC,EACAtoG,EACA7C,KAEAgrG,GAAgB,CACdvqG,eACAyqG,iBACAC,cACAtoG,WACA7C,eACA,GACD,CAACS,GAAauqG,KAEXM,IAAa9tE,EAAAA,EAAAA,KAAYzkC,iBAAkD,IAA3C8J,EAAW,UAAH,8CAAU7C,EAAoB,uCAC1E,GAAwB,yBAApBgW,EACF,OAGF,IAAIu1F,EAAqB9qG,GAEzB,GAAImhG,GAAsB,CACxB,MAAM4J,QAAe9J,KACrB,GAAI8J,EAAQ,CACV,MAAM,KAAE72D,EAAI,SAAEyC,EAAQ,SAAE41C,GAAawe,EACrCD,EAAqB,OAAOriB,GAC1ByR,GACAhmD,EACA,CAAE31C,MAAO,CAAEo4C,WAAU41C,cAEzB,CACF,CAEA,MAAM,KAAE5pG,EAAI,SAAEyd,IAAalU,EAAAA,EAAAA,IAAkB2sG,MAE7C,GAAIiS,EAAmB/jH,OAIrB,YAHAwjH,GAAgB,CACdvqG,YAAa8qG,IAKjB,IAAKnoH,IAAS8sF,EACZ,OAGF,IAAKi6B,GAAmB/mH,GAAO,OAE/B,MAAMsjH,EAAel3G,SAASwoC,cAA8BopB,EAAAA,KAE5D,GAAIh+D,EAAM,CACR,IAAKonH,KAAiB,OAEtB9sG,GAAY,CACVta,OACAyd,WACAb,cACA6C,WACAuoG,8BAA8B,GAElC,CAEIl7B,GACF9tF,GAAgB,CACd4d,cACA6C,aAIJy7F,GAA2BvxF,SAAUtgB,EAAAA,EAAAA,MAErC+wG,GAAW,CAAEv9G,SAAQuiB,WAAW,IAE5BnE,EAAAA,IAAUqoG,GAAgBA,IAAiBl3G,SAASshG,eACtDhF,GAA8B4a,GAIhCvY,uBAAsB,KACpBqa,IAAe,GAEnB,GAAG,CACDxyF,EAAiBvV,GAAamhG,GAAsBtI,GAASppB,EAAci6B,GAAoB3M,GAC/Fv9G,EAAQyhH,GAAoBsJ,GAAiBR,GAAe9sG,GAAatb,GAAiBomH,KAGtFiD,IAAqBjuE,EAAAA,EAAAA,KAAY,KACT,WAAxBw/D,IAAe17G,MAInBigC,GAAc,CACZthC,SAAQ0T,IAAKqpG,GAAcrpG,IAAKzT,YAChC,GACD,CAAC88G,GAAez7E,GAAethC,EAAQC,IAEpCwrH,IAA+BluE,EAAAA,EAAAA,KAAY,KAC/CujE,KACAJ,IAAoB,GACnB,CAACI,GAAiBJ,KAEfgL,IAAwBnuE,EAAAA,EAAAA,KAAY,CACxCu5C,EAA4B/2E,KAE5B,GAAI+2E,GAAQ,YAAaA,EAAM,CAC7B,MAAM,GAAE31F,EAAE,QAAE2+B,EAAO,SAAEld,GAAak0E,EAOlC,YANA6mB,GAAoB,CAClBx8G,KACA2+B,UACA/f,cACA6C,YAGJ,CAEA,MAAM,SAAEA,KAAa+oG,GAAa70B,GAAQ,CAAC,EAE3C,GAAKA,GAAyC,IAAjC3vF,OAAOC,KAAKukH,GAAUpkH,OAE5B,QAA4BnH,IAAxB02F,EAAKm0B,qBAAqD7qH,IAArB02F,EAAKo0B,YAA2B,CAC9E,MAAM,eAAED,GAAiB,EAAK,YAAEC,GAAc,GAAUp0B,EACnDs0B,GAAsBH,EAAgBC,EAAatoG,EAAU7C,EACpE,MACEtC,GAAY,IACPq5E,EACH/2E,qBAPGsrG,GAAWxkH,QAAQ+b,GAAW7C,EASrC,GACC,CAACqrG,GAAuBC,GAAY1N,GAAqBlgG,MAE5Do6B,EAAAA,EAAAA,KAAU,KACJ31C,GACF88G,IAAiBj/F,IACf2rG,GAAsBxpH,EAAsB6d,EAAY,GAE5D,GACC,CAAC7d,EAAsBwpH,GAAuB1M,MAEjDnnE,EAAAA,EAAAA,KAAU,KACJ4jE,KACFwC,GAAQxC,IACRoC,KACA3P,uBAAsB,KACpB,MAAMuY,EAAel3G,SAAS89C,eAAeyjD,EAAAA,MAC7CoW,EAAAA,GAAAA,GAAqBT,GAAc,EAAK,IAE5C,GACC,CAAChL,GAAoBoC,GAAwBI,MAEhDpmE,EAAAA,EAAAA,KAAU,KACJ8jE,IAAqBp0G,SACvBsuG,GAAiB8F,IACjBkC,KACF,GACC,CAAChI,GAAkB8F,GAAqBkC,KAE3C,MAAM+N,IAA0BruE,EAAAA,EAAAA,KAAY,CAAC53C,EAAmBg+C,KACzDh+C,EAAMkmH,QAAWlnG,GAAyB65C,EAK/C6oD,GAAiC1hH,EAAOg+C,GAJtC4lE,IAI8C,GAC/C,CAAClC,GAAkC7oD,EAAgB75C,EAAsB4kG,KAEtEuC,IAAyCvuE,EAAAA,EAAAA,KAAa53C,IAC1DimH,GAAwBjmH,EAAOorG,EAAAA,IAAwB,GACtD,CAAC6a,KAEEG,IAAkBxuE,EAAAA,EAAAA,KAAY,CAACjxB,EAAe1J,EAAoBopG,KAClE5P,GAAkB4P,GACpBvN,KACAO,IAAiBj/F,IACf2+F,KACAgN,GAAsB,CAAEp/F,MAAK1J,YAAY7C,GACzCmuF,uBAAsB,KACpBqa,IAAc,EAAK,GACnB,MAGJ9qG,GAAY,CAAE6O,MAAK1J,aACnBsrF,uBAAsB,KACpBqa,IAAc,EAAK,IAEvB,GACC,CACDnM,EAAgBqC,GAAqBO,GAAiBN,GAA2BgN,GACjFnD,GAAe9qG,KAGXwkF,IAAsB1kD,EAAAA,EAAAA,KAAY,SACtCvsC,EACA4R,EACAopG,GAGG,IAFHxD,EAAsB,UAAH,8CACnB2C,EAAsC,uCAEtCn6G,EAAU,IACLA,EACH4+B,qBAAqB,GAGnBwsE,GAAkB4P,GACpBvN,KACAO,IAAiBj/F,IACf2+F,KACAgN,GAAsB,CAAE16G,UAAS4R,YAAY7C,GAC7CmuF,uBAAsB,KACpBqa,GAAcC,EAAoB,GAClC,MAGJ/qG,GAAY,CAAEzM,UAAS4R,WAAUuoG,iCACjCjd,uBAAsB,KACpBqa,GAAcC,EAAoB,IAGxC,GAAG,CACDpM,EAAgBqC,GAAqBO,GAAiBN,GAA2BgN,GACjFnD,GAAe9qG,KAGXwuG,IAAwB1uE,EAAAA,EAAAA,KAAY,CACxC2uE,EAA4DtpG,EAAoBopG,KAEhF,GAAwB,yBAApBj2F,EACF,OAGEqmF,GAAkB4P,EACpBhN,IAAiBj/F,IACf2rG,GAAsB,CACpBvqH,GAAI+qH,EAAa/qH,GACjB2+B,QAASosF,EAAapsF,QACtBld,YACC7C,EAAY,IAGjB49F,GAAoB,CAClBx8G,GAAI+qH,EAAa/qH,GACjB2+B,QAASosF,EAAapsF,QACtBld,aAIJ,MAAM6jG,EAAel3G,SAASwoC,cAA8BopB,EAAAA,KACxD/iD,EAAAA,IAAUqoG,GAAgBA,IAAiBl3G,SAASshG,eACtDhF,GAA8B4a,GAGhClJ,GAAW,CAAEv9G,SAAQuiB,WAAW,IAChC2rF,uBAAsB,KACpBqa,IAAe,GACf,GACD,CACDvoH,EAAQu9G,GAAYxnF,EAAiB21F,GAAuB1M,GAAiBuJ,GAAe5K,GAC5FvB,IAGI+P,IAAyB5uE,EAAAA,EAAAA,KAAY,KACzCggE,GAAW,CAAEv9G,SAAQuiB,WAAW,IAChC2rF,uBAAsB,KACpBqa,IAAe,GACf,GACD,CAACvoH,EAAQu9G,GAAYgL,KAElB6D,IAAiB7uE,EAAAA,EAAAA,KAAal5B,IAC9B+3F,GACF4C,IAAiBj/F,IACf2rG,GAAsB,CAAErnG,QAAQtE,EAAY,IAE9Cy9F,OAEA//F,GAAY,CAAE4G,SACdm5F,KACF,GACC,CAACA,GAAgBkO,GAAuB1M,GAAiBvhG,GAAa2+F,IAEnEiQ,IAAa9uE,EAAAA,EAAAA,KAAa+uE,IAC9B,GAAIlQ,EACF4C,IAAiBj/F,IACf2rG,GAAsB,IAAKY,EAAgB1pG,UAAU,GAAQ7C,EAAY,SAEtE,GAAIusG,IAAmB,mBAAoBA,GAAkB,gBAAiBA,GAAiB,CACpG,MAAM,eAAErB,GAAiB,EAAK,YAAEC,GAAc,GAAUoB,EACnDlB,GAAsBH,EAAgBC,GAAa,EAC1D,MACOG,IAAW,EAClB,GACC,CAACK,GAAuBL,GAAYD,GAAuBpM,GAAiB5C,IAEzEmQ,IAAuBhvE,EAAAA,EAAAA,KAAY,KACvC,MAAMkpE,EAAel3G,SAASwoC,cAA8BopB,EAAAA,KAE5D,IAAKrkB,GAAY2pE,IAAiBl3G,SAASshG,cAIzC,OAHA8P,KACAG,UACAE,KAIFyF,GAAc5rF,OACdlyB,YAAW,KACTg4G,KACAG,KACAE,IAAgB,GAh1BgB,IAi1BD,GAChC,CAACL,GAAqBG,GAAiBE,GAAgBlkE,IAEpDuzD,IAA4B9yD,EAAAA,EAAAA,KAAY,SAACp6C,GAAsD,IAAxCwgD,EAAkB,UAAH,6CAAGmtD,EAAAA,IAC7E,MAAM0V,GAAU/yD,EAAAA,GAAAA,GAAWtwD,EAAM,CAAC,cAAe,aAAc,YAC5D4C,KAAK,IACL4J,QAAQ,WAAY,KACvB42G,GAA0BC,EAAS7iE,EACrC,GAAG,CAAC4iE,MAEJ1uE,EAAAA,EAAAA,KAAU,KACH4nE,IAELxB,GAAQ,GAAG,GACV,CAACwB,GAAmBxB,GAASz9F,KAEhC,MAAMgsG,IAA2CjvE,EAAAA,EAAAA,KAAap6C,IAC5DktG,GAA0BltG,EAAM4tG,EAAAA,IAAwB,GACvD,CAACV,KAEEoc,IAAelvE,EAAAA,EAAAA,KAAY,WAAiC,IAAhCoG,EAAU,UAAH,6CAAGmtD,EAAAA,IAC1C,MAAM1F,EAAYxoG,OAAOyoG,eAEzB,GAAID,EAAUsb,WAAY,CACxB,MAAMC,EAAiBvb,EAAUwb,WAAW,GAC5C,IAAIC,EAAAA,GAAAA,GAAuBF,EAAgBhjE,GAEzC,YADAp0C,SAASm8F,YAAY,UAAU,EAGnC,CAEAuS,GAAQrT,GAAoCyO,MAC9C,GAAG,CAACA,GAAS4E,KAEPyO,IAA8BnvE,EAAAA,EAAAA,KAAY,KAC9CkvE,GAAa1b,EAAAA,IAAwB,GACpC,CAAC0b,KAEEE,IAA0BpvE,EAAAA,EAAAA,KAAY,KAC1Cr6C,GAAS,CACP/B,GAAInB,EAAQC,WAAUoB,KAAM,YAAaE,mBAAmB,GAC5D,GACD,CAAC2B,GAAUlD,EAAQC,KAEtB43C,EAAAA,EAAAA,KAAU,KACJwmB,GAAsBvhB,GACxBgkE,IACF,GACC,CAACziD,EAAoByiD,GAAiBhkE,KAEzCjF,EAAAA,EAAAA,KAAU,KACHynB,IAEDhB,EACFgjD,KAEA34G,YAAW,KACT44G,IAAa,GAz4Ba,KA24B9B,GACC,CAACjjD,EAAoBijD,GAAaD,GAAchiD,IAEnD,MAAMstD,KAA6BnD,KAAoBhP,GAAgBoP,QAChEhV,IAAmBiH,GAA0BjpG,IAE9Cg6G,IAAoBtvE,EAAAA,EAAAA,KAAY,KACpC,OAAQksE,IACN,KAAKhP,GAAgBmP,KACnByB,KACA,MACF,KAAK5Q,GAAgBoP,OACf+C,GACG9Q,EAIOjpG,IACVwV,GAAoC,CAAEroB,WAJtC0L,GAAiB,CACf5G,QAASR,GAAK,mCAAoCsJ,GAAMkC,SAM5D0xG,KAEF,MAEF,KAAK/G,GAAgBiP,KACnBjB,KACA,MACF,KAAKhO,GAAgBkP,SACfhI,IACFD,KAEF1C,IAAiBj/F,IACf2rG,GAAsB,CAAC,EAAG3rG,EAAY,IAIlC,GAET,CACD0pG,GAAiB4B,GAAY5C,GAAoB9G,GAAsB3C,GAAiB4N,GACxF9Q,EAAuBpwG,GAAkBpH,GAAMsJ,GAAMkC,MAAO0xG,GAAqBE,GACjFgK,GAAuB1rH,EAAQqoB,GAAqCxV,KAGhEi2G,IAAoBtmD,EAAAA,GAAAA,GAAYw5C,GAAgB,GAChD8Q,GAAwB9Q,GAAkB8M,GAE1CiE,GAAuB,IAAIhhH,KACjCghH,GAAqBC,WAAW,GAChCD,GAAqBE,gBAAgB,GAErC,MAAMC,GAAmB,IAAInhH,KAC7BmhH,GAAiBC,YAAYD,GAAiBE,cAAgB,GAE9D,IAAIC,GAAsB,cAC1B,OAAQ5D,IACN,KAAKhP,GAAgBiP,KACnB2D,GAAsB,sBACtB,MACF,KAAK5S,GAAgBoP,OACnBwD,GAAuBxY,GAEnB,uBADA,sCAIR,MAAMjoF,IAAY0uB,EAAAA,GAAAA,GAChB,YACCgjB,GAAsB,QACvB+iD,IAAmB,kBAGfiM,IAAsB/vE,EAAAA,EAAAA,KAAY,KACtCyhE,IAAiBj/F,IACf2rG,GAAsB,CAAC,EAAG3rG,EAAY,GACtC,GACD,CAAC2rG,GAAuB1M,KAErBuO,IAAmBhwE,EAAAA,EAAAA,KAAY,KACnC8uE,IAAY,GACX,CAACA,KAEEmB,IAAiCjwE,EAAAA,EAAAA,KAAY,CAAC0tE,EAAyBC,KAC3ElM,IAAiBj/F,IACf2rG,GAAsB,CAAET,iBAAgBC,eAAenrG,EAAY,GACnE,GACD,CAAC2rG,GAAuB1M,KAErByO,IAA8BlwE,EAAAA,EAAAA,KAAY,CAAC0tE,EAAyBC,KACxEmB,GAAW,CAAEpB,iBAAgBC,eAAc,GAC1C,CAACmB,KAEEqB,GAASjE,KAAoBhP,GAAgBiP,KAC/CjB,GACAgB,KAAoBhP,GAAgBkP,SAAW2D,GAC7CjC,GAEAsC,GAAoBlwD,GAAyC,WAAxBs/C,IAAe17G,OAAsB26G,EAC1E4R,IAAsB9T,EAAAA,GAAAA,IAAgB,IACnC6T,KAAsBtU,OAAcsI,IAC1C,CAACgM,GAAmBtU,GAASsI,KAE1BkM,GAAkBpwD,GAAyC,aAAxBs/C,IAAe17G,OAAwB26G,IAC3D,IAAhBa,IAA0B8E,GAE/B,OACE,0BAAK/0F,UAAWA,IACbioF,IAAkBv1C,GACjB,mBAAC,GAAQ,CACP19D,OAAQy7G,IAAkByQ,GAAAA,EAAAA,KAC1BC,UAAW1Q,IAAkByQ,GAAAA,EAAAA,WAA2BxP,KAAsBwP,GAAAA,EAAAA,UAC9E5yD,OAAQoiD,EACRtI,aAAca,KAGlB,mBAAC,GAAe,CACd71G,OAAQA,EACRC,SAAUA,EACV6pH,sBAAuBA,GACvBtpG,YAAaA,GACb64F,QAASA,GACT/5C,QAASA,EACTw2C,yBAA0BA,GAC1B4J,uBAAwBA,GACxBC,kBAAmBA,GACnB9D,wBAAyBA,EACzBgE,gBAAiBA,GACjBmO,aAAcP,GACdC,OAAQtC,GACR6C,gBAAiBT,GACjBU,aAActO,GACdpI,QAASsI,GACTqO,oBAAqBpO,GACrBqO,oBAAqBtC,GACrBuC,eAAgB3B,GAChB4B,cAAe9B,KAEjB,mBAAC,GAAS,CACR5qH,OAAQiK,EAAUjK,OAClBgK,OAAQC,EAAUD,OAClB2iH,kBAAmB3+D,EACnB4nD,QAASgG,GACTkQ,OAAQtB,KAETU,IACC,mBAAC,GAAkB,CACjBlrH,OAAQs/G,GACRhjB,WAAgC,cAApB75F,EACZ25C,QAASojE,GACTt8G,QAASgoH,KAGb,mBAAC,GAAU,CACTlrH,OAAQm/G,GACR/iE,QAASijE,GACTjhH,OAAQA,EACRwuH,iBAAkBvoG,GAClBG,cAAeA,GACfzB,qBAAsBA,IAExB,mBAAC,GAAc,CACb/iB,OAAQ2iH,GACRkK,cAAe/J,GACfgK,iBAAkBjK,GAClBzmE,QAASwmE,KAEX,mBAAC,GAAiB,CAChB5iH,OAAQkkH,GACR6I,aAAc9nH,QAAQ+1G,IACtBC,YAAaoJ,GACb5M,QAASA,GACTl/D,QAASgyE,GACTnuE,QAAS+nE,KAEX,0BAAK5kH,GAAG,mBACN,0BAAKyrB,UAAU,eAAe6wB,IAAKsgE,KAEnC,mBAAC,GAAgB,CACfn8G,OAAQgjH,GACR7wG,MAAO8wG,GACPplF,UAAWqlF,GACXE,iBAAkBA,GAClBhmF,SAAU+lF,GACVK,SAAUC,GACVuJ,gBAAiBpwD,EACjB+gD,YAAaA,GACb56F,qBAAsBA,EACtBkqG,eAAgB5C,GAChBjuE,QAASknE,KAEX,mBAAC,GAAuB,CACtB1N,QAASyS,GACT/S,uBAAwBrwG,QAAQqwG,IAA0B8E,KAE5D,mBAAC,GAAc,CACbh8G,OAAQA,EACRC,SAAUA,EACVo5G,QAASA,GACTngE,YAAasmE,IAAuBF,KAEtC,0BAAK1yF,UAAU,yBACZ+gG,IACC,mBAAC,GAAa,CACZ/rH,OAAQgsH,GACRzqH,KAAM45G,GAAc55G,KACpB+1C,WAAYryC,QAAQ86G,IACpBxnE,QAASqxE,KAGZqC,IACC,mBAACxX,GAAA,EAAqB,CACpBzpF,WAAW0uB,EAAAA,GAAAA,GAAe,eAAgBmlE,IAAwB,aAClE/oG,OAAK,EACLojD,cAA0B16D,IAAhBy8G,EACVriE,MAAM,cACN87D,WAAYmV,GACZ7qE,UAAU,6BAEV,wBAAGh0B,UAAU,8BAGhB2xF,KAAkB/C,IAAct1F,KAC/B,mBAACy0B,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,cACNL,QAAS4mE,GAAmBE,GAAkBsL,GAC9C3rE,UAAWt8C,GAAK,sBAChBsoB,WAAW0uB,EAAAA,GAAAA,GAAe,iBAAkB6jE,GAA6BryF,SAAW,qBAEpF,mBAAC0kD,GAAA,EAAM,CACLxvD,KAAMw5F,GACN5tG,KAAMsY,GACN00B,KAAK,YAIR6kE,IAAqBF,IAAe5sG,KACrC,mBAACm8G,GAAA,EAAgB,CACf9uH,OAAQA,EACRC,SAAUA,EACV68C,SAAUA,EACVwiB,QAASA,EACTshD,iBAAkBA,GAClBC,eAAgBA,GAChBC,gBAAiBA,GACjBnuG,gBAAiBA,GACjB4sG,YAAaA,GACbwP,YAAahD,GACbiD,gBAAiB/sB,GACjBmsB,oBAAqBxC,GACrByC,eAAgB5B,GAChB6B,cAAeje,GACfsQ,oBAAqBA,GACrBM,gBAAiBA,GACjBzC,mBAAoBA,GACpBlsG,kBAAmBmtG,KAGvB,mBAACwP,GAAA,EAAY,CACXxxE,IAAKugE,GACL78G,GAAG,qBACH+tH,gBAAiBpe,EAAAA,IACjB9wG,OAAQA,EACRsS,kBAAmBmtG,GACnBx/G,SAAUA,EACVoQ,UAAWivG,GACXjG,QAASA,GACTr1D,YACE29D,IAAwB36E,IA1pCG,IA2pCvB,GACEy4E,GAEAn7G,GAAK,kCADJ+3G,GAA0B/3G,GAAK,WAGxC6qH,kBAAmBhK,GACnBiK,aAAc9vD,GAAWu8C,IAA4ByD,GACrD+P,oBAAqB/P,GACrBgQ,oBAAqBxyE,GAAY8jE,GACjC2O,4BAA6BzM,IAAsByB,IAAwBK,GAC3E4K,SAAUvR,GACVyP,OAAQA,GACR+B,kBAAmB3O,KAEpBnE,GAAsB91G,QAAQg+G,KAC7B,mBAACtqE,GAAA,EAAO,CAACC,MAAM,SAEhB2hE,GACC,mBAACxhE,GAAA,EAAM,CACLjjC,OAAK,EACLmhG,OAAK,EACLjsF,UAAU,mBACV4tB,MAAM,cACNL,QAASwyE,GACT/rE,UAAU,2BAEV,wBAAGh0B,UAAU,mBAGhB/lB,QAAQs0G,KAA0BwG,KAAyB3F,GAC1D,mBAAC3F,GAAA,EAAqB,CACpBzpF,UAAW0zF,GAAoB,YAAc,GAC7C5oG,OAAK,EACL8iC,MAAM,cACN87D,WAAYiK,GACZ3/D,UAAU,6BAEV,wBAAGh0B,UAAU,sBAGhB+0F,IAAwB96G,QAAQ+6G,KAC/B,2BAAMh1F,UAAU,oBACb8iG,EAAAA,GAAAA,IAA0B9N,GAAoBG,GAAmBj1F,UAGtE,mBAAC,GAAU,CACT9sB,OAAQA,EACRC,SAAUA,EACV20G,iBAAkB+M,KAAyB3F,EAC3CnH,eAAgBA,GAChBC,eAAgBA,GAChBviG,cAAeA,GACfC,cAAeA,GACfC,iBAAkBA,GAClBC,cAAeA,GACfsiG,aAAca,GACdZ,aAAcr3E,GACd0R,YAAa8sE,EACbrH,WAAYA,GACZv/D,SAAUwnE,GACV7+E,MAAOA,KAERt3B,QAAQs0G,IACP,mBAAC,GAAe,CACd50G,UAAW40G,EACXv5G,OAAQ0+G,GACRtiE,QAASwiE,KAGZ3D,GACC,mBAAC,GAAc,CACbj7G,OAAQ6+G,GACR5D,YAAaA,EACb7+D,QAAS2iE,KAGb,mBAAC,KAAkB,CACjB3gH,OAAQA,EACR4B,OAAQwhH,GACRgL,oBAAqB9K,GACrBxF,qBAAsBA,GACtB9/D,QAASqlE,KAEX,mBAAC,GAAc,CACbrjH,OAAQA,EACRC,SAAUA,EACV2B,OAAQ4hH,GACRwL,gBAAiB/sB,GACjBjkD,QAASylE,KAEX,mBAAC,KAAY,CACX7hH,OAAQkhH,GACR/2F,OAAQi3F,GACRpxG,aAAcqxG,GACdvF,eAAgBA,GAChBI,qBAAsBA,GACtBwQ,cAAepL,GACfkL,oBAAqBlL,GACrBllE,QAAS+kE,OAIdpB,IACC,mBAAChnE,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,SACN5tB,UAAU,SACVutB,QAASsnE,GACT7gE,UAAU,0BAEV,wBAAGh0B,UAAU,iBAGjB,mBAAC+tB,GAAA,EAAM,CACL8C,IAAKqkE,GACLpqG,OAAK,EACL8iC,MAAM,YACN5tB,WAAW0uB,EAAAA,GAAAA,GAAemuE,IAAkBnqD,GAAW,YAAaqiD,IAAwB,aAC5F7mD,SAAU8xD,GACV+C,oBAAkB,EAClB/uE,UAAWt8C,GAAK+oH,IAChBlzE,QAAS0yE,GACTpyD,cACEgvD,KAAoBhP,GAAgBmP,MAAQE,GAAwBtwD,QAAoBp5D,GAG1F,wBAAGwsB,UAAU,cACb,wBAAGA,UAAU,kBACb,wBAAGA,UAAU,wBACb,wBAAGA,UAAU,gBAEdk9F,IACC,mBAAC,KAAc,CACbloH,OAAQmoH,GACRiE,aAAexvD,OAAoCp+D,EAAnBmtH,GAChCqC,eAAiBxT,OAAuCh8G,EAAtBktH,GAClCtvE,QAASyb,GACTtO,oBAAqBuO,GACrBk1D,gBAAiBpwD,IAGpBygD,GACG,KG/+CV,IAAe5mE,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,SAAEjoC,GAAaioC,EACfu3E,GAAer3E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiBpoC,GAAU,GAG/E,OAAOw/G,EAAe,mBAACA,EAAiBv3E,QAAYl4C,CAAS,ICG/D,IAAei4C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,SAAEjoC,GAAaioC,EACfw3E,GAAuBt3E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBpoC,GAGrF,OAAOy/G,EAAuB,mBAACA,EAAyBx3E,QAAYl4C,CAAS,ICG/E,IAAei4C,EAAAA,EAAAA,KARmCC,IAChD,MAAM,OAAE12C,GAAW02C,EACby3E,GAAwBv3E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0B72C,GAGvF,OAAOmuH,EAAwB,mBAACA,EAA0Bz3E,QAAYl4C,CAAS,ICGjF,IAAei4C,EAAAA,EAAAA,KARyBC,IACtC,MAAM,OAAE12C,GAAW02C,EACb03E,GAAcx3E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgB72C,GAGnE,OAAOouH,EAAc,mBAACA,EAAgB13E,QAAYl4C,CAAS,ICK7D,IAAei4C,EAAAA,EAAAA,KAVuCC,IACpD,MAAM,uBAAEtQ,GAA2BsQ,EAC7B23E,GAA4Bz3E,EAAAA,GAAAA,GAChCC,GAAAA,GAAAA,MAAe,6BAA8BzQ,GAI/C,OAAOioF,EAA4B,mBAACA,EAA8B33E,QAAYl4C,CAAS,ICCzF,IAAei4C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE12C,GAAW02C,EACb43E,GAAmB13E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB72C,GAG7E,OAAOsuH,EAAmB,mBAACA,EAAqB53E,QAAYl4C,CAAS,ICIvE,IAAei4C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE12C,GAAW02C,EACb63E,GAAmB33E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB72C,GAG7E,OAAOuuH,EAAmB,mBAACA,EAAqB73E,QAAYl4C,CAAS,ICGvE,IAAei4C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,OAAE12C,GAAW02C,EACb83E,GAAuB53E,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB72C,GAGrF,OAAOwuH,EAAuB,mBAACA,EAAyB93E,QAAYl4C,CAAS,ICyH/E,SAASiwH,GAAQrpD,GACf,MAAqB,SAAdA,EAAKspD,MAAmBtpD,EAAK3lE,MAAQud,EAAAA,IAAAA,IAAkCooD,EAAK3lE,KACrF,CAEA,MA4cA,IAAeg3C,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA6B,IAA7B,SAAEi9C,GAAU,EACnB,MAAM3e,GAAQogB,EAAAA,EAAAA,IAAY1+C,IAExBgX,UAAW05G,EAAqBC,WAAYC,EAAgB,gBAAE1oB,EAAe,aAAE2oB,GAC7E7wH,EAAO+U,SAAS+7G,OAAOxyF,IAAU,CAAC,GAEhC,aACJztB,EAAY,kBAAED,EAAiB,wBAAE03B,EAAuB,YACxD36B,EAAW,iBAAE04B,EAAgB,aAAE34B,EAAY,YAAErF,EAAW,4BAAE28C,EAA2B,qBACrFl3C,IACE9M,EAAAA,EAAAA,IAAehB,GACb2B,GAAqBtB,EAAAA,EAAAA,IAAyBL,IAC5CsO,OAAO,QAAEi/B,GAAS,aAAExX,GAAiB/1B,EAEvCg3C,EAAoB,CACxB1Y,QACAsyF,mBACA1oB,kBACA2oB,eACAjgH,oBACA4tD,oBAAoB91D,EAAAA,EAAAA,IAAyB1I,EAAQi9C,GACrDyzE,sBACAK,qBAAsB/pH,SAAQ2pB,EAAAA,EAAAA,IAAwB3wB,IACtDy+D,oBAAoBC,EAAAA,EAAAA,IAAqB1+D,GACzCgxH,kBAAmBhqH,QAAQ2G,GAC3BsjH,uBAAwBjqH,QAAQ0G,GAChCwjH,uBAAwB7qF,GAAkBtkC,OAC1CovH,2BAA4BnqH,QAAQ8G,GACpCgH,eAAgB9U,EAAO+U,SAASC,MAAMF,eACtC+pD,qBAAsB3xD,KAAKC,IAAI,EAAG0D,EAAanJ,OAAS,GACxD4gC,0BACAvS,gBAGF,IAAKp0B,IAAuB4rC,EAAQpD,OAClC,OAAO6M,EAGT,MAAM,OAAE72C,EAAM,SAAEC,EAAUoB,KAAMgD,GAAoB7C,EAC9Cq4B,GAAYC,EAAAA,EAAAA,IAAS95B,GACrB4N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1Bs7B,GAAMqD,EAAAA,EAAAA,IAAc9+B,EAAQG,GAC5BiyC,GAAYC,EAAAA,EAAAA,IAAgBryC,EAAQG,EAAQC,IAC1CD,OAAQw1B,EAAajvB,UAAWkvB,GAAmBvtB,EAErDosB,GAAa5sB,EAAAA,EAAAA,IAAiB7H,EAAQG,EAAQC,GAC9Cm/D,EAAav4D,QAAQytB,GAAYQ,iBACjC2uE,EAAU71F,IAAQqjH,EAAAA,EAAAA,IAAiBrjH,EAAM3N,EAAUm/D,GACnD8xD,GAAkBpzD,EAAAA,EAAAA,IAA0Bj+D,EAAQG,GACpDmxH,EAA0C,WAApB9sH,EACtB+sH,EAA6C,cAApB/sH,EACzBm5D,EAAmC,WAApBn5D,GAAgCpE,IAAamB,EAAAA,GAC5DwuD,EAAY/oD,QAAQ+G,IAAQowD,EAAAA,EAAAA,IAAcpwD,IAC1CmwD,EAAel3D,QACnB+G,GAAQ4vD,IAAiB5N,IAAaqO,EAAAA,EAAAA,IAAiBrwD,KAAUA,EAAKs+B,cAAgBt+B,EAAK6kB,cAEvF4+F,EAAmBxqH,QAAQ+G,GAAMs+B,aAAet+B,EAAK0jH,cACrDpzD,EAAwBr3D,QAAQ+G,GAAMs+B,aAAet+B,EAAKuwD,eAC1DR,EAAgB92D,QAAQy0B,IAAOsiC,EAAAA,EAAAA,IAAoB/9D,EAAQy7B,EAAIn6B,KAC/D08D,GAAeF,GAAiBuzD,EAChCK,EAAqB1qH,QAAQ+G,IAAQmiF,EAAAA,EAAAA,IAAYniF,KAAUA,EAAKuY,UAAYyP,GAC5E7uB,GAAeC,EAAAA,EAAAA,IAAmBnH,EAAQG,EAAQC,GAClDuxH,IAAyB5jH,GAAMtL,SACjCrC,IAAamB,EAAAA,KAAmB2F,GAAiB6G,EAAKmK,SAAS45E,EAAAA,MAAmBnsD,SAEhF+3B,EAAe/nC,GAAeC,GAChC3hB,EAAAA,EAAAA,IAAkBjU,EAAQ21B,EAAaC,QACvCr1B,EAEJ,MAAO,IACFy2C,EACH72C,SACAC,WACAoE,kBACAuJ,OACA7G,eACA8yB,YACA43F,sBAAuB5qH,QAAQ+G,GAAMgH,UACrC6uF,SAAU0tB,KACHvjH,GAAQ61F,KACTytB,KACCG,GAAoBzjH,GAAMs+B,eAC3BslF,EACNL,sBACAC,yBACAM,wBAAyB9jH,GAAM8jH,wBAC/BC,oBAAqB/jH,GAAM+jH,oBAC3BC,UACG3xH,IAAamB,EAAAA,KAAmBwM,GAAMtL,SACpCuE,SAASsqH,GAAuBl/E,GAAW1qC,QAEhDsqH,eAAgBhrH,QAAQ02D,GACxB6C,oBAAqBnuB,EAAYA,EAAU1qC,OAAS,EACpDs9C,8BACA+K,YACAmO,eACAF,cACAF,gBACA0zD,mBACAnzD,wBACAqzD,qBACD,GAtGex1E,EA5c4B,IAyC1C,IAzC2C,OAC/C/7C,EAAM,SACNC,EAAQ,gBACRoE,EAAe,SACfy4C,EAAQ,KACRlvC,EAAI,aACJ7G,EAAY,UACZ8yB,EAAS,oBACTs3F,EAAmB,QACnB1tB,EAAO,wBACPiuB,EAAuB,oBACvBC,EAAmB,UACnBC,EAAS,eACTC,EAAc,oBACdzxD,EAAmB,iBACnBqwD,EAAgB,MAChBtyF,EAAK,gBACL4pE,EAAe,aACf2oB,EAAY,kBACZjgH,EAAiB,mBACjB4tD,EAAkB,oBAClBkyD,EAAmB,qBACnBK,EAAoB,mBACpBtyD,EAAkB,kBAClBuyD,EAAiB,uBACjBC,EAAsB,uBACtBC,EAAsB,2BACtBC,EAA0B,eAC1Br8G,EAAc,4BACdkwC,EAA2B,qBAC3B6Z,EAAoB,UACpB9O,EAAS,sBACT6hE,EAAqB,aACrB1zD,EAAY,YACZF,EAAW,cACXF,EAAa,wBACbx1B,EAAuB,iBACvBkpF,EAAgB,sBAChBnzD,EAAqB,mBACrBqzD,EAAkB,aAClB37F,GACD,EACC,MAAM,SACJ1yB,EAAQ,iBACRs8D,EAAgB,iBAChBsyD,EAAgB,SAChBC,EAAQ,iBACRn4F,EAAgB,qBAChBh6B,EAAoB,sBACpBoC,EAAqB,YACrBgwH,GAAW,eACX71F,GAAc,WACd81F,GAAU,iBACVvmH,GAAgB,aAChB8mC,KACEvc,EAAAA,EAAAA,OAEIxhB,MAAOuyB,KAAgBy5B,EAAAA,GAAAA,MACzB,SAAEV,KAAahjB,EAAAA,EAAAA,MAEfz4C,IAAO81C,EAAAA,GAAAA,MACNijE,GAAe6U,KAAoB74E,EAAAA,EAAAA,IAASy0E,GAAAA,EAAAA,OAC5CqE,GAAYC,KAAiB/4E,EAAAA,EAAAA,OAC7Bg5E,GAAcC,KAAmBj5E,EAAAA,EAAAA,OACjCk5E,GAAkBC,KAAuBn5E,EAAAA,EAAAA,KAAS,GAEnDo5E,GAAuB31E,GAAY8zE,EACnC8B,GAAyB51E,EAAW,IAAM74C,EAAAA,SAAsB7D,EAChEojG,GAAWouB,IACf5qF,GAAcs6B,EAAAA,KAEZjD,GAAsBr3B,GAAcE,EAAAA,KACjCF,GAAcw6B,EAAAA,KAEjBx6B,IAAeI,EAAAA,KACZJ,GAAcq6B,EAAAA,KACdwwD,GAIDc,IAAkBC,EAAAA,GAAAA,GAAuB5yH,EAAQ0yH,IACjDG,IAAoBD,EAAAA,GAAAA,GAAuB3yH,EAAUyyH,IACrDI,IAA2BF,EAAAA,GAAAA,GAAuBvuH,EAAiBquH,IACnEK,IAAwBH,EAAAA,GAAAA,GAAuB70D,EAAc20D,IAC7DM,IAAuBJ,EAAAA,GAAAA,GAAuB/0D,EAAa60D,IAC3DO,IAAyBL,EAAAA,GAAAA,GAAuBj1D,EAAe+0D,IAC/DQ,IAAmBN,EAAAA,GAAAA,GAAuBnvB,EAASivB,MACnDO,KAA2BD,KAAyBD,IAAyB/yH,IAAWmzH,EAAAA,IACxFC,IAAoBR,EAAAA,GAAAA,GAAuBpvB,GAAUkvB,IACrDW,IAAsBT,EAAAA,GAAAA,GAAuBT,GAAYO,KAA2B1yH,IAAWmzH,EAAAA,IAC/FG,IAAqBV,EAAAA,GAAAA,GAAuBhjE,EAAW8iE,IACvDa,IAA4BX,EAAAA,GAAAA,GAAuBvB,EAAkBqB,IACrEc,IAAiCZ,EAAAA,GAAAA,GAAuB10D,EAAuBw0D,IAE/EnwD,IAAoBC,EAAAA,GAAAA,GAAY9D,GAEhC3T,QACkB3qD,IAAtBmiE,IAAmCA,GAAoB7D,EAAuB6D,QAAoBniE,GAG9F,QAAEk/D,GAAO,cAAEm0D,GAAa,gBAAEC,IAkdlC,SACEC,EACAj1D,EACA6D,EACAviE,EACA88C,GAEA,MAAOwiB,EAASs0D,IAAcv6E,EAAAA,EAAAA,KAAUyD,GAClCupC,GAAcC,EAAAA,GAAAA,KAEdutC,OAA8CzzH,IAAtBmiE,GAAmCA,IAAsB7D,EAyBvF,OAxBIm1D,IACEF,EACFC,GAAW,GAEXvtC,MAIJx4B,EAAAA,GAAAA,IAAc,KACP8lE,GACHC,GAAW,EACb,GACC,CAACD,IAYG,CACLr0D,QAASA,IAAYu0D,EACrBJ,cAAeE,EAZjB,SAAuB5iH,GACE,cAAnBA,EAAE+iH,cAAgC/iH,EAAE09D,SAAW19D,EAAEy+D,eACnDokD,EAAW/sH,QAAQ7G,GAEvB,OAQkDI,EAChDszH,gBAAiBC,EAPnB,WACEC,GAAW,EACb,OAKsDxzH,EAExD,CA1fsD2zH,EACjDlvE,GAA+BlwC,IAAmBq/G,EAAAA,IACnDt1D,EACA6D,GACAviE,EACA88C,IAGFjF,EAAAA,EAAAA,KAAU,IACD73C,GACHoiD,EAAAA,GAAAA,IAAsB,KACtBl/C,EAAS,CAAE/B,QAAIf,GAAY,SAE3BA,GACH,CAACJ,EAAQkD,KAEZ2qD,EAAAA,GAAAA,IAAc,KACZqkE,GAAiBpE,GAAAA,EAAAA,MACjBwE,QAAgBlyH,EAAU,GACzB,CAACJ,KAGJ63C,EAAAA,EAAAA,KAAU,KACR,MAAM,eAAEo8E,GAAmBrxH,OAC3B,IAAKqxH,EACH,OAGF,MAAMj7B,EAAe,KACfi7B,EAAev/G,SAAWnF,SAAS48D,gBAAgBitB,aACrD7pF,SAAS40B,KAAKod,UAAU1gB,IAAI,oBAE5BtxB,SAAS40B,KAAKod,UAAUuN,OAAO,mBACjC,EAKF,OAFAmlE,EAAex6E,iBAAiB,SAAUu/C,GAEnC,KACLi7B,EAAev6E,oBAAoB,SAAUs/C,EAAa,CAC3D,GACA,KAEHnhD,EAAAA,EAAAA,KAAU,KACJhe,GACFk4F,EAAS,CAAE9iH,OAAQjP,GACrB,GACC,CAACA,EAAQ65B,EAAWk4F,KAEvBl6E,EAAAA,EAAAA,KAAU,MACH45E,GAAyB77F,GAC5BgE,EAAiB,CAAE55B,OAAQA,GAC7B,GACC,CAACA,EAAQ65B,EAAW43F,EAAuB77F,EAAcgE,KAE5Die,EAAAA,EAAAA,KAAU,KACJ73C,GAAUuxH,GAAsBjyD,IAClC9sB,GAAa,CAAExyC,UACjB,GACC,CAACuxH,EAAoBvxH,EAAQs/D,GAAS9sB,KAEzC,MAAM0hF,IAAkB32E,EAAAA,EAAAA,KAAaxsC,IACnC,MAAM,MAAEg/F,GAAUh/F,EAAEojH,cAAgB,CAAC,EAC/BC,EAAkBrkB,GAASA,EAAMxoG,OAAS,GAAKu5B,MAAMzjB,KAAK0yF,GAG7DlrG,QAAQmiE,GAAuB,kBAAdA,EAAK3lE,OAEtB+vF,MAAMi/B,IAET6B,GAAiBkC,EAAkBtG,GAAAA,EAAAA,UAA0BA,GAAAA,EAAAA,SAAuB,GACnF,IAEGuG,IAAqB92E,EAAAA,EAAAA,KAAY,KACrC20E,GAAiBpE,GAAAA,EAAAA,KAAmB,GACnC,IAEGwG,IAAuB/2E,EAAAA,EAAAA,KAAY,KACvCi1E,IAAoB,EAAK,GACxB,IAEG+B,IAAkBh3E,EAAAA,EAAAA,KAAY,KAClCi1E,IAAoB,EAAM,GACzB,IAEGgC,IAAyBj3E,EAAAA,EAAAA,KAAY,KACzCu0E,EAAiB,CAAE9xH,OAAQA,EAASC,SAAUA,IAC9Cs0H,KACA/0D,GAAkB,GACjB,CAACsyD,EAAkB9xH,EAAQC,EAAUs0H,GAAiB/0D,IAEnDi1D,IAAoBl3E,EAAAA,EAAAA,KAAY,KACpCr6C,EAAS,CAAE/B,GAAInB,GAAS,GACvB,CAACkD,EAAUlD,IAER00H,IAAuBn3E,EAAAA,EAAAA,KAAY,KACvCy0E,GAAY,CAAEhyH,OAAQA,IAClBwzH,IACF9nH,GAAiB,CACf5G,QAAqBR,GAAZsrD,EAAiB,sCAA8C,sCAE5E,GACC,CAACoiE,GAAahyH,EAAQwzH,GAAgC9nH,GAAkBkkD,EAAWtrD,KAEhFqwH,IAAiBp3E,EAAAA,EAAAA,KAAY,KACjCphB,GAAe,CAAEC,QAAS,UAAW,GACpC,CAACD,KAEEy4F,IAAmBr3E,EAAAA,EAAAA,KAAY,KACnC00E,GAAW,CAAEjyH,OAAQA,GAAU,GAC9B,CAACA,EAAQiyH,KAEN4C,GCtVoB,EAAC12F,EAAiB22F,KAC5C,MAAOxvF,EAAOyvF,IAAY17E,EAAAA,EAAAA,IAASy7E,GAqBnC,OAnBAj9E,EAAAA,EAAAA,KAAU,KACHi9E,IAIDA,EAAa5tE,WAAW,KAC1B6tE,EAASD,GAETE,GAAS/+G,MAAMg/G,EAAAA,IAAsB92F,EAAO62F,GAASE,KAAK/gE,MACvDj+C,MAAMw+C,IACL,MAAMhhD,EAAM2T,IAAI+sC,gBAAgBM,IAChC00C,EAAAA,GAAAA,IAAa11F,GACVwC,MAAK,KACJ6+G,EAAU,OAAMrhH,KAAO,GACvB,IAEV,GACC,CAACohH,EAAc32F,IAEX22F,EAAexvF,OAAQllC,CAAS,EDgUT+0H,CAAoBh3F,EAAOsyF,GAEnD7jG,IAAY0uB,EAAAA,GAAAA,GAChB83E,IAAqB,mBACrBgC,EAAAA,GAAsB,sBAAwB,sBAG1CC,IAAc/5E,EAAAA,GAAAA,GEpWO,uBAAsH,uBFuW/Im1E,GEvWgE,uBFwWhE1oB,GExWuG,uBFyWvG0oB,GAAoBF,GEzW4J,uBF0WhLlyD,GE1WyN,wBF6WrNi3D,IAA6Bh6E,EAAAA,GAAAA,GACjC,sBACCgjB,GAAsB,SAGnBi3D,IAAkCC,EAAAA,EAAAA,IACtClxH,GAAMotH,EAAyBC,GAE3B8D,IAA2BC,EAAAA,EAAAA,IAA4BpxH,GAAMsJ,EAAM3N,EAAU4G,QAAQE,IAErF4uH,GAA6BJ,IAAmCE,IAGhE,oBACJG,GAAmB,mBAAEC,GAAkB,mBACvCC,GAAkB,kBAAEC,GAAiB,iBACrCC,GAAgB,2BAAEC,KAChB96E,EAAAA,EAAAA,KACF,IrJnXW,SAAyCnU,EAAqBy8D,GAC3E,MAAMyyB,EAAclvF,GAAes6B,EAAAA,IAC/B76B,GAAAA,GACA,EAAIA,GAAAA,GACF0vF,EAmCR,SAA6BnvF,GAC3B,GAAIA,EAAcE,EAAAA,IAA0C,CAC1D,MAAM/2B,EAAkBpD,KAAKo6B,IAC3Bp6B,KAAKC,IAAkB,IAAdg6B,EAAoBJ,IAC7BD,IAGIyvF,EAAmBrpH,KAAKo6B,IACd,IAAdH,EACAL,IAGF,OAAO55B,KAAKo6B,IACVH,EAAc72B,EAAkBimH,EAChC1vF,GAEJ,CAEA,GAAIM,EAAcI,EAAAA,IAAyC,CACzD,MAAMj3B,EAAkBpD,KAAKo6B,IAC3Bp6B,KAAKC,IAAkB,GAAdg6B,EAAmBJ,IAC5BD,IAGF,OAAO55B,KAAKo6B,IACVH,EAAc72B,EACdu2B,GAEJ,CAEA,OAAIM,EAAcN,GACTA,GAGFM,CACT,CAtE2BqvF,CAAoBrvF,GACvCsvF,EAAkBtvF,GAAes6B,EAAAA,IACnC,MAAQ76B,GAAAA,GACR,EAAIA,GAAAA,GAEF8vF,EAAgB9yB,EAClB0yB,EAAmBD,EAAcI,EACjCH,EAAmBD,EACjBM,EAAexvF,EAAcs6B,EAAAA,IAC/Bv0D,KAAKo6B,IAAIgvF,EAAmBD,EAAa1vF,IACzC2vF,EAAmBD,EAEjBN,EAAsBY,EAAeD,EACrCV,EAAqBU,EAAgBC,EAY3C,MAAO,CACLZ,sBACAC,qBACAC,mBAXyBryB,EACtB6yB,EAAkB,EAAKT,EACxB,EAUFE,kBARwBtyB,EACrB6yB,EAAkB,GAAM,EAAIV,EAC7B,EAOFI,iBAhBuBQ,EAAe3vF,GAiBtCovF,2BAhBiCpvF,GAAqB2vF,EAkB1D,CqJ8UUC,CAAgCzvF,GAAaksF,KACnD,CAACA,GAAkBlsF,KAGf0vF,IAAkBp7E,EAAAA,GAAAA,GACtB,wBACC43E,IAAoB,cACrBA,IAAoBb,KAAiB/zD,GAAsB,eAG7DzX,EAAAA,GAAAA,GAAe,CACbx2C,SAAUiuD,EACVxX,OAAQ9kD,KAGV6kD,EAAAA,GAAAA,GAAe,CACbx2C,SAAUoiH,GACV3rE,OAAQlnD,IAGV,MAAM+2H,GAAsB9vH,SACzBsqH,IAAwB+B,KAAqBD,KAA2BD,KACrED,IAAyB4C,IAEzBiB,GAA6B/vH,QACjCosH,IAA0BF,IAAyBS,IAAkCR,IAClF7B,GAEC9oB,GAAiBxhG,QAAQ8vH,IAAuBr4D,GAAsB6yD,GAE5E,OACE,0BACEhwH,GAAG,eACHyrB,UAAWA,GACX62B,gBAAiBgwE,GACjBj4E,MAAQ,sCACqBo6E,wCACDC,sCACFG,8CACQC,wCACNH,yCACDC,mCACNrF,oDAEf3oB,IAA8B,SAAV5pE,EAAmB04F,EAAAA,IAAsBC,EAAAA,gBAEnE38E,QAAU4lB,IAAYtvD,EAAqBgkH,QAAoBr0H,GAE/D,0BACEwsB,UAAWyoG,GACX75E,MAAOq5E,GAAyB,wBAAuBA,UAA0Bz0H,IAEnF,0BAAKe,GAAG,0BACPwxH,IAAmBE,IAClB,sCACE,0BAAKjmG,UAAU,kBAAkBmqG,YAAa7D,GAAmBgB,QAAkB9zH,GACjF,mBAAC,GAAY,CACXJ,OAAQ2yH,GACR1yH,SAAU4yH,GACVxuH,gBAAiByuH,GACjBxzD,QAASA,GACTxiB,SAAUA,IAEZ,mBAACrC,GAAA,EAAU,CACTpP,KAAMwZ,EAA8B,OAASlwC,IAAmB40B,EAAAA,IAAsB,QAAU,OAChGmR,UAAWgkB,EACX5T,eAAa,EACbC,oBAAqBA,GACrBisE,OAAQtD,IAER,mBAAC,GAAW,CACVt+E,IAAM,GAAEu9E,MAAmBE,MAAqBC,KAChD9yH,OAAQ2yH,GACR1yH,SAAU4yH,GACVxxH,KAAMyxH,GACNrvB,QAASyvB,GACT1vB,SAAU4vB,GACVj1B,YAAai0B,GACbh0B,cAAek0B,GACfhzD,QAASA,GACTokC,gBAAiBkzB,GACjBjzB,cAAe98F,SAAS4pH,IAAqB1oB,KAE/C,0BAAKn7E,UAAW8pG,IACbxD,IACC,mBAAC,GAAQ,CACPlzH,OAAQ2yH,GACR1yH,SAAU4yH,GACVxuH,gBAAiByuH,GACjBzV,cAAeA,GACfC,WAAY+W,GACZ/0D,QAASA,GACTxiB,SAAUA,IAGbq0E,GACC,0BAAKvkG,UAAU,wCAAwCytB,IAAK/1C,GAAKg2C,MAAQ,WAAQl6C,GAC/E,mBAACu6C,GAAA,EAAM,CACLC,KAAK,OACLoQ,OAAK,EACLxQ,MAAM,YACN5tB,UAAU,mBACVutB,QAASm6E,IAET,wBAAG1nG,UAAU,eACb,+BAAOtoB,GAAK,uBAAwB87D,EAAqB,QAI9Du2D,IACC,0BAAK/pG,UAAW0oG,IACd,0BAAK1oG,UAAU,4BACb,+BACG+oG,MAKR74E,IACKi2E,IAA0BQ,KAA8BC,KAC5D,0BAAK5mG,UAAU,wCAAwCytB,IAAK/1C,GAAKg2C,MAAQ,WAAQl6C,GAC/E,mBAACu6C,GAAA,EAAM,CACLC,KAAK,OACLoQ,OAAK,EACLtN,QAAM,EACN9wB,UAAU,wBACVutB,QAASu6E,IAERpwH,GAAKgvH,GAAqB,qBAAuB,sBAIvDx2E,GAAY02E,IACX,0BAAK5mG,UAAU,wCAAwCytB,IAAK/1C,GAAKg2C,MAAQ,WAAQl6C,GAC/E,mBAACu6C,GAAA,EAAM,CACLC,KAAK,OACLoQ,OAAK,EACLtN,QAAM,EACN9wB,UAAU,wBACVutB,QAASu6E,IAERpwH,GAAK,wBAIXw4C,GAAYk2E,IACX,0BAAKpmG,UAAU,wCAAwCytB,IAAK/1C,GAAKg2C,MAAQ,WAAQl6C,GAC/E,mBAACu6C,GAAA,EAAM,CACLC,KAAK,OACLoQ,OAAK,EACLtN,QAAM,EACN9wB,UAAU,wBACVutB,QAASw6E,IAERrwH,GAAK,cAIXw4C,GAAYm2E,IACX,0BAAKrmG,UAAU,wCAAwCytB,IAAK/1C,GAAKg2C,MAAQ,WAAQl6C,GAC/E,mBAACu6C,GAAA,EAAM,CACLC,KAAK,OACLoQ,OAAK,EACLtN,QAAM,EACN9wB,UAAU,wBACVutB,QAASy6E,IAERtwH,GAAK,gBAIZ,mBAAC,GAAoB,CACnBD,gBAAiByuH,GACjBziH,SAAUiuD,EACVmlC,QAASyvB,KAEX,mBAAC,GAAW,CAACtxH,OAAQivH,IACrB,mBAAC,GAAgB,CAACjvH,OAAQkvH,IAC1B,mBAAC,GAAoB,CAAClvH,OAAQovH,MAIlC,mBAAC,GAAqB,CACpBxoE,QAAS6qE,GACT5vB,QAASyvB,GACT7qB,eAAgBA,MAGnBvrD,GAAY,mBAAC,GAAY,CAACzsC,SAAUxJ,QAAQ4rH,OAGhDzyH,GACC,mBAAC,GAAqB,CACpB4B,OAAQ2wH,GACRvyH,OAAQA,EACRogE,oBAAqBA,EACrBpiB,QAASu2E,GACT0C,QAASzC,KAGb,0BAAK9yB,eAAa,GACfv5D,GAAyBvjC,KAAI,CAACojC,EAAwB9qB,IACrD,mBAAC,GAAyB,CACxBg6G,cAAeh6G,EACfk4B,IAAKpN,EAAuB7mC,GAC5B6mC,uBAAwBA,OAI9B,mBAAC,GAAgB,CAACpmC,OAAQmvH,IACtB,KGvgBJoG,GAA4B,IAAMlzH,EAAAA,IAClCm3B,IAAwBprB,EAAAA,EAAAA,KAAUiL,GAAOA,KAAM,KAAK,GAAO,IAE5Dm8G,IAAa,SAAbA,GAAAA,EAAAA,EAAa,qBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,6BAAbA,EAAAA,EAAa,mBAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,yCAAbA,EAAAA,EAAa,2BAAbA,EAAAA,EAAa,iCAAbA,EAAAA,EAAa,uDAAbA,EAAAA,EAAa,uDAAbA,EAAAA,EAAa,kDAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,sDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,wEAAbA,EAAAA,EAAa,4DAAbA,EAAAA,EAAa,wDAAbA,EAAAA,EAAa,oDAAbA,EAAAA,EAAa,0DAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,gDAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,0BAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,kCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,sCAAbA,EAAAA,EAAa,wCAAbA,EAAAA,EAAa,4CAAbA,EAAAA,EAAa,8BAAbA,EAAAA,EAAa,2BAAbA,KAAAA,GAAa,KAoClB,MAuaA,IAAe/+E,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAES,IAFT,OACPG,EAAM,UAAEq3H,EAAS,aAAEC,EAAY,SAAEr3H,GAClC,EACC,MAAMwB,GAAWZ,EAAAA,EAAAA,IAAehB,IACxBY,MAAO82H,IAAuB/mG,EAAAA,EAAAA,IAAwB3wB,IAAW,CAAC,GAClEY,MAAO+2H,IAAuBC,EAAAA,EAAAA,IAA2B53H,IAAW,CAAC,GACrEY,MAAOi3H,IAAmBC,EAAAA,EAAAA,IAAuB93H,IAAW,CAAC,EAC/D+N,EAAO5N,GAASqC,EAAAA,EAAAA,IAAWxC,EAAQG,QAAUI,EAC7C4hB,EAAOq1G,GAAar3H,IAAU85B,EAAAA,EAAAA,IAAS95B,IAAUiiB,EAAAA,EAAAA,IAAWpiB,EAAQG,QAAUI,EAC9EwvD,EAAYhiD,IAAQowD,EAAAA,EAAAA,IAAcpwD,GAClC+kE,EAAgB/kE,GAAMtL,SAAWuE,QAAQ5G,GAAYA,IAAamB,EAAAA,IAClE0iB,EAAQ6uD,EAAgB/kE,EAAKmK,SAAS9X,QAAaG,EACnDw3H,EAAejlD,GAAiB7uD,IAAS+zG,EAAAA,EAAAA,IAAkBjqH,EAAMkW,GACjE04E,EAAQx6E,IAAQuB,EAAAA,EAAAA,IAAUvB,GAE1B06C,EAAgB16C,IAAQ81G,EAAAA,EAAAA,IAAiB91G,GACzC+1G,EAAYlxH,SACfywH,GACED,IACC36D,GACD9uD,KACC6wD,EAAAA,EAAAA,IAAqB5+D,EAAQ+N,EAAKzM,OAElC24B,EAAAA,EAAAA,IAASlsB,EAAKzM,OAASwhH,EAAAA,EAAAA,IAAY/0G,IAASA,EAAKw1F,aAAex1F,EAAKs+B,cAErE8rF,EAAkBnxH,QAAQ7G,GAAUyB,EAAS2O,WAAWxF,SAAS5K,IAASqxB,eAC1E4mG,GAAqBtlD,GAAiB/kE,GAAMuY,UAAU8xG,kBACtD3lG,EAAoBtyB,EACtByB,EAAS2O,WAAWxF,SAAS5K,IAASsxB,YAAYF,YAAShxB,EAE/D,MAAO,CACL23H,YACAr7D,gBACAu7D,oBACAroE,YACA4sC,QACA7pB,gBACAilD,eACA3oH,OAAQ+S,GAAM7gB,GACdo2H,qBACAC,qBACAE,iBACAM,kBACA1lG,oBACAuyB,4BAA6BpjD,EAASojD,4BACvC,GA9Ce9I,EAva2B,IAiCzC,UAjC0C,OAC9C/7C,EAAM,SACNC,EAAQ,aACRi4H,EAAY,UACZb,EAAS,SACTc,EAAQ,aACRb,EAAY,aACZc,EAAY,oBACZC,EAAmB,gBACnBC,EAAe,YACfC,EAAW,cACXC,EAAa,gBACbC,EAAe,eACfC,EAAc,oBACdC,EAAmB,aACnBC,EAAY,iBACZC,EAAgB,cAChBn8D,EAAa,OACbztD,EAAM,UACN8oH,EAAS,UACTnoE,EAAS,QACT5R,EAAO,eACP2R,EAAc,mBACd4nE,EAAkB,mBAClBC,EAAkB,eAClBE,EAAc,gBACdM,EAAe,kBACfC,EAAiB,kBACjB3lG,EAAiB,4BACjBuyB,EAA2B,MAC3B23C,EAAK,cACL7pB,EAAa,aACbilD,GACD,EACC,MAAM,wBACJkB,EAAuB,sBACvBC,EAAqB,kBACrBC,EAAiB,wBACjBC,EAAuB,iBACvBC,EAAgB,oBAChB76B,EAAmB,qBACnB7iC,EAAoB,iBACpB29D,EAAgB,yBAChBC,EAAwB,yBACxBC,EAAwB,mBACxBC,IACErjG,EAAAA,EAAAA,OAEGsjG,EAAoBC,EAAkBC,IAAqBl9E,EAAAA,GAAAA,MAC5D,SAAEO,IAAaC,EAAAA,EAAAA,MAEf28E,GAAwBn8E,EAAAA,EAAAA,KAAY,KACxC67E,EAAyB,CAAEp5H,OAAQA,EAASoxB,OAAQkB,IACpDq9B,EAAegqE,EAAAA,GAAAA,WAA6B,GAC3C,CAAC35H,EAAQsyB,EAAmBq9B,EAAgBypE,IAEzCQ,IAA0Br8E,EAAAA,EAAAA,KAAY,KAC1C87E,EAAyB,CAAEr5H,OAAQA,EAASyP,KAAM6iB,EAAmB7iB,OACrEkgD,EAAegqE,EAAAA,GAAAA,SACfF,GAAmB,GAClB,CAACz5H,EAAQy5H,EAAmBnnG,EAAmB+mG,EAA0B1pE,IAEtEkqE,IAAiCt8E,EAAAA,EAAAA,KAAa98C,IAClDq4H,EAAwB,CAAEr4H,UAEtBA,EAAM8G,QACR6zB,GAAsB69F,EACxB,GACC,CAACA,EAAyBH,IAEvBgB,IAAiCv8E,EAAAA,EAAAA,KAAa98C,IAClDs4H,EAAsB,CAAEt4H,SAAQ,GAC/B,CAACs4H,IAEEgB,IAA6Bx8E,EAAAA,EAAAA,KAAa98C,IAC9Cu4H,EAAkB,CAAEv4H,SAAQ,GAC3B,CAACu4H,IAEEl8D,IAAmBvf,EAAAA,EAAAA,KAAY,KACnCie,EAAqB,CAAEvsD,UAAS,GAC/B,CAACusD,EAAsBvsD,IAEpB+qH,IAAkBz8E,EAAAA,EAAAA,KAAY,KAC7Bv9C,GAAWC,GAChBq5H,EAAmB,CAAEt5H,SAAQ2V,QAAS1V,GAAW,GAChD,CAACD,EAAQs5H,EAAoBr5H,IAE1Bg6H,IAAyB18E,EAAAA,EAAAA,KAAY,KACzC27E,GAAkB,GACjB,CAACA,IAEEgB,IAAyB38E,EAAAA,EAAAA,KAAY,KACzC47E,GAAkB,GACjB,CAACA,KAEGh6E,GAAsBg7E,KAA2B9gF,EAAAA,EAAAA,KAAU6+E,IAElErgF,EAAAA,EAAAA,KAAU,KACRlvC,YAAW,KACTwxH,IAAyBjC,EAAa,GACrCf,GAA0B,GAC5B,CAACe,IAEJ,MAAM5zH,IAAO81C,EAAAA,GAAAA,KACPggF,GAAa/C,EACjBuB,IAAiByB,EAAAA,GAAAA,QACfjD,GAAckD,QACZ1B,IAAiByB,EAAAA,GAAAA,YACnBjD,GAAcmD,YACZ3B,IAAiByB,EAAAA,GAAAA,WACnBjD,GAAcoD,YACX,EACHrC,EACFf,GAAcqD,OACZjC,EACFpB,GAAcsD,YACZpC,EACFlB,GAAcuD,cACZpC,EACFnB,GAAcwD,UACZjC,EACFvB,GAAcyD,cACZvD,EACFuB,IAAqBc,EAAAA,GAAAA,QACnBvC,GAAc0D,cACZjC,IAAqBc,EAAAA,GAAAA,gBACvBvC,GAAc2D,sBACZlC,IAAqBc,EAAAA,GAAAA,WACvBvC,GAAc4D,iBACZnC,IAAqBc,EAAAA,GAAAA,mBACvBvC,GAAc6D,yBACZpC,IAAqBc,EAAAA,GAAAA,iBACvBvC,GAAc8D,uBACZrC,IAAqBc,EAAAA,GAAAA,mBACvBvC,GAAc+D,yBACZtC,IAAqBc,EAAAA,GAAAA,kBACvBvC,GAAcgE,wBACZvC,IAAqBc,EAAAA,GAAAA,oBACvBvC,GAAciE,0BACZxC,IAAqBc,EAAAA,GAAAA,2BACvBvC,GAAckE,iCACZzC,IAAqBc,EAAAA,GAAAA,qBACvBvC,GAAcmE,2BACZ1C,IAAqBc,EAAAA,GAAAA,mBACvBvC,GAAcoE,yBACZ3C,IAAqBc,EAAAA,GAAAA,gBACvBvC,GAAcqE,uBACZ5C,IAAqBc,EAAAA,GAAAA,mBACvBvC,GAAcsE,0BACZ7C,IAAqBc,EAAAA,GAAAA,aACvBvC,GAAcuE,mBACZ9C,IAAqBc,EAAAA,GAAAA,QACvBvC,GAAcwE,cACZ/C,IAAqBc,EAAAA,GAAAA,WACvBvC,GAAcyE,iBACZhD,IAAqBc,EAAAA,GAAAA,eACvBvC,GAAc0E,qBACZjD,IAAqBc,EAAAA,GAAAA,UACvBvC,GAAc2E,gBACZlD,IAAqBc,EAAAA,GAAAA,WACvBvC,GAAc4E,iBACZnD,IAAqBc,EAAAA,GAAAA,aACvBvC,GAAc6E,wBACZ77H,EACFg4H,EACFhB,GAAc8E,WACZ7D,EACFjB,GAAc+E,kBACZ1D,EACFrB,GAAcgF,YACZ1D,EACFtB,GAAciF,eACZj8H,EAEEk8H,GAAwD,QAArC,GAAGz6D,EAAAA,GAAAA,GAAiBu4D,IAAY,UAAK,SAAK,EAoN7DmC,GACJz/E,GACGs9E,KAAehD,GAAcmD,aAC7BH,KAAehD,GAAcoD,YAC7BJ,KAAehD,GAAcyD,eAC7BT,KAAehD,GAAc+E,mBAC7B7E,EAGCkF,IAAkBlhF,EAAAA,GAAAA,GACtB,sBACAihF,IAAgB,cACfp9E,IAAwB0F,IAAgC,iBAG3D,OACE,0BAAKj4B,UAAU,eACb,mBAAC+tB,GAAA,EAAM,CACL/tB,UAAU,eACVlV,OAAK,EACL8iC,MAAM,cACNI,KAAK,UACLT,QAAS6D,EACT4C,UAA0Bt8C,GAAfi4H,GAAoB,cAAsB,iBAErD,0BAAK3vG,UAAW4vG,MAElB,mBAAC/hF,GAAA,EAAU,CACTpP,KAAO8T,IAAwB0F,EAA+B,OAAS,aACvEnK,UAAW4hF,IA/NjB,WACE,IAA6B,IAAzBA,GAIJ,OAAQA,IACN,KAAKlF,GAAcsD,YACjB,OAAO,6BAAKp2H,GAAK,gBACnB,KAAK8yH,GAAcqD,OACjB,OACE,sCACE,mBAAC/2E,GAAA,EAAW,CACVE,yBAAyB,cACzBte,MAAOiyF,EACPpzE,SAAU01E,KAEZ,mBAACl/E,GAAA,EAAM,CACLjjC,OAAK,EACLkjC,KAAK,UACLJ,MAAM,cAENL,QAAS,IAAMkkD,EAAoB,CAAEzqF,YAAY2wD,EAAAA,GAAAA,IAAcx4D,KAAKC,SACpE40C,UAAU,2BAEV,wBAAGh0B,UAAU,oBAIrB,KAAKwqG,GAAcyD,cACjB,OAAO,6BAAKv2H,GAAKsrD,EAAY,wBAA0B,oBACzD,KAAKwnE,GAAc0D,cACjB,OAAO,6BAAKx2H,GAAK,SACnB,KAAK8yH,GAAc2D,sBACjB,OAAO,6BAAKz2H,GAAKsrD,EAAY,oBAAsB,oBACrD,KAAKwnE,GAAc4D,iBACjB,OAAO,6BAAK12H,GAAK,eACnB,KAAK8yH,GAAc+D,yBACjB,OAAO,6BAAK72H,GAAK,0BACnB,KAAK8yH,GAAcoE,yBACjB,OAAO,6BAAKl3H,GAAK,wBACnB,KAAK8yH,GAAcqE,uBACjB,OAAO,6BAAKn3H,GAAK,oBACnB,KAAK8yH,GAAcsE,0BACjB,OAAO,6BAAKp3H,GAAK,eACnB,KAAK8yH,GAAc8D,uBACjB,OAAO,6BAAK52H,GAAK,uBACnB,KAAK8yH,GAAcgE,wBACjB,OAAO,6BAAK92H,GAAK,iBACnB,KAAK8yH,GAAciE,0BACjB,OAAO,6BAAK/2H,GAAK,wBACnB,KAAK8yH,GAAckE,iCACjB,OAAO,6BAAKh3H,GAAK,wBACnB,KAAK8yH,GAAcmE,2BACjB,OAAO,6BAAKj3H,GAAK,qBACnB,KAAK8yH,GAAcwE,cACjB,OAAO,6BAAKt3H,GAAK,2BACnB,KAAK8yH,GAAcyE,iBACjB,OAAO,6BAAuBv3H,GAAlB0zH,EAAuB,WAAmB,YACxD,KAAKZ,GAAc4E,iBACjB,OACE,sCACE,6BAAK13H,GAAK,eACV,8BAASsoB,UAAU,SAChB0F,IAAsBA,EAAkBd,WACvC,mBAACmpB,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,cACNI,KAAK,UACLgG,UAAWt8C,GAAK,QAChB61C,QAASu/E,GAET,wBAAG9sG,UAAU,eAGhB0F,GAAqBA,EAAkBd,WACtC,sCACE,mBAACmpB,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,SACNI,KAAK,UACLgG,UAAWt8C,GAAK,UAChB61C,QAASq/E,GAET,wBAAG5sG,UAAU,iBAEf,mBAAComC,GAAA,EAAa,CACZpxD,OAAQ23H,EACRv7E,QAASy7E,EACT3pH,MAAOxL,GAAK,cACZnB,KAAMmB,GAAK,kBACX84D,sBAAoB,EACpBnK,aAAc3uD,GAAK,UACnB4uD,eAAgB0mE,QAO9B,KAAKxC,GAAc6E,mBACjB,OAAO,6BAAiB33H,GAAZsrD,EAAiB,oBAA4B,mBAC3D,KAAKwnE,GAAc0E,qBACjB,OAAO,6BAAKx3H,GAAK,oCACnB,KAAK8yH,GAAcuD,cACjB,OACE,mBAACj3E,GAAA,EAAW,CACVpe,MAAOkyF,EACPxzE,YAAa1/C,GAAK,sBAClBm4H,iBAAe,EACft4E,SAAU21E,KAGhB,KAAK1C,GAAcwD,UACjB,OACE,mBAACl3E,GAAA,EAAW,CACVpe,MAAOoyF,EACP1zE,YAAa1/C,GAAK,mBAClBm4H,iBAAe,EACft4E,SAAU41E,KAGhB,KAAK3C,GAAc8E,WACjB,OAAO,6BAAK53H,GAAKsrD,EAAY,qBAAuB,qBACtD,KAAKwnE,GAAc+E,kBACjB,OAAO,6BAAK73H,GAAK,uBACnB,KAAK8yH,GAAcmD,YACjB,OAAO,6BAAKj2H,GAAK,gBACnB,KAAK8yH,GAAc6D,yBACjB,OAAO,6BAAK32H,GAAK,uBACnB,KAAK8yH,GAAcoD,WACnB,KAAKpD,GAAcuE,mBACjB,OAAO,6BAAKr3H,GAAK,iBACnB,KAAK8yH,GAAc2E,gBACjB,OAAO,6BAAKz3H,GAAK,cACnB,KAAK8yH,GAAcgF,YACjB,OAAO,6BAAK93H,GAAK,aACnB,KAAK8yH,GAAciF,UACjB,OAAO,6BAAK/3H,GAAK,cACnB,QACE,OACE,sCACE,6BA3JCA,GADLquE,EACU,gBAGV/iB,EACU,oBAGV3gD,EACUutF,EAAQ,qBAAuB,sBAGjC,oBAkJJ,8BAAS5vE,UAAU,SAChB8vC,GACC,mBAAC/hB,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,cACNI,KAAK,UACLgG,UAAWt8C,GAAK,cAChB61C,QAAS2iB,IAET,wBAAGlwC,UAAU,mBAGhBmrG,IAAcplD,GACb,mBAACh4B,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,cACNI,KAAK,UACLgG,UAAWt8C,GAAK,QAChB61C,QAAS8/E,IAET,wBAAGrtG,UAAU,eAGhBgrG,GACC,mBAACj9E,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,cACNI,KAAK,UACLgG,UAAWt8C,GAAK,aAChB61C,QAAS6/E,IAET,wBAAGptG,UAAU,eAGhBqrG,GACC,mBAACt9E,GAAA,EAAM,CACLjjC,OAAK,EACL8iC,MAAM,cACNI,KAAK,UACLgG,UAAWt8C,GAAK,cAChB61C,QAAS+/E,IAET,wBAAGttG,UAAU,kBAO7B,CAiCO8vG,IAEC,K,6BC1ZV,SAASC,GACPC,EACAC,EACAjnG,EACAknG,GAEA,MAAOr2H,EAAas2H,IAAWC,EAAAA,GAAAA,GAC7BpnG,EAAeinG,OAAiBz8H,EAChC08H,OACA18H,EACA68H,EAAAA,IAKF,MAAO,CAACx2H,EAAas2H,KAFJt2H,IAAgBq2H,GAAWr2H,EAAY,KAAOq2H,EAAQ,IAGzE,CAEA,SAASI,GACPC,EACAP,EACAC,EACAjnG,EACApxB,EACA+rB,EACA5a,GAEA,MAAMynH,GAAgBjhF,EAAAA,EAAAA,OAEtB0R,EAAAA,GAAAA,IAAc,KACZuvE,EAActwG,aAAU1sB,CAAS,GAChC,CAACuV,KAEJk4C,EAAAA,GAAAA,IAAc,KACR+uE,IAAsBO,GAAsB34H,GAAgB+rB,IAC9D6sG,EAActwG,SAAUuwG,EAAAA,EAAAA,IACtB74H,EACA+rB,EACA4sG,GAEJ,GACC,CAAC34H,EAAc+rB,EAAUqsG,EAAmBO,IAE/C,MAAO12H,EAAas2H,IAAWC,EAAAA,GAAAA,GAC7BpnG,EAAeinG,OAAiBz8H,EAChCg9H,EAActwG,aACd1sB,EACuB,UAAvB+8H,EAAiCztG,EAAAA,IAAqBe,EAAAA,KAKxD,MAAO,CAAChqB,EAAas2H,KAFJt2H,IAAgB22H,EAActwG,SAAWrmB,EAAY,KAAO22H,EAActwG,QAAQ,IAGrG,CCxKA,MAGMwwG,IAAwBn0G,EAAAA,EAAAA,KAAUlO,GAAOA,KAAM,KAAK,GAE1D,IAAIsiH,IAA8B,E,gHCyFlC,MAAMC,GAAO,CACX,CAAEn8H,KAAM,QAASyO,MAAO,mBACxB,CAAEzO,KAAM,YAAayO,MAAO,mBAC5B,CAAEzO,KAAM,QAASyO,MAAO,mBACxB,CAAEzO,KAAM,QAASyO,MAAO,oBA2Z1B,SAAS2tH,GAAgCC,GACvC,MAAO,CAEJ,gDAA+CA,wBAE/C,4DAA2DA,yBAC5D33H,KAAK,KACT,CAEA,UAAesyC,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA8C,IAA9C,OAAEG,EAAM,QAAE2V,EAAO,SAAEmnC,GAAU,EACpC,MAAMlvC,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,GAC1BuyC,GAAe7tC,EAAAA,EAAAA,IAAmB7E,EAAQG,IACxC2wB,YAAagtG,EAAe,cAAE1vH,IAAkB6hB,EAAAA,EAAAA,IAAyBjwB,IAAW,CAAC,GACvF,SAAE0wB,GAActiB,GAAiB0vH,GAAmB1vH,EAAc0vH,IAAqB,CAAC,GAEtF5hH,KAAM+1D,EAAWx5C,aAAcF,GAAqBv4B,EAAO4b,OAC3DM,KAAMoiC,GAAct+C,EAAOsO,MAE7Bw8B,EAAU/8B,IAAQmiF,EAAAA,EAAAA,IAAYniF,GAC9BgiD,EAAYhiD,IAAQowD,EAAAA,EAAAA,IAAcpwD,GAClCgwH,GAAiBjoH,IAAYg1B,GAAYilB,IAAa+yD,EAAAA,EAAAA,IAAY/0G,IAClEwgC,EAAUxgC,GAAMuY,UAAUioB,QAC1BM,EAAmB9gC,GAAMuY,UAAUuoB,iBACnCmvF,EAAmBD,GAAiBhwH,IACpCA,EAAKkwH,aAAgBlwH,EAAKuY,WAAavY,EAAKuY,SAAS43G,gBACrDC,EAAgBJ,GAAiBhwH,KACjCqwH,EAAAA,EAAAA,IAAiBrwH,EAAM,kBAAmBswH,EAAAA,EAAAA,IAAkBtwH,EAAM,gBAAkBA,EAAKw1F,WACzF+6B,EAAmBP,GAAiBhwH,KAASqwH,EAAAA,EAAAA,IAAiBrwH,EAAM,aAAeA,EAAKw1F,WACxF5Y,GAAoBC,EAAAA,EAAAA,IAAwB5qF,EAAQG,GAE1D,IAAIo+H,EACAC,EACAr8G,EAOJ,OANI8X,EAAAA,EAAAA,IAAS95B,KACXq+H,EAAiBr+H,EACjBgiB,GAAOC,EAAAA,EAAAA,IAAWpiB,EAAQw+H,GAC1BD,EAAoBp8G,IAASA,EAAKmX,UAAW5V,EAAAA,EAAAA,IAAUvB,IAGlD,CACLmc,OAAOogB,EAAAA,EAAAA,IAAY1+C,GACnB+vD,YACAyuE,iBACA9rF,eACAhiB,WACAotG,kBACAS,oBACAR,gBACAC,mBACAG,gBACAG,mBACA5mH,cAAe1X,EAAO0X,cACtB8mD,oBAAoB91D,EAAAA,EAAAA,IAAyB1I,EAAQi9C,GACrD99B,aAAcpR,GAAMoR,aACpB4W,aAAc/1B,EAAO+1B,aACrB40D,oBACA1Y,YACA15C,mBACA+lB,YACA8zC,gBAAiBrkF,GAAM4/D,eACnBowD,GAAiBxvF,GAAW,CAAEA,UAASM,uBACvC0vF,GAAqBp8G,GAAQ,CAAEs8G,cAAet8G,EAAKoX,aAAa5vB,KACrE,GAtDeuyC,EA9ZuB,IA4BrC,IA5BsC,OAC1C/7C,EAAM,QACN2V,EAAO,aACPijH,EAAY,qBACZ2F,EAAoB,MACpBpgG,EAAK,UACLyxB,EAAS,eACTyuE,EAAc,cACd9mH,EAAa,aACbg7B,EAAY,SACZhiB,EAAQ,gBACRotG,EAAe,kBACfS,EAAiB,cACjBR,EAAa,iBACbC,EAAgB,cAChBG,EAAa,iBACbG,EAAgB,cAChBG,EAAa,QACblwF,EAAO,iBACPM,EAAgB,UAChBojC,EAAS,iBACT15C,EAAgB,UAChB+lB,EAAS,mBACTkgB,EAAkB,aAClBr/C,EAAY,aACZ4W,EAAY,kBACZ40D,EAAiB,gBACjByH,GACD,EACC,MAAM,wBACJusC,EAAuB,gBACvBC,EAAe,gBACfC,EAAe,SACfx7H,EAAQ,yBACRy7H,EAAwB,gBACxBtuD,EAAe,gBACf8lB,EAAe,aACftuF,EAAY,kBACZorB,EAAiB,6BACjB2rG,IACE3oG,EAAAA,EAAAA,MAGEi6B,GAAe/T,EAAAA,EAAAA,IAAuB,MAEtCsJ,GAAgBtJ,EAAAA,EAAAA,IAAuB,MACvC73C,GAAO81C,EAAAA,GAAAA,MACN6N,EAAW42E,IAAgBxlF,EAAAA,EAAAA,IAAS,IACpCylF,EAAgBC,IAAqB1lF,EAAAA,EAAAA,MAEtC2O,GAAO7M,EAAAA,EAAAA,KAAQ,IAAO,IACtByiF,EAAgB,CAAC,CACnBv8H,KAAM,UAAWyO,MAAO8/C,EAAY,qBAAuB,iBACxD,MACF4tE,MAGE7nH,EAA0D,GAAhD,CAAC,CAAEtU,KAAM,QAASyO,MAAO,uBACpCsuH,EAAoB,CAAC,CAAE/8H,KAAM,cAAeyO,MAAO,qBAAwB,KAC7E,CAACsuH,EAAmBR,EAAehuE,EAAWj6C,IAE5CqpH,EAAqB/2E,EAAYD,EAAKzgD,OAAS,EAAIygD,EAAKzgD,OAAS,EAAI0gD,EACrEg3E,GAAUj3E,EAAKg3E,GAAoB39H,MAElCq8H,GAAYj3H,GAAas2H,GAASmC,IFpK5B,SACbT,EACAC,EACAS,EACAF,EACAtB,EACAlhB,EACA6hB,EACAxsD,EACA15C,EACA+lB,EACA35C,EACA+rB,EACAqF,EACAjgB,GAEA,MAAM+nH,EAAyB,YAAZuB,GAA0BtB,EAA4BA,EAAVsB,EAEzDG,GAAYjkF,EAAAA,EAAAA,KAAQ,KACxB,GAAKshE,GAAqB3qC,GAAc15C,EAIxC,OAAOinG,EAAAA,EAAAA,IACL5iB,EAAiB73G,KAAI,QAAC,OAAEqK,GAAQ,SAAKA,CAAM,IAC3C6iE,EACA15C,EACD,GACA,CAACqkF,EAAkB3qC,EAAW15C,IAE3BhI,GAAU+qB,EAAAA,EAAAA,KAAQ,KACtB,GAAKmjF,GAAkBngF,EAIvB,OAAOmhF,EAAAA,EAAAA,IAAYhB,EAAengF,GAAW,EAAK,GACjD,CAACA,EAAWmgF,KAERiB,EAAmBC,EAAgBC,GAA2B9C,GACnEe,EAAYe,EAAiB7oG,EAAcwpG,IAGtCM,EAAkBC,EAAcC,GAAyB1C,GAC9D,QAASQ,EAAYyB,EAAgBvpG,EAAcpxB,EAAc+rB,EAAU5a,IAGtEkqH,EAAqBC,EAAkBC,GAA6B7C,GACzE,YAAaQ,EAAYyB,EAAgBvpG,EAAcpxB,EAAc+rB,EAAU5a,IAG1EqqH,EAAiBC,EAAcC,GAAyBhD,GAC7D,QAASQ,EAAYyB,EAAgBvpG,EAAcpxB,EAAc+rB,EAAU5a,IAGtEwqH,EAAkBC,EAAcC,GAAyBnD,GAC9D,QAASQ,EAAYyB,EAAgBvpG,EAAcpxB,EAAc+rB,EAAU5a,IAGtE2qH,EAAkBC,EAAeC,GAA0BtD,GAChE,QAASQ,EAAYyB,EAAgBvpG,EAAcpxB,EAAc+rB,EAAU5a,IAGtE8qH,EAAuBC,EAAoBC,GAA+BhE,GAC/Ee,EAAYgB,EAAiB9oG,EAAcxF,GAG7C,IAAI3pB,EACAs2H,EACAmC,GAAgB,EAEpB,OAAQxB,GACN,IAAK,UACHj3H,EAAc84H,EACdxC,EAAUyC,EACVN,EAAgBO,EAChB,MACF,IAAK,cACHh5H,EAAcg6H,EACd1D,EAAU2D,EACVxB,EAAgByB,EAChB,MACF,IAAK,QACHl6H,EAAci5H,EACd3C,EAAU4C,EACVT,EAAgBU,EAChB,MACF,IAAK,YACHn5H,EAAco5H,EACd9C,EAAU+C,EACVZ,EAAgBa,EAChB,MACF,IAAK,QACHt5H,EAAcu5H,EACdjD,EAAUkD,EACVf,EAAgBgB,EAChB,MACF,IAAK,QACHz5H,EAAc05H,EACdpD,EAAUqD,EACVlB,EAAgBmB,EAChB,MACF,IAAK,QACH55H,EAAc65H,EACdvD,EAAUwD,EACVrB,EAAgBsB,EAIpB,MAAO,CAAC9C,EAAYj3H,EAAas2H,EAASmC,EAC5C,CEuD4D0B,CACxDnC,EACAC,EACAC,EACAM,GACAtB,EACAvvF,EACAkwF,EACAxsD,EACA15C,EACA+lB,EACA5L,EACAhiB,EACAqF,EACAjgB,GAEIkrH,GAA4B,YAAfnD,KAA8BE,GAAgC,UAAfF,GAC5DhjF,GAAYsN,EAAK71C,WAAU,QAAC,KAAE9Q,GAAM,SAAKA,IAASq8H,EAAU,KAE5D,aAAEt3B,IDpLK,SACbl2C,EACA+uE,EACArG,EACA2F,IAGAnhF,EAAAA,GAAAA,IAAsB,IAAmB,IAAjB0jF,GAAY,EAClC,GAAIA,GAAeA,IAAgB7B,EAAS,CAC1C,MAAMjwD,EAAY9e,EAAapjC,QACzBi0G,EAAS/xD,EAAUj3B,cAA8B,YACnDi3B,EAAUyqB,UAAYsnC,EAAO96B,YAC/Bs4B,EAAiC,YAAZU,EAAwB5E,EAAAA,GAAAA,WAA0BA,EAAAA,GAAAA,aACvEkD,IAA8B,GAC9BvwD,EAAAA,GAAAA,GAAiBgC,EAAW+xD,EAAQ,aAAS3gI,OAAWA,OAAWA,EArB/C,KAsBpBuI,YAAW,KACT40H,IAA8B,CAAK,GAtBN,KAyBnC,IACC,CAAC0B,EAASV,EAAsBruE,KAGnC9S,EAAAA,GAAAA,IAAsB,IAAwB,IAAtB4jF,GAAiB,EACvC,GAAIpI,IAAiByB,EAAAA,GAAAA,SAAwBzB,IAAiBoI,EAC5D,OAGF,MAAMhyD,EAAY9e,EAAapjC,QAC/B,IAAKkiD,EACH,OAGF,MAAMiyD,EAAYjyD,EAAUj3B,cAA8B,aACrDkpF,GAAaA,EAAUh7B,UAAYj3B,EAAUyqB,YAIlD8jC,IAA8B,GAC9BvwD,EAAAA,GAAAA,GACEgC,EACAA,EAAU3d,kBACV,aACAjxD,EACyB,EAAzB4uE,EAAUuqB,cAGZ5wF,YAAW,KACT40H,IAA8B,CAAK,GAtDF,KAyDnCgB,EAAqB3F,GAAa,GACjC,CAACA,EAAc1oE,EAAcquE,IAEhC,MAAM2C,GAAwB3jF,EAAAA,EAAAA,KAAY,KACxC,MAAMyxB,EAAY9e,EAAapjC,QAC/B,IAAKkiD,EACH,OAGF,MAAMiyD,EAAYjyD,EAAUj3B,cAA8B,YAC1D,IAAKkpF,EACH,OAGF,IAAIpqF,EAAsBwjF,EAAAA,GAAAA,QACtBrrD,EAAUyqB,WAAawnC,EAAUh7B,YACnCpvD,EAAoB,YAAZooF,EACJ5E,EAAAA,GAAAA,WACAA,EAAAA,GAAAA,aAGNkE,EAAqB1nF,EAAM,GAC1B,CAACqZ,EAAcquE,EAAsBU,IAoBxC,OAjBApnF,EAAAA,EAAAA,KAAU,KACJ0lF,IAIJ2D,GAAuB,GACtB,CAACA,EAAuBjC,IAWpB,CAAE74B,cARY7oD,EAAAA,EAAAA,KAAY,KAC3BggF,IAIJD,GAAsB4D,EAAsB,GAC3C,CAACA,IAGN,CCsF2BC,CAAgBjxE,EAAcwtE,GAAY9E,EAAc2F,IAE3E,mBAAE6C,GAAkB,qBAAEC,ICnMf,SACbnxE,GAEA,IADAoxE,EAAuB,UAAH,6CAAG,uCAGvBzpF,EAAAA,EAAAA,KAAU,KACR,SAAS0pF,IACP,MAAMvyD,EAAY9e,EAAapjC,QACzB00G,EAAexyD,EAAUj3B,cAA8BupF,GACvDP,EAAS/xD,EAAUj3B,cAA8B,YACnDypF,GAAgBT,IAClBS,EAAahmF,MAAMimF,UAAezyD,EAAUuqB,aAAewnC,EAAOxnC,aAAlC,KAEpC,CAMA,OAJAgoC,IAEA3+H,OAAO62C,iBAAiB,SAAU8nF,GAAc,GAEzC,KACL3+H,OAAO82C,oBAAoB,SAAU6nF,GAAc,EAAM,CAC1D,GACA,CAACrxE,EAAcoxE,IAGlB,MAAMF,GAAqB7jF,EAAAA,EAAAA,KAAY,KACrC,MAAMyxB,EAAY9e,EAAapjC,QAC/B,GAAkC,WAA9BkiD,EAAUxzB,MAAMkmF,UAAwB,CAC1C,MAAMC,EAAiB3yD,EAAU1f,YAAc0f,EAAU4yD,YACzD5yD,EAAUxzB,MAAMkmF,UAAY,SAC5B1yD,EAAUxzB,MAAMqmF,YAAe,GAAEF,KACnC,IACC,CAACzxE,IAEEmxE,GAAuB9jF,EAAAA,EAAAA,KAAY,KACvC,MAAMyxB,EAAY9e,EAAapjC,QAC/BkiD,EAAUxzB,MAAMkmF,UAAY,SAC5B1yD,EAAUxzB,MAAMqmF,YAAc,GAAG,GAChC,CAAC3xE,IAEJ,MAAO,CAAEkxE,qBAAoBC,uBAC/B,CD0JuDS,CAAmB5xE,IAEjEqnB,GAAawqD,IErMC,MACrB,MAAOxqD,EAAayqD,IAAkB3oF,EAAAA,EAAAA,IAAS,GAM/C,MAAO,CAACk+B,GAJkBh6B,EAAAA,EAAAA,KAAY,KACpCykF,GAAgBl1G,GAAYA,EAAU,GAAE,GACvC,IAEoC,EF8LCm1G,IAEhCnlC,QAASolC,KAAgCnlC,EAAAA,GAAAA,IAAwB,CACvEC,QAAS9sC,EACT0uC,WA7F0B,MAgGtBujC,IAAuB5kF,EAAAA,EAAAA,KAAY,KACvC8jF,KACAU,IAAkB,GACjB,CAACV,GAAsBU,KAEpBK,IAA4B7kF,EAAAA,EAAAA,KAAY,KAC5CqhF,EAA6B,CAAEr7H,uBAAwB8+H,EAAAA,GAAAA,YAAoC,GAC1F,CAACzD,KAGJ/mF,EAAAA,EAAAA,KAAU,KACR2mF,EAAwB,CAAEv9H,UAAWg+H,IAA6B,GACjE,CAACT,EAAyBS,GAAStpH,IAEtC,MAAMud,GAAYmrG,GAAkBr+H,GAEpC63C,EAAAA,EAAAA,KAAU,KACJjiB,GACF3C,EAAkB,CAAEC,cACtB,GACC,CAACD,EAAmBC,GAAW0C,IAElC,MAAM0sG,IAAoB/kF,EAAAA,EAAAA,KAAanlC,IACrCi4D,EAAgB,CACdrwE,OAAQkzB,GACRjzB,SAAUmB,EAAAA,GACVgX,UACAtQ,OAAQypE,EAAAA,GAAAA,aACR,GACD,CAACr+C,GAAWm9C,IAETkyD,IAAkBhlF,EAAAA,EAAAA,KAAah3C,IACnC4vF,EAAgB,CAAEn2F,OAAQkzB,GAAW3sB,aAAY,GAChD,CAAC2sB,GAAWijE,IAETqsC,IAAoBjlF,EAAAA,EAAAA,KAAap8C,IACrC+B,EAAS,CAAE/B,MAAK,GACf,CAAC+B,IAEEu/H,IAAqBllF,EAAAA,EAAAA,KAAah3C,IACtCsB,EAAa,CAAE7H,OAAQkzB,GAAW3sB,aAAY,GAC7C,CAAC2sB,GAAWrrB,IAET66H,IAAgCnlF,EAAAA,EAAAA,KAAY,KAChDwhF,OAAkB3+H,EAAU,GAC3B,IAiCH,IAAIuiI,IA/BJvlF,EAAAA,GAAAA,IAAsB,IAAyB,IAAvBwlF,GAAkB,EACxC,GAAkB,IAAd36E,GAAmB26E,IAAsBhF,EAC3C,OAGF,MAAMiF,EAAe56E,GAAa21E,EAAgB,GAAK,GAEvDiB,EAAa9xH,KAAKo6B,IAAI07F,EAAc76E,EAAKzgD,OAAS,GAAG,GACpD,CAACq2H,EAAe31E,EAAWD,KAE9BnQ,EAAAA,EAAAA,KAAU,KACR,GAAK4N,EAAc34B,SAAYnhB,EAAAA,GAI/B,OAAO66C,EAAAA,GAAAA,IAAcf,EAAc34B,QAAS,CAC1C25B,wBAAyB,WACzBC,QAAU,CAAC31C,EAAG9G,IACRA,IAAc08C,GAAAA,GAAAA,MAChBk4E,EAAa9xH,KAAKo6B,IAAI63F,EAAqB,EAAGh3E,EAAKzgD,OAAS,KACrD,GACE0C,IAAc08C,GAAAA,GAAAA,QACvBk4E,EAAa9xH,KAAKC,IAAI,EAAGgyH,EAAqB,KACvC,IAKX,GACD,CAACA,EAAoBh3E,EAAKzgD,SAIzBs5H,GACF8B,GAAkBtkE,EAA2C,EAlLrC,IAoLd53D,KACVk8H,GAAiBG,EAAAA,KAEnB,MAAMC,IAAmBjrB,EAAAA,GAAAA,GAAkB,CAAC93G,EAAQ2V,EAAS+nH,GAAYsB,GAAqB2D,IAgK9F,OACE,mBAACK,GAAA,EAAc,CACbvlF,IAAKyS,EACLtjC,UAAU,wBACVq2G,aAAcxF,GAAgCC,IAC9C3tB,MAAOgzB,GAAmBt8H,QAAcrG,EACxCm3E,YAAaA,GACb2rD,cAAeC,EAAAA,IACfC,iBAAkBL,GAAmC,YAAfrF,GAA2BT,EAAAA,GAAgBvtG,EAAAA,IAAsB,EAEvG2zG,sBAAoB,EACpBC,YAAU,EACVC,WAAYxG,GACZj1B,SAAU1B,KAER84B,IAyCR,SAA2Bl/H,EAAgBq+H,EAAoC/+D,GAC7E,OACE,0BAAK1yC,UAAU,gBACb,mBAAC42G,GAAA,EAAW,CAACv0H,OAAQovH,GAAkBr+H,EAAQyjI,aAAcnkE,IAC7D,mBAACokE,GAAA,EAAS,CAACl/E,aAAc65E,GAAkBr+H,IAGjD,CAhDyB2jI,CAAkB3jI,EAAQq+H,EAAgBhgE,GAAsB0kE,KACjF/jH,GACA,0BACE4N,UAAU,gBAEV,mBAAC6tB,GAAA,EAAU,CACTgD,IAAKgI,EACLpa,KAAM/mC,EAAKg2C,MAAQ,sBAAwB,kBAC3CI,UAAWA,GACX0N,YAAaJ,EAAKzgD,OAClBq8H,qBAAmB,EACnBh3G,UAAU,0BACVi3G,QAASzC,GACTpK,OAAQmL,IAhLlB,WACE,IAAK17H,KAAgBs8H,KAAqBxwF,EAAc,CACtD,MAAMuxF,EAAYjD,KAAekC,GAC3BgB,EAA2Bl9H,QAAuB,YAAf62H,IAA4BG,GAErE,OACE,0BAAKjxG,UAAU,uBACXk3G,IAAcC,GAA4B,mBAACxpF,GAAA,EAAO,MACnDwpF,GAA4B,mBAACC,GAAA,EAAY,CAAC7gI,KAAK,8CAGtD,CAEA,IAAKsD,GAAYc,OAAQ,CACvB,IAAIpE,EAEJ,OAAQu6H,IACN,IAAK,UACHv6H,EAAO06H,EAAmB,4CAA8C,mBACxE,MACF,IAAK,cACH16H,EAAOmB,EAAK,oBACZ,MACF,IAAK,YACHnB,EAAOmB,EAAK,wBACZ,MACF,IAAK,QACHnB,EAAOmB,EAAK,wBACZ,MACF,IAAK,QACHnB,EAAOmB,EAAK,wBACZ,MACF,IAAK,QACHnB,EAAOmB,EAAK,yBACZ,MACF,QACEnB,EAAOmB,EAAK,0BAGhB,OACE,0BAAKsoB,UAAU,sBACb,mBAACo3G,GAAA,EAAY,CAAC7gI,KAAMA,IAG1B,CAEA,OACE,0BACEypB,UAAY,WAAU8wG,UACtBrjF,IAAK/1C,EAAKg2C,OAAwB,UAAfojF,GAAyB,WAAQt9H,EACpDshG,eAAa,GAEG,UAAfg8B,GACEj3H,GAA0B7B,KAAKzD,GAAOoxC,EAAapxC,IAClD,mBAAC8iI,GAAA,EAAK,CACJ7uF,IAAKj0C,EACL2D,QAASytC,EAAapxC,GACtBqsE,YAAaykB,GAAmB1/C,EAAapxC,GAAIqsE,YACjDqI,oBAAqBqsD,GACrB/nF,QAASmoF,OAGI,cAAf5E,GACDj3H,GAA0B7B,KAAKzD,GAAOoxC,EAAapxC,IAClD,mBAACg7F,GAAA,EAAQ,CACP/mD,IAAKj0C,EACL2D,QAASytC,EAAapxC,GACtB+iI,UAAQ,EACRC,SAAO,EACPv3G,UAAU,cACV8tD,cAAe8P,EAAkBxgF,SAAS7I,GAC1C00E,oBAAqBqsD,GACrBkC,YAAa3B,OAGA,UAAf/E,GACDj3H,GAA0B7B,KAAKzD,GAAOoxC,EAAapxC,IAClD,mBAACkjI,GAAA,EAAO,CACNjvF,IAAKj0C,EACL2D,QAASytC,EAAapxC,GACtBqsE,YAAaykB,GAAmB1/C,EAAapxC,GAAIqsE,YACjDqI,oBAAqBqsD,GACrBoC,eAAgB7B,OAGH,UAAf/E,GACDj3H,GAA0B7B,KAAKzD,GAAOoxC,EAAapxC,IAClD,mBAAC,MAAK,CACJi0C,IAAKj0C,EACLg9B,MAAOA,EACPr5B,QAASytC,EAAapxC,GACtB2G,OAAQ8zF,EAAAA,GAAAA,YACRrvF,KAAMgmC,EAAapxC,GAAIoL,KACvBqpB,aAAcA,EACdhJ,UAAU,cACVkvE,OAAQymC,GACR6B,YAAa3B,GACbx3H,aAAcgnF,IAAoB1/C,EAAapxC,GAAIqsE,YACnDkN,cAAe8P,EAAkBxgF,SAAS7I,OAG7B,UAAfu8H,GACDj3H,GAA0B7B,KAAKzD,GAAOoxC,EAAapxC,IAClD,mBAAC,MAAK,CACJi0C,IAAKj0C,EACLg9B,MAAOA,EACPr5B,QAASytC,EAAapxC,GACtBmzE,aAAaiwD,EAAAA,GAAAA,GAAcjgI,EAAMiuC,EAAapxC,GAAKg9C,EAAW2zB,GAC9DhqE,OAAQ8zF,EAAAA,GAAAA,YACRrvF,KAAMgmC,EAAapxC,GAAIoL,KACvBqpB,aAAcA,EACdhJ,UAAU,cACVkvE,OAAQymC,GACR6B,YAAa3B,GACbx3H,aAAcgnF,IAAoB1/C,EAAapxC,GAAIqsE,YACnDkN,cAAe8P,EAAkBxgF,SAAS7I,OAG7B,YAAfu8H,GACDj3H,GAA0B7B,KAAI,CAACzD,EAAI+b,KAClC,0BAACsnH,GAAA,EAAQ,CACPpvF,IAAKj0C,EACL+1H,cAAeh6G,EACf0P,UAAU,6CAEVutB,QAAS,IAAMqoF,GAAkBrhI,GACjCsjI,gBAxIoBC,EAwImBvjI,EAvI1CujI,IAAantH,GAAkB4mH,EAA+B,CAAC,CACpEruH,MAAOxL,EAAK,iCACZw+C,KAAM,OACN6hF,QAAS,KACP5F,EAAkB2F,EAAS,SAJ0BtkI,IAyI/C,mBAAC6iE,GAAA,EAAe,CAACh0D,OAAQ9N,EAAIyjI,YAAal2F,IAAmBvtC,GAAK0jI,eAAa,KA1I3F,IAAgCH,CA4IvB,IACgB,gBAAfhH,GACDj3H,GAA0B7B,KAAI,CAACzD,EAAI+b,IAClC,mBAACsnH,GAAA,EAAQ,CACPpvF,IAAKj0C,EACL+1H,cAAeh6G,EACf0P,UAAU,6CAEVutB,QAAS,IAAMj3C,EAAS,CAAE/B,QAE1B,mBAACsiE,GAAA,EAAa,CAACzjE,OAAQmB,YAGzBf,EAGV,CAgCWi8F,IAEH,mBAACt0C,GAAA,EAAO,CAAC+8E,KAAG,EAAC78E,UAAW+2E,EAAoBh3E,KAAMA,EAAME,YAAa22E,KAIxEb,GACC,mBAAC+G,GAAA,EAAoB,CACnBv8E,QAAwB,YAAfk1E,GACTvjF,QAASioF,GACTxhF,UAAWt8C,EAAK,0BAEhB,wBAAGsoB,UAAU,0BAGhBuxG,GACC,mBAAC6G,GAAA,EAAiB,CAChBpjI,OAAQiF,QAAQi4H,GAChB7vH,OAAQ6vH,EACR9gF,QAAS0kF,KAGE,KGzerB,IAAerqF,EAAAA,EAAAA,KAPyBC,IACtC,MAAM2sF,GAAczsF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAOwsF,EAAc,mBAACA,EAAgB3sF,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ICK/D,IAAejQ,EAAAA,EAAAA,KAPwBC,IACrC,MAAM4sF,GAAa1sF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOysF,EAAa,mBAACA,EAAe5sF,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ICE7D,GAPuChQ,IACrC,MAAM4jF,GAAa1jF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,cAGlD,OAAOyjF,EAAa,mBAACA,EAAe5jF,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ECG7D,GAP8ChQ,IAC5C,MAAM6jF,GAAoB3jF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,qBAGzD,OAAO0jF,EAAoB,mBAACA,EAAsB7jF,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ECC3E,IAAejQ,EAAAA,EAAAA,KAPgB,KAC7B,MAAMsiF,GAAgBniF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAGrD,OAAOkiF,EAAgB,mBAACA,EAAa,MAAM,mBAACryE,GAAA,EAAO,KAAG,ICGxD,IAAejQ,EAAAA,EAAAA,KAPY,KACzB,MAAMuiF,GAAYpiF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAOmiF,EAAY,mBAACA,EAAS,MAAM,mBAACtyE,GAAA,EAAO,KAAG,ICEhD,IAAejQ,EAAAA,EAAAA,KANc,KAC3B,MAAMqiF,GAAcliF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAEnD,OAAOiiF,EAAc,mBAACA,EAAW,MAAM,mBAACpyE,GAAA,EAAO,KAAG,I,gBCoCpD,MAwGA,IAAejQ,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA2B,IAA3B,OAAEG,GAAQ,EACjB,MAAM4N,GAAOvL,EAAAA,EAAAA,IAAWxC,EAAQG,IACxBqwB,QAAS80G,GAAoBtlI,EAAO44B,aAAe,CAAC,GACpD1c,KAAMoiC,GAAct+C,EAAOsO,OAC7B,uBAAE5K,IAA2B1C,EAAAA,EAAAA,IAAehB,IAC5C,cAAE0X,GAAkB1X,EACpB+vD,EAAYhiD,IAAQowD,EAAAA,EAAAA,IAAcpwD,IAGtCnN,MAAOy9C,EAAW,eAClBhwC,EAAc,cACda,EAAa,aACbC,IACEnO,EAAAA,EAAAA,IAAehB,GAAQm6B,WAE3B,MAAO,CACL41B,YACAxhB,QAASxgC,GAAMuY,UAAUioB,QACzB72B,gBACA4mC,YACAgnF,kBACAjnF,cACAknF,YAAal3H,EACb8K,UAAWzV,IAA2B8+H,EAAAA,GAAAA,QACtCtzH,gBACAC,eACD,GA3Be+sC,EAxG8B,IAc5C,IAd6C,UACjD6T,EAAS,QACTxhB,EAAO,WACPi3F,EAAU,cACV9tH,EAAa,UACb4mC,EAAS,gBACTgnF,EAAe,UACfnsH,EAAS,YACTklC,EAAW,YACXknF,EAAW,aACXp2H,EAAY,cACZD,EAAa,QACbivC,EAAO,SACP3tC,GACD,EACC,MAAM,mBAAEi1H,IAAuBrvG,EAAAA,EAAAA,MAEzB3xB,GAAO81C,EAAAA,GAAAA,MACNmrF,EAAmBC,IAAwBnsF,EAAAA,EAAAA,IAAmB,IAE/DosF,GADwBjjE,EAAAA,GAAAA,GAAY+iE,KACcA,GAExD1+E,EAAAA,GAAAA,GAAe,CACbx2C,WACAy2C,OAAQ9I,IAGV,MAAMohF,GAAYjkF,EAAAA,EAAAA,KAAQ,IACjB/M,EAAUA,EAAQxpC,KAAK8gI,GAAWA,EAAOz2H,SAAU,IACzD,CAACm/B,IAEEu3F,GAAqBpoF,EAAAA,EAAAA,KAAa98C,IACtC6kI,EAAmB,CAAE7kI,SAAQ,GAC5B,CAAC6kI,IAEEM,GAAezqF,EAAAA,EAAAA,KAAQ,KAE3B,MAAM22B,GAAYlpE,EAAAA,EAAAA,MAAY6S,MAAMM,KAC9B8pH,EAAqBV,GAAkBW,EAAAA,EAAAA,IAAkBX,EAAiBrzD,EAAW5zB,GAAe,GAE1G,OAAOohF,EAAAA,EAAAA,KACL9pH,EAAAA,EAAAA,IAAO,IACFqwH,KACC72H,GAAgB,MAChBD,GAAiB,KACpBlK,QAAQoK,IACT,MAAM+S,EAAO8vD,EAAU7iE,GAOvB,OACGmwH,EAAUp1H,SAASiF,IACjBA,IAAWsI,KACTyK,KAASuB,EAAAA,EAAAA,IAAUvB,KAAW4tC,GAAa5tC,EAAK+jH,oBAAqB,IAG9E5nF,EACD,GACA,CACDgnF,EAAiBhnF,EAAWD,EAAalvC,EAAcD,EAAewI,EAAe6nH,EAAWxvE,IAG5Fo2E,GAAiBzoF,EAAAA,EAAAA,KAAY,KAC7BgoF,EAAkBh+H,SACpB+9H,EAAmB,CAAE7kI,MAAO,KAC5B4kI,EAAWE,GACb,GACC,CAACA,EAAmBD,EAAoBD,IAE3C,OACE,0BAAKz4G,UAAU,kBACb,0BAAKA,UAAU,wBACb,mBAACq5G,GAAA,EAAM,CACLnJ,QAAS8I,EACTM,YAAaX,EACbY,YAAajoF,EACbkoF,kBAAmB9hI,EAAK,yBACxB+hI,cAAc,4BACdrtH,UAAWosH,EACXkB,oBAAqBd,EACrBe,eAAgBZ,EAChBa,gBAAiBf,IAGnB,mBAACV,GAAA,EAAoB,CACnBv8E,QAAS3hD,QAAQ0+H,EAAkBh+H,QACnCuzD,SAAU9hD,EACV4nC,UAAWt8C,EAAK,yBAChB61C,QAAS6rF,GAERhtH,EACC,mBAACuhC,GAAA,EAAO,CAACC,MAAM,UAEf,wBAAG5tB,UAAU,uBAIf,KCnIV,IAAeyrB,EAAAA,EAAAA,KAPyBC,IACtC,MAAM8jF,GAAc5jF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAGnD,OAAO2jF,EAAc,mBAACA,EAAgB9jF,GAAY,mBAACgQ,GAAA,EAAO,KAAG,ICG/D,IAAejQ,EAAAA,EAAAA,KAPuBC,IACpC,MAAM+jF,GAAY7jF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAGjD,OAAO4jF,EAAY,mBAACA,EAAc/jF,GAAY,mBAACgQ,GAAA,EAAO,KAAG,IC0CrDm+E,GAAqB,IAAMxiI,EAAAA,IAC3ByiI,GAAqBv/H,OAAOC,KAAKu/H,EAAAA,IAAoBp/H,OAAS,EAC9Dq/H,GAA2Bz/H,OAAOC,KAAKuyH,EAAAA,IAAmBpyH,OAAS,EAEzE,SAASs/H,KACP,MAAMC,EAAcv3H,SAASwoC,cAAc,mCACvC+uF,GACFA,EAAYjsG,MAEhB,CAEA,MA8SA,IAAewd,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA6B,IAA7B,SAAEi9C,GAAU,EACnB,MAAM,OAAE98C,EAAM,SAAEC,IAAaC,EAAAA,EAAAA,IAAyBL,IAAW,CAAC,EAC5DknI,GAAuBC,EAAAA,EAAAA,IAA2BnnI,IAClD,WAAEuQ,EAAU,4BAAEy0C,IAAgChkD,EAAAA,EAAAA,IAAehB,GAC7DonI,EAAuBjnI,EAASoQ,EAAWxF,SAAS5K,IAASuQ,gBAAanQ,EAE1EuyE,GADU3yE,GAASqC,EAAAA,EAAAA,IAAWxC,EAAQG,IAASsC,aAAUlC,IAC9ByG,QAAQ5G,GAAYA,IAAamB,EAAAA,IAElE,MAAO,CACLg5H,YAAY8M,EAAAA,EAAAA,IAA4BrnI,EAAQi9C,GAChD98C,SACAC,WACA0yE,gBACAw0D,eAAgBtgI,QAAQ7G,GAAU+mI,GAClCliF,8BACAoiF,uBACD,GAjBelrF,EA9S2B,IASzC,UAT0C,WAC9Cq+E,EAAU,OACVp6H,EAAM,SACNC,EAAQ,SACR68C,EAAQ,cACR61B,EAAa,eACbw0D,EAAc,4BACdtiF,EAA2B,qBAC3BoiF,GACD,EACC,MAAM,eACJG,EAAc,iBACdlO,EAAgB,qBAChBt5H,EAAoB,sBACpBm5H,EAAqB,kBACrBC,EAAiB,iBACjBqO,EAAgB,eAChBC,EAAc,6BACd1I,EAA4B,yBAC5BxF,EAAwB,iBACxBD,EAAgB,wBAChBoO,EAAuB,oBACvBC,EAAmB,4BACnBC,EAA2B,sBAC3BC,EAAqB,oBACrBC,IACE1xG,EAAAA,EAAAA,OAEIxhB,MAAOuyB,IAAgBy5B,EAAAA,GAAAA,MACxBm4D,EAAcgP,IAAmBvuF,EAAAA,EAAAA,IAAuBghF,EAAAA,GAAAA,UACxDxB,EAAkBgP,IAAuBxuF,EAAAA,EAAAA,IAA4BsgF,EAAAA,GAAAA,UACrEmO,EAAsBC,IAA2B1uF,EAAAA,EAAAA,OACjD2uF,EAAyBC,IAA8B5uF,EAAAA,EAAAA,MACxD6uF,EAAiBtP,IAAiByB,EAAAA,GAAAA,QAElCz4H,OAAwBxB,IAAfg6H,EACT/C,EAAY+C,IAAeuM,EAAAA,GAAAA,SAC3BxO,EAAWiC,IAAeuM,EAAAA,GAAAA,OAC1BrP,EAAe8C,IAAeuM,EAAAA,GAAAA,WAC9BvO,EAAegC,IAAeuM,EAAAA,GAAAA,WAC9BtO,EAAsB+B,IAAeuM,EAAAA,GAAAA,kBACrCrO,EAAkB8B,IAAeuM,EAAAA,GAAAA,cACjCpO,EAAc6B,IAAeuM,EAAAA,GAAAA,UAC7BnO,EAAgB4B,IAAeuM,EAAAA,GAAAA,YAC/BhO,EAAsByB,IAAeuM,EAAAA,GAAAA,cACrClO,EAAkB2B,IAAeuM,EAAAA,GAAAA,YACjCjO,EAAiB0B,IAAeuM,EAAAA,GAAAA,UAChCwB,EAAenhG,GAAeE,EAAAA,KAE7BiY,EAAsBg7E,IAA2B9gF,EAAAA,EAAAA,KAAUz3C,GAE5D06H,GAAyE,QAAtD,GAAGz6D,EAAAA,GAAAA,GAAiBu4D,GAAY,GAAO+M,UAAe,SAAK,EAE9EjsG,IAAQqiB,EAAAA,EAAAA,KAAY,WAA2B,IAA1B6qF,IAAiB,UAAH,+CACvC,OAAQhO,GACN,KAAKuM,EAAAA,GAAAA,cACH/H,EAA6B,CAAEr7H,uBAAwB8+H,EAAAA,GAAAA,SACvD,MACF,KAAKsE,EAAAA,GAAAA,SACH,GAAIuB,GAAkBE,EAAgB,CACpCR,EAAgBvN,EAAAA,GAAAA,SAChB,KACF,CACA+M,EAAe,CAAEl3H,OAAO,GAAS,CAAEm4H,gBAAgB,IACnD,MACF,KAAK1B,EAAAA,GAAAA,WACH,OAAQ9N,GACN,KAAKc,EAAAA,GAAAA,QACHT,IACA,MACF,KAAKS,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,iBACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,QACL,KAAKA,EAAAA,GAAAA,UACL,KAAKA,EAAAA,GAAAA,aACL,KAAKA,EAAAA,GAAAA,oBACHkO,EAAoBlO,EAAAA,GAAAA,SACpB,MACF,KAAKA,EAAAA,GAAAA,2BACL,KAAKA,EAAAA,GAAAA,kBACL,KAAKA,EAAAA,GAAAA,qBACHkO,EAAoBlO,EAAAA,GAAAA,kBACpBoO,OAAwB3nI,GACxB6nI,OAA2B7nI,GAC3B,MACF,KAAKu5H,EAAAA,GAAAA,gBACL,KAAKA,EAAAA,GAAAA,mBACL,KAAKA,EAAAA,GAAAA,eACL,KAAKA,EAAAA,GAAAA,mBACHkO,EAAoBlO,EAAAA,GAAAA,oBACpB,MACF,KAAKA,EAAAA,GAAAA,WACL,KAAKA,EAAAA,GAAAA,WACHkO,EAAoBlO,EAAAA,GAAAA,SACpB6N,EAAoB,CAAExnI,OAAQA,EAASoxB,YAAQhxB,IAC/Cg5H,EAAyB,CAAEp5H,OAAQA,EAASoxB,YAAQhxB,IAIxD,MAEF,KAAKumI,EAAAA,GAAAA,kBACHY,IACA,MACF,KAAKZ,EAAAA,GAAAA,WACHxN,IACA,MACF,KAAKwN,EAAAA,GAAAA,OACHE,KACAjnI,IACA,MAEF,KAAK+mI,EAAAA,GAAAA,cACHE,KACA9N,EAAsB,CAAEt4H,WAAOL,IAC/B,MACF,KAAKumI,EAAAA,GAAAA,UACHE,KACA7N,EAAkB,CAAEv4H,WAAOL,IAC3B,MAEF,KAAKumI,EAAAA,GAAAA,YACHU,IACA,MACF,KAAKV,EAAAA,GAAAA,YACHe,IACA,MACF,KAAKf,EAAAA,GAAAA,UACHgB,IAGN,GAAG,CACDvN,EAAY8N,EAAgBd,EAAgBC,EAAkBzI,EAC9D/F,EAAkBK,EAAkBt5H,EAAsBm5H,EAAuBC,EACjFI,EAA0Bp5H,EAAQwnI,EAAqBrO,EAAkBoO,EACzEG,EAAuBC,IAGnBW,IAAyB/qF,EAAAA,EAAAA,KAAY,CAACmnF,EAAU6D,KACpDR,EAAwBrD,GACxBuD,EAA2BM,EAAW,GACrC,IAEGC,IAA6BjrF,EAAAA,EAAAA,KAAa6hF,IAC9CkI,EAAe,CAAEtnI,OAAQA,EAASo/H,aAAY,GAC7C,CAACkI,EAAgBtnI,IA2CpB,SAASq8F,GAAchsF,GACrB,IAA6B,IAAzBisH,GAIJ,OAAQA,IACN,KAAKqK,EAAAA,GAAAA,cACH,OACE,mBAAC,GAAc,CACbvxF,IAAKp1C,EACLA,OAAQA,EACRqQ,SAAUzO,GAAUyO,EACpBg1H,WAAYmD,GACZxqF,QAAS9iB,KAGf,KAAKyrG,EAAAA,GAAAA,SACH,OACE,mBAAC,GAAO,CACNvxF,IAAKp1C,EACLA,OAAQA,EACR2V,QAASg9D,EAAgB1yE,OAAWG,EACpCw4H,aAAcA,EACd97E,SAAUA,EACVyhF,qBAAsBqJ,IAG5B,KAAKjB,EAAAA,GAAAA,OACH,OAAO,mBAAC,GAAW,CAAC3mI,OAAQA,EAASC,SAAUA,EAAW+9C,QAAS9iB,GAAO7qB,SAAUzO,GAAUyO,IAChG,KAAKs2H,EAAAA,GAAAA,WACH,OACE,mBAAC,GAAU,CACTvxF,IAAKp1C,EACLA,OAAQA,EACR0vD,cAAempE,EACfmP,wBAAyBA,EACzBF,qBAAsBA,EACtBz3H,SAAUzO,GAAUyO,EACpBs/C,eAAgBk4E,EAChBY,mBAAoBH,GACpBtqF,QAAS9iB,KAIf,KAAKyrG,EAAAA,GAAAA,WACH,OAAO,mBAAC,GAAU,CAAC3mI,OAAQA,IAC7B,KAAK2mI,EAAAA,GAAAA,kBACH,OAAO,mBAAC,GAAiB,CAAC3mI,OAAQA,EAASqQ,SAAUzO,GAAUyO,IACjE,KAAKs2H,EAAAA,GAAAA,cACH,OAAO,mBAAC,GAAa,CAAC3oF,QAAS9iB,GAAO7qB,SAAUzO,GAAUyO,IAC5D,KAAKs2H,EAAAA,GAAAA,UACH,OAAO,mBAAC,GAAS,CAAC3oF,QAAS9iB,GAAO7qB,SAAUzO,GAAUyO,IACxD,KAAKs2H,EAAAA,GAAAA,YACH,OAAO,mBAAC,GAAW,CAAC3oF,QAAS9iB,GAAO7qB,SAAUzO,GAAUyO,IAC1D,KAAKs2H,EAAAA,GAAAA,YACH,OAAO,mBAAC,GAAW,CAAC3oF,QAAS9iB,GAAO7qB,SAAUzO,GAAUyO,IAC1D,KAAKs2H,EAAAA,GAAAA,UACH,OAAO,mBAAC,GAAS,CAAC3oF,QAAS9iB,GAAO7qB,SAAUzO,GAAUyO,IAI5D,CAEA,OAxGAwnC,EAAAA,EAAAA,KAAU,IAAOj2C,GAASwgD,EAAAA,GAAAA,GAAsBlnB,SAAS96B,GAAY,CAACwB,EAAQs5B,MAE9E2c,EAAAA,EAAAA,KAAU,KACRlvC,YAAW,KACTwxH,GAAyBv4H,EAAO,GAC/B6kI,GAAmB,GACrB,CAAC7kI,KAEJi2C,EAAAA,EAAAA,KAAU,KACJovF,IACFY,EAAoBZ,GACpBQ,OAA4BrnI,GAC9B,GACC,CAAC6mI,EAAsBQ,KAG1B5vF,EAAAA,EAAAA,KAAU,KACJj2C,GAAUumI,GACZjtG,IACF,GAEC,CAACitG,IAGJ7rD,IAA4B,IAAkB,IAAhB8iC,GAAW,EACnCA,IAAep/G,IACjB4nI,EAAgBvN,EAAAA,GAAAA,SAChBwN,EAAoBlO,EAAAA,GAAAA,SACtB,GACC,CAAC35H,KAEJ6mD,EAAAA,GAAAA,GAAe,CACbx2C,SAAU82H,IACR/M,IAAeuM,EAAAA,GAAAA,UACZvM,IAAeuM,EAAAA,GAAAA,YACfvM,IAAeuM,EAAAA,GAAAA,eACfvM,IAAeuM,EAAAA,GAAAA,aACfvM,IAAeuM,EAAAA,GAAAA,WACpB7/E,OAAQ,IAAM5rB,IAAM,KAmEpB,0BACE/5B,GAAG,sBACHyrB,UAAYu6G,OAA+B/mI,EAAd,aAE5B+nI,GACC,0BAAKv7G,UAAU,mBAAmButB,QAASjf,KAE7C,0BAAK/5B,GAAG,eACN,mBAAC,GAAW,CACVnB,OAAQA,EACRC,SAAUA,EACVi4H,aAAct2H,EACdy1H,UAAWA,EACXc,SAAUA,EACVb,aAAcA,EACdc,aAAcA,EACdC,oBAAqBA,EACrBC,gBAAiBA,EACjBC,YAAaA,EACbC,cAAeA,EACfC,gBAAiBA,EACjBC,eAAgBA,EAChBC,oBAAqBA,EACrBC,aAAcA,EACdC,iBAAkBA,EAClB76E,QAAS9iB,GACTy0B,eAAgBk4E,IAElB,mBAACptF,GAAA,EAAU,CACTpP,KAAO8T,GAAwB0F,EAA+B,OAAS,YACvEuD,YAAas+E,GAAqBE,GAClClsF,UAAW48E,EAAeoP,GAAqB7N,EAAmByD,GAClExxE,eAAa,EACbC,oBACEuxE,KAAwBqK,EAAAA,GAAAA,kBACpBA,EAAAA,GAAAA,gBAAgCvmI,GAGrCi8F,KAGD,KC3VV,IAAehkD,EAAAA,EAAAA,KANwB,IAAgB,IAAf,OAAEz2C,GAAQ,EAChD,MAAM8mI,GAAclwF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgB72C,GAEnE,OAAO8mI,EAAc,mBAACA,EAAW,WAAMtoI,CAAS,ICFlD,IAAIuoI,GAAsC,GACtCC,IAAU,EAEC,SAASC,GAASn1H,EAAaw1F,GAC5Cy/B,GAAiBljI,KAAK,CAAEiO,MAAKw1F,aACxB0/B,KACHA,IAAU,EACVjgI,YAAWmQ,gBAOfA,iBACE,IAAI8K,EAAQ,EACZ,IAAK,MAAMklH,KAAmBH,GAC5BI,GAAYD,GACZllH,IArBoB,KAsBhBA,UACIqH,EAAAA,EAAAA,IAtBW,KAuBjBrH,EAAQ,GAGZ+kH,GAAmB,EACrB,CAjBYK,GACNJ,IAAU,CAAK,GAXE,KAcvB,CAeA,SAASG,GAAY,GAAoC,IAApC,IAAEr1H,EAAG,SAAEw1F,GAA2B,EACrD,MAAMz5F,EAAOF,SAASmmD,cAAc,KACpCjmD,EAAKC,KAAOgE,EACZjE,EAAKo5H,SAAW3/B,EAChB,IACEz5F,EAAKw5H,OAIP,CAHE,MAAOx1H,GAEPgD,QAAQC,MAAMjD,EAChB,CACF,CCtBA,MAEMy1H,GAAoB,IAAI5pG,IACxB6pG,GAAqB,IAAI7pG,IAqF/B,IAAe+Y,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACjBl8C,IAGQ,CACLgL,iBAHsBhK,EAAAA,EAAAA,IAAehB,GAAQgL,gBAAgBD,SAI7DjG,SAHe9E,EAAO8E,SAASiG,YAHjBmxC,EAnFoB,IAGlC,IAHmC,gBACvClxC,EAAe,SACflG,GACD,EACC,MAAM,4BAAEykI,EAA2B,iBAAE19H,IAAqBuqB,EAAAA,EAAAA,MAEpD0vE,GAAeC,EAAAA,GAAAA,GAXQ,KAWgC,GAEvDyjC,GAA0B9rF,EAAAA,EAAAA,KAAaz4C,IAC3CqkI,GAAmBtoG,IAAI/7B,GACvB6gG,GAAa,KACPwjC,GAAmBvuF,OACrBwuF,EAA4B,CAAEzkI,SAAUm8B,MAAMzjB,KAAK8rH,MACnDA,GAAmBG,QACrB,GACA,GACD,CAACF,EAA6BzjC,KAEjC9tD,EAAAA,EAAAA,KAAU,KACR,MAAM0xF,EAAiBpiI,OAAOqe,QAAQ3a,GAAiBjG,KAAI,QAAE5E,EAAQoE,GAAW,SAC9EA,EAAWQ,KAAKzD,GAAOwD,EAAS3E,GAAQ+b,KAAK5a,IAAI,IAChDw/F,OAEE4oC,EAAehiI,OAKpBgiI,EAAex+H,SAASjG,IACtB,GAAIokI,GAAkBnrH,IAAIjZ,GACxB,OAEFokI,GAAkBroG,IAAI/7B,GACtB,MAAM0kI,GAAer3E,EAAAA,EAAAA,IAAoBrtD,EAAS,YAClD,IAAK0kI,EAEH,YADAH,EAAwBvkI,GAI1B,MAAMwyD,EAAY7vB,GAAAA,GAA0B+hG,GAE5C,GAAIlyE,EAGF,OAFAuxE,GAASvxE,GAAWmyE,EAAAA,EAAAA,IAA0B3kI,SAC9CukI,EAAwBvkI,GAI1B,MAAM,SACJyK,EAAQ,MAAEigC,EAAK,MAAEwnB,GACflyD,EAAQ2H,QAEZ,KADmB8C,GAAYigC,GAASwnB,IAAQpc,MAAQ,GACxC8uF,EAAAA,KAAoBC,EAAAA,KAAsBC,EAAAA,GAKxD,OAJAl+H,EAAiB,CACf5G,QAAS,6EAEXukI,EAAwBvkI,GAI1B,MAAM+kI,GAAcluD,EAAAA,EAAAA,IAAsB72E,EAAS,YACnD2iC,GAAAA,GAAkB+hG,EAAcK,GAAa,GAAM3zH,MAAM9Q,IACvD,GAAIykI,IAAgBniG,EAAAA,GAAAA,YAA4B,CAC9C,MAAMh0B,EAAM,IAAI2T,IAAIjiB,EAAQxC,OAAO2M,SAASu6H,SACtC5gC,GAAWugC,EAAAA,EAAAA,IAA0B3kI,GAC3C4O,EAAI8T,aAAaxJ,IAAI,WAAY+rH,mBAAmB7gC,IAC7BtmG,OAAOC,KAAK6Q,EAAIpM,aACvBmyC,iBAAiB,gBAAgB,KAC/C/tC,EAAiB,CACf5G,QAAS,yEACT,GAEN,MAAWM,GACTyjI,GAASzjI,GAAQqkI,EAAAA,EAAAA,IAA0B3kI,IAG7CukI,EAAwBvkI,EAAQ,GAChC,IApDFokI,GAAkBI,OAqDlB,GACD,CAAC3kI,EAAUkG,EAAiBu+H,EAA6BC,EAAyB39H,GAErE,K,gBC1FlB,MAsEA,IAAe2sC,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA+B,IAA/B,WAAEyU,GAAY,EACrB,MAAM,OAAEtU,GAAWsU,GAAc,CAAC,EAC5B1G,EAAO5N,IAAUqC,EAAAA,EAAAA,IAAWxC,EAAQG,GAG1C,MAAO,CACLyjG,QAHc58F,QAAQ+G,KAASqjH,EAAAA,EAAAA,IAAiBrjH,EAAMxM,EAAAA,IAIvD,GARe26C,EA3DyB,IAAwC,IAAvC,WAAEznC,EAAU,UAAE01H,EAAS,QAAEvmC,GAAS,EAC9E,MAAM,UAAEwmC,EAAS,gBAAEt/H,IAAoBsrB,EAAAA,GAAAA,MACjC3xB,GAAO81C,EAAAA,GAAAA,MACP,IAAE1mC,EAAG,OAAE1T,EAAM,UAAEuG,GAAc+N,GAAc,CAAC,EAC5C1S,EAASiF,QAAQ6M,GAEjBirG,GAAoBC,EAAAA,GAAAA,GAAqB5+G,IAC/CilF,EAAAA,GAAAA,IAAY,KACV05B,EAAkB,CAAEt9G,KAAM,eAAgB,GACzCO,GAAU6hG,EApBmB,SAoBmBrjG,GAEnD,MAAM8pI,GAAgB3sF,EAAAA,EAAAA,KAAagoC,IACjC,IACE,MAAMpyE,EAAOgG,KAAKa,MAAMurE,EAAMpyE,MACP,gBAAnBA,EAAKg3H,YACPx/H,EAAgB,CAAER,WAAYnK,EAAQoE,WAAY,CAACmC,GAAY6D,aAAa,IAC5E6/H,KAGqB,eAAnB92H,EAAKg3H,YACPx/H,EAAgB,CAAER,WAAYnK,EAAQoE,WAAY,CAACmC,KACnD0jI,IAGF,CADA,MAAOl5H,GACP,IAED,CAAC/Q,EAAQiqI,EAAW1jI,EAAWoE,IAE5By/H,GAAa7sF,EAAAA,EAAAA,KAAagoC,IAC9BA,EAAM/V,cAAcz0C,OAAO,GAC1B,IAOH,OALA8c,EAAAA,EAAAA,KAAU,KACRj1C,OAAO62C,iBAAiB,UAAWywF,GAC5B,IAAMtnI,OAAO82C,oBAAoB,UAAWwwF,KAClD,CAACA,IAGF,mBAACG,GAAA,EAAK,CACJz9G,UAAU,YACVhrB,OAAQA,EACRo8C,QAASisF,EACTn6H,MAAOk6H,EACPM,gBAAc,GAEb1oI,GACC,6BACEgrB,UAAU,aACVohE,OAAQo8C,EACRxuF,IAAKloC,EACL5D,MAAOxL,EAAK,cACZimI,QAAQ,yDACRC,MAAM,eAGJ,KC1EZ,IAAenyF,EAAAA,EAAAA,KAPgB,IAAgB,IAAf,OAAEz2C,GAAQ,EACxC,MAAM6oI,GAAgBjyF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB72C,GAGvE,OAAO6oI,EAAgB,mBAACA,EAAa,WAAMrqI,CAAS,ICGtD,IAAei4C,EAAAA,EAAAA,KAPU,IAAgB,IAAf,OAAEz2C,GAAQ,EAClC,MAAM8oI,GAAUlyF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,WAAY72C,GAG3D,OAAO8oI,EAAU,mBAACA,EAAO,WAAMtqI,CAAS,ICK1C,IAAei4C,EAAAA,EAAAA,KARoCC,IACjD,MAAM,OAAE12C,GAAW02C,EACbqyF,GAAyBnyF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,0BAA2B72C,GAGzF,OAAO+oI,EAAyB,mBAACA,EAA2BryF,QAAYl4C,CAAS,ICInF,IAAei4C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,IAAE5kC,GAAQ4kC,EACVsyF,GAAgBpyF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkB/kC,GAGvE,OAAOk3H,EAAgB,mBAACA,EAAkBtyF,QAAYl4C,CAAS,ICGjE,IAAei4C,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE12C,GAAW02C,EACbuyF,GAAkBryF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB72C,GAG3E,OAAOipI,EAAkB,mBAACA,EAAoBvyF,QAAYl4C,CAAS,ICCrE,IAAei4C,EAAAA,EAAAA,KARuBC,IACpC,MAAM,YAAE9B,GAAgB8B,EAClBwyF,GAAYtyF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAcjC,GAG/D,OAAOs0F,EAAY,mBAACA,EAAcxyF,QAAYl4C,CAAS,ICKzD,IAAei4C,EAAAA,EAAAA,KAP8BC,IAC3C,MAAM,SAAEjoC,GAAaioC,EACfyyF,GAAmBvyF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqBpoC,GAE7E,OAAO06H,EAAmB,mBAACA,EAAgB,WAAM3qI,CAAS,ICG5D,IAAei4C,EAAAA,EAAAA,KAPuBC,IACpC,MAAM,SAAEjoC,GAAaioC,EACf0yF,GAAYxyF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,aAAcpoC,GAE/D,OAAO26H,EAAY,mBAACA,EAAS,WAAM5qI,CAAS,I,uOCG9C,MA6BA,IAAei4C,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACjBl8C,IACQ,CACL6Q,cAAc7P,EAAAA,EAAAA,IAAehB,GAAQ6Q,gBAHvBqrC,EA7B8B,IAAsB,IAArB,aAAErrC,GAAc,EACjE,MAAM,SAAExN,IAAa+yB,EAAAA,EAAAA,MAEfg1G,EAAY,KAChB/nI,EAAS,CAAE/B,QAAIf,GAAa,CAAEioI,gBAAgB,GAAO,EAGjD6C,EAA8C,IAAgC,IAA/B,OAAElrI,EAAM,KAAEqB,EAAI,SAAEpB,GAAU,GAC7E4mD,EAAAA,GAAAA,GAAe,CACbx2C,UAAU,EACVc,MAAMg6H,EAAAA,EAAAA,IAAmBnrI,EAAQqB,EAAMpB,GACvC6mD,OAAQmkF,GACR,EAGJ,OACE,8BACGv6H,GAAc9L,KAAI,CAACgT,EAAasF,IAC/B,mBAACguH,EACC,IACA91F,IAAM,GAAEx9B,EAAY5X,UAAU4X,EAAY3X,YAAY2X,EAAYvW,QAAQ6b,KAEtEtF,MAGJ,KCzBV,IAAeygC,EAAAA,EAAAA,KAR6BC,IAC1C,MAAM,OAAE12C,GAAW02C,EACb8yF,GAAkB5yF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,mBAAoB72C,GAG3E,OAAOwpI,EAAkB,mBAACA,EAAoB9yF,QAAYl4C,CAAS,ICGrE,IAAei4C,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,OAAE12C,GAAW02C,EACb+yF,GAAqB7yF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuB72C,GAGjF,OAAOypI,EAAqB,mBAACA,EAAuB/yF,QAAYl4C,CAAS,ICG3E,IAAei4C,EAAAA,EAAAA,KARyBC,IACtC,MAAM,OAAEhY,GAAWgY,EACbgzF,GAAc9yF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,eAAgBnY,GAGnE,OAAOgrG,EAAc,mBAACA,EAAgBhzF,QAAYl4C,CAAS,ICG7D,IAAei4C,EAAAA,EAAAA,KAR2BC,IACxC,MAAM,IAAEhd,GAAQgd,EACVizF,GAAgB/yF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,iBAAkBnd,GAGvE,OAAOiwG,EAAgB,mBAACA,EAAkBjzF,QAAYl4C,CAAS,ICGjE,IAAei4C,EAAAA,EAAAA,KARmCC,IAChD,MAAM,IAAEhd,GAAQgd,EACVkzF,GAAwBhzF,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,yBAA0Bnd,GAGvF,OAAOkwG,EAAwB,mBAACA,EAA0BlzF,QAAYl4C,CAAS,ICZjF,IAAgB,KAAO,wBCwCjBqrI,GAAkB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,WAmKhF,IAAepzF,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACjBl8C,IAAuB8tC,EAAAA,EAAAA,KAAK9sC,EAAAA,EAAAA,IAAehB,GAAS,CAAC,cADpCk8C,EAjKsB,IAAkB,IAAjB,SAAEjnC,GAAU,EAErD,MAAM42H,GAAYvvF,EAAAA,EAAAA,IAA0B,MACtCwvF,GAAcxvF,EAAAA,EAAAA,IAAmB,IACjCyvF,GAAkBzvF,EAAAA,EAAAA,KAAO,GACzBlV,GAAaw5B,EAAAA,GAAAA,KACb4lB,GAAcC,EAAAA,GAAAA,MACd,SAAExpC,IAAaC,EAAAA,EAAAA,MAEf8uF,EAAwB/uF,EAAW,GAAK,KACxC,iBACJ/nC,EAAgB,IAAER,EAAG,MAAEE,EAAK,KAAED,EAAI,OAAEE,GAClCI,GAAY,CAAC,EAEXg3H,GAAmBvuF,EAAAA,EAAAA,KAAY,SAAC4tB,EAAWE,GAA8C,IAAnC/kC,EAAS,UAAH,6CAAGulG,EACnE,IAAK,IAAI3uH,EAAI,EAAGA,EAAIopB,EAAQppB,IAAK,CAC/B,MAAM6uH,EAAW7uH,EAAI,EACf8uH,EAAM,CACVjlG,EAAGokC,GAAK4gE,GAAY,GAAM,KAC1BlkG,EAAO,IAAJwjC,GAEC4gE,EAAUl/H,KAAKwZ,SAAW4kD,EAAI,IAE9B+gE,EAAW,CACfnlG,EAAGglG,EAAWE,GAAqB,EAAXA,EACxBpkG,GAHewjC,EAAI,EAAIt+D,KAAKwZ,SAAW8kD,GAMnC8gE,EAAcV,GAAgB1+H,KAAKG,MAAMH,KAAKwZ,SAAWklH,GAAgBlkI,SACzEqzC,EAhCkB,GAiCxB+wF,EAAY7+G,QAAQrnB,KAAK,CACvBumI,MACApxF,OACAJ,MAAO2xF,EACPD,WACAE,QAASxxF,EACTyxF,iBAAkC,GAAhBt/H,KAAKwZ,SACvB+lH,SAAU,EACVC,YAAaxgI,KAAKC,MAClBwgI,WAAY,GAEhB,CACF,GAAG,CAACX,IAEEY,GAAelvF,EAAAA,EAAAA,KAAY,KAC/B,IAAKmuF,EAAU5+G,UAAY8+G,EAAgB9+G,QACzC,OAEF,MAAM2oC,EAASi2E,EAAU5+G,QAEnBipC,EAAMN,EAAOG,WAAW,MAC9B,IAAKG,EACH,OAGF,MAAQthD,MAAOi4H,EAAah4H,OAAQi4H,GAAiBl3E,EACrDM,EAAI62E,UAAU,EAAG,EAAGF,EAAaC,GAEjC,MAAME,EAA+B,GACrClB,EAAY7+G,QAAQ/hB,SAAQ,CAACiwF,EAAG99E,KAC9B,MAAM,IACJ8uH,EAAG,SACHE,EAAQ,KACRtxF,EAAI,MACJJ,EAAK,QACL4xF,EAAO,iBACPC,EAAgB,SAChBC,EAAQ,YACRC,EAAW,WACXC,GACExxC,EACEvxB,GAAQ19D,KAAKC,MAAQugI,GAAe,IAEpCO,EAAS,CACb/lG,EAAGilG,EAAIjlG,EAAImlG,EAASnlG,EAAI0iC,EACxB5hC,EAAGmkG,EAAInkG,EAAIqkG,EAASrkG,EAAI4hC,GAGpBsjE,EAAc,CAClBhmG,EAAgB,IAAbmlG,EAASnlG,EACZc,EAAGqkG,EAASrkG,GAAY,IAAP4hC,GAGbujE,EAAapyF,EAAO7tC,KAAK28D,IAAI38D,KAAKkgI,IAAIT,EAAaH,IACnDa,EAAc,EAAIV,EAAaH,GAAoBt/H,KAAKm1E,GAAK,KAE7DirD,EAAgBX,EAAa,EAC7BY,EAAiBrhI,KAAKC,MAG5B,GADqB8gI,EAAOjlG,EAAI8kG,EAAe3xC,EAAEpgD,KAG/C,YADAiyF,EAAiBpnI,KAAKu1F,GAIxB,MAAMqyC,EAAc,IACfryC,EACHgxC,IAAKc,EACLZ,SAAUa,EACVX,QAASY,EACTV,SAAUY,EACVX,YAAaa,EACbZ,WAAYW,GAGdxB,EAAY7+G,QAAQ5P,GAAKmwH,EACzBt3E,EAAIF,UAAYrb,EAChBub,EAAIu3E,YACJv3E,EAAIw3E,QACFvB,EAAIjlG,EACJilG,EAAInkG,EACJ+S,EACAwxF,EACAE,EACA,EACA,EAAIv/H,KAAKm1E,IAEXnsB,EAAIy3E,MAAM,IAEZ7B,EAAY7+G,QAAU6+G,EAAY7+G,QAAQjoB,QAAQm2F,IAAO6xC,EAAiB7iI,SAASgxF,KAC/E2wC,EAAY7+G,QAAQvlB,OACtB2mG,sBAAsBu+B,GAEtBb,EAAgB9+G,SAAU,CAC5B,GACC,IAkBH,IAhBA+gC,EAAAA,GAAAA,IAAc,IAAwB,IAChC4/E,GADUC,GAAiB,EAU/B,OARIA,IAAqB34H,IACvB+2H,EAAiBr3H,GAASwyB,EAAWxyB,MAAOC,GAAUuyB,EAAWvyB,QACjE+4H,EAAc9kI,WAAW09E,EAvIE,KAwItBulD,EAAgB9+G,UACnB8+G,EAAgB9+G,SAAU,EAC1BohF,sBAAsBu+B,KAGnB,KACL7iI,aAAa6jI,EAAY,CAC1B,GAEA,CAAC14H,EAAkBsxE,EAAaomD,KAE9B13H,GAAoBhJ,KAAKC,MAAQ+I,EAnJP,IAoJ7B,OAGF,MAAMymC,GAAQ68B,EAAAA,GAAAA,GACZxxE,QAAQ0N,IAAS,QAAOA,MACxB1N,QAAQ2N,IAAU,SAAQA,MAC1B3N,QAAQ4N,IAAW,UAASA,MAC5B5N,QAAQ6N,IAAY,WAAUA,OAGhC,OACE,0BAAKvT,GAAG,WAAWyrB,UAAW8uB,GAAAA,KAAaF,MAAOA,GAChD,6BAAQiC,IAAKiuF,EAAW9+G,UAAW8uB,GAAAA,OAAejnC,MAAOwyB,EAAWxyB,MAAOC,OAAQuyB,EAAWvyB,SAC1F,KCxLV,IAAe2jC,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,QAAEzc,GAAYyc,EACdq1F,GAAen1F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB5c,GAGrE,OAAO8xG,EAAe,mBAACA,EAAiBr1F,QAAYl4C,CAAS,ICG/D,IAAei4C,EAAAA,EAAAA,KAR8BC,IAC3C,MAAM,OAAE12C,GAAW02C,EACbs1F,GAAmBp1F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,oBAAqB72C,GAG7E,OAAOgsI,EAAmB,mBAACA,EAAqBt1F,QAAYl4C,CAAS,ICEvE,IAAei4C,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,OAAE12C,GAAW02C,EACbu1F,GAAer1F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB72C,GAGrE,OAAOisI,EAAe,mBAACA,EAAiBv1F,QAAYl4C,CAAS,ICG/D,IAAei4C,EAAAA,EAAAA,KAR0BC,IACvC,MAAM,OAAE12C,GAAW02C,EACbw1F,GAAet1F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,gBAAiB72C,GAGrE,OAAOksI,EAAe,mBAACA,EAAiBx1F,QAAYl4C,CAAS,ICI/D,IAAei4C,EAAAA,EAAAA,KARsCC,IACnD,MAAM,MAAEnjC,GAAUmjC,EACZy1F,GAA2Bv1F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,4BAA6BtjC,GAG7F,OAAO44H,EAA2B,mBAACA,EAA6Bz1F,QAAYl4C,CAAS,ICGvF,IAAei4C,EAAAA,EAAAA,KARgCC,IAC7C,MAAM,qBAAE01F,GAAyB11F,EAC3B21F,GAAqBz1F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,sBAAuBu1F,GAGjF,OAAOC,EAAqB,mBAACA,EAAuB31F,QAAYl4C,CAAS,ICE3E,IAAei4C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,kBAAEvtB,GAAsButB,EACxB41F,GAAuB11F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyB1tB,GAGrF,OAAOmjH,EAAuB,mBAACA,EAAyB51F,QAAYl4C,CAAS,ICG/E,IAAei4C,EAAAA,EAAAA,KARkCC,IAC/C,MAAM,eAAEj1C,GAAmBi1C,EACrB61F,GAAuB31F,EAAAA,GAAAA,GAAgBC,GAAAA,GAAAA,MAAe,wBAAyBp1C,GAGrF,OAAO8qI,EAAuB,mBAACA,EAAyB71F,QAAYl4C,CAAS,ICK/E,IAAei4C,EAAAA,EAAAA,KAVsCC,IACnD,MAAM,yBAAEjX,GAA6BiX,EAC/B81F,GAA2B51F,EAAAA,GAAAA,GAC/BC,GAAAA,GAAAA,MAAe,4BAA6BpX,GAI9C,OAAO+sG,EAA2B,mBAACA,EAA6B91F,QAAYl4C,CAAS,IC6HvF,IAAIiuI,IAAiB,EAErB,MAiWA,IAAeh2F,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KAClB,CAACl8C,EAAQ,KAA6B,IAA7B,SAAEi9C,GAAU,EACnB,MACEloC,UACEC,OAAO,eACLF,EAAc,SAAEyY,EAAQ,yBAAEkhH,IAE7B,aACD14G,GACE/1B,GAEE,gBACJsU,EAAe,0BACf6sB,EAAyB,yBACzBK,EAAwB,eACxBh+B,EAAc,QACdw4B,EAAO,OACPyE,EAAM,iBACN3sB,EAAgB,0BAChB0B,EAAyB,wBACzBC,EAAuB,4BACvBuvC,EAA2B,WAC3BvwC,EAAU,YACVpM,EAAW,kBACXuI,EAAiB,0BACjBoD,EAAyB,cACzB5B,EAAa,QACbsB,EAAO,WACPrE,EAAU,gBACVgoC,EAAe,aACfx1C,EAAY,YACZ8Y,EAAW,QACXvC,EAAO,kBACP7C,EAAiB,wBACjBtR,IACEjD,EAAAA,EAAAA,IAAehB,IAEXG,OAAQw1B,EAAajvB,UAAWkvB,GAAmBvtB,EACrDq1D,EAAe/nC,GAAeC,GAChC3hB,EAAAA,EAAAA,IAAkBjU,EAAQ21B,EAAaC,QACvCr1B,EAEE4pI,GADc11H,IAAcR,EAAAA,EAAAA,IAAkBjU,EAAQyU,EAAWtU,OAAQsU,EAAW/N,aAC3DkG,QAAQ28E,MAAMt5E,MACvCy+H,EAAc1uI,EAAO0X,eAAgB0K,EAAAA,EAAAA,IAAWpiB,EAAQA,EAAO0X,oBAAiBnX,GAChF,OAAEJ,IAAWE,EAAAA,EAAAA,IAAyBL,IAAW,CAAC,EAExD,MAAO,CACL+1B,eACA44G,iBAAkB/9H,EAClBg+H,mBAAoB5nI,QAAQ7G,GAC5B0uI,mBAAmBnmI,EAAAA,EAAAA,IAAyB1I,EAAQi9C,GACpD6xF,mBAAmBC,EAAAA,EAAAA,IAAwB/uI,GAC3CgvI,oBAAoBC,EAAAA,EAAAA,IAAyBjvI,GAC7CkvI,iBAAkBloI,QAAQoL,EAAc1K,QACxCynI,WAAYnoI,QAAQ0M,EAAQhM,QAC5Bg2D,eACA5pD,mBACAs7H,sBAAuBpoI,QAAQgN,GAC/BgxC,8BACAxvC,4BACAC,0BACA45H,oBAAoBx7F,EAAAA,EAAAA,IAAyB7zC,GAC7Ci2C,kBAAmBt7B,EAAc3a,EAAOg2C,WAAWC,uBAAoB11C,EACvEuU,iBACAyY,WACAkhH,2BACAa,kBAAmB30H,EAAc3T,QAAQhH,EAAO+2C,gBAAax2C,EAC7DwqB,YAAa/qB,EAAOqR,SAASQ,MAAMC,OACnCy9H,oBAAqBvvI,EAAO+R,aAAaF,MAAMC,OAC/C09H,iBAAkBngI,GAAYD,OAC9BqgI,wBAAyBpgI,GAAYC,gBACrCmF,aACA01H,YACAuF,yBAA0B1oI,QAAQqwC,GAClC/iC,kBACAq7H,mBAAoBr7H,IAAmB8N,EAAAA,EAAAA,IAAWpiB,EAAQsU,EAAgBJ,OAC1E07H,mBAAoBzuG,GAA2B1F,IAC/C+F,2BACAf,SACAiuG,cACA1yG,UACAlX,sBAAsBC,EAAAA,EAAAA,IAA2B/kB,GACjD6vI,mBAAoBhuI,GAAcE,OAClC+tI,aAAcv6H,GAAmBD,MACjCktB,mBAAoBpqB,EAAQoqB,mBAC5ButG,mBAAoB/oI,QAAQoR,EAAQuqB,SACpCwrG,qBAAsBlqI,EACtB0W,cACAnX,iBACD,GAzFe04C,EAjWoB,IA4ClC,IA5CmC,aACvCnmB,EAAY,SACZknB,EAAQ,iBACR0xF,EAAgB,mBAChBC,EAAkB,kBAClBC,EAAiB,kBACjBC,EAAiB,mBACjBE,EAAkB,iBAClBE,EAAgB,WAChBC,EAAU,aACVzxE,EAAY,kBACZznB,EAAiB,iBACjBniC,EAAgB,sBAChBs7H,EAAqB,4BACrBpqF,EAA2B,aAC3B8qF,EAAY,0BACZt6H,EAAyB,wBACzBC,EAAuB,mBACvB45H,EAAkB,eAClBv6H,EAAc,SACdyY,EAAQ,yBACRkhH,EAAwB,YACxB1jH,EAAW,oBACXwkH,EAAmB,kBACnBD,EAAiB,iBACjBE,EAAgB,wBAChBC,EAAuB,WACvBh7H,EAAU,UACV01H,EAAS,yBACTuF,EAAwB,gBACxBp7H,EAAe,mBACfq7H,EAAkB,mBAClBC,EAAkB,yBAClBpuG,EAAwB,eACxBh+B,EAAc,OACdi9B,EAAM,YACNiuG,EAAW,QACX1yG,EAAO,mBACP6zG,EAAkB,mBAClBrtG,EAAkB,mBAClButG,EAAkB,qBAClBjrH,EAAoB,qBACpBqpH,EAAoB,YACpBxzH,GACD,EACC,MAAM,mBACJq1H,EAAkB,yBAClBC,EAAwB,2BACxBC,GAA0B,eAC1Bj5H,GAAc,iBACdk5H,GAAgB,kBAChBC,GAAiB,kBACjBC,GAAiB,gBACjBC,GAAe,uBACfC,GAAsB,gBACtBn7F,GAAe,iBACfo7F,GAAgB,sBAChBC,GAAqB,kBACrBC,GAAiB,qBACjB37F,GAAoB,uBACpB47F,GAAsB,iBACtBC,GAAgB,qBAChBC,GAAoB,qBACpBC,GAAoB,yBACpBC,GAAwB,WACxBzmG,GAAU,cACV0mG,GAAa,eACbp1G,GAAc,gBACdq1G,GAAe,iBACfnmH,GAAgB,wBAChBomH,GAAuB,kBACvBC,GAAiB,aACjBC,GAAY,gBACZC,GAAe,SACfhuI,GAAQ,iBACRy8D,GAAgB,wBAChB9qB,GAAuB,gBACvBnyC,KACEuzB,EAAAA,EAAAA,MAEAzf,EAAAA,MAAU63H,KACZA,IAAiB,EAEjB53H,QAAQ4c,IAAI,qBAId8pB,EAAAA,GAAAA,IAAW,MACJg0F,EAAAA,GAAAA,IAAW14F,GAAAA,GAAAA,MAAc,GA7FG,KAgGnC,MAAM,UAAE24F,KAAcr0F,EAAAA,EAAAA,OACtBlF,EAAAA,EAAAA,KAAU,KACH22F,GAAqBC,GAAuB2C,GAGtC5C,GAAoBC,GAAsB3xF,GAEnD6iB,KAHAA,IAIF,GACC,CAACyxE,GAAW5C,EAAkBC,EAAoB3xF,EAAU6iB,MAE/DslB,EAAAA,GAAAA,GAAYisD,GAAiB12H,EA5GC,SA4GuCpa,GAAW,IAGhFy3C,EAAAA,EAAAA,KAAU,KACJjiB,GAAgBpb,IAClB1D,IAAe,GACfqzB,KACA0mG,KACAT,KACAP,IACAkB,KACAjB,IACAC,KACAE,KACAC,GAAkB,CAAE9iH,SAAU8tF,EAAAA,MAC9Bz/E,KACAq1G,KACAT,KACAC,KACAE,KACAU,KACIvsH,GACFkwB,KAEJ,GACC,CACDjf,EAAci6G,EAAoBK,GAAmBH,GAA4BD,EACjFG,GAAmBn5H,GAAgBs5H,GAAwBS,GAAep1G,GAAgBq1G,GAC1FT,GAAkBa,GAAiB/mG,GAAY4mG,GAAyBT,GACxEE,GAAwB37F,GAAyBlwB,EAAsBnK,KAIzEq9B,EAAAA,EAAAA,KAAU,KACJjiB,GAAgBpb,IACd4S,IAAa8tF,EAAAA,KACfg1B,GAAkB,CAAE9iH,SAAUA,IAGhC+iH,GAAgB,CAAEkB,SAAUjkH,IAC9B,GACC,CAACA,EAAUwI,EAAcu6G,GAAiBD,GAAmB11H,KAGhE4iC,EAAAA,GAAAA,IAAsB,IAAwB,IAAtBk0F,GAAiB,GAClCA,GAAoB17G,GAAgBpb,GACvCmQ,GAAiB,CACfnhB,IAAKrC,OAAOC,MAAKwB,EAAAA,EAAAA,MAAYgJ,aAAamK,MAC1C8J,aAAa,GAEjB,GACC,CAAC+P,EAAcpb,EAAamQ,MAG/BktB,EAAAA,EAAAA,KAAU,KACJjiB,GAAgBpb,IACboQ,GAAgBwkH,IACnBn6F,KACAL,MAGEhqB,GAAewkH,GACjBmB,KAEJ,GACC,CACD36G,EAAchL,EAAaqqB,GAAiBL,GAAsB27F,GAAmBnB,EACrF50H,KAIFq9B,EAAAA,EAAAA,KAAU,KACJjiB,GAAgBs5G,GAAsB10H,GACxCo2H,IACF,GACC,CAACh7G,EAAcs5G,EAAoB0B,GAA0Bp2H,KAGhEq9B,EAAAA,EAAAA,KAAU,KACJjiB,IAAiB04G,GACnBmC,IACF,GACC,CAAC76G,EAAc04G,EAA0BmC,MAG5C54F,EAAAA,EAAAA,KAAU,KACR,MAAM05F,GAA4BC,EAAAA,EAAAA,MAC9B57G,GAAgB27G,GAA2BE,SAC7CC,EAAAA,GAAAA,IAAgBC,mBAAmBJ,EAA0BE,QAC/D,GACC,CAAC77G,KAEJwnB,EAAAA,GAAAA,IAAsB,IAAwB,IAAtBk0F,GAAiB,EACvC,MAAMM,GAAqBC,EAAAA,EAAAA,MACtBD,IAEAN,GAAoB17G,GACvB1yB,GAAS,CACP/B,GAAIywI,EAAmB5xI,OACvBC,SAAU2xI,EAAmB3xI,SAC7BoB,KAAMuwI,EAAmBvwI,MAE7B,GACC,CAACu0B,EAAc1yB,KAElB,MAAM4uI,IAAuBvqF,EAAAA,GAAAA,GAC3BinF,OAAkBpuI,GAAW,OAAMA,EAAWykD,GAE1CktF,IAA2B51F,EAAAA,EAAAA,KAAO,GAClCkqC,IAAcC,EAAAA,GAAAA,MAGpBz4B,EAAAA,GAAAA,IAAc,IAA4B,IAA1BmkF,GAAqB,EACnC,QAA6B5xI,IAAzB4xI,GAAsCxD,IAAqBwD,GAA2C,IAAnBr9H,EACrF,OAGFo9H,GAAyBjlH,SAAU,EAE/BuN,EAAAA,KACF2xD,EAAAA,EAAAA,KAAQ,KACNz8E,SAAS40B,KAAKod,UAAUC,OAAO,8BAA+BgtF,EAAiB,IAInF,MAAMyD,GAA4BvqC,EAAAA,GAAAA,OAElCwqC,EAAAA,GAAAA,GAAqB3iI,SAAS89C,eAAe,iBAAkB,KAC7D4kF,IACAF,GAAyBjlH,SAAU,EACnCu5D,IAAa,GACb,GACD,CAAC1xE,EAAgB0xE,GAAamoD,IAEjC,MAAM2D,IAAwB5qF,EAAAA,GAAAA,GAC5BmnF,OAAmBtuI,GAAW,OAAMA,EAAWykD,GAE3CutF,IAA4Bj2F,EAAAA,EAAAA,KAAO,IAClCk2F,GAAqBC,KAA0Bj5F,EAAAA,EAAAA,IAASq1F,IAG/D7gF,EAAAA,GAAAA,IAAc,IAA6B,IAA3B0kF,GAAsB,EACpC,QAA8BnyI,IAA1BmyI,GAAuC7D,IAAsB6D,EAC/D,OAGF,GAAuB,IAAnB59H,EAEF,YADA29H,GAAuB5D,GAIzB0D,GAA0BtlH,SAAU,EAEpC,MAAMmlH,GAA4BvqC,EAAAA,GAAAA,OAElCwqC,EAAAA,GAAAA,GAAqB3iI,SAAS89C,eAAe,gBAAiB,KAC5D4kF,IACAG,GAA0BtlH,SAAU,EACpCu5D,KACAisD,GAAuB5D,EAAkB,GACzC,GACD,CAAC/5H,EAAgB0xE,GAAaqoD,IAEjC,MAAM9hH,IAAY0uB,EAAAA,GAAAA,GAChBw2F,GAAqBU,eAAiB,oBACtCV,GAAqBW,cAAgB,mBACrCV,GAAyBjlH,SAAW,wBACpCqlH,GAAsBK,eAAiB,qBACvCL,GAAsBM,cAAgB,oBACtCL,GAA0BtlH,SAAW,yBACrCulH,IAAuB,sBACvBxtF,GAA+B,8BAG3BskE,IAAa5rE,EAAAA,EAAAA,KAAY,KAC7ByyF,GAAiB,CAAEn5H,WAAW,GAAO,GACpC,CAACm5H,KAEEj6C,IAAcx4C,EAAAA,EAAAA,KAAY,KAC9ByyF,GAAiB,CAAEn5H,WAAW,IAEzBtH,SAASO,MAAM9F,SAASwN,EAAAA,MAC3B9U,KAGF2M,GAAW,EAAM,GAChB,CAAC2gI,GAAkBttI,KAEhBgwI,IAA6Bn1F,EAAAA,EAAAA,KAAY,KAC7CmzF,IAAsB,GACrB,CAACA,KAEEiC,IAAkCp1F,EAAAA,EAAAA,KAAY,KAClDozF,IAAsB,GACrB,CAACA,KAOJ,OAJA3xC,EAAAA,GAAAA,GAAkBmqB,GAAYpzB,IAC9Bp+C,GAAgBwxE,IxLlbH,WAAwD,IAApBjwE,EAAa,UAAH,+CAC3DrB,EAAAA,EAAAA,KAAU,KACR,GAAKlsC,EAAAA,GAAL,CAIA,IAAIutC,EAgBJ,OATApB,IAAc83B,aAAa,UAAW53B,IAKlC55B,EAAAA,KAAWkiC,EAAAA,IACb/wC,SAASkqC,iBAAiB,eAAgBtB,IAGrC,KACLL,IAAc83B,aAAa,UAAW,yDAClCxxD,EAAAA,KAAWkiC,EAAAA,IACb/wC,SAASmqC,oBAAoB,eAAgBvB,GAC/C,EAjBAL,IAAc83B,aAAa,UAAW13B,GALxC,CAuBC,GACA,CAACgB,GACN,CwLsZE05F,CAA2BjE,GAGzB,0BAAKxtI,GAAG,OAAOyrB,UAAWA,IACxB,mBAAC,GAAU,MACX,mBAAC,GAAY,CAACkwB,SAAUA,IACxB,mBAAC,GAAW,CAACA,SAAUA,IACvB,mBAAC,GAAW,CAACl7C,OAAQ+sI,IACrB,mBAAC,GAAsB,CAAC/sI,OAAQitI,IAChC,mBAAC,GAAoB,CAACxrI,eAAgBA,IACtC,mBAAC,GAAa,CAACzB,OAAQmtI,IACvB,mBAAC,GAAO,CAACntI,OAAQotI,IAChBzxE,GAAgB,mBAAC,GAAW,CAACnoB,IAAKmoB,EAAap8D,GAAI2D,QAASy4D,EAAc3G,MAAI,IAC/E,mBAAC,GAAa,CAACljD,IAAKC,IACpB,mBAAC,GAAY,CAACkoB,QAASA,EAAS0yG,YAAaA,IAC7C,mBAAC,GAAe,CAAC3sI,OAAQqtI,IACzB,mBAAC,GAAe,CACdrtI,OAAQiF,QAAQwO,GAChB2oC,QAAS00F,GACTG,oBAAqBx9H,IAEvB,mBAAC,GAAoB,CACnB0V,kBAAmBzV,EACnB0oC,QAAS20F,KAEV78F,GAAqB,mBAAC,GAAS,CAACU,YAAaV,IAC9C,mBAAC,GAAgB,CAACzlC,SAAUxJ,QAAQivC,GAAqBq5F,KACzD,mBAAC,GAAe,CACdvtI,OAAQiF,QAAQwoI,GAAoBC,GACpCrgI,OAAQogI,EACRlgI,gBAAiBmgI,IAEnB,mBAAC,GAAS,CAACh7H,WAAYA,EAAY01H,UAAWA,IAC9C,mBAAC,GAAW,CAAC1pG,OAAQA,IACrB,mBAAC,GAAe,MAChB,mBAAC,GAAiB,MAClB,mBAAC,GAAS,CAACjwB,SAAU8+H,IACrB,mBAAC,GAAW,CAACz2F,eAAa,IAC1B,mBAAC,GAAkB,CAAC92C,OAAQ2tI,IAC5B,mBAAC,GAAa,CAACj0G,IAAKk0G,EAAoBnuI,KAAM8S,GAAiB9S,OAC/D,mBAAC,GAAqB,CAACi6B,IAAKm0G,IAC5B,mBAAC,GAAwB,CAACpuG,yBAA0BA,IACpD,mBAAC,GAAyB,MACzBquG,GAAsB,mBAAC,GAAgB,CAAC9tI,OAAQ8tI,IACjD,mBAAC,GAAwB,CAACv6H,MAAOw6H,IACjC,mBAAC,GAAY,CAAC/tI,OAAQygC,EAAoB2b,QAASgzF,KACnD,mBAAC,GAAY,CAACpvI,OAAQguI,EAAoB5xF,QAASizF,KACnD,mBAAC,GAAkB,CAACjD,qBAAsBA,IACtC,K,kEC1cV,MA2HA,IAAe31F,EAAAA,EAAAA,KAAK0D,EAAAA,EAAAA,KACjBl8C,IACQ,CACLizI,iBAAkBjzI,EAAO6Y,YAHXqjC,EAvH0B,IAGxC,IAHyC,SAC7Cg3F,EAAQ,iBACRD,GACD,EACC,MAAM,aACJl4H,EAAY,QACZo4H,EAAO,wBACPn4H,EAAuB,2BACvBo4H,IACEh9G,EAAAA,EAAAA,OAEE,qBACJ1b,EAAoB,UACpBvB,GACE85H,EAEExuI,GAAO81C,EAAAA,GAAAA,MACN84F,EAAiBC,IAAsB95F,EAAAA,EAAAA,IAAiB,KACxD+5F,EAAoBC,IAAyBh6F,EAAAA,EAAAA,KAAS,IACtDi6F,EAAqBC,EAAyBC,IAA4Bj3F,EAAAA,GAAAA,IAAQ,IACnF,aAAE6K,IAAiBG,EAAAA,GAAAA,GAAkBwrF,IAE3C51F,EAAAA,GAAAA,GACE81F,EACA14H,GAAwBA,GA5BC,EACa,UA6BlCna,GAGN,MAAMqzI,GAAmBl2F,EAAAA,EAAAA,KAAY,KACnC41F,EAAmB,GAAG,GACrB,IAEGO,GAAen2F,EAAAA,EAAAA,KAAa7kC,IAC5B6B,GAAwBA,GAtCH,EAuCvB44H,EAAmB7uI,EAAK,eAI1B6uI,EAAmB,KACnBx4H,EAAAA,EAAAA,IAAejC,GAAUxC,KAAK0E,GAAc,KAC1CC,IACAs4H,EAAmB7uI,EAAK,sBAAsB,IAC9C,GACD,CAACiW,EAAsBjW,EAAMuW,EAAyBD,KAEzDi9B,EAAAA,EAAAA,KAAU,KACJt9B,GAAwBA,GAnDH,EAoDvB44H,EAAmB7uI,EAAK,cACU,IAAzBiW,GACT44H,EAAmB,GACrB,GACC,CAAC54H,EAAsBjW,IAE1B,MAAMqvI,GAAuBp2F,EAAAA,EAAAA,KAAY,KACvCi2F,IACAR,EAAQ,CAAEY,cAAc,GAAO,GAC9B,CAACJ,EAA0BR,IAE9B,GAAK5rF,EAoBL,OACE,0BAAKx6B,UCnHmB,wBDoHtB,0BAAKA,UCpHkD,uBDoHvBytB,IAAK/1C,EAAKg2C,MAAQ,WAAQl6C,GACxD,mBAACyzI,GAAA,EAAuB,CACtBp8D,OAAQq8D,GAAAA,EAAAA,KACRC,WAAYC,GACZp5F,KAvFQ,IAwFRhuB,UCzHiF,yBD4HnF,mBAACqnH,GAAA,EAAY,CACX7+F,IAAI,gBACJ8+F,kBAAgB,EAChBC,8BAA4B,EAC5Bn7H,UAAWA,EACXtC,MAAOw8H,EACPlvF,YAAa1/C,EAAK,qCAClB8vI,YAAa9vI,EAAK,QAClB+vI,WAAYZ,EACZa,kBAAmBlB,EACnBmB,UAAQ,EACRC,2BAA4BnB,EAC5BoB,SAAUf,IApCd,0BAAK9mH,UCpG8G,wBDqGjH,4BACE,mBAAC8nH,GAAA,EAAI,CAACv6F,QAASo5F,GAAwB,WAAgB,IAAG,wCAG5D,4BACE,mBAAC54F,GAAA,EAAM,CAACH,MAAM,cAAcI,KAAK,OAAOuiB,QAAM,EAAChjB,QAASo5F,GACrDjvI,EAAK,8BAmCZ,mBAAC0uD,GAAA,EAAa,CACZpxD,OAAQ0xI,EACRt1F,QAASw1F,EACTrwI,KAAMmB,EAAK,mBACX2uD,aAAc3uD,EAAK,0BACnB4uD,eAAgBygF,EAChBv2E,sBAAoB,IAElB,KE9IN5mD,EAAAA,KAEFC,QAAQ4c,IAAI,+BAGd,MAAQ3a,UAAU,eAAE4B,IAAgB,gBAAEyb,KAAoBntB,EAAAA,EAAAA,MACrDmtB,IAAoBzb,IAAmBq6H,EAAAA,KAC1C1+G,EAAAA,EAAAA,MAAavb,S","sources":["webpack://telegram-t/./src/global/actions/ui/localSearch.ts","webpack://telegram-t/./src/global/actions/ui/chats.ts","webpack://telegram-t/./src/global/actions/ui/messages.ts","webpack://telegram-t/./src/global/helpers/renderMessageSummaryHtml.ts","webpack://telegram-t/./src/global/actions/ui/globalSearch.ts","webpack://telegram-t/./src/global/actions/ui/stickerSearch.ts","webpack://telegram-t/./src/global/actions/ui/users.ts","webpack://telegram-t/./src/util/updateIcon.ts","webpack://telegram-t/./src/util/updatePageTitle.ts","webpack://telegram-t/./src/global/actions/ui/misc.ts","webpack://telegram-t/./src/global/actions/ui/payments.ts","webpack://telegram-t/./src/global/actions/ui/mediaViewer.ts","webpack://telegram-t/./src/global/actions/ui/passcode.ts","webpack://telegram-t/./src/global/actions/api/messages.ts","webpack://telegram-t/./src/global/actions/api/symbols.ts","webpack://telegram-t/./src/global/actions/api/globalSearch.ts","webpack://telegram-t/./src/global/actions/api/localSearch.ts","webpack://telegram-t/./src/global/actions/api/management.ts","webpack://telegram-t/./src/global/actions/api/sync.ts","webpack://telegram-t/./src/global/actions/api/accounts.ts","webpack://telegram-t/./src/global/actions/api/users.ts","webpack://telegram-t/./src/global/reducers/bots.ts","webpack://telegram-t/./src/util/PopupManager.ts","webpack://telegram-t/./src/global/actions/api/bots.ts","webpack://telegram-t/./src/util/requestQuery.ts","webpack://telegram-t/./src/global/actions/api/payments.ts","webpack://telegram-t/./src/global/actions/api/twoFaSettings.ts","webpack://telegram-t/./src/components/middle/helpers/calculateMiddleFooterTransforms.ts","webpack://telegram-t/./src/global/reducers/reactions.ts","webpack://telegram-t/./src/global/actions/api/reactions.ts","webpack://telegram-t/./src/global/actions/api/statistics.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/chats.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/messages.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/users.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/symbols.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/misc.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/settings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/twoFaSettings.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/calls.ts","webpack://telegram-t/./src/global/actions/apiUpdaters/payments.ts","webpack://telegram-t/./src/hooks/useBeforeUnload.ts","webpack://telegram-t/./src/hooks/usePreventPinchZoomGesture.ts","webpack://telegram-t/./src/components/common/StickerSetModal.async.tsx","webpack://telegram-t/./src/components/common/UnreadCounter.tsx","webpack://telegram-t/./src/hooks/useConnectionStatus.ts","webpack://telegram-t/./src/hooks/useBrowserOnline.ts","webpack://telegram-t/./src/components/left/ConnectionStatusOverlay.tsx","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.module.scss?16ed","webpack://telegram-t/./src/components/middle/message/CustomEmojiEffect.tsx","webpack://telegram-t/./src/components/left/main/StatusPickerMenu.async.tsx","webpack://telegram-t/./src/components/left/main/StatusButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMainHeader.tsx","webpack://telegram-t/./src/util/permanentWebVersion.ts","webpack://telegram-t/./src/components/left/main/ChatFolders.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.async.tsx","webpack://telegram-t/./src/components/left/main/ContactList.async.tsx","webpack://telegram-t/./src/components/left/NewChatButton.tsx","webpack://telegram-t/./src/components/left/main/LeftMain.tsx","webpack://telegram-t/./src/components/left/settings/Settings.async.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.async.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.async.tsx","webpack://telegram-t/./src/components/left/LeftColumn.tsx","webpack://telegram-t/./src/hooks/useResize.ts","webpack://telegram-t/./src/components/middle/PinnedMessageNavigation.tsx","webpack://telegram-t/./src/components/middle/HeaderPinnedMessage.tsx","webpack://telegram-t/./src/util/imageResize.ts","webpack://telegram-t/./src/hooks/useMessageMediaMetadata.ts","webpack://telegram-t/./src/components/middle/AudioPlayer.tsx","webpack://telegram-t/./src/components/middle/ChatReportPanel.tsx","webpack://telegram-t/./src/components/middle/MiddleHeader.tsx","webpack://telegram-t/./src/components/middle/helpers/groupMessages.ts","webpack://telegram-t/./src/hooks/useNativeCopySelectedMessages.ts","webpack://telegram-t/./src/hooks/useLayoutEffectWithPrevDeps.ts","webpack://telegram-t/./src/components/middle/hooks/useMessageObservers.ts","webpack://telegram-t/./src/components/middle/message/helpers/mediaDimensions.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAlbumLayout.ts","webpack://telegram-t/./src/components/middle/message/helpers/calculateAuthorWidth.ts","webpack://telegram-t/./src/components/middle/message/hooks/useFocusMessage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useOuterHandlers.ts","webpack://telegram-t/./src/util/languageDetection.ts","webpack://telegram-t/./src/util/Deferred.ts","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/ActionMessageSuggestedAvatar.tsx","webpack://telegram-t/./src/components/middle/ActionMessage.tsx","webpack://telegram-t/./src/components/common/EmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/message/MessageMeta.tsx","webpack://telegram-t/./src/components/middle/message/Sticker.tsx","webpack://telegram-t/./src/components/common/hooks/useAnimatedEmoji.ts","webpack://telegram-t/./src/components/middle/message/AnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/AnimatedCustomEmoji.tsx","webpack://telegram-t/./src/components/middle/message/helpers/getCustomAppendixBg.ts","webpack://telegram-t/./src/components/middle/message/hooks/useBlurredMediaThumbRef.ts","webpack://telegram-t/./src/components/middle/message/Photo.tsx","webpack://telegram-t/./src/components/middle/message/Video.tsx","webpack://telegram-t/./src/components/middle/message/Contact.tsx","webpack://telegram-t/./src/components/middle/message/PollOption.tsx","webpack://telegram-t/./src/components/middle/message/Poll.tsx","webpack://telegram-t/./src/components/middle/message/WebPage.tsx","webpack://telegram-t/./src/components/middle/message/Invoice.tsx","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.module.scss?19f6","webpack://telegram-t/./src/components/middle/message/InvoiceMediaPreview.tsx","webpack://telegram-t/./src/util/map.ts","webpack://telegram-t/./src/components/middle/message/Location.tsx","webpack://telegram-t/./src/components/middle/message/Game.tsx","webpack://telegram-t/./src/components/middle/message/hocs/withSelectControl.tsx","webpack://telegram-t/./src/components/middle/message/Album.tsx","webpack://telegram-t/./src/components/middle/message/RoundVideo.tsx","webpack://telegram-t/./src/components/middle/message/InlineButtons.tsx","webpack://telegram-t/./src/components/middle/message/CommentButton.tsx","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.module.scss?29b9","webpack://telegram-t/./src/components/middle/message/ReactionAnimatedEmoji.tsx","webpack://telegram-t/./src/components/middle/message/ReactionButton.tsx","webpack://telegram-t/./src/components/middle/message/Reactions.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.tsx","webpack://telegram-t/./src/components/middle/message/MessagePhoneCall.module.scss?15a3","webpack://telegram-t/./src/components/common/TopicChip.tsx","webpack://telegram-t/./src/components/common/TopicChip.module.scss?5208","webpack://telegram-t/./src/components/middle/message/Message.tsx","webpack://telegram-t/./src/components/middle/message/hooks/useInnerHandlers.ts","webpack://telegram-t/./src/hooks/useTextLanguage.ts","webpack://telegram-t/./src/components/middle/message/hooks/useMessageTranslation.ts","webpack://telegram-t/./src/components/middle/message/helpers/buildContentClassName.ts","webpack://telegram-t/./src/components/common/AboutAdsModal.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessageContextMenuContainer.async.tsx","webpack://telegram-t/./src/components/middle/message/SponsoredMessage.tsx","webpack://telegram-t/./src/components/middle/MessageListContent.tsx","webpack://telegram-t/./src/components/middle/hooks/useScrollHooks.ts","webpack://telegram-t/./src/components/middle/ContactGreeting.tsx","webpack://telegram-t/./src/components/middle/NoMessages.tsx","webpack://telegram-t/./src/components/middle/MessageList.tsx","webpack://telegram-t/./src/components/middle/hooks/useStickyDates.ts","webpack://telegram-t/./src/components/middle/ScrollDownButton.tsx","webpack://telegram-t/./src/components/middle/ScrollDownButton.module.scss?272e","webpack://telegram-t/./src/components/middle/FloatingActionButtons.module.scss?b2b2","webpack://telegram-t/./src/components/middle/FloatingActionButtons.tsx","webpack://telegram-t/./src/components/middle/composer/helpers/buildAttachment.ts","webpack://telegram-t/./src/util/audio.ts","webpack://telegram-t/./src/util/deleteLastCharacterOutsideSelection.ts","webpack://telegram-t/./src/components/middle/composer/helpers/applyIosAutoCapitalizationFix.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useStickerTooltip.ts","webpack://telegram-t/./src/util/voiceRecording.ts","webpack://telegram-t/./src/lib/cleanDocsHtml.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useClipboardPaste.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useInlineBotTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useBotCommandTooltip.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useAttachmentModal.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useDraft.ts","webpack://telegram-t/./src/components/common/DeleteMessageModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.module.scss?7e9f","webpack://telegram-t/./src/components/middle/composer/AttachBotIcon.tsx","webpack://telegram-t/./src/components/middle/composer/AttachBotItem.tsx","webpack://telegram-t/./src/components/middle/composer/AttachMenu.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotKeyboardMenu.tsx","webpack://telegram-t/./src/components/middle/composer/ComposerEmbeddedMessage.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.async.tsx","webpack://telegram-t/./src/components/middle/composer/DropArea.async.tsx","webpack://telegram-t/./src/components/middle/composer/WebPagePreview.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.async.tsx","webpack://telegram-t/./src/components/middle/composer/BotMenuButton.tsx","webpack://telegram-t/./src/components/middle/composer/Composer.tsx","webpack://telegram-t/./src/components/middle/composer/hooks/useVoiceRecording.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useEditing.ts","webpack://telegram-t/./src/components/middle/MobileSearch.async.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.async.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.async.tsx","webpack://telegram-t/./src/components/common/SeenByModal.async.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.async.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.async.tsx","webpack://telegram-t/./src/components/main/premium/GiftPremiumModal.async.tsx","webpack://telegram-t/./src/components/middle/MessageLanguageModal.async.tsx","webpack://telegram-t/./src/components/middle/MiddleColumn.tsx","webpack://telegram-t/./src/hooks/useCustomBackground.ts","webpack://telegram-t/./src/components/middle/MiddleColumn.module.scss?b2f0","webpack://telegram-t/./src/components/right/RightHeader.tsx","webpack://telegram-t/./src/components/right/hooks/useProfileViewportIds.ts","webpack://telegram-t/./src/components/right/hooks/useProfileState.ts","webpack://telegram-t/./src/components/right/Profile.tsx","webpack://telegram-t/./src/components/right/hooks/useTransitionFixes.ts","webpack://telegram-t/./src/hooks/useCacheBuster.ts","webpack://telegram-t/./src/components/right/RightSearch.async.tsx","webpack://telegram-t/./src/components/right/management/Management.async.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.async.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.async.tsx","webpack://telegram-t/./src/components/right/StickerSearch.async.tsx","webpack://telegram-t/./src/components/right/GifSearch.async.tsx","webpack://telegram-t/./src/components/right/PollResults.async.tsx","webpack://telegram-t/./src/components/right/AddChatMembers.tsx","webpack://telegram-t/./src/components/right/CreateTopic.async.tsx","webpack://telegram-t/./src/components/right/EditTopic.async.tsx","webpack://telegram-t/./src/components/right/RightColumn.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.async.tsx","webpack://telegram-t/./src/util/download.ts","webpack://telegram-t/./src/components/main/DownloadManager.tsx","webpack://telegram-t/./src/components/main/GameModal.tsx","webpack://telegram-t/./src/components/main/Notifications.async.tsx","webpack://telegram-t/./src/components/main/Dialogs.async.tsx","webpack://telegram-t/./src/components/main/ForwardRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.async.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.async.tsx","webpack://telegram-t/./src/components/calls/group/GroupCall.async.tsx","webpack://telegram-t/./src/components/calls/ActiveCallHeader.async.tsx","webpack://telegram-t/./src/components/calls/phone/PhoneCall.async.tsx","webpack://telegram-t/./src/components/middle/MessageListHistoryHandler.tsx","webpack://telegram-t/./src/components/main/NewContactModal.async.tsx","webpack://telegram-t/./src/components/calls/phone/RatePhoneCallModal.async.tsx","webpack://telegram-t/./src/components/main/WebAppModal.async.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.async.tsx","webpack://telegram-t/./src/components/main/AttachBotInstallModal.async.tsx","webpack://telegram-t/./src/components/main/ConfettiContainer.module.scss?d9a9","webpack://telegram-t/./src/components/main/ConfettiContainer.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.async.tsx","webpack://telegram-t/./src/components/main/premium/PremiumMainModal.async.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.async.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.async.tsx","webpack://telegram-t/./src/components/main/premium/common/PremiumLimitReachedModal.async.tsx","webpack://telegram-t/./src/components/main/DeleteFolderDialog.async.tsx","webpack://telegram-t/./src/components/common/CustomEmojiSetsModal.async.tsx","webpack://telegram-t/./src/components/main/DraftRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/AttachBotRecipientPicker.async.tsx","webpack://telegram-t/./src/components/main/Main.tsx","webpack://telegram-t/./src/components/main/LockScreen.tsx","webpack://telegram-t/./src/components/main/LockScreen.module.scss?8252","webpack://telegram-t/./src/bundles/main.ts"],"sourcesContent":["import { addActionHandler } from '../../index';\n\nimport {\n  updateLocalTextSearch,\n  replaceLocalTextSearchResults,\n  updateLocalMediaSearchType,\n} from '../../reducers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { buildChatThreadKey } from '../../helpers';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalTextSearch(global, chatId, threadId, true, undefined, tabId);\n});\n\naddActionHandler('closeLocalTextSearch', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return closeLocalTextSearch(global, tabId);\n});\n\naddActionHandler('setLocalTextSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatThreadKey = buildChatThreadKey(chatId, threadId);\n  const { query: currentQuery } = selectTabState(global, tabId).localTextSearch.byChatThreadKey[chatThreadKey] || {};\n\n  if (query !== currentQuery) {\n    global = replaceLocalTextSearchResults(global, chatId, threadId, MEMO_EMPTY_ARRAY, undefined, undefined, tabId);\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, true, query, tabId);\n\n  return global;\n});\n\naddActionHandler('setLocalMediaSearchType', (global, actions, payload): ActionReturnType => {\n  const { mediaType, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  return updateLocalMediaSearchType(global, chatId, threadId, mediaType, tabId);\n});\n\nexport function closeLocalTextSearch<T extends GlobalState>(\n  global: T,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return global;\n  }\n\n  global = updateLocalTextSearch(global, chatId, threadId, false, undefined, tabId);\n  global = replaceLocalTextSearchResults(global, chatId, threadId, undefined, undefined, undefined, tabId);\n  return global;\n}\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport {\n  exitMessageSelectMode, replaceTabThreadParam, updateCurrentMessageList,\n} from '../../reducers';\nimport { selectChat, selectCurrentMessageList, selectTabState } from '../../selectors';\nimport { closeLocalTextSearch } from './localSearch';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { createMessageHashUrl } from '../../../util/routing';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const {\n    id,\n    threadId = MAIN_THREAD_ID,\n    type = 'thread',\n    shouldReplaceHistory = false,\n    noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.premiumModal?.promo && tabState.premiumModal?.isOpen) {\n    global = updateTabState(global, {\n      premiumModal: {\n        ...tabState.premiumModal,\n        isOpen: false,\n      },\n    }, tabId);\n  }\n\n  if (!currentMessageList || (\n    currentMessageList.chatId !== id\n    || currentMessageList.threadId !== threadId\n    || currentMessageList.type !== type\n  )) {\n    if (id) {\n      global = replaceTabThreadParam(global, id, threadId, 'replyStack', [], tabId);\n\n      global = updateTabState(global, {\n        activeReactions: {},\n      }, tabId);\n    }\n\n    global = exitMessageSelectMode(global, tabId);\n    global = closeLocalTextSearch(global, tabId);\n\n    global = updateTabState(global, {\n      isStatisticsShown: false,\n      contentToBeScheduled: undefined,\n      ...(id !== selectTabState(global, tabId).forwardMessages.toChatId && {\n        forwardMessages: {},\n      }),\n    }, tabId);\n  }\n\n  if (id) {\n    const chat = selectChat(global, id);\n\n    if (chat?.isForum && !noForumTopicPanel) {\n      actions.openForumPanel({ chatId: id!, tabId });\n    } else if (id !== selectTabState(global, tabId).forumPanelChatId) {\n      actions.closeForumPanel({ tabId });\n    }\n  }\n\n  actions.updatePageTitle({ tabId });\n\n  return updateCurrentMessageList(global, id, threadId, type, shouldReplaceHistory, tabId);\n});\n\naddActionHandler('openChatInNewTab', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId = MAIN_THREAD_ID } = payload;\n\n  window.open(createMessageHashUrl(chatId, 'thread', threadId), '_blank');\n});\n\naddActionHandler('openPreviousChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateCurrentMessageList(global, undefined, undefined, undefined, undefined, tabId);\n});\n\naddActionHandler('openChatWithInfo', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n\n  global = updateTabState(global, {\n    ...selectTabState(global, tabId),\n    isChatInfoShown: true,\n  }, tabId);\n  global = { ...global, lastIsChatInfoShown: true };\n  setGlobal(global);\n\n  actions.openChat({ ...payload, tabId });\n});\n\naddActionHandler('openChatWithDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, text, threadId, files, tabId = getCurrentTabId(),\n  } = payload;\n\n  if (chatId) {\n    actions.openChat({ id: chatId, threadId, tabId });\n  }\n\n  return updateTabState(global, {\n    requestedDraft: {\n      chatId,\n      text,\n      files,\n    },\n  }, tabId);\n});\n\naddActionHandler('resetChatCreation', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    chatCreation: undefined,\n  }, tabId);\n});\n\naddActionHandler('setNewChatMembersDialogState', (global, actions, payload): ActionReturnType => {\n  const { newChatMembersProgress, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    newChatMembersProgress,\n  }, tabId);\n});\n\naddActionHandler('openNextChat', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, orderedIds, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    actions.openChat({ id: orderedIds[0], tabId });\n    return;\n  }\n\n  const position = orderedIds.indexOf(chatId);\n\n  if (position === -1) {\n    return;\n  }\n  const nextId = orderedIds[position + targetIndexDelta];\n\n  actions.openChat({ id: nextId, shouldReplaceHistory: true, tabId });\n});\n\naddActionHandler('openDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { folderId, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    deleteFolderDialogModal: folderId,\n  }, tabId);\n});\n\naddActionHandler('closeDeleteChatFolderModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    deleteFolderDialogModal: undefined,\n  }, tabId);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { FocusDirection } from '../../../types';\nimport type {\n  TabState, GlobalState, ActionReturnType,\n} from '../../types';\n\nimport {\n  ANIMATION_END_DELAY,\n  APP_VERSION,\n  RELEASE_DATETIME,\n  FAST_SMOOTH_MAX_DURATION,\n  SERVICE_NOTIFICATIONS_USER_ID,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport {\n  enterMessageSelectMode,\n  toggleMessageSelection,\n  exitMessageSelectMode,\n  replaceThreadParam,\n  replaceTabThreadParam,\n  updateFocusDirection,\n  updateFocusedMessage, updateFocusedMessageReached,\n} from '../../reducers';\nimport {\n  selectCurrentChat,\n  selectViewportIds,\n  selectIsRightColumnShown,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n  selectChatMessages,\n  selectAllowedMessageActions,\n  selectMessageIdsByGroupId,\n  selectForwardedMessageIdsByGroupId,\n  selectIsViewportNewest,\n  selectReplyingToId,\n  selectReplyStack,\n  selectSender,\n  selectChatScheduledMessages,\n  selectTabState,\n  selectRequestedTranslationLanguage,\n} from '../../selectors';\nimport { compact, findLast } from '../../../util/iteratees';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport versionNotification from '../../../versionNotification.txt';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport { getMessageSummaryText, getSenderTitle } from '../../helpers';\nimport * as langProvider from '../../../util/langProvider';\nimport { copyHtmlToClipboard } from '../../../util/clipboard';\nimport { renderMessageSummaryHtml } from '../../helpers/renderMessageSummaryHtml';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport { getIsMobile } from '../../../hooks/useAppLayout';\n\nconst FOCUS_DURATION = 1500;\nconst FOCUS_NO_HIGHLIGHT_DURATION = FAST_SMOOTH_MAX_DURATION + ANIMATION_END_DELAY;\nconst POLL_RESULT_OPEN_DELAY_MS = 450;\nconst VERSION_NOTIFICATION_DURATION = 1000 * 60 * 60 * 24 * 3; // 3 days\nconst SERVICE_NOTIFICATIONS_MAX_AMOUNT = 1e3;\n\nlet blurTimeout: number | undefined;\n\naddActionHandler('setScrollOffset', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, scrollOffset, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = replaceThreadParam(global, chatId, threadId, 'lastScrollOffset', scrollOffset);\n\n  return replaceTabThreadParam(global, chatId, threadId, 'scrollOffset', scrollOffset, tabId);\n});\n\naddActionHandler('setReplyingToId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n  const { chatId, threadId } = currentMessageList;\n\n  return replaceThreadParam(global, chatId, threadId, 'replyingToId', messageId);\n});\n\naddActionHandler('setEditingId', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n  const paramName = type === 'scheduled' ? 'editingScheduledId' : 'editingId';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, messageId);\n});\n\naddActionHandler('setEditingDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    text, chatId, threadId, type,\n  } = payload;\n\n  const paramName = type === 'scheduled' ? 'editingScheduledDraft' : 'editingDraft';\n\n  return replaceThreadParam(global, chatId, threadId, paramName, text);\n});\n\naddActionHandler('editLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return undefined;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return undefined;\n  }\n\n  const lastOwnEditableMessageId = findLast(viewportIds, (id) => {\n    return Boolean(chatMessages[id] && selectAllowedMessageActions(global, chatMessages[id], threadId).canEdit);\n  });\n\n  if (!lastOwnEditableMessageId) {\n    return undefined;\n  }\n\n  return replaceThreadParam(global, chatId, threadId, 'editingId', lastOwnEditableMessageId);\n});\n\naddActionHandler('replyToNextMessage', (global, actions, payload): ActionReturnType => {\n  const { targetIndexDelta, tabId = getCurrentTabId() } = payload;\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chatMessages = selectChatMessages(global, chatId);\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (!chatMessages || !viewportIds) {\n    return;\n  }\n\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const isLatest = selectIsViewportNewest(global, chatId, threadId, tabId);\n\n  let messageId: number | undefined;\n\n  if (!isLatest || !replyingToId) {\n    if (threadId === MAIN_THREAD_ID) {\n      const chat = selectChat(global, chatId);\n\n      messageId = chat?.lastMessage?.id;\n    } else {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      messageId = threadInfo?.lastMessageId;\n    }\n  } else {\n    const chatMessageKeys = Object.keys(chatMessages);\n    const indexOfCurrent = chatMessageKeys.indexOf(replyingToId.toString());\n    const newIndex = indexOfCurrent + targetIndexDelta;\n    messageId = newIndex <= chatMessageKeys.length + 1 && newIndex >= 0\n      ? Number(chatMessageKeys[newIndex])\n      : undefined;\n  }\n  actions.setReplyingToId({ messageId, tabId });\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: messageId!,\n    tabId,\n  });\n});\n\naddActionHandler('openAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, messageId, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      chatId,\n      threadId,\n      messageId,\n      origin: origin ?? tabState.audioPlayer.origin,\n      volume: volume ?? tabState.audioPlayer.volume,\n      playbackRate: playbackRate || tabState.audioPlayer.playbackRate || global.audioPlayer.lastPlaybackRate,\n      isPlaybackRateActive: (tabState.audioPlayer.isPlaybackRateActive === undefined\n        ? global.audioPlayer.isLastPlaybackRateActive\n        : tabState.audioPlayer.isPlaybackRateActive),\n      isMuted: isMuted || tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate, isPlaybackRateActive, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    audioPlayer: {\n      ...global.audioPlayer,\n      lastPlaybackRate: playbackRate,\n      isLastPlaybackRateActive: isPlaybackRateActive,\n    },\n  };\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      playbackRate,\n      isPlaybackRateActive,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setAudioPlayerOrigin', (global, actions, payload): ActionReturnType => {\n  const {\n    origin, tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    audioPlayer: {\n      ...selectTabState(global, tabId).audioPlayer,\n      origin,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeAudioPlayer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    audioPlayer: {\n      volume: tabState.audioPlayer.volume,\n      playbackRate: tabState.audioPlayer.playbackRate,\n      isPlaybackRateActive: tabState.audioPlayer.isPlaybackRateActive,\n      isMuted: tabState.audioPlayer.isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPollResults', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  const shouldOpenInstantly = selectIsRightColumnShown(global, getIsMobile(), tabId);\n  const tabState = selectTabState(global, tabId);\n\n  if (!shouldOpenInstantly) {\n    window.setTimeout(() => {\n      global = getGlobal();\n\n      global = updateTabState(global, {\n        pollResults: {\n          chatId,\n          messageId,\n          voters: {},\n        },\n      }, tabId);\n      setGlobal(global);\n    }, POLL_RESULT_OPEN_DELAY_MS);\n  } else if (chatId !== tabState.pollResults.chatId || messageId !== tabState.pollResults.messageId) {\n    return updateTabState(global, {\n      pollResults: {\n        chatId,\n        messageId,\n        voters: {},\n      },\n    }, tabId);\n  }\n\n  return undefined;\n});\n\naddActionHandler('closePollResults', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    pollResults: {},\n  }, tabId);\n});\n\naddActionHandler('focusLastMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  let lastMessageId: number | undefined;\n  if (threadId === MAIN_THREAD_ID) {\n    const chat = selectChat(global, chatId);\n\n    lastMessageId = chat?.lastMessage?.id;\n  } else {\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    lastMessageId = threadInfo?.lastMessageId;\n  }\n\n  if (!lastMessageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId,\n    threadId,\n    messageId: lastMessageId,\n    noHighlight: true,\n    noForumTopicPanel: true,\n    tabId,\n  });\n});\n\naddActionHandler('focusNextReply', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const replyStack = selectReplyStack(global, chatId, threadId, tabId);\n\n  if (!replyStack || replyStack.length === 0) {\n    actions.focusLastMessage({ tabId });\n  } else {\n    const messageId = replyStack.pop();\n\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack], tabId);\n\n    setGlobal(global);\n\n    actions.focusMessage({\n      chatId,\n      threadId,\n      messageId: messageId!,\n      tabId,\n      noForumTopicPanel: true,\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('setReachedFocusedMessage', (global, actions, payload): ActionReturnType => {\n  const { hasReached = false, tabId = getCurrentTabId() } = payload;\n\n  return updateFocusedMessageReached(global, hasReached, tabId);\n});\n\naddActionHandler('focusMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, messageListType = 'thread', noHighlight, groupedId, groupedChatId,\n    replyMessageId, isResizingContainer, shouldReplaceHistory, noForumTopicPanel,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let { messageId } = payload;\n\n  if (groupedId !== undefined) {\n    const ids = selectForwardedMessageIdsByGroupId(global, groupedChatId!, groupedId);\n    if (ids?.length) {\n      ([messageId] = compact(ids));\n    }\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  const shouldSwitchChat = !currentMessageList || (\n    chatId !== currentMessageList.chatId\n    || threadId !== currentMessageList.threadId\n    || messageListType !== currentMessageList.type\n  );\n\n  if (blurTimeout) {\n    clearTimeout(blurTimeout);\n    blurTimeout = undefined;\n  }\n  blurTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = updateFocusedMessage(global, undefined, undefined, undefined, undefined, tabId);\n    global = updateFocusDirection(global, undefined, tabId);\n    setGlobal(global);\n  }, noHighlight ? FOCUS_NO_HIGHLIGHT_DURATION : FOCUS_DURATION);\n\n  global = updateFocusedMessage(global, chatId, messageId, noHighlight, isResizingContainer, tabId);\n  global = updateFocusDirection(global, undefined, tabId);\n\n  if (replyMessageId) {\n    const replyStack = selectReplyStack(global, chatId, threadId, tabId) || [];\n    global = replaceTabThreadParam(global, chatId, threadId, 'replyStack', [...replyStack, replyMessageId], tabId);\n  }\n\n  if (shouldSwitchChat) {\n    global = updateFocusDirection(global, FocusDirection.Static, tabId);\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  if (viewportIds && viewportIds.includes(messageId)) {\n    setGlobal(global);\n    actions.openChat({\n      id: chatId,\n      threadId,\n      shouldReplaceHistory,\n      noForumTopicPanel,\n      tabId,\n    });\n    return undefined;\n  }\n\n  if (shouldSwitchChat) {\n    global = replaceTabThreadParam(global, chatId, threadId, 'viewportIds', undefined, tabId);\n  }\n\n  global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n\n  if (viewportIds && !shouldSwitchChat) {\n    const direction = messageId > viewportIds[0] ? FocusDirection.Down : FocusDirection.Up;\n    global = updateFocusDirection(global, direction, tabId);\n  }\n\n  setGlobal(global);\n\n  actions.openChat({\n    id: chatId,\n    threadId,\n    shouldReplaceHistory,\n    noForumTopicPanel,\n    tabId,\n  });\n  actions.loadViewportMessages({\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('openForwardMenu', (global, actions, payload): ActionReturnType => {\n  const {\n    fromChatId, messageIds, groupedId, withMyScore, tabId = getCurrentTabId(),\n  } = payload;\n  let groupedMessageIds;\n  if (groupedId) {\n    groupedMessageIds = selectMessageIdsByGroupId(global, fromChatId, groupedId);\n  }\n  return updateTabState(global, {\n    forwardMessages: {\n      fromChatId,\n      messageIds: groupedMessageIds || messageIds,\n      isModalShown: true,\n      withMyScore,\n    },\n  }, tabId);\n});\n\naddActionHandler('changeForwardRecipient', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: undefined,\n      isModalShown: true,\n      noAuthors: false,\n      noCaptions: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoAuthors', (global, actions, payload): ActionReturnType => {\n  const { noAuthors, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    forwardMessages: {\n      ...tabState.forwardMessages,\n      noAuthors,\n      // `noCaptions` cannot be true when `noAuthors` is false\n      noCaptions: noAuthors && tabState.forwardMessages.noCaptions,\n    },\n  }, tabId);\n});\n\naddActionHandler('setForwardNoCaptions', (global, actions, payload): ActionReturnType => {\n  const { noCaptions, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      noCaptions,\n      noAuthors: noCaptions, // On other clients `noAuthors` updates together with `noCaptions`\n    },\n  }, tabId);\n});\n\naddActionHandler('exitForwardMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openForwardMenuForSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId: fromChatId, messageIds } = tabState.selectedMessages;\n\n  actions.openForwardMenu({ fromChatId, messageIds, tabId });\n});\n\naddActionHandler('cancelMessageMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  const byChatId = tabState.activeDownloads.byChatId[message.chatId];\n  if (!byChatId || !byChatId.length) return;\n\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: byChatId.filter((id) => id !== message.id),\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelMessagesMediaDownload', (global, actions, payload): ActionReturnType => {\n  const { messages, tabId = getCurrentTabId() } = payload;\n\n  const byChatId = selectTabState(global, tabId).activeDownloads.byChatId;\n  const newByChatId: TabState['activeDownloads']['byChatId'] = {};\n  Object.keys(byChatId).forEach((chatId) => {\n    newByChatId[chatId] = byChatId[chatId].filter((id) => !messages.find((message) => message.id === id));\n  });\n  return updateTabState(global, {\n    activeDownloads: {\n      byChatId: newByChatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('downloadMessageMedia', (global, actions, payload): ActionReturnType => {\n  const { message, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  global = updateTabState(global, {\n    activeDownloads: {\n      byChatId: {\n        ...tabState.activeDownloads.byChatId,\n        [message.chatId]: [...(tabState.activeDownloads.byChatId[message.chatId] || []), message.id],\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('downloadSelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  const { threadId } = selectCurrentMessageList(global, tabId) || {};\n\n  const chatMessages = selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds.map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canDownload);\n  messages.forEach((message) => actions.downloadMessageMedia({ message, tabId }));\n});\n\naddActionHandler('enterMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { messageId, tabId = getCurrentTabId() } = payload || {};\n  const openChat = selectCurrentChat(global, tabId);\n  if (!openChat) {\n    return global;\n  }\n\n  return enterMessageSelectMode(global, openChat.id, messageId, tabId);\n});\n\naddActionHandler('toggleMessageSelection', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId,\n    groupedId,\n    childMessageIds,\n    withShift,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n\n  global = toggleMessageSelection(\n    global, chatId, threadId, messageListType, messageId, groupedId, childMessageIds, withShift, tabId,\n  );\n\n  setGlobal(global);\n\n  if (selectTabState(global, tabId).shouldShowContextMenuHint) {\n    actions.disableContextMenuHint({ tabId });\n    actions.showNotification({\n      // eslint-disable-next-line max-len\n      message: `To **edit** or **reply**, close this menu. Then ${IS_TOUCH_ENV ? 'long tap' : 'right click'} on a message.`,\n      tabId,\n    });\n  }\n});\n\naddActionHandler('disableContextMenuHint', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  if (!selectTabState(global, tabId).shouldShowContextMenuHint) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    shouldShowContextMenuHint: false,\n  }, tabId);\n});\n\naddActionHandler('exitMessageSelectMode', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return exitMessageSelectMode(global, tabId);\n});\n\naddActionHandler('openPollModal', (global, actions, payload): ActionReturnType => {\n  const { isQuiz, tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: true,\n      isQuiz,\n    },\n  }, tabId);\n});\n\naddActionHandler('closePollModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    pollModal: {\n      isOpen: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('checkVersionNotification', (global, actions): ActionReturnType => {\n  if (RELEASE_DATETIME && Date.now() > Number(RELEASE_DATETIME) + VERSION_NOTIFICATION_DURATION) {\n    return;\n  }\n\n  const currentVersion = APP_VERSION.split('.').slice(0, 2).join('.');\n  const { serviceNotifications } = global;\n\n  if (serviceNotifications.find(({ version }) => version === currentVersion)) {\n    return;\n  }\n\n  const message: Omit<ApiMessage, 'id'> = {\n    chatId: SERVICE_NOTIFICATIONS_USER_ID,\n    date: getServerTime(),\n    content: {\n      text: parseMessageInput(versionNotification, true),\n    },\n    isOutgoing: false,\n  };\n\n  actions.createServiceNotification({\n    message: message as ApiMessage,\n    version: currentVersion,\n  });\n});\n\naddActionHandler('createServiceNotification', (global, actions, payload): ActionReturnType => {\n  const { message, version } = payload;\n  const { serviceNotifications } = global;\n  const serviceChat = selectChat(global, SERVICE_NOTIFICATIONS_USER_ID)!;\n\n  const maxId = Math.max(\n    serviceChat.lastMessage?.id || 0,\n    ...serviceNotifications.map(({ id }) => id),\n  );\n  const fractionalPart = (serviceNotifications.length + 1) / SERVICE_NOTIFICATIONS_MAX_AMOUNT;\n  // The fractional ID is made of the largest integer ID and an incremented fractional part\n  const id = Math.floor(maxId) + fractionalPart;\n\n  message.previousLocalId = message.id;\n  message.id = id;\n\n  const serviceNotification = {\n    id,\n    message,\n    version,\n    isUnread: true,\n  };\n\n  global = {\n    ...global,\n    serviceNotifications: [\n      ...serviceNotifications.slice(-SERVICE_NOTIFICATIONS_MAX_AMOUNT),\n      serviceNotification,\n    ],\n  };\n  setGlobal(global);\n\n  actions.apiUpdate({\n    '@type': 'newMessage',\n    id: message.id,\n    chatId: message.chatId,\n    message,\n  });\n});\n\naddActionHandler('openReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    reactorModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeReactorListModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    reactorModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    seenByModal: { chatId, messageId },\n  }, tabId);\n});\n\naddActionHandler('closeSeenByModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    seenByModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('openMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { chatId, id, tabId = getCurrentTabId() } = payload;\n\n  const activeLanguage = selectRequestedTranslationLanguage(global, chatId, id, tabId);\n\n  return updateTabState(global, {\n    messageLanguageModal: { chatId, messageId: id, activeLanguage },\n  }, tabId);\n});\n\naddActionHandler('closeMessageLanguageModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    messageLanguageModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('copySelectedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.selectedMessages) {\n    return;\n  }\n\n  const { chatId, messageIds } = tabState.selectedMessages;\n  copyTextForMessages(global, chatId, messageIds);\n});\n\naddActionHandler('copyMessagesByIds', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!messageIds || messageIds.length === 0 || !chat) {\n    return;\n  }\n\n  copyTextForMessages(global, chat.id, messageIds);\n});\n\nfunction copyTextForMessages(global: GlobalState, chatId: string, messageIds: number[]) {\n  const { type: messageListType, threadId } = selectCurrentMessageList(global) || {};\n  const lang = langProvider.translate;\n\n  const chatMessages = messageListType === 'scheduled'\n    ? selectChatScheduledMessages(global, chatId)\n    : selectChatMessages(global, chatId);\n  if (!chatMessages || !threadId) return;\n  const messages = messageIds\n    .map((id) => chatMessages[id])\n    .filter((message) => selectAllowedMessageActions(global, message, threadId).canCopy)\n    .sort((message1, message2) => message1.id - message2.id);\n\n  const result = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${renderMessageSummaryHtml(lang, message)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  const resultText = messages.reduce((acc, message) => {\n    const sender = selectSender(global, message);\n    acc.push(`> ${sender ? getSenderTitle(lang, sender) : ''}:`);\n    acc.push(`${getMessageSummaryText(lang, message, false, 0, undefined, true)}\\n`);\n\n    return acc;\n  }, [] as string[]);\n\n  copyHtmlToClipboard(result.join('\\n'), resultText.join('\\n'));\n}\n","import type { LangFn } from '../../hooks/useLang';\nimport type { ApiMessage } from '../../api/types';\nimport { renderMessageText } from '../../components/common/helpers/renderMessageText';\nimport { getMessageSummaryDescription, getMessageSummaryEmoji } from './messageSummary';\n\nexport function renderMessageSummaryHtml(\n  lang: LangFn,\n  message: ApiMessage,\n) {\n  const emoji = getMessageSummaryEmoji(message);\n  const emojiWithSpace = emoji ? `${emoji} ` : '';\n  const text = renderMessageText(\n    message, undefined, undefined, undefined, undefined, undefined, true,\n  )?.join('');\n  const description = getMessageSummaryDescription(lang, message, text, true, true);\n\n  return `${emojiWithSpace}${description}`;\n}\n","import { addActionHandler } from '../../index';\n\nimport { updateGlobalSearch, updateGlobalSearchContent } from '../../reducers';\nimport { selectTabState } from '../../selectors';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst MAX_RECENTLY_FOUND_IDS = 10;\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  return updateGlobalSearch(global, {\n    globalResults: {},\n    localResults: {},\n    resultsByType: undefined,\n    ...(query ? { fetchingStatus: { chats: !chatId, messages: true } } : { fetchingStatus: undefined }),\n    query,\n  }, tabId);\n});\n\naddActionHandler('setGlobalSearchClosing', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), isClosing } = payload || {};\n  return updateGlobalSearch(global, {\n    isClosing,\n  }, tabId);\n});\n\naddActionHandler('addRecentlyFoundChatId', (global, actions, payload): ActionReturnType => {\n  const { id } = payload!;\n  const { recentlyFoundChatIds } = global;\n\n  if (!recentlyFoundChatIds) {\n    return {\n      ...global,\n      recentlyFoundChatIds: [id],\n    };\n  }\n\n  const newRecentIds = recentlyFoundChatIds.filter((chatId) => chatId !== id);\n  newRecentIds.unshift(id);\n  if (newRecentIds.length > MAX_RECENTLY_FOUND_IDS) {\n    newRecentIds.pop();\n  }\n\n  return {\n    ...global,\n    recentlyFoundChatIds: newRecentIds,\n  };\n});\n\naddActionHandler('clearRecentlyFoundChats', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentlyFoundChatIds: undefined,\n  };\n});\n\naddActionHandler('setGlobalSearchContent', (global, actions, payload): ActionReturnType => {\n  const { content, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearchContent(global, content, tabId);\n});\n\naddActionHandler('setGlobalSearchChatId', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateGlobalSearch(global, { chatId: id, query: undefined, resultsByType: undefined }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    stickerSearch: {\n      query,\n      resultIds: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    gifSearch: {\n      query,\n      offset: undefined,\n      // offsetId: undefined,\n      results: undefined,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\n\nimport { closeNewContactDialog, updateUserSearch } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const {\n    query,\n    tabId = getCurrentTabId(),\n  } = payload!;\n\n  return updateUserSearch(global, {\n    globalUserIds: undefined,\n    localUserIds: undefined,\n    fetchingStatus: Boolean(query),\n    query,\n  }, tabId);\n});\n\naddActionHandler('openAddContactDialog', (global, actions, payload): ActionReturnType => {\n  const { userId, tabId = getCurrentTabId() } = payload!;\n\n  return updateTabState(global, {\n    newContact: { userId },\n  }, tabId);\n});\n\naddActionHandler('openNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    newContact: {\n      isByPhoneNumber: true,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeNewContactDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return closeNewContactDialog(global, tabId);\n});\n","export default function updateIcon(asUnread: boolean) {\n  document.querySelectorAll<HTMLLinkElement>('link[rel=\"icon\"], link[rel=\"alternate icon\"]')\n    .forEach((link) => {\n      if (asUnread) {\n        if (!link.href.includes('favicon-unread')) {\n          link.href = link.href.replace('favicon', 'favicon-unread');\n        }\n      } else {\n        link.href = link.href.replace('favicon-unread', 'favicon');\n      }\n    });\n}\n","import { debounce } from './schedulers';\n\nconst UPDATE_DEBOUNCE_MS = 200;\n\n// For some reason setting `document.title` to the same value\n// causes increment of Chrome Dev Tools > Performance Monitor > DOM Nodes counter\nexport function setPageTitleInstant(nextTitle: string) {\n  if (document.title !== nextTitle) {\n    document.title = nextTitle;\n  }\n}\n\n// Synchronous page title update has conflicts with History API in Chrome\nexport const setPageTitle = debounce(setPageTitleInstant, UPDATE_DEBOUNCE_MS, false);\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiError, ApiNotification } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType } from '../../types';\n\nimport {\n  APP_VERSION, DEBUG, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT, INACTIVE_MARKER, PAGE_TITLE,\n} from '../../../config';\nimport getReadableErrorText from '../../../util/getReadableErrorText';\nimport {\n  selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState, selectIsTrustedBot, selectChat,\n} from '../../selectors';\nimport generateIdFor from '../../../util/generateIdFor';\nimport { compact, unique } from '../../../util/iteratees';\nimport { getAllMultitabTokens, getCurrentTabId, reestablishMasterToSelf } from '../../../util/establishMultitabRole';\nimport { getAllNotificationsCount } from '../../../util/folderManager';\nimport updateIcon from '../../../util/updateIcon';\nimport { setPageTitle, setPageTitleInstant } from '../../../util/updatePageTitle';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getIsMobile, getIsTablet } from '../../../hooks/useAppLayout';\nimport * as langProvider from '../../../util/langProvider';\nimport { getAllowedAttachmentOptions, getChatTitle } from '../../helpers';\n\nexport const APP_VERSION_URL = 'version.txt';\nconst MAX_STORED_EMOJIS = 8 * 4; // Represents four rows of recent emojis\n\naddActionHandler('toggleChatInfo', (global, actions, payload): ActionReturnType => {\n  const { force, tabId = getCurrentTabId() } = payload || {};\n  const isChatInfoShown = force !== undefined ? force : !selectTabState(global, tabId).isChatInfoShown;\n\n  global = updateTabState(global, { isChatInfoShown }, tabId);\n  global = { ...global, lastIsChatInfoShown: isChatInfoShown };\n\n  return global;\n});\n\naddActionHandler('setLeftColumnWidth', (global, actions, payload): ActionReturnType => {\n  const { leftColumnWidth } = payload;\n\n  return {\n    ...global,\n    leftColumnWidth,\n  };\n});\n\naddActionHandler('resetLeftColumnWidth', (global): ActionReturnType => {\n  return {\n    ...global,\n    leftColumnWidth: undefined,\n  };\n});\n\naddActionHandler('toggleManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: !(tabState.management.byChatId[chatId] || {}).isActive,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('requestNextManagementScreen', (global, actions, payload): ActionReturnType => {\n  const { screen, tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: true,\n          nextScreen: screen,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('closeManagement', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n\n  if (!chatId) {\n    return undefined;\n  }\n\n  const tabState = selectTabState(global, tabId);\n\n  return updateTabState(global, {\n    management: {\n      byChatId: {\n        ...tabState.management.byChatId,\n        [chatId]: {\n          ...tabState.management.byChatId[chatId],\n          isActive: false,\n        },\n      },\n    },\n  }, tabId);\n});\n\naddActionHandler('openChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  if (!getIsMobile() && !getIsTablet()) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    isLeftColumnShown: selectTabState(global, tabId).messageLists.length === 0,\n  }, tabId);\n});\n\naddActionHandler('toggleStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    isStatisticsShown: !tabState.isStatisticsShown,\n    statistics: {\n      ...tabState.statistics,\n      currentMessageId: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleMessageStatistics', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), messageId } = payload || {};\n  return updateTabState(global, {\n    statistics: {\n      ...selectTabState(global, tabId).statistics,\n      currentMessageId: messageId,\n    },\n  }, tabId);\n});\n\naddActionHandler('toggleLeftColumn', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    isLeftColumnShown: !selectTabState(global, tabId).isLeftColumnShown,\n  }, tabId);\n});\n\naddActionHandler('addRecentEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { recentEmojis } = global;\n  if (!recentEmojis) {\n    return {\n      ...global,\n      recentEmojis: [emoji],\n    };\n  }\n\n  const newEmojis = recentEmojis.filter((e) => e !== emoji);\n  newEmojis.unshift(emoji);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentEmojis: newEmojis,\n  };\n});\n\naddActionHandler('addRecentSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload;\n  const { recent } = global.stickers;\n  if (!recent) {\n    return {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        recent: {\n          hash: '0',\n          stickers: [sticker],\n        },\n      },\n    };\n  }\n\n  const newStickers = recent.stickers.filter((s) => s.id !== sticker.id);\n  newStickers.unshift(sticker);\n\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        ...recent,\n        stickers: newStickers,\n      },\n    },\n  };\n});\n\naddActionHandler('addRecentCustomEmoji', (global, actions, payload): ActionReturnType => {\n  const { documentId } = payload;\n  const { recentCustomEmojis } = global;\n  if (!recentCustomEmojis) {\n    return {\n      ...global,\n      recentCustomEmojis: [documentId],\n    };\n  }\n\n  const newEmojis = recentCustomEmojis.filter((id) => id !== documentId);\n  newEmojis.unshift(documentId);\n  if (newEmojis.length > MAX_STORED_EMOJIS) {\n    newEmojis.pop();\n  }\n\n  return {\n    ...global,\n    recentCustomEmojis: newEmojis,\n  };\n});\n\naddActionHandler('clearRecentCustomEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    recentCustomEmojis: [],\n  };\n});\n\naddActionHandler('reorderStickerSets', (global, actions, payload): ActionReturnType => {\n  const { order, isCustomEmoji } = payload;\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      added: {\n        setIds: (!isCustomEmoji ? order : global.stickers.added.setIds),\n      },\n    },\n    customEmojis: {\n      ...global.customEmojis,\n      added: {\n        setIds: (isCustomEmoji ? order : global.customEmojis.added.setIds),\n      },\n    },\n  };\n});\n\naddActionHandler('showNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId(), ...notification } = payload;\n  notification.localId = generateIdFor({});\n\n  const newNotifications = [...selectTabState(global, tabId).notifications];\n  const existingNotificationIndex = newNotifications.findIndex((n) => n.message === notification.message);\n  if (existingNotificationIndex !== -1) {\n    newNotifications.splice(existingNotificationIndex, 1);\n  }\n\n  newNotifications.push(notification as ApiNotification);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showAllowedMessageTypesNotification', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const {\n    canSendPlainText, canSendPhotos, canSendVideos, canSendDocuments, canSendAudios,\n    canSendStickers, canSendRoundVideos, canSendVoices,\n  } = getAllowedAttachmentOptions(chat);\n  const allowedContent = compact([\n    canSendPlainText ? 'Chat.SendAllowedContentTypeText' : undefined,\n    canSendPhotos ? 'Chat.SendAllowedContentTypePhoto' : undefined,\n    canSendVideos ? 'Chat.SendAllowedContentTypeVideo' : undefined,\n    canSendVoices ? 'Chat.SendAllowedContentTypeVoiceMessage' : undefined,\n    canSendRoundVideos ? 'Chat.SendAllowedContentTypeVideoMessage' : undefined,\n    canSendDocuments ? 'Chat.SendAllowedContentTypeFile' : undefined,\n    canSendAudios ? 'Chat.SendAllowedContentTypeMusic' : undefined,\n    canSendStickers ? 'Chat.SendAllowedContentTypeSticker' : undefined,\n  ]).map((l) => langProvider.translate(l));\n\n  if (!allowedContent.length) {\n    actions.showNotification({\n      message: langProvider.translate('Chat.SendNotAllowedText'),\n      tabId,\n    });\n    return;\n  }\n\n  const lastDelimiter = langProvider.translate('AutoDownloadSettings.LastDelimeter');\n  const allowedContentString = allowedContent.join(', ').replace(/,([^,]*)$/, `${lastDelimiter}$1`);\n\n  actions.showNotification({\n    message: langProvider.translate('Chat.SendAllowedContentText', allowedContentString),\n    tabId,\n  });\n});\n\naddActionHandler('dismissNotification', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const newNotifications = selectTabState(global, tabId)\n    .notifications.filter(({ localId }) => localId !== payload.localId);\n\n  return updateTabState(global, {\n    notifications: newNotifications,\n  }, tabId);\n});\n\naddActionHandler('showDialog', (global, actions, payload): ActionReturnType => {\n  const { data, tabId = getCurrentTabId() } = payload!;\n\n  // Filter out errors that we don't want to show to the user\n  if ('message' in data && data.hasErrorKey && !getReadableErrorText(data)) {\n    return global;\n  }\n\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n  if ('message' in data) {\n    const existingErrorIndex = newDialogs.findIndex((err) => (err as ApiError).message === data.message);\n    if (existingErrorIndex !== -1) {\n      newDialogs.splice(existingErrorIndex, 1);\n    }\n  }\n\n  newDialogs.push(data);\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('dismissDialog', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const newDialogs = [...selectTabState(global, tabId).dialogs];\n\n  newDialogs.pop();\n\n  return updateTabState(global, {\n    dialogs: newDialogs,\n  }, tabId);\n});\n\naddActionHandler('toggleSafeLinkModal', (global, actions, payload): ActionReturnType => {\n  const { url: safeLinkModalUrl, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    safeLinkModalUrl,\n  }, tabId);\n});\n\naddActionHandler('openHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { selectedAt, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: selectedAt,\n  }, tabId);\n});\n\naddActionHandler('closeHistoryCalendar', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    historyCalendarSelectedAt: undefined,\n  }, tabId);\n});\n\naddActionHandler('openGame', (global, actions, payload): ActionReturnType => {\n  const {\n    url, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!message) return;\n\n  const botId = message.viaBotId || message.senderId;\n  if (!botId) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'game',\n        onConfirm: {\n          action: 'openGame',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedGame: {\n      url,\n      chatId,\n      messageId,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGame', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedGame: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestConfetti', (global, actions, payload): ActionReturnType => {\n  const {\n    top, left, width, height, tabId = getCurrentTabId(),\n  } = payload || {};\n  const { animationLevel } = global.settings.byKey;\n  if (animationLevel === 0) return undefined;\n\n  return updateTabState(global, {\n    confetti: {\n      lastConfettiTime: Date.now(),\n      top,\n      left,\n      width,\n      height,\n    },\n  }, tabId);\n});\n\naddActionHandler('updateAttachmentSettings', (global, actions, payload): ActionReturnType => {\n  const {\n    shouldCompress, shouldSendGrouped,\n  } = payload;\n\n  return {\n    ...global,\n    attachmentSettings: {\n      shouldCompress: shouldCompress ?? global.attachmentSettings.shouldCompress,\n      shouldSendGrouped: shouldSendGrouped ?? global.attachmentSettings.shouldSendGrouped,\n    },\n  };\n});\n\naddActionHandler('openLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { limit, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    limitReachedModal: {\n      limit,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeLimitReachedModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    limitReachedModal: undefined,\n  }, tabId);\n});\n\naddActionHandler('closeStickerSetModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedStickerSetShortName: undefined,\n  }, tabId);\n});\n\naddActionHandler('openCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { setIds, tabId = getCurrentTabId() } = payload;\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: setIds,\n  }, tabId);\n});\n\naddActionHandler('closeCustomEmojiSets', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    openedCustomEmojiSetIds: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateLastRenderedCustomEmojis', (global, actions, payload): ActionReturnType => {\n  const { ids } = payload;\n  const { lastRendered } = global.customEmojis;\n\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      lastRendered: unique([...lastRendered, ...ids]).slice(0, GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT),\n    },\n  };\n});\n\naddActionHandler('openCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, threadId: MAIN_THREAD_ID, tabId });\n\n  return updateTabState(global, {\n    createTopicPanel: {\n      chatId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeCreateTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    createTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('openEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n\n  // Topic panel can be opened only if there is a selected chat\n  const currentChat = selectCurrentChat(global, tabId);\n  if (!currentChat) actions.openChat({ id: chatId, tabId });\n\n  return updateTabState(global, {\n    editTopicPanel: {\n      chatId,\n      topicId,\n    },\n  }, tabId);\n});\n\naddActionHandler('closeEditTopicPanel', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    editTopicPanel: undefined,\n  }, tabId);\n});\n\naddActionHandler('updateArchiveSettings', (global, actions, payload): ActionReturnType => {\n  const { archiveSettings } = global;\n  const { isHidden = archiveSettings.isHidden, isMinimized = archiveSettings.isMinimized } = payload;\n\n  return {\n    ...global,\n    archiveSettings: {\n      isHidden,\n      isMinimized,\n    },\n  };\n});\n\naddActionHandler('checkAppVersion', (global): ActionReturnType => {\n  const APP_VERSION_REGEX = /^\\d+\\.\\d+(\\.\\d+)?$/;\n\n  fetch(`${APP_VERSION_URL}?${Date.now()}`)\n    .then((response) => response.text())\n    .then((version) => {\n      version = version.trim();\n\n      if (APP_VERSION_REGEX.test(version) && version !== APP_VERSION) {\n        global = getGlobal();\n        global = {\n          ...global,\n          isUpdateAvailable: true,\n        };\n        setGlobal(global);\n      }\n    })\n    .catch((err) => {\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.error('[checkAppVersion failed] ', err);\n      }\n    });\n});\n\naddActionHandler('afterHangUp', (global): ActionReturnType => {\n  if (!selectTabState(global, getCurrentTabId()).multitabNextAction) return;\n  reestablishMasterToSelf();\n});\n\nlet notificationInterval: number | undefined;\n\nconst NOTIFICATION_INTERVAL = 500;\n\naddActionHandler('onTabFocusChange', (global, actions, payload): ActionReturnType => {\n  const { isBlurred, tabId = getCurrentTabId() } = payload;\n\n  if (!isBlurred) {\n    actions.updateIsOnline(true);\n  }\n\n  const blurredTabTokens = unique(isBlurred\n    ? [...global.blurredTabTokens, tabId]\n    : global.blurredTabTokens.filter((t) => t !== tabId));\n\n  if (blurredTabTokens.length === getAllMultitabTokens().length) {\n    actions.updateIsOnline(false);\n  }\n\n  if (isBlurred) {\n    if (notificationInterval) clearInterval(notificationInterval);\n\n    notificationInterval = window.setInterval(() => {\n      actions.updatePageTitle({\n        tabId,\n      });\n    }, NOTIFICATION_INTERVAL);\n  } else {\n    clearInterval(notificationInterval);\n    notificationInterval = undefined;\n  }\n\n  return {\n    ...global,\n    blurredTabTokens,\n    initialUnreadNotifications: isBlurred ? getAllNotificationsCount() : undefined,\n  };\n});\n\naddActionHandler('updatePageTitle', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { canDisplayChatInTitle } = global.settings.byKey;\n  const currentUserId = global.currentUserId;\n\n  if (document.title.includes(INACTIVE_MARKER)) {\n    updateIcon(false);\n    setPageTitleInstant(`${PAGE_TITLE} ${INACTIVE_MARKER}`);\n    return;\n  }\n\n  if (global.initialUnreadNotifications && Math.round(Date.now() / 1000) % 2 === 0) {\n    const notificationCount = getAllNotificationsCount();\n\n    const newUnread = notificationCount - global.initialUnreadNotifications;\n\n    if (newUnread > 0) {\n      setPageTitleInstant(`${newUnread} notification${newUnread > 1 ? 's' : ''}`);\n      updateIcon(true);\n      return;\n    }\n  }\n\n  updateIcon(false);\n\n  const messageList = selectCurrentMessageList(global, tabId);\n  if (messageList && canDisplayChatInTitle) {\n    const { chatId, threadId } = messageList;\n    const currentChat = selectChat(global, chatId);\n    if (currentChat) {\n      const title = getChatTitle(langProvider.translate, currentChat, undefined, chatId === currentUserId);\n      if (currentChat.isForum && currentChat.topics?.[threadId]) {\n        setPageTitle(`${title} › ${currentChat.topics[threadId].title}`);\n        return;\n      }\n\n      setPageTitle(title);\n      return;\n    }\n  }\n\n  setPageTitleInstant(PAGE_TITLE);\n});\n","import { addActionHandler } from '../../index';\n\nimport { clearPayment, closeInvoice } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\nimport { selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('closePaymentModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const status = selectTabState(global, tabId).payment.status;\n  global = clearPayment(global, tabId);\n  global = closeInvoice(global, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status,\n    },\n  }, tabId);\n  return global;\n});\n\naddActionHandler('addPaymentError', (global, actions, payload): ActionReturnType => {\n  const { error, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      status: 'failed',\n      error,\n    },\n  }, tabId);\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { selectTabState } from '../../selectors';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('openMediaViewer', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId, mediaId, avatarOwnerId, profilePhotoIndex, origin, volume, playbackRate, isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    mediaViewer: {\n      ...tabState.mediaViewer,\n      chatId,\n      threadId,\n      mediaId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n      isHidden: false,\n      volume: volume ?? tabState.mediaViewer.volume,\n      playbackRate: playbackRate || tabState.mediaViewer.playbackRate || global.mediaViewer.lastPlaybackRate,\n      isMuted: isMuted || tabState.mediaViewer.isMuted,\n    },\n    forwardMessages: {},\n  }, tabId);\n});\n\naddActionHandler('closeMediaViewer', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    volume, isMuted, playbackRate, isHidden,\n  } = selectTabState(global, tabId).mediaViewer;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      volume,\n      isMuted,\n      isHidden,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerVolume', (global, actions, payload): ActionReturnType => {\n  const {\n    volume,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      volume,\n      isMuted: false,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerPlaybackRate', (global, actions, payload): ActionReturnType => {\n  const {\n    playbackRate,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  global = {\n    ...global,\n    mediaViewer: {\n      ...global.mediaViewer,\n      lastPlaybackRate: playbackRate,\n    },\n  };\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      playbackRate,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerMuted', (global, actions, payload): ActionReturnType => {\n  const {\n    isMuted,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isMuted,\n    },\n  }, tabId);\n});\n\naddActionHandler('setMediaViewerHidden', (global, actions, payload): ActionReturnType => {\n  const { isHidden, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    mediaViewer: {\n      ...selectTabState(global, tabId).mediaViewer,\n      isHidden,\n    },\n  }, tabId);\n});\n","import { addActionHandler, setGlobal, getGlobal } from '../../index';\n\nimport { clearPasscodeSettings, updatePasscodeSettings } from '../../reducers';\nimport { clearStoredSession, loadStoredSession, storeSession } from '../../../util/sessions';\nimport {\n  clearEncryptedSession, decryptSession, encryptSession, setupPasscode,\n} from '../../../util/passcode';\nimport { forceUpdateCache, migrateCache, serializeGlobal } from '../../cache';\nimport { onBeforeUnload } from '../../../util/schedulers';\nimport { cloneDeep } from '../../../util/iteratees';\nimport { INITIAL_GLOBAL_STATE } from '../../initialState';\nimport type { ActionReturnType } from '../../types';\nimport { signalPasscodeHash } from '../../../util/establishMultitabRole';\n\nlet noLockOnUnload = false;\nonBeforeUnload(() => {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  if (getGlobal().passcode.hasPasscode && !noLockOnUnload && Object.keys(getGlobal().byTabId).length === 1) {\n    clearStoredSession();\n  }\n});\n\naddActionHandler('setPasscode', async (global, actions, payload): Promise<void> => {\n  const { passcode } = payload;\n  global = updatePasscodeSettings(global, {\n    isLoading: true,\n  });\n  setGlobal(global);\n  await setupPasscode(passcode);\n\n  const sessionJson = JSON.stringify({ ...loadStoredSession(), userId: global.currentUserId });\n  global = getGlobal();\n  const globalJson = serializeGlobal(updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  }));\n\n  await encryptSession(sessionJson, globalJson);\n\n  signalPasscodeHash();\n  global = getGlobal();\n  global = updatePasscodeSettings(global, {\n    hasPasscode: true,\n    error: undefined,\n    isLoading: false,\n  });\n  setGlobal(global);\n\n  forceUpdateCache(true);\n});\n\naddActionHandler('clearPasscode', (global): ActionReturnType => {\n  void clearEncryptedSession();\n\n  return clearPasscodeSettings(global);\n});\n\naddActionHandler('unlockScreen', (global, actions, payload): ActionReturnType => {\n  const beforeTabStates = Object.values(global.byTabId);\n  const { sessionJson, globalJson } = payload;\n  const session = JSON.parse(sessionJson);\n  storeSession(session, session.userId);\n\n  const previousGlobal = global;\n  global = JSON.parse(globalJson);\n  global.byTabId = previousGlobal.byTabId;\n  migrateCache(global, cloneDeep(INITIAL_GLOBAL_STATE));\n\n  global = updatePasscodeSettings(\n    global,\n    {\n      isScreenLocked: false,\n      error: undefined,\n      invalidAttemptsCount: 0,\n    },\n  );\n  setGlobal(global);\n\n  signalPasscodeHash();\n\n  beforeTabStates.forEach(({ id: tabId, isMasterTab }) => actions.init({ tabId, isMasterTab }));\n  actions.initApi();\n});\n\naddActionHandler('decryptSession', (global, actions, payload): ActionReturnType => {\n  const { passcode } = payload;\n  decryptSession(passcode).then(actions.unlockScreen, () => {\n    actions.logInvalidUnlockAttempt();\n  });\n});\n\naddActionHandler('logInvalidUnlockAttempt', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: (global.passcode?.invalidAttemptsCount ?? 0) + 1,\n  });\n});\n\naddActionHandler('resetInvalidUnlockAttempts', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, {\n    invalidAttemptsCount: 0,\n  });\n});\n\naddActionHandler('setPasscodeError', (global, actions, payload): ActionReturnType => {\n  const { error } = payload;\n\n  return updatePasscodeSettings(global, { error });\n});\n\naddActionHandler('clearPasscodeError', (global): ActionReturnType => {\n  return updatePasscodeSettings(global, { error: undefined });\n});\n\naddActionHandler('skipLockOnUnload', (): ActionReturnType => {\n  noLockOnUnload = true;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ActionReturnType, ApiDraft, GlobalState, TabArgs,\n} from '../../types';\nimport type {\n  ApiAttachment,\n  ApiChat,\n  ApiMessage,\n  ApiMessageEntity,\n  ApiNewPoll,\n  ApiOnProgress,\n  ApiSticker,\n  ApiUser,\n  ApiVideo,\n} from '../../../api/types';\nimport {\n  MAIN_THREAD_ID,\n  MESSAGE_DELETED,\n} from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport {\n  MAX_MEDIA_FILES_FOR_ALBUM,\n  MESSAGE_LIST_SLICE,\n  RE_TELEGRAM_LINK,\n  RE_TG_LINK,\n  RE_TME_LINK,\n  SERVICE_NOTIFICATIONS_USER_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_IOS } from '../../../util/environment';\nimport { callApi, cancelApiProgress } from '../../../api/gramjs';\nimport {\n  areSortedArraysIntersecting, buildCollectionByKey, omit, split, unique,\n} from '../../../util/iteratees';\nimport {\n  addUsers,\n  addChatMessagesById,\n  replaceThreadParam,\n  safeReplaceViewportIds,\n  updateChatMessage,\n  addChats,\n  updateListedIds,\n  updateOutlyingIds,\n  replaceScheduledMessages,\n  updateThreadInfos,\n  updateChat,\n  updateThreadUnreadFromForwardedMessage,\n  updateSponsoredMessage,\n  updateTopic,\n  updateThreadInfo,\n  replaceTabThreadParam,\n  updateRequestedMessageTranslation,\n  removeRequestedMessageTranslation,\n  updateMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectCurrentMessageList,\n  selectFocusedMessageId,\n  selectCurrentChat,\n  selectListedIds,\n  selectOutlyingIds,\n  selectViewportIds,\n  selectRealLastReadId,\n  selectReplyingToId,\n  selectEditingId,\n  selectDraft,\n  selectThreadTopMessageId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectScheduledMessage,\n  selectNoWebPage,\n  selectFirstUnreadId,\n  selectUser,\n  selectSendAs,\n  selectSponsoredMessage,\n  selectIsCurrentUserPremium,\n  selectForwardsContainVoiceMessages,\n  selectTabState,\n  selectThreadIdFromMessage,\n  selectLanguageCode,\n  selectForwardsCanBeSentToChat,\n} from '../../selectors';\nimport {\n  debounce, onTickEnd, rafPromise,\n} from '../../../util/schedulers';\nimport {\n  getMessageOriginalId, getUserFullName, isDeletedUser, isServiceNotificationMessage, isUserBot,\n} from '../../helpers';\nimport { translate } from '../../../util/langProvider';\nimport { ensureProtocol } from '../../../util/ensureProtocol';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst AUTOLOGIN_TOKEN_KEY = 'autologin_token';\n\nconst uploadProgressCallbacks = new Map<number, ApiOnProgress>();\n\nconst runDebouncedForMarkRead = debounce((cb) => cb(), 500, false);\n\naddActionHandler('loadViewportMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    direction = LoadMoreDirection.Around,\n    isBudgetPreload = false,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  let { chatId, threadId } = payload || {};\n\n  if (!chatId || !threadId) {\n    const currentMessageList = selectCurrentMessageList(global, tabId);\n    if (!currentMessageList) {\n      return undefined;\n    }\n\n    chatId = currentMessageList.chatId;\n    threadId = currentMessageList.threadId;\n  }\n\n  const chat = selectChat(global, chatId);\n  // TODO Revise if `chat.isRestricted` check is needed\n  if (!chat || chat.isRestricted) {\n    return undefined;\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (!viewportIds || !viewportIds.length || direction === LoadMoreDirection.Around) {\n    const offsetId = selectFocusedMessageId(global, chatId, tabId) || selectRealLastReadId(global, chatId, threadId);\n    const isOutlying = Boolean(offsetId && listedIds && !listedIds.includes(offsetId));\n    const historyIds = (isOutlying ? outlyingIds : listedIds) || [];\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, LoadMoreDirection.Around);\n\n    if (areSomeLocal && newViewportIds.length >= MESSAGE_LIST_SLICE) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    if (!areAllLocal) {\n      onTickEnd(() => {\n        void loadViewportMessages(\n          global, chat, threadId!, offsetId, LoadMoreDirection.Around, isOutlying, isBudgetPreload, tabId,\n        );\n      });\n    }\n  } else {\n    const offsetId = direction === LoadMoreDirection.Backwards ? viewportIds[0] : viewportIds[viewportIds.length - 1];\n    const isOutlying = Boolean(outlyingIds);\n    const historyIds = (isOutlying ? outlyingIds : listedIds)!;\n    const {\n      newViewportIds, areSomeLocal, areAllLocal,\n    } = getViewportSlice(historyIds, offsetId, direction);\n\n    if (areSomeLocal) {\n      global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds, tabId);\n    }\n\n    onTickEnd(() => {\n      void loadWithBudget(\n        global, actions, areAllLocal, isOutlying, isBudgetPreload, chat, threadId!, direction, offsetId, tabId,\n      );\n    });\n\n    if (isBudgetPreload) {\n      return undefined;\n    }\n  }\n\n  return global;\n});\n\nasync function loadWithBudget<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  areAllLocal: boolean, isOutlying: boolean, isBudgetPreload: boolean,\n  chat: ApiChat, threadId: number, direction: LoadMoreDirection, offsetId?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (!areAllLocal) {\n    await loadViewportMessages(\n      global, chat, threadId, offsetId, direction, isOutlying, isBudgetPreload, tabId,\n    );\n  }\n\n  if (!isBudgetPreload) {\n    actions.loadViewportMessages({\n      chatId: chat.id, threadId, direction, isBudgetPreload: true, tabId,\n    });\n  }\n}\n\naddActionHandler('loadMessage', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, messageId, replyOriginForId, threadUpdate,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const message = await loadMessage(global, chat, messageId, replyOriginForId);\n  if (message && threadUpdate) {\n    const { lastMessageId, isDeleting } = threadUpdate;\n    global = getGlobal();\n\n    global = updateThreadUnreadFromForwardedMessage(\n      global,\n      message,\n      chatId,\n      lastMessageId,\n      isDeleting,\n    );\n    setGlobal(global);\n  }\n});\n\naddActionHandler('sendMessage', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId, type } = currentMessageList;\n\n  payload = omit(payload, ['tabId']);\n\n  if (type === 'scheduled' && !payload.scheduledAt) {\n    return updateTabState(global, {\n      contentToBeScheduled: payload,\n    }, tabId);\n  }\n\n  const chat = selectChat(global, chatId)!;\n  const replyingToId = selectReplyingToId(global, chatId, threadId);\n  const replyingToMessage = replyingToId ? selectChatMessage(global, chatId, replyingToId) : undefined;\n\n  const replyingToTopId = chat.isForum\n    ? selectThreadTopMessageId(global, chatId, threadId)\n    : replyingToMessage?.replyToTopMessageId || replyingToMessage?.replyToMessageId;\n\n  const params = {\n    ...payload,\n    chat,\n    replyingTo: replyingToId,\n    replyingToTopId,\n    noWebPage: selectNoWebPage(global, chatId, threadId),\n    sendAs: selectSendAs(global, chatId),\n  };\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  const isSingle = !payload.attachments || payload.attachments.length <= 1;\n  const isGrouped = !isSingle && payload.shouldGroupMessages;\n\n  if (isSingle) {\n    const { attachments, ...restParams } = params;\n    sendMessage(global, {\n      ...restParams,\n      attachment: attachments ? attachments[0] : undefined,\n    }, tabId);\n  } else if (isGrouped) {\n    const {\n      text, entities, attachments, ...commonParams\n    } = params;\n    const byType = splitAttachmentsByType(attachments!);\n\n    byType.forEach((group, groupIndex) => {\n      const groupedAttachments = split(group as ApiAttachment[], MAX_MEDIA_FILES_FOR_ALBUM);\n      for (let i = 0; i < groupedAttachments.length; i++) {\n        const [firstAttachment, ...restAttachments] = groupedAttachments[i];\n        const groupedId = `${Date.now()}${groupIndex}${i}`;\n\n        const isFirst = i === 0 && groupIndex === 0;\n\n        sendMessage(global, {\n          ...commonParams,\n          text: isFirst ? text : undefined,\n          entities: isFirst ? entities : undefined,\n          attachment: firstAttachment,\n          groupedId: restAttachments.length > 0 ? groupedId : undefined,\n        }, tabId);\n\n        restAttachments.forEach((attachment: ApiAttachment) => {\n          sendMessage(global, {\n            ...commonParams,\n            attachment,\n            groupedId,\n          }, tabId);\n        });\n      }\n    });\n  } else {\n    const {\n      text, entities, attachments, replyingTo, ...commonParams\n    } = params;\n\n    if (text) {\n      sendMessage(global, {\n        ...commonParams,\n        text,\n        entities,\n        replyingTo,\n      }, tabId);\n    }\n\n    attachments?.forEach((attachment: ApiAttachment) => {\n      sendMessage(global, {\n        ...commonParams,\n        attachment,\n      }, tabId);\n    });\n  }\n\n  return undefined;\n});\n\naddActionHandler('editMessage', (global, actions, payload): ActionReturnType => {\n  const { text, entities, tabId = getCurrentTabId() } = payload;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId, type: messageListType } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  const message = selectEditingMessage(global, chatId, threadId, messageListType);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('editMessage', {\n    chat, message, text, entities, noWebPage: selectNoWebPage(global, chatId, threadId),\n  });\n\n  actions.setEditingId({ messageId: undefined, tabId });\n});\n\naddActionHandler('cancelSendingMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const message = selectChatMessage(global, chatId, messageId);\n  const progressCallback = message && uploadProgressCallbacks.get(getMessageOriginalId(message));\n  if (progressCallback) {\n    cancelApiProgress(progressCallback);\n  }\n\n  actions.apiUpdate({\n    '@type': 'deleteMessages',\n    ids: [messageId],\n    chatId,\n  });\n});\n\naddActionHandler('saveDraft', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, threadId, draft, shouldForce,\n  } = payload;\n  if (!draft) {\n    return;\n  }\n\n  const { text, entities } = draft;\n  const chat = selectChat(global, chatId)!;\n  const user = selectUser(global, chatId)!;\n  if (user && isDeletedUser(user)) return;\n\n  draft.isLocal = true;\n  draft.shouldForce = shouldForce;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n\n  const result = await callApi('saveDraft', {\n    chat,\n    text,\n    entities,\n    replyToMsgId: selectReplyingToId(global, chatId, threadId),\n    threadId: selectThreadTopMessageId(global, chatId, threadId),\n  });\n\n  if (result) {\n    draft.isLocal = false;\n  }\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chatId, threadId, 'draft', draft);\n  global = updateChat(global, chatId, { draftDate: Math.round(Date.now() / 1000) });\n\n  setGlobal(global);\n});\n\naddActionHandler('clearDraft', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, threadId = MAIN_THREAD_ID, localOnly, shouldForce,\n  } = payload;\n  if (!selectDraft(global, chatId, threadId)) {\n    return undefined;\n  }\n\n  const chat = selectChat(global, chatId)!;\n\n  if (!localOnly) {\n    void callApi('clearDraft', chat, selectThreadTopMessageId(global, chatId, threadId));\n  }\n\n  const newDraft: ApiDraft | undefined = shouldForce ? { shouldForce, text: '' } : undefined;\n  global = replaceThreadParam(global, chatId, threadId, 'draft', newDraft);\n  global = updateChat(global, chatId, { draftDate: undefined });\n\n  return global;\n});\n\naddActionHandler('toggleMessageWebPage', (global, actions, payload): ActionReturnType => {\n  const { chatId, threadId, noWebPage } = payload!;\n\n  return replaceThreadParam(global, chatId, threadId, 'noWebPage', noWebPage);\n});\n\naddActionHandler('pinMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, isUnpin, isOneSide, isSilent, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('pinMessage', {\n    chat, messageId, isUnpin, isOneSide, isSilent,\n  });\n});\n\naddActionHandler('unpinAllMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const topId = selectThreadTopMessageId(global, chatId, threadId);\n  await callApi('unpinAllMessages', { chat, threadId: topId });\n\n  global = getGlobal();\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'pinnedIds', []);\n  setGlobal(global);\n});\n\naddActionHandler('deleteMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteMessages', { chat, messageIds, shouldDeleteForAll });\n\n  const editingId = selectEditingId(global, chatId, threadId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  void callApi('deleteScheduledMessages', { chat, messageIds });\n\n  const editingId = selectEditingScheduledId(global, chatId);\n  if (editingId && messageIds.includes(editingId)) {\n    actions.setEditingId({ messageId: undefined, tabId });\n  }\n});\n\naddActionHandler('deleteHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId, shouldDeleteForAll, tabId = getCurrentTabId() } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  await callApi('deleteHistory', { chat, shouldDeleteForAll });\n\n  global = getGlobal();\n  const activeChat = selectCurrentMessageList(global, tabId);\n  if (activeChat && activeChat.chatId === chatId) {\n    actions.openChat({ id: undefined, tabId });\n  }\n});\n\naddActionHandler('reportMessages', async (global, actions, payload): Promise<void> => {\n  const {\n    messageIds, reason, description, tabId = getCurrentTabId(),\n  } = payload!;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId } = currentMessageList;\n  const chat = selectChat(global, chatId)!;\n\n  const result = await callApi('reportMessages', {\n    peer: chat, messageIds, reason, description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('sendMessageAction', async (global, actions, payload): Promise<void> => {\n  const { action, chatId, threadId } = payload!;\n  if (chatId === global.currentUserId) return; // Message actions are disabled in Saved Messages\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) return;\n  const user = selectUser(global, chatId);\n  if (user && (isUserBot(user) || isDeletedUser(user))) return;\n\n  await callApi('sendMessageAction', {\n    peer: chat, threadId, action,\n  });\n});\n\naddActionHandler('markMessageListRead', (global, actions, payload): ActionReturnType => {\n  const { maxId, tabId = getCurrentTabId() } = payload!;\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return undefined;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return undefined;\n  }\n\n  runDebouncedForMarkRead(() => {\n    void callApi('markMessageListRead', {\n      chat, threadId, maxId,\n    });\n  });\n\n  if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n    global = {\n      ...global,\n      serviceNotifications: global.serviceNotifications.map((notification) => {\n        return notification.isUnread && notification.id <= maxId ? { ...notification, isUnread: false } : notification;\n      }),\n    };\n  }\n\n  const viewportIds = selectViewportIds(global, chatId, threadId, tabId);\n  const minId = selectFirstUnreadId(global, chatId, threadId, tabId);\n  if (!viewportIds || !minId || !chat.unreadCount) {\n    return global;\n  }\n\n  const readCount = countSortedIds(viewportIds!, minId, maxId);\n  if (!readCount) {\n    return global;\n  }\n\n  if (chat.isForum && chat.topics?.[threadId]) {\n    const topic = chat.topics[threadId];\n    global = updateThreadInfo(global, chatId, threadId, {\n      lastReadInboxMessageId: maxId,\n    });\n    const newTopicUnreadCount = Math.max(0, topic.unreadCount - readCount);\n    if (newTopicUnreadCount === 0) {\n      global = updateChat(global, chatId, {\n        unreadCount: Math.max(0, chat.unreadCount - 1),\n      });\n    }\n    return updateTopic(global, chatId, threadId, {\n      unreadCount: newTopicUnreadCount,\n    });\n  }\n\n  // TODO Support local marking read for comments\n  if (threadId !== MAIN_THREAD_ID) {\n    return undefined;\n  }\n\n  return updateChat(global, chatId, {\n    lastReadInboxMessageId: maxId,\n    unreadCount: Math.max(0, chat.unreadCount - readCount),\n  });\n});\n\naddActionHandler('markMessagesRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload!;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return;\n  }\n\n  void callApi('markMessagesRead', { chat, messageIds });\n});\n\naddActionHandler('loadWebPagePreview', async (global, actions, payload): Promise<void> => {\n  const { text, tabId = getCurrentTabId() } = payload;\n\n  const webPagePreview = await callApi('fetchWebPagePreview', { message: text });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webPagePreview,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearWebPagePreview', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  if (!selectTabState(global, tabId).webPagePreview) {\n    return undefined;\n  }\n\n  return updateTabState(global, {\n    webPagePreview: undefined,\n  }, tabId);\n});\n\naddActionHandler('sendPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId, options } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options });\n  }\n});\n\naddActionHandler('cancelPollVote', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload!;\n  const chat = selectChat(global, chatId);\n\n  if (chat) {\n    void callApi('sendPollVote', { chat, messageId, options: [] });\n  }\n});\n\naddActionHandler('closePoll', (global, actions, payload): ActionReturnType => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  const poll = selectChatMessage(global, chatId, messageId)?.content.poll;\n  if (chat && poll) {\n    void callApi('closePoll', { chat, messageId, poll });\n  }\n});\n\naddActionHandler('loadPollOptionResults', async (global, actions, payload): Promise<void> => {\n  const {\n    chat, messageId, option, offset, limit, shouldResetVoters, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const result = await callApi('loadPollOptionResults', {\n    chat, messageId, option, offset, limit,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  const tabState = selectTabState(global, tabId);\n  const { pollResults } = tabState;\n  const { voters } = tabState.pollResults;\n\n  global = updateTabState(global, {\n    pollResults: {\n      ...pollResults,\n      voters: {\n        ...voters,\n        [option]: unique([\n          ...(!shouldResetVoters && voters && voters[option] ? voters[option] : []),\n          ...(result && result.users.map((user) => user.id)),\n        ]),\n      },\n      offsets: {\n        ...(pollResults.offsets ? pollResults.offsets : {}),\n        [option]: result.nextOffset || '',\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExtendedMedia', (global, actions, payload): ActionReturnType => {\n  const { chatId, ids } = payload;\n  const chat = selectChat(global, chatId);\n  if (chat) {\n    void callApi('fetchExtendedMedia', { chat, ids });\n  }\n});\n\naddActionHandler('forwardMessages', (global, actions, payload): ActionReturnType => {\n  const { isSilent, scheduledAt, tabId = getCurrentTabId() } = payload;\n\n  const {\n    fromChatId, messageIds, toChatId, withMyScore, noAuthors, noCaptions, toThreadId,\n  } = selectTabState(global, tabId).forwardMessages;\n  const isCurrentUserPremium = selectIsCurrentUserPremium(global);\n  const fromChat = fromChatId ? selectChat(global, fromChatId) : undefined;\n  const toChat = toChatId ? selectChat(global, toChatId) : undefined;\n  const messages = fromChatId && messageIds\n    ? messageIds\n      .sort((a, b) => a - b)\n      .map((id) => selectChatMessage(global, fromChatId, id)).filter(Boolean)\n    : undefined;\n\n  if (!fromChat || !toChat || !messages || (toThreadId && !toChat.isForum)) {\n    return;\n  }\n\n  const sendAs = selectSendAs(global, toChatId!);\n\n  const realMessages = messages.filter((m) => !isServiceNotificationMessage(m));\n  if (realMessages.length) {\n    void callApi('forwardMessages', {\n      fromChat,\n      toChat,\n      toThreadId,\n      messages: realMessages,\n      isSilent,\n      scheduledAt,\n      sendAs,\n      withMyScore,\n      noAuthors,\n      noCaptions,\n      isCurrentUserPremium,\n    });\n  }\n\n  messages\n    .filter((m) => isServiceNotificationMessage(m))\n    .forEach((message) => {\n      const { text, entities } = message.content.text || {};\n      const { sticker, poll } = message.content;\n\n      void sendMessage(global, {\n        chat: toChat,\n        replyingToTopId: toThreadId,\n        text,\n        entities,\n        sticker,\n        poll,\n        isSilent,\n        scheduledAt,\n        sendAs,\n      }, tabId);\n    });\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    forwardMessages: {},\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadScheduledHistory', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchScheduledHistory', { chat });\n  if (!result) {\n    return;\n  }\n\n  const { messages } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = replaceScheduledMessages(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, MAIN_THREAD_ID, 'scheduledIds', ids);\n  if (chat?.isForum) {\n    const scheduledPerThread: Record<number, number[]> = {};\n    messages.forEach((message) => {\n      const threadId = selectThreadIdFromMessage(global, message);\n      const scheduledInThread = scheduledPerThread[threadId] || [];\n      scheduledInThread.push(message.id);\n      scheduledPerThread[threadId] = scheduledInThread;\n    });\n\n    Object.entries(scheduledPerThread).forEach(([threadId, scheduledIds]) => {\n      global = replaceThreadParam(global, chat.id, Number(threadId), 'scheduledIds', scheduledIds);\n    });\n  }\n  setGlobal(global);\n});\n\naddActionHandler('sendScheduledMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  void callApi('sendScheduledMessages', {\n    chat,\n    ids: [id],\n  });\n});\n\naddActionHandler('rescheduleMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, scheduledAt,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n  const message = chat && selectScheduledMessage(global, chat.id, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('rescheduleMessage', {\n    chat,\n    message,\n    scheduledAt,\n  });\n});\n\naddActionHandler('requestThreadInfoUpdate', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestThreadInfoUpdate', { chat, threadId });\n  if (!result) return;\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('transcribeAudio', async (global, actions, payload): Promise<void> => {\n  const { messageId, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) return;\n\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: '',\n  });\n\n  setGlobal(global);\n\n  const result = await callApi('transcribeAudio', { chat, messageId });\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    transcriptionId: result,\n    isTranscriptionError: !result,\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('loadCustomEmojis', async (global, actions, payload): Promise<void> => {\n  const { ids, ignoreCache } = payload;\n  const newCustomEmojiIds = ignoreCache ? ids\n    : unique(ids.filter((documentId) => !global.customEmojis.byId[documentId]));\n  const customEmoji = await callApi('fetchCustomEmoji', {\n    documentId: newCustomEmojiIds,\n  });\n  if (!customEmoji) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(customEmoji, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadViewportMessages<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n  isOutlying = false,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const chatId = chat.id;\n\n  let addOffset: number | undefined;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      addOffset = undefined;\n      break;\n    case LoadMoreDirection.Around:\n      addOffset = -(Math.round(MESSAGE_LIST_SLICE / 2) + 1);\n      break;\n    case LoadMoreDirection.Forwards:\n      addOffset = -(MESSAGE_LIST_SLICE + 1);\n      break;\n  }\n\n  global = getGlobal();\n  const result = await callApi('fetchMessages', {\n    chat: selectChat(global, chatId)!,\n    offsetId,\n    addOffset,\n    limit: MESSAGE_LIST_SLICE,\n    threadId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    messages, users, chats, repliesThreadInfos,\n  } = result;\n\n  global = getGlobal();\n\n  const localMessages = chatId === SERVICE_NOTIFICATIONS_USER_ID\n    ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n    : [];\n  const allMessages = ([] as ApiMessage[]).concat(messages, localMessages);\n  const byId = buildCollectionByKey(allMessages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = addChatMessagesById(global, chatId, byId);\n  global = isOutlying\n    ? updateOutlyingIds(global, chatId, threadId, ids, tabId)\n    : updateListedIds(global, chatId, threadId, ids);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateThreadInfos(global, chatId, repliesThreadInfos);\n\n  let listedIds = selectListedIds(global, chatId, threadId);\n  const outlyingIds = selectOutlyingIds(global, chatId, threadId, tabId);\n\n  if (isOutlying && listedIds && outlyingIds) {\n    if (!outlyingIds.length || areSortedArraysIntersecting(listedIds, outlyingIds)) {\n      global = updateListedIds(global, chatId, threadId, outlyingIds);\n      listedIds = selectListedIds(global, chatId, threadId);\n      global = replaceTabThreadParam(global, chatId, threadId, 'outlyingIds', undefined, tabId);\n      isOutlying = false;\n    }\n  }\n\n  if (!isBudgetPreload) {\n    const historyIds = isOutlying ? outlyingIds! : listedIds!;\n    const { newViewportIds } = getViewportSlice(historyIds, offsetId, direction);\n    global = safeReplaceViewportIds(global, chatId, threadId, newViewportIds!, tabId);\n  }\n\n  setGlobal(global);\n}\n\nasync function loadMessage<T extends GlobalState>(\n  global: T, chat: ApiChat, messageId: number, replyOriginForId?: number,\n) {\n  const result = await callApi('fetchMessage', { chat, messageId });\n  if (!result) {\n    return undefined;\n  }\n\n  if (result === MESSAGE_DELETED) {\n    if (replyOriginForId) {\n      global = getGlobal();\n      const replyMessage = selectChatMessage(global, chat.id, replyOriginForId);\n      global = updateChatMessage(global, chat.id, replyOriginForId, {\n        ...replyMessage,\n        replyToMessageId: undefined,\n      });\n      setGlobal(global);\n    }\n\n    return undefined;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chat.id, messageId, result.message);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  return result.message;\n}\n\nfunction findClosestIndex(sourceIds: number[], offsetId: number) {\n  if (offsetId < sourceIds[0]) {\n    return 0;\n  }\n\n  if (offsetId > sourceIds[sourceIds.length - 1]) {\n    return sourceIds.length - 1;\n  }\n\n  return sourceIds.findIndex((id, i) => (\n    id === offsetId\n    || (id < offsetId && sourceIds[i + 1] > offsetId)\n  ));\n}\n\nfunction getViewportSlice(\n  sourceIds: number[],\n  offsetId: number | undefined,\n  direction: LoadMoreDirection,\n) {\n  const { length } = sourceIds;\n  const index = offsetId ? findClosestIndex(sourceIds, offsetId) : -1;\n  const isBackwards = direction === LoadMoreDirection.Backwards;\n  const indexForDirection = isBackwards ? index : (index + 1) || length;\n  const from = indexForDirection - MESSAGE_LIST_SLICE;\n  const to = indexForDirection + MESSAGE_LIST_SLICE - 1;\n  const newViewportIds = sourceIds.slice(Math.max(0, from), to + 1);\n\n  let areSomeLocal;\n  let areAllLocal;\n  switch (direction) {\n    case LoadMoreDirection.Backwards:\n      areSomeLocal = indexForDirection > 0;\n      areAllLocal = from >= 0;\n      break;\n    case LoadMoreDirection.Forwards:\n      areSomeLocal = indexForDirection < length;\n      areAllLocal = to <= length - 1;\n      break;\n    case LoadMoreDirection.Around:\n    default:\n      areSomeLocal = newViewportIds.length > 0;\n      areAllLocal = newViewportIds.length === MESSAGE_LIST_SLICE;\n      break;\n  }\n\n  return { newViewportIds, areSomeLocal, areAllLocal };\n}\n\nasync function sendMessage<T extends GlobalState>(global: T, params: {\n  chat: ApiChat;\n  text?: string;\n  entities?: ApiMessageEntity[];\n  replyingTo?: number;\n  attachment?: ApiAttachment;\n  sticker?: ApiSticker;\n  gif?: ApiVideo;\n  poll?: ApiNewPoll;\n  isSilent?: boolean;\n  scheduledAt?: number;\n  sendAs?: ApiChat | ApiUser;\n  replyingToTopId?: number;\n  groupedId?: string;\n},\n...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  let localId: number | undefined;\n  const progressCallback = params.attachment ? (progress: number, messageLocalId: number) => {\n    if (!uploadProgressCallbacks.has(messageLocalId)) {\n      localId = messageLocalId;\n      uploadProgressCallbacks.set(messageLocalId, progressCallback!);\n    }\n\n    global = getGlobal();\n\n    global = {\n      ...global,\n      fileUploads: {\n        byMessageLocalId: {\n          ...global.fileUploads.byMessageLocalId,\n          [messageLocalId]: { progress },\n        },\n      },\n    };\n    setGlobal(global);\n  } : undefined;\n\n  // @optimization\n  if (params.replyingTo || IS_IOS) {\n    await rafPromise();\n  }\n\n  global = getGlobal();\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n  const { threadId } = currentMessageList;\n\n  if (!params.replyingTo && threadId !== MAIN_THREAD_ID) {\n    params.replyingTo = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  if (params.replyingTo && !params.replyingToTopId && threadId !== MAIN_THREAD_ID) {\n    params.replyingToTopId = selectThreadTopMessageId(global, params.chat.id, threadId)!;\n  }\n\n  await callApi('sendMessage', params, progressCallback);\n\n  if (progressCallback && localId) {\n    uploadProgressCallbacks.delete(localId);\n  }\n}\n\naddActionHandler('loadPinnedMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId, threadId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchPinnedMessages', { chat, threadId });\n  if (!result) {\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number).sort((a, b) => b - a);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = replaceThreadParam(global, chat.id, threadId, 'pinnedIds', ids);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('loadSeenBy', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSeenBy', { chat, messageId });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateChatMessage(global, chatId, messageId, {\n    seenByUserIds: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('saveDefaultSendAs', (global, actions, payload): ActionReturnType => {\n  const { chatId, sendAsId } = payload;\n  const chat = selectChat(global, chatId);\n  const sendAsChat = selectChat(global, sendAsId) || selectUser(global, sendAsId);\n  if (!chat || !sendAsChat) {\n    return undefined;\n  }\n\n  void callApi('saveDefaultSendAs', { sendAs: sendAsChat, chat });\n\n  return updateChat(global, chatId, {\n    fullInfo: {\n      ...chat.fullInfo,\n      sendAsId,\n    },\n  });\n});\n\naddActionHandler('loadSendAs', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSendAs', { chat });\n  if (!result) {\n    global = getGlobal();\n    global = updateChat(global, chatId, {\n      sendAsPeerIds: [],\n    });\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  global = updateChat(global, chatId, { sendAsPeerIds: result.sendAs });\n  setGlobal(global);\n});\n\naddActionHandler('loadSponsoredMessages', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('fetchSponsoredMessages', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateSponsoredMessage(global, chatId, result.messages[0]);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = addChats(global, buildCollectionByKey(result.chats, 'id'));\n  setGlobal(global);\n});\n\naddActionHandler('viewSponsoredMessage', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectSponsoredMessage(global, chatId);\n  if (!chat || !message) {\n    return;\n  }\n\n  void callApi('viewSponsoredMessage', { chat, random: message.randomId });\n});\n\naddActionHandler('fetchUnreadMentions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadMentions', { chat, offsetId });\n\n  if (!result) return;\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateChat(global, chatId, {\n    unreadMentions: [...(chat.unreadMentions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('markMentionsRead', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return;\n\n  const unreadMentions = (chat.unreadMentions || []).filter((id) => !messageIds.includes(id));\n  global = updateChat(global, chat.id, {\n    unreadMentions,\n  });\n\n  setGlobal(global);\n\n  actions.markMessagesRead({ messageIds, tabId });\n});\n\naddActionHandler('focusNextMention', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadMentions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadMentions[0], tabId });\n});\n\naddActionHandler('readAllMentions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllMentions', { chat });\n\n  return updateChat(global, chat.id, {\n    unreadMentionsCount: undefined,\n    unreadMentions: undefined,\n  });\n});\n\naddActionHandler('openUrl', (global, actions, payload): ActionReturnType => {\n  const { url, shouldSkipModal, tabId = getCurrentTabId() } = payload;\n  const urlWithProtocol = ensureProtocol(url)!;\n\n  if (urlWithProtocol.match(RE_TME_LINK) || urlWithProtocol.match(RE_TG_LINK)) {\n    actions.openTelegramLink({ url, tabId });\n    return;\n  }\n\n  const { appConfig } = global;\n  if (appConfig) {\n    const parsedUrl = new URL(urlWithProtocol);\n\n    if (appConfig.autologinDomains.includes(parsedUrl.hostname)) {\n      parsedUrl.searchParams.set(AUTOLOGIN_TOKEN_KEY, appConfig.autologinToken);\n      window.open(parsedUrl.href, '_blank', 'noopener');\n      return;\n    }\n\n    if (appConfig.urlAuthDomains.includes(parsedUrl.hostname)) {\n      actions.requestLinkUrlAuth({ url, tabId });\n      return;\n    }\n  }\n\n  const shouldDisplayModal = !urlWithProtocol.match(RE_TELEGRAM_LINK) && !shouldSkipModal;\n\n  if (shouldDisplayModal) {\n    actions.toggleSafeLinkModal({ url: urlWithProtocol, tabId });\n  } else {\n    window.open(urlWithProtocol, '_blank', 'noopener');\n  }\n});\n\naddActionHandler('setForwardChatOrTopic', async (global, actions, payload): Promise<void> => {\n  const { chatId, topicId, tabId = getCurrentTabId() } = payload;\n  let user = selectUser(global, chatId);\n  if (user && selectForwardsContainVoiceMessages(global, tabId)) {\n    if (!user.fullInfo) {\n      const { accessHash } = user;\n      user = await callApi('fetchFullUser', { id: chatId, accessHash });\n      global = getGlobal();\n    }\n\n    if (user?.fullInfo!.noVoiceMessages) {\n      actions.showDialog({\n        data: {\n          message: translate('VoiceMessagesRestrictedByPrivacy', getUserFullName(user)),\n        },\n        tabId,\n      });\n      return;\n    }\n  }\n\n  if (!selectForwardsCanBeSentToChat(global, chatId, tabId)) {\n    actions.showAllowedMessageTypesNotification({ chatId, tabId });\n    return;\n  }\n\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: chatId,\n      toThreadId: topicId,\n      isModalShown: false,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.openChat({ id: chatId, threadId: topicId, tabId });\n  actions.closeMediaViewer({ tabId });\n  actions.exitMessageSelectMode({ tabId });\n});\n\naddActionHandler('forwardToSavedMessages', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    forwardMessages: {\n      ...selectTabState(global, tabId).forwardMessages,\n      toChatId: global.currentUserId,\n    },\n  }, tabId);\n  setGlobal(global);\n\n  actions.exitMessageSelectMode({ tabId });\n  actions.forwardMessages({ isSilent: true, tabId });\n});\n\naddActionHandler('requestMessageTranslation', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, toLanguageCode = selectLanguageCode(global), tabId = getCurrentTabId(),\n  } = payload;\n\n  global = updateRequestedMessageTranslation(global, chatId, id, toLanguageCode, tabId);\n\n  return global;\n});\n\naddActionHandler('showOriginalMessage', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  global = removeRequestedMessageTranslation(global, chatId, id, tabId);\n\n  return global;\n});\n\naddActionHandler('translateMessages', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageIds, toLanguageCode = selectLanguageCode(global),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return undefined;\n\n  messageIds.forEach((id) => {\n    global = updateMessageTranslation(global, chatId, id, toLanguageCode, {\n      isPending: true,\n    });\n  });\n\n  callApi('translateText', {\n    chat,\n    messageIds,\n    toLanguageCode,\n  });\n\n  return global;\n});\n\naddActionHandler('loadMessageViews', async (global, actions, payload): Promise<void> => {\n  const { chatId, ids } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchMessageViews', {\n    chat,\n    ids,\n  });\n\n  if (!result) return;\n\n  global = getGlobal();\n  result.forEach((update) => {\n    global = updateChatMessage(global, chatId, update.id, {\n      views: update.views,\n      forwards: update.forwards,\n    });\n\n    const message = selectChatMessage(global, chatId, update.id);\n    if (!message) return;\n\n    const repliesChatId = message.repliesThreadInfo?.chatId;\n    const threadId = message.repliesThreadInfo?.threadId;\n    if (!repliesChatId || !threadId) return;\n\n    global = updateThreadInfo(global, repliesChatId, threadId, {\n      messagesCount: update.messagesCount,\n    });\n  });\n\n  setGlobal(global);\n});\n\nfunction countSortedIds(ids: number[], from: number, to: number) {\n  let count = 0;\n\n  for (let i = 0, l = ids.length; i < l; i++) {\n    if (ids[i] >= from && ids[i] <= to) {\n      count++;\n    }\n\n    if (ids[i] >= to) {\n      break;\n    }\n  }\n\n  return count;\n}\n\nfunction splitAttachmentsByType(attachments: ApiAttachment[]) {\n  return attachments.reduce((acc, attachment, index, arr) => {\n    if (index === 0) {\n      acc.push([attachment]);\n      return acc;\n    }\n\n    const type = getAttachmentType(attachment);\n    const previousType = getAttachmentType(arr[index - 1]);\n    if (type === previousType) {\n      acc[acc.length - 1].push(attachment);\n    } else {\n      acc.push([attachment]);\n    }\n\n    return acc;\n  }, [] as ApiAttachment[][]);\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  const {\n    shouldSendAsFile, mimeType,\n  } = attachment;\n  if (shouldSendAsFile) return 'file';\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType) || SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) return 'media';\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) return 'audio';\n  if (attachment.voice) return 'voice';\n  return 'file';\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler,\n  getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiError, ApiSticker, ApiStickerSet, ApiStickerSetInfo,\n} from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport { pause, throttle } from '../../../util/schedulers';\nimport {\n  updateStickerSets,\n  updateStickerSet,\n  replaceAnimatedEmojis,\n  updateGifSearch,\n  updateStickersForEmoji,\n  rebuildStickersForEmoji,\n  updateCustomEmojiForEmoji,\n  updateCustomEmojiSets,\n  updateRecentStatusCustomEmojis,\n  updateStickerSearch,\n} from '../../reducers';\nimport searchWords from '../../../util/searchWords';\nimport { selectTabState, selectIsCurrentUserPremium, selectStickerSet } from '../../selectors';\nimport { translate } from '../../../util/langProvider';\nimport { selectCurrentLimit, selectPremiumLimit } from '../../selectors/limits';\nimport * as langProvider from '../../../util/langProvider';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ADDED_SETS_THROTTLE = 200;\nconst ADDED_SETS_THROTTLE_CHUNK = 10;\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadStickerSets', async (global, actions): Promise<void> => {\n  const [addedStickers, addedCustomEmojis] = await Promise.all([\n    callApi('fetchStickerSets', { hash: global.stickers.added.hash }),\n    callApi('fetchCustomEmojiSets', { hash: global.customEmojis.added.hash }),\n  ]);\n  if (!addedCustomEmojis || !addedStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'added',\n    addedStickers.hash,\n    addedStickers.sets,\n  );\n\n  global = updateCustomEmojiSets(\n    global,\n    addedCustomEmojis.hash,\n    addedCustomEmojis.sets,\n  );\n\n  setGlobal(global);\n\n  actions.loadCustomEmojis({\n    ids: global.recentCustomEmojis,\n  });\n});\n\naddActionHandler('loadAddedStickers', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const {\n    added: {\n      setIds: addedSetIds = [],\n    },\n    setsById: cached,\n  } = global.stickers;\n  const {\n    added: {\n      setIds: customEmojiSetIds = [],\n    },\n  } = global.customEmojis;\n  const setIdsToLoad = [...addedSetIds, ...customEmojiSetIds];\n  if (!setIdsToLoad.length) {\n    return;\n  }\n\n  for (let i = 0; i < setIdsToLoad.length; i++) {\n    const id = setIdsToLoad[i];\n    if (cached[id]?.stickers) {\n      continue; // Already loaded\n    }\n    actions.loadStickers({\n      stickerSetInfo: { id, accessHash: cached[id].accessHash },\n      tabId,\n    });\n\n    if (i % ADDED_SETS_THROTTLE_CHUNK === 0 && i > 0) {\n      await pause(ADDED_SETS_THROTTLE);\n    }\n  }\n});\n\naddActionHandler('loadRecentStickers', (global): ActionReturnType => {\n  const { hash } = global.stickers.recent || {};\n  void loadRecentStickers(global, hash);\n});\n\naddActionHandler('loadFavoriteStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.favorite || {};\n\n  const favoriteStickers = await callApi('fetchFavoriteStickers', { hash });\n  if (!favoriteStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      favorite: favoriteStickers,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '⭐️⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premium: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumSetStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.premium || {};\n\n  const result = await callApi('fetchStickersForEmoji', { emoji: '📂⭐️', hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      premiumSet: {\n        hash: result.hash,\n        stickers: result.stickers,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadGreetingStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.greeting || {};\n\n  const greeting = await callApi('fetchStickersForEmoji', { emoji: '👋⭐️', hash });\n  if (!greeting) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      greeting: {\n        hash: greeting.hash,\n        stickers: greeting.stickers.filter((sticker) => sticker.emoji === '👋'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadFeaturedStickers', async (global): Promise<void> => {\n  const { hash } = global.stickers.featured || {};\n  const featuredStickers = await callApi('fetchFeaturedStickers', { hash });\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = updateStickerSets(\n    global,\n    'featured',\n    featuredStickers.hash,\n    featuredStickers.sets,\n  );\n  setGlobal(global);\n});\n\naddActionHandler('loadPremiumGifts', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchPremiumGifts');\n  if (!stickerSet) {\n    return;\n  }\n\n  const { set, stickers } = stickerSet;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    premiumGifts: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultTopicIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultTopicIcons');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = {\n    ...global,\n    defaultTopicIconsId: fullSet.id,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadDefaultStatusIcons', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchDefaultStatusEmojis');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n  const fullSet = { ...set, stickers };\n\n  global = updateStickerSet(global, fullSet.id, fullSet);\n  global = { ...global, defaultStatusIconsId: fullSet.id };\n  setGlobal(global);\n});\n\naddActionHandler('loadStickers', (global, actions, payload): ActionReturnType => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  const cachedSet = selectStickerSet(global, stickerSetInfo);\n  if (cachedSet && cachedSet.count === cachedSet?.stickers?.length) return; // Already fully loaded\n  void loadStickers(global, actions, stickerSetInfo, tabId);\n});\n\naddActionHandler('loadAnimatedEmojis', async (global): Promise<void> => {\n  const [emojis, effects] = await Promise.all([\n    callApi('fetchAnimatedEmojis'),\n    callApi('fetchAnimatedEmojiEffects'),\n  ]);\n  if (!emojis || !effects) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = replaceAnimatedEmojis(global, { ...emojis.set, stickers: emojis.stickers });\n  global = {\n    ...global,\n    animatedEmojiEffects: { ...effects.set, stickers: effects.stickers },\n  };\n\n  setGlobal(global);\n});\n\naddActionHandler('loadGenericEmojiEffects', async (global): Promise<void> => {\n  const stickerSet = await callApi('fetchGenericEmojiEffects');\n  if (!stickerSet) {\n    return;\n  }\n  global = getGlobal();\n\n  const { set, stickers } = stickerSet;\n\n  global = {\n    ...global,\n    genericEmojiEffects: { ...set, stickers },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadSavedGifs', async (global): Promise<void> => {\n  const { hash } = global.gifs.saved;\n\n  const savedGifs = await callApi('fetchSavedGifs', { hash });\n  if (!savedGifs) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: savedGifs,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('saveGif', async (global, actions, payload): Promise<void> => {\n  const {\n    gif, shouldUnsave,\n    tabId = getCurrentTabId(),\n  } = payload!;\n  const length = global.gifs.saved.gifs?.length;\n\n  const limit = selectCurrentLimit(global, 'savedGifs');\n  const premiumLimit = selectPremiumLimit(global, 'savedGifs');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (!shouldUnsave && length && length >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteGifs', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteGifsSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteGifsSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  const result = await callApi('saveGif', { gif, shouldUnsave });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const gifs = global.gifs.saved.gifs?.filter(({ id }) => id !== gif.id) || [];\n  const newGifs = shouldUnsave ? gifs : [gif, ...gifs];\n\n  global = {\n    ...global,\n    gifs: {\n      ...global.gifs,\n      saved: {\n        ...global.gifs.saved,\n        gifs: newGifs,\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('faveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker, tabId = getCurrentTabId() } = payload!;\n  const current = global.stickers.favorite.stickers.length;\n  const limit = selectCurrentLimit(global, 'stickersFaved');\n  const premiumLimit = selectPremiumLimit(global, 'stickersFaved');\n  const isPremium = selectIsCurrentUserPremium(global);\n\n  if (current >= limit) {\n    actions.showNotification({\n      title: langProvider.translate('LimitReachedFavoriteStickers', limit.toString()),\n      message: isPremium ? langProvider.translate('LimitReachedFavoriteStickersSubtitlePremium')\n        : langProvider.translate('LimitReachedFavoriteStickersSubtitle',\n          premiumLimit.toString()),\n      ...(!isPremium && {\n        action: {\n          action: 'openPremiumModal',\n          payload: { tabId },\n        },\n      }),\n      className: 'bold-link',\n      tabId,\n    });\n  }\n\n  if (sticker) {\n    void callApi('faveSticker', { sticker });\n  }\n});\n\naddActionHandler('unfaveSticker', (global, actions, payload): ActionReturnType => {\n  const { sticker } = payload!;\n\n  if (sticker) {\n    global = getGlobal();\n\n    // Remove sticker preemptively to get instant feedback when user removes sticker\n    // from favorites while in Sticker Picker\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        favorite: {\n          ...global.stickers.favorite,\n          stickers: global.stickers.favorite.stickers.filter(({ id }) => id !== sticker.id),\n        },\n      },\n    };\n    setGlobal(global);\n\n    void callApi('faveSticker', { sticker, unfave: true });\n  }\n});\n\naddActionHandler('removeRecentSticker', async (global, actions, payload): Promise<void> => {\n  const { sticker } = payload!;\n\n  const result = await callApi('removeRecentSticker', { sticker });\n\n  if (!result) return;\n\n  global = getGlobal();\n  loadRecentStickers(global);\n});\n\naddActionHandler('clearRecentStickers', async (global): Promise<void> => {\n  const result = await callApi('clearRecentStickers');\n\n  if (!result) return;\n\n  global = getGlobal();\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: {\n        stickers: [],\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('toggleStickerSet', (global, actions, payload): ActionReturnType => {\n  const { stickerSetId } = payload!;\n  const stickerSet = selectStickerSet(global, stickerSetId);\n  if (!stickerSet) {\n    return;\n  }\n\n  const { accessHash, installedDate, isArchived } = stickerSet;\n  const isInstalled = !isArchived && Boolean(installedDate);\n\n  void callApi(!isInstalled ? 'installStickerSet' : 'uninstallStickerSet', { stickerSetId, accessHash });\n});\n\naddActionHandler('loadEmojiKeywords', async (global, actions, payload): Promise<void> => {\n  const { language } = payload;\n\n  let currentEmojiKeywords = global.emojiKeywords[language];\n  if (currentEmojiKeywords?.isLoading) {\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        ...currentEmojiKeywords,\n        isLoading: true,\n      },\n    },\n  };\n  setGlobal(global);\n\n  const emojiKeywords = await callApi('fetchEmojiKeywords', {\n    language,\n    fromVersion: currentEmojiKeywords ? currentEmojiKeywords.version : 0,\n  });\n\n  global = getGlobal();\n  currentEmojiKeywords = global.emojiKeywords[language];\n\n  if (!emojiKeywords) {\n    global = {\n      ...global,\n      emojiKeywords: {\n        ...global.emojiKeywords,\n        [language]: {\n          ...currentEmojiKeywords,\n          isLoading: false,\n        },\n      },\n    };\n    setGlobal(global);\n\n    return;\n  }\n\n  global = {\n    ...global,\n    emojiKeywords: {\n      ...global.emojiKeywords,\n      [language]: {\n        isLoading: false,\n        version: emojiKeywords.version,\n        keywords: {\n          ...(currentEmojiKeywords?.keywords),\n          ...emojiKeywords.keywords,\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\nasync function loadRecentStickers<T extends GlobalState>(global: T, hash?: string) {\n  const recentStickers = await callApi('fetchRecentStickers', { hash });\n  if (!recentStickers) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      recent: recentStickers,\n    },\n  };\n  setGlobal(global);\n}\n\nasync function loadStickers<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  stickerSetInfo: ApiStickerSetInfo,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let stickerSet: { set: ApiStickerSet; stickers: ApiSticker[]; packs: Record<string, ApiSticker[]> } | undefined;\n  try {\n    stickerSet = await callApi(\n      'fetchStickers',\n      { stickerSetInfo },\n    );\n  } catch (error) {\n    if ((error as ApiError).message === 'STICKERSET_INVALID') {\n      actions.showNotification({\n        message: translate('StickerPack.ErrorNotFound'),\n        tabId,\n      });\n\n      if ('shortName' in stickerSetInfo\n        && selectTabState(global, tabId).openedStickerSetShortName === stickerSetInfo.shortName) {\n        global = updateTabState(global, {\n          openedStickerSetShortName: undefined,\n        }, tabId);\n        setGlobal(global);\n      }\n      return;\n    }\n  }\n  global = getGlobal();\n\n  if (!stickerSet) {\n    // TODO handle this case when sticker cache is implemented\n    return;\n  }\n\n  const { set, stickers, packs } = stickerSet;\n\n  global = updateStickerSet(global, set.id, { ...set, stickers, packs });\n\n  const currentEmoji = global.stickers.forEmoji.emoji;\n  if (currentEmoji && packs[currentEmoji]) {\n    global = rebuildStickersForEmoji(global);\n  }\n\n  setGlobal(global);\n}\n\naddActionHandler('setStickerSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (query) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchStickers', { query });\n\n      if (!result) {\n        return;\n      }\n\n      global = getGlobal();\n      const { setsById, added } = global.stickers;\n\n      const resultIds = result.sets.map(({ id }) => id);\n\n      if (added.setIds) {\n        added.setIds.forEach((id) => {\n          if (!resultIds.includes(id)) {\n            const { title } = setsById[id] || {};\n            if (title && searchWords(title, query)) {\n              resultIds.unshift(id);\n            }\n          }\n        });\n      }\n\n      global = updateStickerSets(\n        global,\n        'search',\n        result.hash,\n        result.sets,\n      );\n\n      global = updateStickerSearch(global, result.hash, resultIds, tabId);\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGifSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, undefined, tabId);\n    });\n  }\n});\n\naddActionHandler('searchMoreGifs', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { query, offset } = selectTabState(global, tabId).gifSearch;\n\n  if (typeof query === 'string') {\n    void searchThrottled(() => {\n      searchGifs(global, query, global.config?.gifSearchUsername, offset, tabId);\n    });\n  }\n});\n\naddActionHandler('loadStickersForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n  const { hash } = global.stickers.forEmoji;\n\n  void searchThrottled(async () => {\n    global = getGlobal();\n    global = {\n      ...global,\n      stickers: {\n        ...global.stickers,\n        forEmoji: {\n          ...global.stickers.forEmoji,\n          emoji,\n        },\n      },\n    };\n    setGlobal(global);\n\n    const result = await callApi('fetchStickersForEmoji', { emoji, hash });\n\n    global = getGlobal();\n\n    if (!result || global.stickers.forEmoji.emoji !== emoji) {\n      return;\n    }\n\n    global = updateStickersForEmoji(global, emoji, result.stickers, result.hash);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('clearStickersForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    stickers: {\n      ...global.stickers,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadCustomEmojiForEmoji', (global, actions, payload): ActionReturnType => {\n  const { emoji } = payload;\n\n  return updateCustomEmojiForEmoji(global, emoji);\n});\n\naddActionHandler('clearCustomEmojiForEmoji', (global): ActionReturnType => {\n  return {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      forEmoji: {},\n    },\n  };\n});\n\naddActionHandler('loadFeaturedEmojiStickers', async (global): Promise<void> => {\n  const featuredStickers = await callApi('fetchFeaturedEmojiStickers');\n  if (!featuredStickers) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    customEmojis: {\n      ...global.customEmojis,\n      featuredIds: featuredStickers.sets.map(({ id }) => id),\n      byId: {\n        ...global.customEmojis.byId,\n        ...buildCollectionByKey(featuredStickers.sets.flatMap((set) => set.stickers || []), 'id'),\n      },\n    },\n    stickers: {\n      ...global.stickers,\n      setsById: {\n        ...global.stickers.setsById,\n        ...buildCollectionByKey(featuredStickers.sets, 'id'),\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('openStickerSet', async (global, actions, payload): Promise<void> => {\n  const { stickerSetInfo, tabId = getCurrentTabId() } = payload;\n  if (!selectStickerSet(global, stickerSetInfo)) {\n    await loadStickers(global, actions, stickerSetInfo, tabId);\n  }\n\n  global = getGlobal();\n  const set = selectStickerSet(global, stickerSetInfo);\n  if (!set?.shortName) {\n    return;\n  }\n\n  global = updateTabState(global, {\n    openedStickerSetShortName: set.shortName,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadRecentEmojiStatuses', async (global): Promise<void> => {\n  const result = await callApi('fetchRecentEmojiStatuses');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateRecentStatusCustomEmojis(global, result.hash, result.emojiStatuses!);\n  setGlobal(global);\n});\n\nasync function searchGifs<T extends GlobalState>(global: T, query: string, botUsername?: string, offset?: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  const result = await callApi('searchGifs', { query, offset, username: botUsername });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateGifSearch(global, !offset, result.gifs, result.nextOffset, tabId);\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiChat, ApiTopic, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../api/types';\n\nimport {\n  addChats,\n  addMessages,\n  addUsers,\n  updateTopics,\n  updateGlobalSearch,\n  updateGlobalSearchFetchingStatus,\n  updateGlobalSearchResults,\n} from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectChat, selectCurrentGlobalSearchQuery, selectTabState } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { GLOBAL_SEARCH_SLICE, GLOBAL_TOPIC_SEARCH_SLICE } from '../../../config';\nimport { timestampPlusDay } from '../../../util/dateFormat';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst searchThrottled = throttle((cb) => cb(), 500, false);\n\naddActionHandler('setGlobalSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n\n  if (query && !chatId) {\n    void searchThrottled(async () => {\n      const result = await callApi('searchChats', { query });\n\n      global = getGlobal();\n      const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n      if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n        global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n        setGlobal(global);\n        return;\n      }\n\n      const {\n        localChats, localUsers, globalChats, globalUsers,\n      } = result;\n\n      if (localChats.length || globalChats.length) {\n        global = addChats(global, buildCollectionByKey([...localChats, ...globalChats], 'id'));\n      }\n\n      if (localUsers.length || globalUsers.length) {\n        global = addUsers(global, buildCollectionByKey([...localUsers, ...globalUsers], 'id'));\n      }\n\n      global = updateGlobalSearchFetchingStatus(global, { chats: false }, tabId);\n      global = updateGlobalSearch(global, {\n        localResults: {\n          chatIds: localChats.map(({ id }) => id),\n          userIds: localUsers.map(({ id }) => id),\n        },\n        globalResults: {\n          ...selectTabState(global, tabId).globalSearch.globalResults,\n          chatIds: globalChats.map(({ id }) => id),\n          userIds: globalUsers.map(({ id }) => id),\n        },\n      }, tabId);\n\n      setGlobal(global);\n    });\n  }\n});\n\naddActionHandler('setGlobalSearchDate', (global, actions, payload): ActionReturnType => {\n  const { date, tabId = getCurrentTabId() } = payload!;\n  const maxDate = date ? timestampPlusDay(date) : date;\n\n  global = updateGlobalSearch(global, {\n    date,\n    query: '',\n    resultsByType: {\n      ...selectTabState(global, tabId).globalSearch.resultsByType,\n      text: {\n        totalCount: undefined,\n        foundIds: [],\n        nextOffsetId: 0,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n\n  const { chatId } = selectTabState(global, tabId).globalSearch;\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  searchMessagesGlobal(global, '', 'text', undefined, chat, maxDate, date, tabId);\n});\n\naddActionHandler('searchMessagesGlobal', (global, actions, payload): ActionReturnType => {\n  const { type, tabId = getCurrentTabId() } = payload;\n  const {\n    query, resultsByType, chatId, date,\n  } = selectTabState(global, tabId).globalSearch;\n  const maxDate = date ? timestampPlusDay(date) : date;\n  const nextOffsetId = (resultsByType?.[type as ApiGlobalMessageSearchType])?.nextOffsetId;\n\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n\n  searchMessagesGlobal(global, query, type, nextOffsetId, chat, maxDate, date, tabId);\n});\n\nasync function searchMessagesGlobal<T extends GlobalState>(\n  global: T,\n  query = '', type: ApiGlobalMessageSearchType, offsetRate?: number, chat?: ApiChat, maxDate?: number, minDate?: number,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  let result: {\n    messages: ApiMessage[];\n    users: ApiUser[];\n    chats: ApiChat[];\n    topics?: ApiTopic[];\n    totalTopicsCount?: number;\n    totalCount: number;\n    nextRate: number | undefined;\n  } | undefined;\n\n  if (chat) {\n    const localResultRequest = callApi('searchMessagesLocal', {\n      chat,\n      query,\n      type,\n      limit: GLOBAL_SEARCH_SLICE,\n      offsetId: offsetRate,\n      minDate,\n      maxDate,\n    });\n    const topicsRequest = chat.isForum ? callApi('fetchTopics', {\n      chat,\n      query,\n      limit: GLOBAL_TOPIC_SEARCH_SLICE,\n    }) : undefined;\n\n    const [localResult, topics] = await Promise.all([localResultRequest, topicsRequest]);\n\n    if (localResult) {\n      const {\n        messages, users, totalCount, nextOffsetId,\n      } = localResult;\n\n      const { topics: localTopics, count } = topics || {};\n\n      result = {\n        topics: localTopics,\n        totalTopicsCount: count,\n        messages,\n        users,\n        chats: [],\n        totalCount,\n        nextRate: nextOffsetId,\n      };\n    }\n  } else {\n    result = await callApi('searchMessagesGlobal', {\n      query,\n      offsetRate,\n      limit: GLOBAL_SEARCH_SLICE,\n      type,\n      maxDate,\n      minDate,\n    });\n  }\n\n  global = getGlobal();\n  const currentSearchQuery = selectCurrentGlobalSearchQuery(global, tabId);\n  if (!result || (query !== '' && query !== currentSearchQuery)) {\n    global = updateGlobalSearchFetchingStatus(global, { messages: false }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const {\n    messages, users, chats, totalCount, nextRate,\n  } = result;\n\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n\n  if (users.length) {\n    global = addUsers(global, buildCollectionByKey(users, 'id'));\n  }\n\n  if (messages.length) {\n    global = addMessages(global, messages);\n  }\n\n  global = updateGlobalSearchResults(\n    global,\n    messages,\n    totalCount,\n    type,\n    nextRate,\n    tabId,\n  );\n\n  if (result.topics) {\n    global = updateTopics(global, chat!.id, result.totalTopicsCount!, result.topics);\n  }\n\n  const sortedTopics = result.topics?.map(({ id }) => id).sort((a, b) => b - a);\n  global = updateGlobalSearch(global, {\n    foundTopicIds: sortedTopics,\n  }, tabId);\n\n  setGlobal(global);\n}\n","import {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ApiChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectCurrentTextSearch,\n  selectCurrentMediaSearch,\n  selectCurrentMessageList,\n  selectChat,\n  selectThreadInfo,\n} from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  addChats,\n  addUsers,\n  updateLocalMediaSearchResults,\n  updateLocalTextSearchResults,\n} from '../../reducers';\nimport type { SharedMediaType } from '../../../types';\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('searchTextMessagesLocal', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId ? selectChat(global, chatId) : undefined;\n  let currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!chat || !currentSearch || !threadId) {\n    return;\n  }\n\n  const { query, results } = currentSearch;\n  const offsetId = results?.nextOffsetId;\n\n  let topMessageId: number | undefined;\n  if (threadId !== MAIN_THREAD_ID) {\n    const threadInfo = selectThreadInfo(global, chatId!, threadId);\n    topMessageId = threadInfo?.topMessageId;\n  }\n\n  if (!query) {\n    return;\n  }\n\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type: 'text',\n    query,\n    topMessageId,\n    limit: MESSAGE_SEARCH_SLICE,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  currentSearch = selectCurrentTextSearch(global, tabId);\n  if (!currentSearch || query !== currentSearch.query) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalTextSearchResults(global, chat.id, threadId, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('searchMediaMessagesLocal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId, threadId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId || !threadId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n\n  if (!chat || !currentSearch) {\n    return;\n  }\n\n  const { currentType: type, resultsByType } = currentSearch;\n  const currentResults = type && resultsByType && resultsByType[type];\n  const offsetId = currentResults?.nextOffsetId;\n\n  if (!type) {\n    return;\n  }\n\n  void searchSharedMedia(global, chat, threadId, type, offsetId, undefined, tabId);\n});\n\naddActionHandler('searchMessagesByDate', async (global, actions, payload): Promise<void> => {\n  const { timestamp, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const messageId = await callApi('findFirstMessageIdAfterDate', {\n    chat,\n    timestamp,\n  });\n\n  if (!messageId) {\n    return;\n  }\n\n  actions.focusMessage({\n    chatId: chat.id,\n    messageId,\n    tabId,\n  });\n});\n\nasync function searchSharedMedia<T extends GlobalState>(\n  global: T,\n  chat: ApiChat,\n  threadId: number,\n  type: SharedMediaType,\n  offsetId?: number,\n  isBudgetPreload = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('searchMessagesLocal', {\n    chat,\n    type,\n    limit: SHARED_MEDIA_SLICE * 2,\n    topMessageId: threadId === MAIN_THREAD_ID ? undefined : threadId,\n    offsetId,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  const {\n    chats, users, messages, totalCount, nextOffsetId,\n  } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const newFoundIds = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n\n  const currentSearch = selectCurrentMediaSearch(global, tabId);\n  if (!currentSearch) {\n    return;\n  }\n\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChatMessagesById(global, chat.id, byId);\n  global = updateLocalMediaSearchResults(global, chat.id, threadId, type, newFoundIds, totalCount, nextOffsetId, tabId);\n  setGlobal(global);\n\n  if (!isBudgetPreload) {\n    void searchSharedMedia(global, chat, threadId, type, nextOffsetId, true, tabId);\n  }\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { ManagementProgress } from '../../../types';\nimport type { ActionReturnType } from '../../types';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  addUsers, updateChat, updateManagement, updateManagementProgress,\n} from '../../reducers';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport { ensureIsSuperGroup } from './chats';\nimport { getUserFirstOrLastName } from '../../helpers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport * as langProvider from '../../../util/langProvider';\n\naddActionHandler('checkPublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  // No need to check the username if already in progress\n  if (selectTabState(global, tabId).management.progress === ManagementProgress.InProgress) {\n    return;\n  }\n\n  global = updateManagement(\n    global, chatId, { isUsernameAvailable: undefined, checkedUsername: undefined }, tabId,\n  );\n  setGlobal(global);\n\n  const { result, error } = (await callApi('checkChatUsername', { username }))!;\n\n  global = getGlobal();\n  global = updateManagementProgress(\n    global, result === true ? ManagementProgress.Complete : ManagementProgress.Error, tabId,\n  );\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: result === true,\n    checkedUsername: username,\n    error,\n  }, tabId);\n  setGlobal(global);\n\n  if (result === undefined) {\n    actions.openLimitReachedModal({ limit: 'channelsPublic', tabId });\n  }\n});\n\naddActionHandler('updatePublicLink', async (global, actions, payload): Promise<void> => {\n  const { username, tabId = getCurrentTabId() } = payload;\n\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  if (!chatId) {\n    return;\n  }\n\n  const chat = await ensureIsSuperGroup(global, actions, chatId, tabId);\n  if (!chat) return;\n\n  global = getGlobal();\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('setChatUsername', { chat, username });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, result ? ManagementProgress.Complete : ManagementProgress.Error, tabId);\n  global = updateManagement(global, chatId, {\n    isUsernameAvailable: undefined,\n    checkedUsername: undefined,\n    error: undefined,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('updatePrivateLink', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const chat = chatId && selectChat(global, chatId);\n  if (!chatId || !chat) {\n    return;\n  }\n\n  callApi('updatePrivateLink', { chat });\n});\n\naddActionHandler('setEditingExportedInvite', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  global = updateManagement(global, chatId, { editingInvite: invite }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('setOpenedInviteInfo', (global, actions, payload): ActionReturnType => {\n  const { chatId, invite, tabId = getCurrentTabId() } = payload;\n\n  const update = invite ? { inviteInfo: { invite } } : { inviteInfo: undefined };\n\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, isRevoked, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('fetchExportedChatInvites', {\n    peer, admin, isRevoked, limit,\n  });\n  if (!result) {\n    return;\n  }\n  global = getGlobal();\n  const { invites, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  const update = isRevoked ? { revokedInvites: invites } : { invites };\n  global = updateManagement(global, chatId, update, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('editExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, isRevoked, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('editExportedChatInvite', {\n    peer,\n    link,\n    isRevoked,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { oldInvite, newInvite, users } = result;\n\n  global = getGlobal();\n  const { management } = selectTabState(global, tabId);\n  const invites = (management.byChatId[chatId].invites || [])\n    .filter((current) => current.link !== oldInvite.link);\n  const revokedInvites = [...(management.byChatId[chatId].revokedInvites || [])];\n\n  if (newInvite.isRevoked) {\n    revokedInvites.unshift(newInvite);\n  } else {\n    invites.push(newInvite);\n  }\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = updateManagement(global, chatId, {\n    invites,\n    revokedInvites,\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('exportChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, expireDate, usageLimit, isRequestNeeded, title, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('exportChatInvite', {\n    peer,\n    expireDate,\n    usageLimit,\n    isRequestNeeded,\n    title,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const invites = selectTabState(global, tabId).management.byChatId[chatId].invites || [];\n  global = updateManagement(global, chatId, {\n    invites: [...invites, result],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteExportedChatInvite', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, link, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('deleteExportedChatInvite', {\n    peer,\n    link,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const managementState = selectTabState(global, tabId).management.byChatId[chatId];\n  global = updateManagement(global, chatId, {\n    invites: managementState?.invites?.filter((invite) => invite.link !== link),\n    revokedInvites: managementState?.revokedInvites?.filter((invite) => invite.link !== link),\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteRevokedExportedChatInvites', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, adminId, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const admin = selectUser(global, adminId || global.currentUserId!);\n  if (!peer || !admin) return;\n\n  const result = await callApi('deleteRevokedExportedChatInvites', {\n    peer,\n    admin,\n  });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateManagement(global, chatId, {\n    revokedInvites: [],\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteImporters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatInviteRequesters', async (\n  global, actions, payload,\n): Promise<void> => {\n  const {\n    chatId, link, offsetDate, offsetUserId, limit, tabId = getCurrentTabId(),\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    link,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  const currentInviteInfo = selectTabState(global, tabId).management.byChatId[chatId]?.inviteInfo;\n  if (!currentInviteInfo?.invite || currentInviteInfo.invite.link !== link) {\n    return;\n  }\n  global = updateManagement(global, chatId, {\n    inviteInfo: {\n      ...currentInviteInfo,\n      requesters: importers,\n    },\n  }, tabId);\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('loadChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, offsetDate = 0, offsetUserId, limit = 0,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const offsetUser = offsetUserId ? selectUser(global, offsetUserId) : undefined;\n  if (!peer || (offsetUserId && !offsetUser)) return;\n\n  const result = await callApi('fetchChatInviteImporters', {\n    peer,\n    offsetDate,\n    offsetUser,\n    limit,\n    isRequested: true,\n  });\n  if (!result) {\n    return;\n  }\n  const { importers, users } = result;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, { joinRequests: importers });\n  global = addUsers(global, users);\n  setGlobal(global);\n});\n\naddActionHandler('hideChatJoinRequest', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, userId, isApproved,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  const user = selectUser(global, userId);\n  if (!peer || !user) return;\n\n  const result = await callApi('hideChatJoinRequest', {\n    peer,\n    user,\n    isApproved,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: targetChat.joinRequests?.filter((importer) => importer.userId !== userId),\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideAllChatJoinRequests', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, isApproved, link,\n  } = payload!;\n  const peer = selectChat(global, chatId);\n  if (!peer) return;\n\n  const result = await callApi('hideAllChatJoinRequests', {\n    peer,\n    isApproved,\n    link,\n  });\n  if (!result) return;\n\n  global = getGlobal();\n  const targetChat = selectChat(global, chatId);\n  if (!targetChat) return;\n\n  global = updateChat(global, chatId, {\n    joinRequests: [],\n    fullInfo: {\n      ...targetChat.fullInfo,\n      recentRequesterIds: [],\n      requestsPending: 0,\n    },\n  });\n  setGlobal(global);\n});\n\naddActionHandler('hideChatReportPanel', async (global, actions, payload): Promise<void> => {\n  const { chatId } = payload!;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('hideChatReportPanel', chat);\n  if (!result) return;\n\n  global = getGlobal();\n  global = updateChat(global, chatId, {\n    settings: undefined,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('uploadContactProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, file, isSuggest, tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) return;\n\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  const result = await callApi('uploadContactProfilePhoto', {\n    user,\n    file,\n    isSuggest,\n  });\n\n  if (!result) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  setGlobal(global);\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) {\n    global = getGlobal();\n    global = updateManagementProgress(global, ManagementProgress.Error, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  actions.loadProfilePhotos({ profileId: userId });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  setGlobal(global);\n\n  if (file && !isSuggest) {\n    actions.showNotification({\n      message: langProvider.translate('UserInfo.SetCustomPhoto.SuccessPhotoText', getUserFirstOrLastName(user)),\n      tabId,\n    });\n  }\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getActions, getGlobal, setGlobal,\n} from '../../index';\nimport { addCallback } from '../../../lib/teact/teactn';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport type { ActionReturnType, GlobalState, Thread } from '../../types';\n\nimport { DEBUG, MESSAGE_LIST_SLICE, SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { callApi } from '../../../api/gramjs';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport {\n  addChatMessagesById,\n  safeReplaceViewportIds,\n  updateChats,\n  updateListedIds,\n  updateThread, updateThreadInfo,\n  updateThreadInfos,\n  updateUsers,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMessageList,\n  selectDraft,\n  selectEditingDraft,\n  selectEditingId,\n  selectTabState,\n  selectThreadInfo,\n} from '../../selectors';\nimport { init as initFolderManager } from '../../../util/folderManager';\nimport { updateTabState } from '../../reducers/tabs';\n\nconst RELEASE_STATUS_TIMEOUT = 15000; // 15 sec;\n\nlet releaseStatusTimeout: number | undefined;\n\naddActionHandler('sync', (global, actions): ActionReturnType => {\n  if (DEBUG) {\n    // eslint-disable-next-line no-console\n    console.log('>>> START SYNC');\n  }\n\n  if (releaseStatusTimeout) {\n    clearTimeout(releaseStatusTimeout);\n  }\n\n  global = getGlobal();\n  global = { ...global, isSyncing: true };\n  setGlobal(global);\n\n  // Workaround for `isSyncing = true` sometimes getting stuck for some reason\n  releaseStatusTimeout = window.setTimeout(() => {\n    global = getGlobal();\n    global = { ...global, isSyncing: false };\n    setGlobal(global);\n    releaseStatusTimeout = undefined;\n  }, RELEASE_STATUS_TIMEOUT);\n\n  const { loadAllChats, preloadTopChatMessages } = actions;\n\n  loadAllChats({\n    listType: 'active',\n    shouldReplace: true,\n    onReplace: async () => {\n      await loadAndReplaceMessages(global, actions);\n\n      global = getGlobal();\n      global = {\n        ...global,\n        lastSyncTime: Date.now(),\n        isSyncing: false,\n      };\n      setGlobal(global);\n\n      if (DEBUG) {\n        // eslint-disable-next-line no-console\n        console.log('>>> FINISH SYNC');\n      }\n\n      initFolderManager();\n      loadAllChats({ listType: 'archived', shouldReplace: true });\n      void callApi('fetchCurrentUser');\n      preloadTopChatMessages();\n    },\n  });\n});\n\nasync function loadAndReplaceMessages<T extends GlobalState>(global: T, actions: RequiredGlobalActions) {\n  let areMessagesLoaded = false;\n\n  global = getGlobal();\n\n  let wasReset = false;\n\n  // Memoize drafts\n  const draftChatIds = Object.keys(global.messages.byChatId);\n  /* eslint-disable @typescript-eslint/indent */\n  const draftsByChatId = draftChatIds.reduce<Record<string, Record<number, Partial<Thread>>>>((acc, chatId) => {\n    acc[chatId] = Object\n      .keys(global.messages.byChatId[chatId].threadsById)\n      .reduce<Record<number, Partial<Thread>>>((acc2, threadId) => {\n        acc2[Number(threadId)] = {\n          draft: selectDraft(global, chatId, Number(threadId)),\n          editingId: selectEditingId(global, chatId, Number(threadId)),\n          editingDraft: selectEditingDraft(global, chatId, Number(threadId)),\n        };\n\n        return acc2;\n      }, {});\n    return acc;\n  }, {});\n  /* eslint-enable @typescript-eslint/indent */\n\n  for (const { id: tabId } of Object.values(global.byTabId)) {\n    global = getGlobal();\n    const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n    const activeThreadId = currentThreadId || MAIN_THREAD_ID;\n    const threadInfo = currentThreadId && currentChatId\n      ? selectThreadInfo(global, currentChatId, currentThreadId) : undefined;\n    const currentChat = currentChatId ? global.chats.byId[currentChatId] : undefined;\n    if (currentChatId && currentChat) {\n      const result = await loadTopMessages(currentChat, activeThreadId, threadInfo?.lastReadInboxMessageId);\n      global = getGlobal();\n      const { chatId: newCurrentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n      if (result && newCurrentChatId === currentChatId) {\n        const currentChatMessages = selectChatMessages(global, currentChatId);\n        const localMessages = currentChatId === SERVICE_NOTIFICATIONS_USER_ID\n          ? global.serviceNotifications.filter(({ isDeleted }) => !isDeleted).map(({ message }) => message)\n          : [];\n        const topicLastMessages = currentChat.isForum && currentChat.topics\n          ? Object.values(currentChat.topics)\n            .map(({ lastMessageId }) => currentChatMessages[lastMessageId])\n            .filter(Boolean)\n          : [];\n\n        const allMessages = ([] as ApiMessage[]).concat(result.messages, localMessages);\n        const allMessagesWithTopicLastMessages = allMessages.concat(topicLastMessages);\n        const byId = buildCollectionByKey(allMessagesWithTopicLastMessages, 'id');\n        const listedIds = allMessages.map(({ id }) => id);\n\n        if (!wasReset) {\n          global = {\n            ...global,\n            messages: {\n              ...global.messages,\n              byChatId: {},\n            },\n          };\n          // eslint-disable-next-line @typescript-eslint/no-loop-func\n          Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n            global = updateTabState(global, {\n              tabThreads: {},\n            }, otherTabId);\n          });\n          wasReset = true;\n        }\n\n        global = addChatMessagesById(global, currentChatId, byId);\n        global = updateListedIds(global, currentChatId, activeThreadId, listedIds);\n        if (threadInfo?.originChannelId) {\n          global = updateThreadInfo(global, currentChatId, activeThreadId, threadInfo);\n        }\n        // eslint-disable-next-line @typescript-eslint/no-loop-func\n        Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n          const { chatId: otherChatId, threadId: otherThreadId } = selectCurrentMessageList(global, otherTabId) || {};\n          if (otherChatId === currentChatId && otherThreadId === activeThreadId) {\n            global = safeReplaceViewportIds(global, currentChatId, activeThreadId, listedIds, otherTabId);\n          }\n        });\n        global = updateChats(global, buildCollectionByKey(result.chats, 'id'));\n        global = updateUsers(global, buildCollectionByKey(result.users, 'id'));\n        if (result.repliesThreadInfos.length) {\n          global = updateThreadInfos(global, currentChatId, result.repliesThreadInfos);\n        }\n\n        areMessagesLoaded = true;\n      }\n    }\n\n    setGlobal(global);\n\n    if (currentChat?.isForum) {\n      actions.loadTopics({ chatId: currentChatId!, force: true });\n      if (currentThreadId && currentThreadId !== MAIN_THREAD_ID) {\n        actions.loadTopicById({\n          chatId: currentChatId!, topicId: currentThreadId, shouldCloseChatOnError: true,\n        });\n      }\n    }\n  }\n\n  global = getGlobal();\n\n  if (!areMessagesLoaded) {\n    global = {\n      ...global,\n      messages: {\n        ...global.messages,\n        byChatId: {},\n      },\n    };\n    // eslint-disable-next-line @typescript-eslint/no-loop-func\n    Object.values(global.byTabId).forEach(({ id: otherTabId }) => {\n      global = updateTabState(global, {\n        tabThreads: {},\n      }, otherTabId);\n    });\n  }\n\n  // Restore drafts\n  // eslint-disable-next-line @typescript-eslint/no-loop-func\n  Object.keys(draftsByChatId).forEach((chatId) => {\n    const threads = draftsByChatId[chatId];\n    Object.keys(threads).forEach((threadId) => {\n      global = updateThread(global, chatId, Number(threadId), draftsByChatId[chatId][Number(threadId)]);\n    });\n  });\n\n  setGlobal(global);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    const { chatId: audioChatId, messageId: audioMessageId } = selectTabState(global, tabId).audioPlayer;\n    if (audioChatId && audioMessageId && !selectChatMessage(global, audioChatId, audioMessageId)) {\n      actions.closeAudioPlayer({ tabId });\n    }\n  });\n}\n\nfunction loadTopMessages(chat: ApiChat, threadId: number, lastReadInboxId?: number) {\n  return callApi('fetchMessages', {\n    chat,\n    threadId,\n    offsetId: lastReadInboxId || chat.lastReadInboxMessageId,\n    addOffset: -(Math.round(MESSAGE_LIST_SLICE / 2) + 1),\n    limit: MESSAGE_LIST_SLICE,\n  });\n}\n\nlet previousGlobal: GlobalState | undefined;\n// RAF can be unreliable when device goes into sleep mode, so sync logic is handled outside any component\naddCallback((global: GlobalState) => {\n  const { connectionState, authState } = global;\n  const { isMasterTab } = selectTabState(global);\n  if (!isMasterTab || (previousGlobal?.connectionState === connectionState\n    && previousGlobal?.authState === authState)) {\n    previousGlobal = global;\n    return;\n  }\n\n  if (connectionState === 'connectionStateReady' && authState === 'authorizationStateReady') {\n    // eslint-disable-next-line eslint-multitab-tt/no-getactions-in-actions\n    getActions().sync();\n  }\n\n  previousGlobal = global;\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { selectChat } from '../../selectors';\nimport { callApi } from '../../../api/gramjs';\nimport { translate } from '../../../util/langProvider';\nimport { addUsers } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('reportPeer', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('reportPeer', {\n    peer: chat,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('reportProfilePhoto', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId,\n    reason,\n    description,\n    photo,\n    tabId = getCurrentTabId(),\n  } = payload;\n  if (!chatId) {\n    return;\n  }\n\n  const chat = selectChat(global, chatId)!;\n  if (!chat || !photo) {\n    return;\n  }\n\n  const result = await callApi('reportProfilePhoto', {\n    peer: chat,\n    photo,\n    reason,\n    description,\n  });\n\n  actions.showNotification({\n    message: result\n      ? translate('ReportPeer.AlertSuccess')\n      : 'An error occurred while submitting your report. Please, try again later.',\n    tabId,\n  });\n});\n\naddActionHandler('loadAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: result.authorizations,\n      orderedHashes: Object.keys(result.authorizations),\n      ttlDays: result.ttlDays,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeSessions.byHash;\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const currentSessionHash = global.activeSessions.orderedHashes\n    .find((hash) => global.activeSessions.byHash[hash].isCurrent);\n  if (!currentSessionHash) {\n    return;\n  }\n  const currentSession = global.activeSessions.byHash[currentSessionHash];\n\n  global = {\n    ...global,\n    activeSessions: {\n      byHash: {\n        [currentSessionHash]: currentSession,\n      },\n      orderedHashes: [currentSessionHash],\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionSettings', async (global, actions, payload): Promise<void> => {\n  const { hash, areCallsEnabled, areSecretChatsEnabled } = payload;\n  const result = await callApi('changeSessionSettings', {\n    hash,\n    areCallsEnabled,\n    areSecretChatsEnabled,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      byHash: {\n        ...global.activeSessions.byHash,\n        [hash]: {\n          ...global.activeSessions.byHash[hash],\n          ...(areCallsEnabled !== undefined ? { areCallsEnabled } : undefined),\n          ...(areSecretChatsEnabled !== undefined ? { areSecretChatsEnabled } : undefined),\n        },\n      },\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('changeSessionTtl', async (global, actions, payload): Promise<void> => {\n  const { days } = payload;\n\n  const result = await callApi('changeSessionTtl', { days });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = {\n    ...global,\n    activeSessions: {\n      ...global.activeSessions,\n      ttlDays: days,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('fetchWebAuthorizations');\n  if (!result) {\n    return;\n  }\n  const { users, webAuthorizations } = result;\n  global = getGlobal();\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: webAuthorizations,\n      orderedHashes: Object.keys(webAuthorizations),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateWebAuthorization', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload!;\n\n  const result = await callApi('terminateWebAuthorization', hash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const { [hash]: removedSessions, ...newSessions } = global.activeWebSessions.byHash;\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: newSessions,\n      orderedHashes: global.activeWebSessions.orderedHashes.filter((el) => el !== hash),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('terminateAllWebAuthorizations', async (global): Promise<void> => {\n  const result = await callApi('terminateAllWebAuthorizations');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  global = {\n    ...global,\n    activeWebSessions: {\n      byHash: {},\n      orderedHashes: [],\n    },\n  };\n  setGlobal(global);\n});\n","import {\n  addActionHandler,\n  getGlobal,\n  setGlobal,\n} from '../../index';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { buildCollectionByKey, unique } from '../../../util/iteratees';\nimport { isUserBot, isUserId } from '../../helpers';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectCurrentMessageList, selectTabState, selectUser,\n} from '../../selectors';\nimport {\n  addChats,\n  addUsers,\n  addUserStatuses,\n  closeNewContactDialog,\n  replaceUserStatuses,\n  updateChat,\n  updateManagementProgress,\n  updateUser,\n  updateUsers,\n  updateUserSearch,\n  updateUserSearchFetchingStatus,\n} from '../../reducers';\nimport { getServerTime } from '../../../util/serverTime';\nimport * as langProvider from '../../../util/langProvider';\nimport type { ActionReturnType } from '../../types';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runThrottledForSearch = throttle((cb) => cb(), 500, false);\n\naddActionHandler('loadFullUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n  const newUser = await callApi('fetchFullUser', { id, accessHash });\n  if (!newUser) return;\n\n  const hasChangedAvatarHash = user.avatarHash !== newUser.avatarHash;\n  const hasChangedProfilePhoto = user.fullInfo?.profilePhoto?.id !== newUser.fullInfo?.profilePhoto?.id;\n  const hasChangedFallbackPhoto = user.fullInfo?.fallbackPhoto?.id !== newUser.fullInfo?.fallbackPhoto?.id;\n  const hasChangedPersonalPhoto = user.fullInfo?.personalPhoto?.id !== newUser.fullInfo?.personalPhoto?.id;\n  if ((hasChangedAvatarHash || hasChangedProfilePhoto || hasChangedFallbackPhoto || hasChangedPersonalPhoto)\n    && user.photos?.length) {\n    actions.loadProfilePhotos({ profileId: userId });\n  }\n});\n\naddActionHandler('loadUser', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload!;\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  const result = await callApi('fetchUsers', { users: [user] });\n  if (!result) {\n    return;\n  }\n\n  const { users, userStatusesById } = result;\n\n  global = getGlobal();\n  global = updateUsers(global, buildCollectionByKey(users, 'id'));\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...userStatusesById,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadTopUsers', async (global): Promise<void> => {\n  const { topPeers: { lastRequestedAt } } = global;\n\n  if (!(!lastRequestedAt || getServerTime() - lastRequestedAt > TOP_PEERS_REQUEST_COOLDOWN)) {\n    return;\n  }\n\n  const result = await callApi('fetchTopUsers');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topPeers: {\n      ...global.topPeers,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadContactList', async (global): Promise<void> => {\n  const contactList = await callApi('fetchContactList');\n  if (!contactList) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(contactList.users, 'id'));\n  global = addChats(global, buildCollectionByKey(contactList.chats, 'id'));\n  global = addUserStatuses(global, contactList.userStatusesById);\n\n  // Sort contact list by Last Name (or First Name), with latin names being placed first\n  const getCompareString = (user: ApiUser) => (user.lastName || user.firstName || '');\n  const collator = new Intl.Collator('en-US');\n\n  const sortedUsers = contactList.users.sort((a, b) => (\n    collator.compare(getCompareString(a), getCompareString(b))\n  )).filter((user) => !user.isSelf);\n\n  global = {\n    ...global,\n    contactList: {\n      userIds: sortedUsers.map((user) => user.id),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('loadCurrentUser', (): ActionReturnType => {\n  void callApi('fetchCurrentUser');\n});\n\naddActionHandler('loadCommonChats', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const { chatId } = selectCurrentMessageList(global, tabId) || {};\n  const user = chatId ? selectUser(global, chatId) : undefined;\n  if (!user || isUserBot(user) || user.commonChats?.isFullyLoaded) {\n    return;\n  }\n\n  const maxId = user.commonChats?.maxId;\n  const result = await callApi('fetchCommonChats', user.id, user.accessHash!, maxId);\n  if (!result) {\n    return;\n  }\n\n  const { chats, chatIds, isFullyLoaded } = result;\n\n  global = getGlobal();\n  if (chats.length) {\n    global = addChats(global, buildCollectionByKey(chats, 'id'));\n  }\n  global = updateUser(global, user.id, {\n    commonChats: {\n      maxId: chatIds.length ? chatIds[chatIds.length - 1] : '0',\n      ids: unique((user.commonChats?.ids || []).concat(chatIds)),\n      isFullyLoaded,\n    },\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('updateContact', async (global, actions, payload): Promise<void> => {\n  const {\n    userId, isMuted = false, firstName, lastName, shouldSharePhoneNumber,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const user = selectUser(global, userId);\n  if (!user) {\n    return;\n  }\n\n  actions.updateChatMutedState({ chatId: userId, isMuted });\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.InProgress, tabId);\n  setGlobal(global);\n\n  let result;\n  if (!user.isContact && user.phoneNumber) {\n    result = await callApi('importContact', { phone: user.phoneNumber, firstName, lastName });\n  } else {\n    const { id, accessHash } = user;\n    result = await callApi('updateContact', {\n      id,\n      accessHash,\n      phoneNumber: '',\n      firstName,\n      lastName,\n      shouldSharePhoneNumber,\n    });\n  }\n\n  if (result) {\n    actions.loadChatSettings({ chatId: userId });\n\n    global = getGlobal();\n    global = updateUser(\n      global,\n      user.id,\n      {\n        firstName,\n        lastName,\n      },\n    );\n    setGlobal(global);\n  }\n\n  global = getGlobal();\n  global = updateManagementProgress(global, ManagementProgress.Complete, tabId);\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('deleteContact', async (global, actions, payload): Promise<void> => {\n  const { userId } = payload;\n\n  const user = selectUser(global, userId);\n\n  if (!user) {\n    return;\n  }\n\n  const { id, accessHash } = user;\n\n  await callApi('deleteContact', { id, accessHash });\n});\n\naddActionHandler('loadProfilePhotos', async (global, actions, payload): Promise<void> => {\n  const { profileId } = payload!;\n  const isPrivate = isUserId(profileId);\n\n  let user = isPrivate ? selectUser(global, profileId) : undefined;\n  const chat = !isPrivate ? selectChat(global, profileId) : undefined;\n  if (!user && !chat) {\n    return;\n  }\n\n  if (user && !user?.fullInfo) {\n    const { id, accessHash } = user;\n    user = await callApi('fetchFullUser', { id, accessHash });\n    if (!user) return;\n  }\n\n  const result = await callApi('fetchProfilePhotos', user, chat);\n  if (!result || !result.photos) {\n    return;\n  }\n\n  global = getGlobal();\n\n  const userOrChat = user || chat;\n  const { photos, users } = result;\n  photos.sort((a) => (a.id === userOrChat?.avatarHash ? -1 : 1));\n  const fallbackPhoto = user?.fullInfo?.fallbackPhoto;\n  const personalPhoto = user?.fullInfo?.personalPhoto;\n  if (fallbackPhoto) photos.push(fallbackPhoto);\n  if (personalPhoto) photos.unshift(personalPhoto);\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if (isPrivate) {\n    global = updateUser(global, profileId, { photos });\n  } else {\n    global = updateChat(global, profileId, { photos });\n  }\n\n  setGlobal(global);\n});\n\naddActionHandler('setUserSearchQuery', (global, actions, payload): ActionReturnType => {\n  const { query, tabId = getCurrentTabId() } = payload!;\n\n  if (!query) return;\n\n  void runThrottledForSearch(async () => {\n    const result = await callApi('searchChats', { query });\n\n    global = getGlobal();\n    const currentSearchQuery = selectTabState(global, tabId).userSearch.query;\n\n    if (!result || !currentSearchQuery || (query !== currentSearchQuery)) {\n      global = updateUserSearchFetchingStatus(global, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    const { localUsers, globalUsers } = result;\n\n    let localUserIds;\n    let globalUserIds;\n    if (localUsers.length) {\n      global = addUsers(global, buildCollectionByKey(localUsers, 'id'));\n      localUserIds = localUsers.map(({ id }) => id);\n    }\n    if (globalUsers.length) {\n      global = addUsers(global, buildCollectionByKey(globalUsers, 'id'));\n      globalUserIds = globalUsers.map(({ id }) => id);\n    }\n\n    global = updateUserSearchFetchingStatus(global, false, tabId);\n    global = updateUserSearch(global, { localUserIds, globalUserIds }, tabId);\n\n    setGlobal(global);\n  });\n});\n\naddActionHandler('importContact', async (global, actions, payload): Promise<void> => {\n  const {\n    phoneNumber: phone, firstName, lastName,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const result = await callApi('importContact', { phone, firstName, lastName });\n  if (!result) {\n    actions.showNotification({\n      message: langProvider.translate('Contacts.PhoneNumber.NotRegistred'),\n      tabId,\n    });\n\n    return;\n  }\n\n  actions.openChat({ id: result, tabId });\n\n  global = getGlobal();\n  global = closeNewContactDialog(global, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('reportSpam', (global, actions, payload): ActionReturnType => {\n  const { chatId } = payload!;\n  const userOrChat = isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId);\n  if (!userOrChat) {\n    return;\n  }\n\n  void callApi('reportSpam', userOrChat);\n});\n\naddActionHandler('setEmojiStatus', (global, actions, payload): ActionReturnType => {\n  const { emojiStatus, expires } = payload!;\n\n  void callApi('updateEmojiStatus', emojiStatus, expires);\n});\n","import type { GlobalState, TabArgs } from '../types';\nimport type { InlineBotSettings } from '../../types';\nimport { updateTabState } from './tabs';\nimport { selectTabState } from '../selectors';\nimport { getCurrentTabId } from '../../util/establishMultitabRole';\n\nexport function replaceInlineBotSettings<T extends GlobalState>(\n  global: T, username: string, inlineBotSettings: InlineBotSettings | false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  const tabState = selectTabState(global, tabId);\n  return updateTabState(global, {\n    inlineBots: {\n      ...tabState.inlineBots,\n      byUsername: {\n        ...tabState.inlineBots.byUsername,\n        [username]: inlineBotSettings,\n      },\n    },\n  }, tabId);\n}\n\nexport function replaceInlineBotsIsLoading<T extends GlobalState>(\n  global: T, isLoading: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): T {\n  return updateTabState(global, {\n    inlineBots: {\n      ...selectTabState(global, tabId).inlineBots,\n      isLoading,\n    },\n  }, tabId);\n}\n","import { IS_ANDROID, IS_IOS } from './environment';\n\nconst SHOULD_PRE_OPEN = IS_IOS || IS_ANDROID;\n\nexport default class PopupManager {\n  private preOpened?: WindowProxy | null;\n\n  constructor(private features?: string, private onFail?: NoneToVoidFunction) {\n  }\n\n  preOpenIfNeeded() {\n    if (!SHOULD_PRE_OPEN) return;\n\n    this.preOpened = window.open('about:blank', undefined, this.features);\n    if (this.preOpened) {\n      this.preOpened.blur();\n    } else {\n      this.onFail?.();\n    }\n  }\n\n  open(url: string) {\n    if (this.preOpened) {\n      this.preOpened!.location.href = url;\n      this.preOpened!.focus();\n      this.preOpened = undefined;\n\n      return;\n    }\n\n    if (!SHOULD_PRE_OPEN) {\n      const popup = window.open(url, undefined, this.features);\n      if (popup) {\n        popup.focus();\n      } else {\n        this.onFail?.();\n      }\n    }\n  }\n\n  cancelPreOpen() {\n    this.preOpened?.close();\n    this.preOpened = undefined;\n  }\n}\n","import type { RequiredGlobalActions } from '../../index';\nimport {\n  addActionHandler, getGlobal, setGlobal,\n} from '../../index';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type {\n  ApiChat, ApiChatType, ApiContact, ApiUrlAuthResult, ApiUser,\n} from '../../../api/types';\nimport type { InlineBotSettings } from '../../../types';\n\nimport { MAIN_THREAD_ID } from '../../../api/types';\nimport { callApi } from '../../../api/gramjs';\nimport {\n  selectChat, selectChatBot, selectChatMessage, selectCurrentChat, selectCurrentMessageList, selectTabState,\n  selectIsTrustedBot, selectReplyingToId, selectSendAs, selectUser, selectThreadTopMessageId,\n} from '../../selectors';\nimport { addChats, addUsers, removeBlockedContact } from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { debounce } from '../../../util/schedulers';\nimport { replaceInlineBotSettings, replaceInlineBotsIsLoading } from '../../reducers/bots';\nimport { getServerTime } from '../../../util/serverTime';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\nimport PopupManager from '../../../util/PopupManager';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst GAMEE_URL = 'https://prizes.gamee.com/';\nconst TOP_PEERS_REQUEST_COOLDOWN = 60; // 1 min\nconst runDebouncedForSearch = debounce((cb) => cb(), 500, false);\n\naddActionHandler('clickBotInlineButton', (global, actions, payload): ActionReturnType => {\n  const { messageId, button, tabId = getCurrentTabId() } = payload;\n\n  switch (button.type) {\n    case 'command':\n      actions.sendBotCommand({ command: button.text, tabId });\n      break;\n    case 'url': {\n      const { url } = button;\n      actions.openUrl({ url, tabId });\n      break;\n    }\n    case 'callback': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, button.data, undefined, tabId);\n      break;\n    }\n    case 'requestPoll':\n      actions.openPollModal({ isQuiz: button.isQuiz, tabId });\n      break;\n    case 'requestPhone': {\n      const user = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n      if (!user) {\n        return;\n      }\n      actions.showDialog({\n        data: {\n          phoneNumber: user.phoneNumber,\n          firstName: user.firstName,\n          lastName: user.lastName,\n          userId: user.id,\n        } as ApiContact,\n        tabId,\n      });\n      break;\n    }\n    case 'receipt': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const { receiptMessageId } = button;\n      actions.getReceipt({\n        receiptMessageId, chatId: chat.id, messageId, tabId,\n      });\n      break;\n    }\n    case 'buy': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.openInvoice({\n        chatId: chat.id,\n        messageId,\n        tabId,\n      });\n      break;\n    }\n    case 'game': {\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n\n      void answerCallbackButton(global, actions, chat, messageId, undefined, true, tabId);\n      break;\n    }\n    case 'switchBotInline': {\n      const { query, isSamePeer } = button;\n      actions.switchBotInline({\n        query, isSamePeer, messageId, tabId,\n      });\n      break;\n    }\n\n    case 'userProfile': {\n      const { userId } = button;\n      actions.openChatWithInfo({ id: userId, tabId });\n      break;\n    }\n\n    case 'simpleWebView': {\n      const { url } = button;\n      const { chatId } = selectCurrentMessageList(global, tabId) || {};\n      if (!chatId) {\n        return;\n      }\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message?.senderId) return;\n      const theme = extractCurrentThemeParams();\n      actions.requestSimpleWebView({\n        url, botId: message?.senderId, theme, buttonText: button.text, tabId,\n      });\n      break;\n    }\n\n    case 'webView': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      const message = selectChatMessage(global, chat.id, messageId);\n      if (!message) {\n        return;\n      }\n      const botId = message.viaBotId || message.senderId;\n      if (!botId) {\n        return;\n      }\n      const theme = extractCurrentThemeParams();\n      actions.requestWebView({\n        url,\n        botId,\n        peerId: chat.id,\n        theme,\n        buttonText: button.text,\n        tabId,\n      });\n      break;\n    }\n    case 'urlAuth': {\n      const { url } = button;\n      const chat = selectCurrentChat(global, tabId);\n      if (!chat) {\n        return;\n      }\n      actions.requestBotUrlAuth({\n        chatId: chat.id,\n        messageId,\n        buttonId: button.buttonId,\n        url,\n        tabId,\n      });\n      break;\n    }\n  }\n});\n\naddActionHandler('sendBotCommand', (global, actions, payload): ActionReturnType => {\n  const { command, chatId, tabId = getCurrentTabId() } = payload;\n  const chat = chatId ? selectChat(global, chatId) : selectCurrentChat(global, tabId);\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n\n  if (!chat || !currentMessageList) {\n    return;\n  }\n\n  const { threadId } = currentMessageList;\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void sendBotCommand(\n    chat, threadId, command, selectReplyingToId(global, chat.id, threadId), selectSendAs(global, chat.id),\n  );\n});\n\naddActionHandler('restartBot', async (global, actions, payload): Promise<void> => {\n  const { chatId, tabId = getCurrentTabId() } = payload;\n  const { currentUserId } = global;\n  const chat = selectCurrentChat(global, tabId);\n  const bot = currentUserId && selectChatBot(global, chatId);\n  if (!currentUserId || !chat || !bot) {\n    return;\n  }\n\n  const result = await callApi('unblockContact', bot.id, bot.accessHash);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = removeBlockedContact(global, bot.id);\n  setGlobal(global);\n  void sendBotCommand(chat, MAIN_THREAD_ID, '/start', undefined, selectSendAs(global, chatId));\n});\n\naddActionHandler('loadTopInlineBots', async (global): Promise<void> => {\n  const { lastRequestedAt } = global.topInlineBots;\n  if (lastRequestedAt && getServerTime() - lastRequestedAt < TOP_PEERS_REQUEST_COOLDOWN) {\n    return;\n  }\n\n  const result = await callApi('fetchTopInlineBots');\n  if (!result) {\n    return;\n  }\n\n  const { ids, users } = result;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = {\n    ...global,\n    topInlineBots: {\n      ...global.topInlineBots,\n      userIds: ids,\n      lastRequestedAt: getServerTime(),\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('queryInlineBot', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, username, query, offset,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  if (inlineBotData === false) {\n    return;\n  }\n\n  if (inlineBotData === undefined) {\n    const { user: inlineBot, chat } = await callApi('fetchInlineBot', { username }) || {};\n    global = getGlobal();\n    if (!inlineBot || !chat) {\n      global = replaceInlineBotSettings(global, username, false, tabId);\n      setGlobal(global);\n      return;\n    }\n\n    global = addUsers(global, { [inlineBot.id]: inlineBot });\n    global = addChats(global, { [chat.id]: chat });\n    inlineBotData = {\n      id: inlineBot.id,\n      query: '',\n      offset: '',\n      switchPm: undefined,\n      canLoadMore: true,\n      results: [],\n      cacheTime: 0,\n    };\n\n    global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n    setGlobal(global);\n  }\n\n  if (query === inlineBotData.query && !inlineBotData.canLoadMore) {\n    return;\n  }\n\n  void runDebouncedForSearch(() => {\n    searchInlineBot(global, {\n      username,\n      inlineBotData: inlineBotData as InlineBotSettings,\n      chatId,\n      query,\n      offset,\n    }, tabId);\n  });\n});\n\naddActionHandler('switchBotInline', (global, actions, payload): ActionReturnType => {\n  const {\n    query, isSamePeer, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) {\n    return undefined;\n  }\n  const message = selectChatMessage(global, chat.id, messageId);\n  if (!message) {\n    return undefined;\n  }\n\n  const botSender = selectUser(global, message.viaBotId || message.senderId!);\n  if (!botSender) {\n    return undefined;\n  }\n\n  actions.openChatWithDraft({\n    text: `@${botSender.usernames![0].username} ${query}`,\n    chatId: isSamePeer ? chat.id : undefined,\n    tabId,\n  });\n  return undefined;\n});\n\naddActionHandler('sendInlineBotResult', (global, actions, payload): ActionReturnType => {\n  const {\n    id, queryId, isSilent, scheduledAt,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList || !id) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n\n  const chat = selectChat(global, chatId)!;\n  const replyingTo = selectReplyingToId(global, chatId, threadId);\n  let replyingToTopId: number | undefined;\n\n  if (replyingTo && threadId !== MAIN_THREAD_ID) {\n    replyingToTopId = selectThreadTopMessageId(global, chatId, threadId)!;\n  }\n\n  actions.setReplyingToId({ messageId: undefined, tabId });\n  actions.clearWebPagePreview({ tabId });\n\n  void callApi('sendInlineBotResult', {\n    chat,\n    resultId: id,\n    queryId,\n    replyingTo,\n    replyingToTopId,\n    sendAs: selectSendAs(global, chatId),\n    isSilent,\n    scheduleDate: scheduledAt,\n  });\n});\n\naddActionHandler('resetInlineBot', (global, actions, payload): ActionReturnType => {\n  const { username, force, tabId = getCurrentTabId() } = payload;\n\n  let inlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n\n  if (!inlineBotData) {\n    return;\n  }\n\n  if (!force && Date.now() < inlineBotData.cacheTime) return;\n\n  inlineBotData = {\n    id: inlineBotData.id,\n    query: '',\n    offset: '',\n    switchPm: undefined,\n    canLoadMore: true,\n    results: [],\n    cacheTime: 0,\n  };\n\n  global = replaceInlineBotSettings(global, username, inlineBotData, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('resetAllInlineBots', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const inlineBots = selectTabState(global, tabId).inlineBots.byUsername;\n\n  Object.keys(inlineBots).forEach((username) => {\n    actions.resetInlineBot({ username, tabId });\n  });\n});\n\naddActionHandler('startBot', async (global, actions, payload): Promise<void> => {\n  const { botId, param } = payload;\n\n  let bot = selectUser(global, botId);\n  if (!bot) {\n    return;\n  }\n  if (!bot.fullInfo) await callApi('fetchFullUser', { id: bot.id, accessHash: bot.accessHash });\n  global = getGlobal();\n  bot = selectUser(global, botId)!;\n  if (bot.fullInfo?.isBlocked) await callApi('unblockContact', bot.id, bot.accessHash);\n\n  await callApi('startBot', {\n    bot,\n    startParam: param,\n  });\n});\n\naddActionHandler('requestSimpleWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, theme, buttonText,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestSimpleWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const webViewUrl = await callApi('requestSimpleWebView', { url, bot, theme });\n  if (!webViewUrl) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('requestWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    url, botId, peerId, theme, isSilent, buttonText, isFromBotMenu, startParam,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  if (!selectIsTrustedBot(global, botId)) {\n    global = updateTabState(global, {\n      botTrustRequest: {\n        botId,\n        type: 'webApp',\n        onConfirm: {\n          action: 'requestWebView',\n          payload,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const currentMessageList = selectCurrentMessageList(global, tabId);\n  if (!currentMessageList) {\n    return;\n  }\n\n  const { chatId, threadId } = currentMessageList;\n  const reply = chatId && selectReplyingToId(global, chatId, threadId);\n  const sendAs = selectSendAs(global, chatId);\n  const result = await callApi('requestWebView', {\n    url,\n    bot,\n    peer,\n    theme,\n    isSilent,\n    replyToMessageId: reply || undefined,\n    threadId,\n    isFromBotMenu,\n    startParam,\n    sendAs,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { url: webViewUrl, queryId } = result;\n\n  global = getGlobal();\n  global = updateTabState(global, {\n    webApp: {\n      url: webViewUrl,\n      botId,\n      queryId,\n      replyToMessageId: reply || undefined,\n      threadId,\n      buttonText,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('prolongWebView', async (global, actions, payload): Promise<void> => {\n  const {\n    botId, peerId, isSilent, replyToMessageId, queryId, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n\n  const bot = selectUser(global, botId);\n  if (!bot) return;\n  const peer = selectChat(global, peerId);\n  if (!peer) return;\n\n  const sendAs = selectSendAs(global, peerId);\n\n  const result = await callApi('prolongWebView', {\n    bot,\n    peer,\n    isSilent,\n    replyToMessageId,\n    threadId,\n    queryId,\n    sendAs,\n  });\n\n  if (!result) {\n    actions.closeWebApp({ tabId });\n  }\n});\n\naddActionHandler('sendWebViewData', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, data, buttonText,\n  } = payload;\n\n  callApi('sendWebViewData', {\n    bot,\n    data,\n    buttonText,\n  });\n});\n\naddActionHandler('closeWebApp', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n\n  return updateTabState(global, {\n    webApp: undefined,\n  }, tabId);\n});\n\naddActionHandler('setWebAppPaymentSlug', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.webApp?.url) return undefined;\n\n  return updateTabState(global, {\n    webApp: {\n      ...tabState.webApp,\n      slug: payload.slug,\n    },\n  }, tabId);\n});\n\naddActionHandler('cancelBotTrustRequest', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n});\n\naddActionHandler('markBotTrusted', (global, actions, payload): ActionReturnType => {\n  const { botId, tabId = getCurrentTabId() } = payload;\n  const { trustedBotIds } = global;\n\n  const newTrustedBotIds = new Set(trustedBotIds);\n  newTrustedBotIds.add(botId);\n\n  global = {\n    ...global,\n    trustedBotIds: Array.from(newTrustedBotIds),\n  };\n\n  const tabState = selectTabState(global, tabId);\n  if (tabState.botTrustRequest?.onConfirm) {\n    const { action, payload: callbackPayload } = tabState.botTrustRequest.onConfirm;\n    // @ts-ignore\n    actions[action](callbackPayload);\n  }\n\n  global = updateTabState(global, {\n    botTrustRequest: undefined,\n  }, tabId);\n\n  setGlobal(global);\n});\n\naddActionHandler('loadAttachBots', async (global, actions, payload): Promise<void> => {\n  const { hash } = payload || {};\n  await loadAttachBots(global, hash);\n});\n\naddActionHandler('toggleAttachBot', async (global, actions, payload): Promise<void> => {\n  const { botId, isWriteAllowed, isEnabled } = payload;\n\n  const bot = selectUser(global, botId);\n\n  if (!bot) return;\n\n  await toggleAttachBot(global, bot, isEnabled, isWriteAllowed);\n});\n\nasync function toggleAttachBot<T extends GlobalState>(\n  global: T, bot: ApiUser, isEnabled: boolean, isWriteAllowed?: boolean,\n) {\n  await callApi('toggleAttachBot', { bot, isWriteAllowed, isEnabled });\n  global = getGlobal();\n  await loadAttachBots(global);\n}\n\nasync function loadAttachBots<T extends GlobalState>(global: T, hash?: string) {\n  const result = await callApi('loadAttachBots', { hash });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = {\n    ...global,\n    attachMenu: {\n      hash: result.hash,\n      bots: result.bots,\n    },\n  };\n  setGlobal(global);\n}\n\naddActionHandler('callAttachBot', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, bot, url, startParam, threadId,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const isFromBotMenu = !bot;\n  if (!isFromBotMenu && !global.attachMenu.bots[bot.id]) {\n    return updateTabState(global, {\n      requestedAttachBotInstall: {\n        bot,\n        onConfirm: {\n          action: 'callAttachBot',\n          payload,\n        },\n      },\n    }, tabId);\n  }\n  const theme = extractCurrentThemeParams();\n  actions.openChat({ id: chatId, threadId, tabId });\n  actions.requestWebView({\n    url,\n    peerId: chatId,\n    botId: isFromBotMenu ? chatId : bot.id,\n    theme,\n    buttonText: '',\n    isFromBotMenu,\n    startParam,\n    tabId,\n  });\n\n  return undefined;\n});\n\naddActionHandler('confirmAttachBotInstall', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const { requestedAttachBotInstall } = selectTabState(global, tabId);\n\n  const { bot, onConfirm } = requestedAttachBotInstall!;\n\n  global = updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n  setGlobal(global);\n\n  const botUser = selectUser(global, bot.id);\n  if (!botUser) return;\n\n  await toggleAttachBot(global, botUser, true, isWriteAllowed);\n  if (onConfirm) {\n    const { action, payload: actionPayload } = onConfirm;\n    // @ts-ignore\n    actions[action](actionPayload);\n  }\n});\n\naddActionHandler('cancelAttachBotInstall', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInstall: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const {\n    bot, filter, startParam, tabId = getCurrentTabId(),\n  } = payload;\n  const currentChatId = selectCurrentMessageList(global, tabId)?.chatId;\n\n  const supportedFilters = bot.peerTypes.filter((type): type is ApiChatType => (\n    type !== 'self' && filter.includes(type)\n  ));\n\n  if (!supportedFilters.length) {\n    actions.callAttachBot({\n      chatId: currentChatId || bot.id,\n      bot,\n      startParam,\n      tabId,\n    });\n    return;\n  }\n\n  global = updateTabState(global, {\n    requestedAttachBotInChat: {\n      bot,\n      filter: supportedFilters,\n      startParam,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('cancelAttachBotInChat', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    requestedAttachBotInChat: undefined,\n  }, tabId);\n});\n\naddActionHandler('requestBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, buttonId, messageId, url, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('requestBotUrlAuth', {\n    chat,\n    buttonId,\n    messageId,\n  });\n\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n      button: {\n        buttonId,\n        messageId,\n        chatId: chat.id,\n      },\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptBotUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.button) return;\n  const {\n    button, url,\n  } = tabState.urlAuth;\n  const { chatId, messageId, buttonId } = button;\n\n  const chat = selectChat(global, chatId);\n  if (!chat) {\n    return;\n  }\n\n  const result = await callApi('acceptBotUrlAuth', {\n    chat,\n    messageId,\n    buttonId,\n    isWriteAllowed,\n  });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('requestLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { url, tabId = getCurrentTabId() } = payload;\n\n  const result = await callApi('requestLinkUrlAuth', { url });\n  if (!result) return;\n  global = getGlobal();\n  global = updateTabState(global, {\n    urlAuth: {\n      url,\n    },\n  }, tabId);\n  setGlobal(global);\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('acceptLinkUrlAuth', async (global, actions, payload): Promise<void> => {\n  const { isWriteAllowed, tabId = getCurrentTabId() } = payload;\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.urlAuth?.url) return;\n  const { url } = tabState.urlAuth;\n\n  const result = await callApi('acceptLinkUrlAuth', { url, isWriteAllowed });\n  if (!result) return;\n  global = getGlobal();\n  handleUrlAuthResult(global, actions, url, result, tabId);\n});\n\naddActionHandler('closeUrlAuthModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    urlAuth: undefined,\n  }, tabId);\n});\n\nfunction handleUrlAuthResult<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions,\n  url: string, result: ApiUrlAuthResult,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  if (result.type === 'request') {\n    global = getGlobal();\n    const tabState = selectTabState(global, tabId);\n    if (!tabState.urlAuth) return;\n    const { domain, bot, shouldRequestWriteAccess } = result;\n    global = updateTabState(global, {\n      urlAuth: {\n        ...tabState.urlAuth,\n        request: {\n          domain,\n          botId: bot.id,\n          shouldRequestWriteAccess,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  const siteUrl = result.type === 'accepted' ? result.url : url;\n  window.open(siteUrl, '_blank', 'noopener');\n  actions.closeUrlAuthModal({ tabId });\n}\n\nasync function searchInlineBot<T extends GlobalState>(global: T, {\n  username,\n  inlineBotData,\n  chatId,\n  query,\n  offset,\n}: {\n  username: string;\n  inlineBotData: InlineBotSettings;\n  chatId: string;\n  query: string;\n  offset?: string;\n}, ...[tabId = getCurrentTabId()]: TabArgs<T>) {\n  global = getGlobal();\n  const bot = selectUser(global, inlineBotData.id);\n  const chat = selectChat(global, chatId);\n  if (!bot || !chat) {\n    return;\n  }\n\n  const shouldReplaceSettings = inlineBotData.query !== query;\n  global = replaceInlineBotsIsLoading(global, true, tabId);\n  global = replaceInlineBotSettings(global, username, {\n    ...inlineBotData,\n    query,\n    ...(shouldReplaceSettings && { offset: undefined, results: [] }),\n  }, tabId);\n  setGlobal(global);\n\n  const result = await callApi('fetchInlineBotResults', {\n    bot,\n    chat,\n    query,\n    offset: shouldReplaceSettings ? undefined : offset,\n  });\n\n  global = getGlobal();\n  const newInlineBotData = selectTabState(global, tabId).inlineBots.byUsername[username];\n  global = replaceInlineBotsIsLoading(global, false, tabId);\n  if (!result || !newInlineBotData || query !== newInlineBotData.query) {\n    setGlobal(global);\n    return;\n  }\n\n  const currentIds = new Set((newInlineBotData.results || []).map((data) => data.id));\n  const newResults = result.results.filter((data) => !currentIds.has(data.id));\n\n  global = replaceInlineBotSettings(global, username, {\n    ...newInlineBotData,\n    help: result.help,\n    cacheTime: Date.now() + result.cacheTime * 1000,\n    ...(newResults.length && { isGallery: result.isGallery }),\n    ...(result.switchPm && { switchPm: result.switchPm }),\n    canLoadMore: result.results.length > 0 && Boolean(result.nextOffset),\n    results: newInlineBotData.offset === '' || newInlineBotData.offset === result.nextOffset\n      ? result.results\n      : (newInlineBotData.results || []).concat(newResults),\n    offset: newResults.length ? result.nextOffset : '',\n  }, tabId);\n\n  setGlobal(global);\n}\n\nasync function sendBotCommand(\n  chat: ApiChat, threadId = MAIN_THREAD_ID, command: string, replyingTo?: number, sendAs?: ApiChat | ApiUser,\n) {\n  await callApi('sendMessage', {\n    chat,\n    replyingToTopId: threadId,\n    text: command,\n    replyingTo,\n    sendAs,\n  });\n}\n\nlet gameePopups: PopupManager | undefined;\n\nasync function answerCallbackButton<T extends GlobalState>(\n  global: T,\n  actions: RequiredGlobalActions, chat: ApiChat, messageId: number, data?: string, isGame = false,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const {\n    showDialog, showNotification, openUrl, openGame,\n  } = actions;\n\n  if (isGame) {\n    if (!gameePopups) {\n      gameePopups = new PopupManager('popup,width=800,height=600', () => {\n        showNotification({ message: 'Allow browser to open popup window', tabId });\n      });\n    }\n\n    gameePopups.preOpenIfNeeded();\n  }\n\n  const result = await callApi('answerCallbackButton', {\n    chatId: chat.id,\n    accessHash: chat.accessHash,\n    messageId,\n    data,\n    isGame,\n  });\n\n  if (!result) {\n    return;\n  }\n  const { message, alert: isError, url } = result;\n\n  if (isError) {\n    showDialog({ data: { message: message || 'Error' }, tabId });\n  } else if (message) {\n    showNotification({ message, tabId });\n  } else if (url) {\n    if (isGame) {\n      // Workaround for Gamee embedding bug\n      if (url.includes(GAMEE_URL)) {\n        gameePopups!.open(url);\n      } else {\n        gameePopups!.cancelPreOpen();\n        openGame({\n          url, chatId: chat.id, messageId, tabId,\n        });\n      }\n    } else {\n      openUrl({ url, tabId });\n    }\n  }\n}\n","export function buildQueryString(data: Record<string, string>) {\n  const query = Object.keys(data).map((k) => `${k}=${data[k]}`).join('&');\n  return query.length > 0 ? `?${query}` : '';\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\n\nimport type { ActionReturnType, GlobalState, TabArgs } from '../../types';\nimport type { ApiInvoice, ApiRequestInputInvoice } from '../../../api/types';\nimport { PaymentStep } from '../../../types';\n\nimport { DEBUG_PAYMENT_SMART_GLOCAL } from '../../../config';\nimport {\n  selectPaymentRequestId,\n  selectProviderPublishableKey,\n  selectStripeCredentials,\n  selectChatMessage,\n  selectChat,\n  selectPaymentFormId,\n  selectProviderPublicToken,\n  selectSmartGlocalCredentials,\n  selectPaymentInputInvoice, selectTabState,\n} from '../../selectors';\nimport { getStripeError } from '../../helpers';\nimport { buildQueryString } from '../../../util/requestQuery';\nimport {\n  updateShippingOptions,\n  setPaymentStep,\n  setRequestInfoId,\n  setPaymentForm,\n  setStripeCardInfo,\n  setReceipt,\n  closeInvoice,\n  setSmartGlocalCardInfo, addUsers, setInvoiceInfo, updatePayment,\n} from '../../reducers';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\nimport type { ApiCredentials } from '../../../components/payment/PaymentModal';\n\naddActionHandler('validateRequestedInfo', (global, actions, payload): ActionReturnType => {\n  const { requestInfo, saveInfo, tabId = getCurrentTabId() } = payload;\n\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  if (!inputInvoice) {\n    return;\n  }\n\n  if ('slug' in inputInvoice) {\n    void validateRequestedInfo(global, inputInvoice, requestInfo, saveInfo, tabId);\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    void validateRequestedInfo(global, {\n      chat,\n      messageId: inputInvoice.messageId,\n    }, requestInfo, saveInfo, tabId);\n  }\n});\n\naddActionHandler('openInvoice', async (global, actions, payload): Promise<void> => {\n  const { tabId = getCurrentTabId() } = payload;\n  let invoice: ApiInvoice | undefined;\n  if ('slug' in payload) {\n    invoice = await getPaymentForm(global, { slug: payload.slug }, tabId);\n  } else {\n    const chat = selectChat(global, payload.chatId);\n    if (!chat) {\n      return;\n    }\n\n    invoice = await getPaymentForm(global, {\n      chat,\n      messageId: payload.messageId,\n    }, tabId);\n  }\n\n  if (!invoice) {\n    return;\n  }\n\n  global = getGlobal();\n  global = setInvoiceInfo(global, invoice, tabId);\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      inputInvoice: payload,\n      isPaymentModalOpen: true,\n      status: 'cancelled',\n      isExtendedMedia: (payload as any).isExtendedMedia,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\nasync function getPaymentForm<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n): Promise<ApiInvoice | undefined> {\n  const result = await callApi('getPaymentForm', inputInvoice);\n  if (!result) {\n    return undefined;\n  }\n\n  const { form, invoice, users } = result;\n\n  global = getGlobal();\n  global = setPaymentForm(global, form, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  setGlobal(global);\n\n  return invoice;\n}\n\naddActionHandler('getReceipt', async (global, actions, payload): Promise<void> => {\n  const {\n    receiptMessageId, chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = chatId && selectChat(global, chatId);\n  if (!messageId || !receiptMessageId || !chat) {\n    return;\n  }\n\n  const result = await callApi('getReceipt', chat, receiptMessageId);\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const message = selectChatMessage(global, chat.id, messageId);\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  global = setReceipt(global, result.receipt, message, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearPaymentError', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      error: undefined,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('clearReceipt', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  return updateTabState(global, {\n    payment: {\n      ...selectTabState(global, tabId).payment,\n      receipt: undefined,\n    },\n  }, tabId);\n});\n\naddActionHandler('sendCredentialsInfo', (global, actions, payload): ActionReturnType => {\n  const { credentials, tabId = getCurrentTabId() } = payload;\n\n  const { nativeProvider } = selectTabState(global, tabId).payment;\n  const { data } = credentials;\n\n  if (nativeProvider === 'stripe') {\n    const publishableKey = selectProviderPublishableKey(global, tabId);\n    if (!publishableKey) {\n      return;\n    }\n    void sendStripeCredentials(global, data, publishableKey, tabId);\n  } else if (nativeProvider === 'smartglocal') {\n    const publicToken = selectProviderPublicToken(global, tabId);\n    if (!publicToken) {\n      return;\n    }\n    void sendSmartGlocalCredentials(global, data, publicToken, tabId);\n  }\n});\n\naddActionHandler('sendPaymentForm', async (global, actions, payload): Promise<void> => {\n  const {\n    shippingOptionId, saveCredentials, savedCredentialId, tipAmount,\n    tabId = getCurrentTabId(),\n  } = payload;\n  const inputInvoice = selectPaymentInputInvoice(global, tabId);\n  const formId = selectPaymentFormId(global, tabId);\n  const requestInfoId = selectPaymentRequestId(global, tabId);\n  const { nativeProvider, temporaryPassword } = selectTabState(global, tabId).payment;\n  const publishableKey = nativeProvider === 'stripe'\n    ? selectProviderPublishableKey(global, tabId) : selectProviderPublicToken(global, tabId);\n\n  if (!inputInvoice || !publishableKey || !formId || !nativeProvider) {\n    return;\n  }\n\n  let requestInputInvoice;\n  if ('slug' in inputInvoice) {\n    requestInputInvoice = {\n      slug: inputInvoice.slug,\n    };\n  } else {\n    const chat = selectChat(global, inputInvoice.chatId);\n    if (!chat) {\n      return;\n    }\n\n    requestInputInvoice = {\n      chat,\n      messageId: inputInvoice.messageId,\n    };\n  }\n\n  global = updatePayment(global, { status: 'pending' }, tabId);\n  setGlobal(global);\n\n  const credentials = {\n    save: saveCredentials,\n    data: nativeProvider === 'stripe'\n      ? selectStripeCredentials(global, tabId) : selectSmartGlocalCredentials(global, tabId),\n  };\n  const result = await callApi('sendPaymentForm', {\n    inputInvoice: requestInputInvoice,\n    formId,\n    credentials,\n    requestedInfoId: requestInfoId,\n    shippingOptionId,\n    savedCredentialId,\n    temporaryPassword: temporaryPassword?.value,\n    tipAmount,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updatePayment(global, { status: 'paid' }, tabId);\n  global = closeInvoice(global, tabId);\n  setGlobal(global);\n});\n\nasync function sendStripeCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publishableKey: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const query = buildQueryString({\n    'card[number]': data.cardNumber,\n    'card[exp_month]': data.expiryMonth,\n    'card[exp_year]': data.expiryYear,\n    'card[cvc]': data.cvv,\n    'card[address_zip]': data.zip,\n    'card[address_country]': data.country,\n  });\n\n  const response = await fetch(`https://api.stripe.com/v1/tokens${query}`, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      Authorization: `Bearer ${publishableKey}`,\n    },\n  });\n  const result = await response.json();\n  if (result.error) {\n    const error = getStripeError(result.error);\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n  global = getGlobal();\n  global = setStripeCardInfo(global, {\n    type: result.type,\n    id: result.id,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\nasync function sendSmartGlocalCredentials<T extends GlobalState>(\n  global: T,\n  data: ApiCredentials['data'],\n  publicToken: string,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const params = {\n    card: {\n      number: data.cardNumber.replace(/\\D+/g, ''),\n      expiration_month: data.expiryMonth,\n      expiration_year: data.expiryYear,\n      security_code: data.cvv.replace(/\\D+/g, ''),\n    },\n  };\n  const url = DEBUG_PAYMENT_SMART_GLOCAL\n    ? 'https://tgb-playground.smart-glocal.com/cds/v1/tokenize/card'\n    : 'https://tgb.smart-glocal.com/cds/v1/tokenize/card';\n\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      'X-PUBLIC-TOKEN': publicToken,\n    },\n    body: JSON.stringify(params),\n  });\n  const result = await response.json();\n\n  if (result.status !== 'ok') {\n    // TODO после получения документации сделать аналог getStripeError(result.error);\n    const error = { description: 'payment error' };\n    global = getGlobal();\n    global = updateTabState(global, {\n      payment: {\n        ...selectTabState(global, tabId).payment,\n        status: 'failed',\n        error: {\n          ...error,\n        },\n      },\n    }, tabId);\n    setGlobal(global);\n    return;\n  }\n\n  global = getGlobal();\n  global = setSmartGlocalCardInfo(global, {\n    type: 'card',\n    token: result.data.token,\n  }, tabId);\n  global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  setGlobal(global);\n}\n\naddActionHandler('setPaymentStep', (global, actions, payload): ActionReturnType => {\n  const { step, tabId = getCurrentTabId() } = payload;\n  return setPaymentStep(global, step ?? PaymentStep.Checkout, tabId);\n});\n\naddActionHandler('closePremiumModal', (global, actions, payload): ActionReturnType => {\n  const { isClosed, tabId = getCurrentTabId() } = payload || {};\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.premiumModal) return undefined;\n  return updateTabState(global, {\n    premiumModal: {\n      ...tabState.premiumModal,\n      ...(isClosed && { isOpen: false }),\n      isClosing: !isClosed,\n    },\n  }, tabId);\n});\n\naddActionHandler('openPremiumModal', async (global, actions, payload): Promise<void> => {\n  const {\n    initialSection, fromUserId, isSuccess, isGift, monthsAmount, toUserId,\n    tabId = getCurrentTabId(),\n  } = payload || {};\n\n  actions.loadPremiumStickers();\n\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  global = updateTabState(global, {\n    premiumModal: {\n      promo: result.promo,\n      initialSection,\n      isOpen: true,\n      fromUserId,\n      toUserId,\n      isGift,\n      monthsAmount,\n      isSuccess,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('openGiftPremiumModal', async (global, actions, payload): Promise<void> => {\n  const { forUserId, tabId = getCurrentTabId() } = payload || {};\n  const result = await callApi('fetchPremiumPromo');\n  if (!result) return;\n\n  global = getGlobal();\n  global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n\n  // TODO Support all subscription options\n  const month = result.promo.options.find((option) => option.months === 1)!;\n\n  global = updateTabState(global, {\n    giftPremiumModal: {\n      isOpen: true,\n      forUserId,\n      monthlyCurrency: month.currency,\n      monthlyAmount: month.amount,\n    },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('closeGiftPremiumModal', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  global = updateTabState(global, {\n    giftPremiumModal: { isOpen: false },\n  }, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('validatePaymentPassword', async (global, actions, payload): Promise<void> => {\n  const { password, tabId = getCurrentTabId() } = payload;\n  const result = await callApi('fetchTemporaryPaymentPassword', password);\n\n  global = getGlobal();\n\n  if (!result) {\n    global = updatePayment(global, { error: { message: 'Unknown Error', field: 'password' } }, tabId);\n  } else if ('error' in result) {\n    global = updatePayment(global, { error: { message: result.error, field: 'password' } }, tabId);\n  } else {\n    global = updatePayment(global, { temporaryPassword: result, step: PaymentStep.Checkout }, tabId);\n  }\n\n  setGlobal(global);\n});\n\nasync function validateRequestedInfo<T extends GlobalState>(\n  global: T, inputInvoice: ApiRequestInputInvoice, requestInfo: any, shouldSave?: boolean,\n  ...[tabId = getCurrentTabId()]: TabArgs<T>\n) {\n  const result = await callApi('validateRequestedInfo', {\n    inputInvoice, requestInfo, shouldSave,\n  });\n  if (!result) {\n    return;\n  }\n\n  const { id, shippingOptions } = result;\n  global = getGlobal();\n\n  global = setRequestInfoId(global, id, tabId);\n  if (shippingOptions) {\n    global = updateShippingOptions(global, shippingOptions, tabId);\n    global = setPaymentStep(global, PaymentStep.Shipping, tabId);\n  } else {\n    global = setPaymentStep(global, PaymentStep.Checkout, tabId);\n  }\n  setGlobal(global);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport { replaceSettings, updateTwoFaSettings } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('loadPasswordInfo', async (global): Promise<void> => {\n  const result = await callApi('getPasswordInfo');\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = replaceSettings(global, { hasPassword: result.hasPassword });\n  global = updateTwoFaSettings(global, { hint: result.hint });\n  setGlobal(global);\n});\n\naddActionHandler('checkPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('checkPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('clearPassword', async (global, actions, payload): Promise<void> => {\n  const { currentPassword, onSuccess } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('clearPassword', currentPassword);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updatePassword', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, password, hint, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updatePassword', currentPassword, password, hint, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('updateRecoveryEmail', async (global, actions, payload): Promise<void> => {\n  const {\n    currentPassword, email, onSuccess,\n  } = payload;\n\n  global = updateTwoFaSettings(global, { isLoading: true, error: undefined });\n  setGlobal(global);\n\n  const isSuccess = await callApi('updateRecoveryEmail', currentPassword, email);\n\n  global = getGlobal();\n  global = updateTwoFaSettings(global, { isLoading: false, waitingEmailCodeLength: undefined });\n  setGlobal(global);\n\n  if (isSuccess) {\n    onSuccess();\n  }\n});\n\naddActionHandler('provideTwoFaEmailCode', (global, actions, payload): ActionReturnType => {\n  const { code } = payload;\n\n  void callApi('provideRecoveryEmailCode', code);\n});\n\naddActionHandler('clearTwoFaError', (global): ActionReturnType => {\n  return updateTwoFaSettings(global, { error: undefined });\n});\n","import {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n} from '../../../config';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nconst MAX_TOOLBAR_WIDTH = 32 * REM;\nconst MAX_MESSAGES_LIST_WIDTH = 45.5 * REM;\nexport const SIDE_COLUMN_MAX_WIDTH = 26.5 * REM;\nexport const MIN_LEFT_COLUMN_WIDTH = 16 * REM;\nconst UNPIN_BUTTON_WIDTH = 16.125 * REM;\n\nexport default function calculateMiddleFooterTransforms(windowWidth: number, canPost?: boolean) {\n  const sidePadding = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? REM\n    : 2 * REM;\n  const messageListWidth = getMessageListWidth(windowWidth);\n  const sendButtonWidth = windowWidth <= MOBILE_SCREEN_MAX_WIDTH\n    ? 3.375 * REM\n    : 4 * REM;\n\n  const composerWidth = canPost\n    ? messageListWidth - sidePadding - sendButtonWidth\n    : messageListWidth - sidePadding;\n  const toolbarWidth = windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    ? Math.min(messageListWidth - sidePadding, MAX_TOOLBAR_WIDTH)\n    : messageListWidth - sidePadding;\n\n  const composerHiddenScale = toolbarWidth / composerWidth;\n  const toolbarHiddenScale = composerWidth / toolbarWidth;\n  const unpinHiddenScale = toolbarWidth / UNPIN_BUTTON_WIDTH;\n  const toolbarForUnpinHiddenScale = UNPIN_BUTTON_WIDTH / toolbarWidth;\n\n  const composerTranslateX = canPost\n    ? (sendButtonWidth / 2) * toolbarHiddenScale\n    : 0;\n\n  const toolbarTranslateX = canPost\n    ? (sendButtonWidth / 2) * -1 * composerHiddenScale\n    : 0;\n\n  return {\n    composerHiddenScale,\n    toolbarHiddenScale,\n    composerTranslateX,\n    toolbarTranslateX,\n    unpinHiddenScale,\n    toolbarForUnpinHiddenScale,\n  };\n}\n\nfunction getMessageListWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    const rightColumnWidth = Math.min(\n      windowWidth * 0.25,\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth - rightColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    const leftColumnWidth = Math.min(\n      Math.max(windowWidth * 0.4, MIN_LEFT_COLUMN_WIDTH),\n      SIDE_COLUMN_MAX_WIDTH,\n    );\n\n    return Math.min(\n      windowWidth - leftColumnWidth,\n      MAX_MESSAGES_LIST_WIDTH,\n    );\n  }\n\n  if (windowWidth > MAX_MESSAGES_LIST_WIDTH) {\n    return MAX_MESSAGES_LIST_WIDTH;\n  }\n\n  return windowWidth;\n}\n","import type { GlobalState } from '../types';\nimport type { ApiChat, ApiMessage, ApiReaction } from '../../api/types';\n\nimport { MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport {\n  MIN_LEFT_COLUMN_WIDTH,\n  SIDE_COLUMN_MAX_WIDTH,\n} from '../../components/middle/helpers/calculateMiddleFooterTransforms';\nimport windowSize from '../../util/windowSize';\nimport { updateChat } from './chats';\nimport { isSameReaction, isReactionChosen } from '../helpers';\nimport { updateChatMessage } from './messages';\nimport { selectTabState } from '../selectors';\nimport { getIsMobile } from '../../hooks/useAppLayout';\n\nfunction getLeftColumnWidth(windowWidth: number) {\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.25, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.33,\n    );\n  }\n\n  if (windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN) {\n    return Math.min(\n      Math.max(windowWidth * 0.33, MIN_LEFT_COLUMN_WIDTH),\n      windowWidth * 0.4,\n    );\n  }\n\n  return SIDE_COLUMN_MAX_WIDTH;\n}\n\nexport function subtractXForEmojiInteraction(global: GlobalState, x: number) {\n  const tabState = selectTabState(global);\n  return x - ((tabState.isLeftColumnShown && !getIsMobile())\n    ? global.leftColumnWidth || getLeftColumnWidth(windowSize.get().width)\n    : 0);\n}\n\nexport function addMessageReaction<T extends GlobalState>(\n  global: T, message: ApiMessage, userReactions: ApiReaction[],\n): T {\n  const currentReactions = message.reactions || { results: [] };\n\n  // Update UI without waiting for server response\n  const results = currentReactions.results.map((current) => (\n    isReactionChosen(current) ? {\n      ...current,\n      chosenOrder: undefined,\n      count: current.count - 1,\n    } : current\n  )).filter(({ count }) => count > 0);\n\n  userReactions.forEach((reaction, i) => {\n    const existingIndex = results.findIndex((r) => isSameReaction(r.reaction, reaction));\n    if (existingIndex > -1) {\n      results[existingIndex] = {\n        ...results[existingIndex],\n        chosenOrder: i,\n        count: results[existingIndex].count + 1,\n      };\n    } else {\n      results.push({\n        reaction,\n        chosenOrder: i,\n        count: 1,\n      });\n    }\n  });\n\n  let { recentReactions = [] } = currentReactions;\n\n  if (recentReactions.length) {\n    recentReactions = recentReactions.filter(({ userId }) => userId !== global.currentUserId);\n  }\n\n  userReactions.forEach((reaction) => {\n    const { currentUserId } = global;\n    recentReactions.unshift({\n      userId: currentUserId!,\n      reaction,\n    });\n  });\n\n  return updateChatMessage(global, message.chatId, message.id, {\n    reactions: {\n      ...currentReactions,\n      results,\n      recentReactions,\n    },\n  });\n}\n\nexport function updateUnreadReactions<T extends GlobalState>(\n  global: T, chatId: string, update: Pick<ApiChat, 'unreadReactionsCount' | 'unreadReactions'>,\n): T {\n  return updateChat(global, chatId, update, undefined, true);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\nimport { callApi } from '../../../api/gramjs';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { ApiMediaFormat } from '../../../api/types';\nimport {\n  selectChat,\n  selectChatMessage, selectCurrentChat, selectTabState,\n  selectDefaultReaction,\n  selectMaxUserReactions,\n  selectMessageIdsByGroupId,\n} from '../../selectors';\nimport { addMessageReaction, subtractXForEmojiInteraction, updateUnreadReactions } from '../../reducers/reactions';\nimport {\n  addChatMessagesById, addChats, addUsers, updateChatMessage,\n} from '../../reducers';\nimport { buildCollectionByKey, omit } from '../../../util/iteratees';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\nimport { isSameReaction, getUserReactions, isMessageLocal } from '../../helpers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst INTERACTION_RANDOM_OFFSET = 40;\n\nlet interactionLocalId = 0;\n\naddActionHandler('loadAvailableReactions', async (global): Promise<void> => {\n  const result = await callApi('getAvailableReactions');\n  if (!result) {\n    return;\n  }\n\n  // Preload animations\n  result.forEach((availableReaction) => {\n    if (availableReaction.aroundAnimation) {\n      mediaLoader.fetch(`sticker${availableReaction.aroundAnimation.id}`, ApiMediaFormat.BlobUrl);\n    }\n    if (availableReaction.centerIcon) {\n      mediaLoader.fetch(`sticker${availableReaction.centerIcon.id}`, ApiMediaFormat.BlobUrl);\n    }\n  });\n\n  global = getGlobal();\n  global = {\n    ...global,\n    availableReactions: result,\n  };\n  setGlobal(global);\n});\n\naddActionHandler('interactWithAnimatedEmoji', (global, actions, payload): ActionReturnType => {\n  const {\n    emoji, x, y, startSize, isReversed, tabId = getCurrentTabId(),\n  } = payload!;\n\n  const activeEmojiInteraction = {\n    id: interactionLocalId++,\n    animatedEffect: emoji,\n    x: subtractXForEmojiInteraction(global, x) + Math.random()\n      * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    y: y + Math.random() * INTERACTION_RANDOM_OFFSET - INTERACTION_RANDOM_OFFSET / 2,\n    startSize,\n    isReversed,\n  };\n\n  return updateTabState(global, {\n    activeEmojiInteractions: [...(selectTabState(global, tabId).activeEmojiInteractions || []), activeEmojiInteraction],\n  }, tabId);\n});\n\naddActionHandler('sendEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    messageId, chatId, emoji, interactions,\n  } = payload!;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat || !emoji || chatId === global.currentUserId) {\n    return;\n  }\n\n  void callApi('sendEmojiInteraction', {\n    chat,\n    messageId,\n    emoticon: emoji,\n    timestamps: interactions,\n  });\n});\n\naddActionHandler('sendDefaultReaction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, messageId, tabId = getCurrentTabId(),\n  } = payload;\n  const reaction = selectDefaultReaction(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n\n  if (!reaction || !message || isMessageLocal(message)) return;\n\n  actions.toggleReaction({\n    chatId,\n    messageId,\n    reaction,\n    tabId,\n  });\n});\n\naddActionHandler('toggleReaction', (global, actions, payload): ActionReturnType => {\n  const { chatId, reaction, tabId = getCurrentTabId() } = payload;\n  let { messageId } = payload;\n\n  const chat = selectChat(global, chatId);\n  let message = selectChatMessage(global, chatId, messageId);\n\n  if (!chat || !message) {\n    return undefined;\n  }\n\n  const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n  const documentGroupFirstMessageId = isInDocumentGroup\n    ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n    : undefined;\n  message = isInDocumentGroup\n    ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) || message\n    : message;\n  messageId = message?.id || messageId;\n\n  const userReactions = getUserReactions(message);\n  const hasReaction = userReactions.some((userReaction) => isSameReaction(userReaction, reaction));\n\n  const newUserReactions = hasReaction\n    ? userReactions.filter((userReaction) => !isSameReaction(userReaction, reaction)) : [...userReactions, reaction];\n\n  const limit = selectMaxUserReactions(global);\n\n  const reactions = newUserReactions.slice(-limit);\n\n  void callApi('sendReaction', { chat, messageId, reactions });\n\n  const { animationLevel } = global.settings.byKey;\n\n  const tabState = selectTabState(global, tabId);\n  if (animationLevel === ANIMATION_LEVEL_MAX) {\n    const newActiveReactions = hasReaction ? omit(tabState.activeReactions, [messageId]) : {\n      ...tabState.activeReactions,\n      [messageId]: [\n        ...(tabState.activeReactions[messageId] || []),\n        {\n          messageId,\n          reaction,\n        },\n      ],\n    };\n    global = updateTabState(global, {\n      activeReactions: newActiveReactions,\n    }, tabId);\n  }\n\n  return addMessageReaction(global, message, reactions);\n});\n\naddActionHandler('stopActiveReaction', (global, actions, payload): ActionReturnType => {\n  const { messageId, reaction, tabId = getCurrentTabId() } = payload;\n\n  const tabState = selectTabState(global, tabId);\n  if (!tabState.activeReactions[messageId]?.some((active) => isSameReaction(active.reaction, reaction))) {\n    return global;\n  }\n\n  const newMessageActiveReactions = tabState.activeReactions[messageId]\n    .filter((active) => !isSameReaction(active.reaction, reaction));\n\n  const newActiveReactions = newMessageActiveReactions.length ? {\n    ...tabState.activeReactions,\n    [messageId]: newMessageActiveReactions,\n  } : omit(tabState.activeReactions, [messageId]);\n\n  return updateTabState(global, {\n    activeReactions: newActiveReactions,\n  }, tabId);\n});\n\naddActionHandler('setDefaultReaction', async (global, actions, payload): Promise<void> => {\n  const { reaction } = payload;\n\n  const result = await callApi('setDefaultReaction', { reaction });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (!global.config) {\n    actions.loadConfig(); // Refetch new config, if it is somehow not loaded\n    return;\n  }\n\n  global = {\n    ...global,\n    config: {\n      ...global.config,\n      defaultReaction: reaction,\n    },\n  };\n  setGlobal(global);\n});\n\naddActionHandler('stopActiveEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const { id, tabId = getCurrentTabId() } = payload;\n\n  return updateTabState(global, {\n    activeEmojiInteractions: selectTabState(global, tabId)\n      .activeEmojiInteractions?.filter((active) => active.id !== id),\n  }, tabId);\n});\n\naddActionHandler('loadReactors', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, reaction } = payload;\n  const chat = selectChat(global, chatId);\n  const message = selectChatMessage(global, chatId, messageId);\n  if (!chat || !message) {\n    return;\n  }\n\n  const offset = message.reactors?.nextOffset;\n  const result = await callApi('fetchMessageReactionsList', {\n    reaction,\n    chat,\n    messageId,\n    offset,\n  });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n\n  if (result.users?.length) {\n    global = addUsers(global, buildCollectionByKey(result.users, 'id'));\n  }\n\n  global = updateChatMessage(global, chatId, messageId, {\n    reactors: result,\n  });\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageReactions', (global, actions, payload): ActionReturnType => {\n  const { ids, chatId } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  if (!chat) {\n    return;\n  }\n\n  callApi('fetchMessageReactions', { ids, chat });\n});\n\naddActionHandler('sendWatchingEmojiInteraction', (global, actions, payload): ActionReturnType => {\n  const {\n    chatId, emoticon, x, y, startSize, isReversed, id, tabId = getCurrentTabId(),\n  } = payload;\n\n  const chat = selectChat(global, chatId);\n\n  const tabState = selectTabState(global, tabId);\n  if (!chat || !tabState.activeEmojiInteractions?.some((interaction) => interaction.id === id)\n    || chatId === global.currentUserId) {\n    return undefined;\n  }\n\n  callApi('sendWatchingEmojiInteraction', { chat, emoticon });\n\n  return updateTabState(global, {\n    activeEmojiInteractions: tabState.activeEmojiInteractions.map((activeEmojiInteraction) => {\n      if (activeEmojiInteraction.id === id) {\n        return {\n          ...activeEmojiInteraction,\n          x: subtractXForEmojiInteraction(global, x),\n          y,\n          startSize,\n          isReversed,\n        };\n      }\n      return activeEmojiInteraction;\n    }),\n  }, tabId);\n});\n\naddActionHandler('fetchUnreadReactions', async (global, actions, payload): Promise<void> => {\n  const { chatId, offsetId } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat) return;\n\n  const result = await callApi('fetchUnreadReactions', { chat, offsetId, addOffset: offsetId ? -1 : undefined });\n\n  // Server side bug, when server returns unread reactions count > 0 for deleted messages\n  if (!result || !result.messages.length) {\n    global = getGlobal();\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: 0,\n    });\n\n    setGlobal(global);\n    return;\n  }\n\n  const { messages, chats, users } = result;\n\n  const byId = buildCollectionByKey(messages, 'id');\n  const ids = Object.keys(byId).map(Number);\n\n  global = getGlobal();\n  global = addChatMessagesById(global, chat.id, byId);\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n  global = addChats(global, buildCollectionByKey(chats, 'id'));\n  global = updateUnreadReactions(global, chatId, {\n    unreadReactions: [...(chat.unreadReactions || []), ...ids],\n  });\n\n  setGlobal(global);\n});\n\naddActionHandler('animateUnreadReaction', (global, actions, payload): ActionReturnType => {\n  const { messageIds, tabId = getCurrentTabId() } = payload;\n\n  const { animationLevel } = global.settings.byKey;\n\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  if (chat.unreadReactionsCount) {\n    const unreadReactionsCount = chat.unreadReactionsCount - messageIds.length;\n    const unreadReactions = (chat.unreadReactions || []).filter((id) => !messageIds.includes(id));\n\n    global = updateUnreadReactions(global, chat.id, {\n      unreadReactions,\n    });\n\n    setGlobal(global);\n\n    if (!unreadReactions.length && unreadReactionsCount) {\n      actions.fetchUnreadReactions({ chatId: chat.id, offsetId: Math.min(...messageIds) });\n    }\n  }\n\n  actions.markMessagesRead({ messageIds, tabId });\n\n  if (animationLevel !== ANIMATION_LEVEL_MAX) return undefined;\n\n  global = getGlobal();\n\n  return updateTabState(global, {\n    activeReactions: {\n      ...selectTabState(global, tabId).activeReactions,\n      ...Object.fromEntries(messageIds.map((messageId) => {\n        const message = selectChatMessage(global, chat.id, messageId);\n\n        if (!message) return undefined;\n\n        const unread = message.reactions?.recentReactions?.filter(({ isUnread }) => isUnread);\n\n        if (!unread) return undefined;\n\n        const reactions = unread.map((recent) => recent.reaction);\n\n        return [messageId, reactions.map((r) => ({\n          messageId,\n          reaction: r,\n        }))];\n      }).filter(Boolean)),\n    },\n  }, tabId);\n});\n\naddActionHandler('focusNextReaction', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n\n  if (!chat?.unreadReactions) return;\n\n  actions.focusMessage({ chatId: chat.id, messageId: chat.unreadReactions[0], tabId });\n});\n\naddActionHandler('readAllReactions', (global, actions, payload): ActionReturnType => {\n  const { tabId = getCurrentTabId() } = payload || {};\n  const chat = selectCurrentChat(global, tabId);\n  if (!chat) return undefined;\n\n  callApi('readAllReactions', { chat });\n\n  return updateUnreadReactions(global, chat.id, {\n    unreadReactionsCount: undefined,\n    unreadReactions: undefined,\n  });\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport { callApi } from '../../../api/gramjs';\nimport {\n  updateStatistics, updateMessageStatistics, updateStatisticsGraph, addUsers,\n} from '../../reducers';\nimport { selectChatMessages, selectChat } from '../../selectors';\nimport { buildCollectionByKey } from '../../../util/iteratees';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('loadStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, isGroup, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const result = await callApi(isGroup ? 'fetchGroupStatistics' : 'fetchChannelStatistics', { chat });\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  const { stats, users } = result;\n\n  global = addUsers(global, buildCollectionByKey(users, 'id'));\n\n  if ('recentTopMessages' in stats && stats.recentTopMessages.length) {\n    const messages = selectChatMessages(global, chatId);\n\n    stats.recentTopMessages = stats.recentTopMessages.map((message) => ({ ...message, ...messages[message.msgId] }));\n  }\n\n  global = updateStatistics(global, chatId, stats, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadMessageStatistics', async (global, actions, payload): Promise<void> => {\n  const { chatId, messageId, tabId = getCurrentTabId() } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  let result = await callApi('fetchMessageStatistics', { chat, messageId });\n  if (!result) {\n    result = {};\n  }\n\n  global = getGlobal();\n\n  const { views, forwards } = selectChatMessages(global, chatId)[messageId];\n  result.views = views;\n  result.forwards = forwards;\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const publicForwards = await callApi('fetchMessagePublicForwards', { chat, messageId, dcId });\n  result.publicForwards = publicForwards?.length;\n  result.publicForwardsData = publicForwards;\n\n  global = getGlobal();\n\n  global = updateMessageStatistics(global, result, tabId);\n  setGlobal(global);\n});\n\naddActionHandler('loadStatisticsAsyncGraph', async (global, actions, payload): Promise<void> => {\n  const {\n    chatId, token, name, isPercentage, tabId = getCurrentTabId(),\n  } = payload;\n  const chat = selectChat(global, chatId);\n  if (!chat?.fullInfo) {\n    return;\n  }\n\n  const dcId = chat.fullInfo!.statisticsDcId;\n  const result = await callApi('fetchStatisticsAsyncGraph', { token, dcId, isPercentage });\n\n  if (!result) {\n    return;\n  }\n\n  global = getGlobal();\n  global = updateStatisticsGraph(global, chatId, name, result, tabId);\n  setGlobal(global);\n});\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUpdateChat } from '../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { ARCHIVED_FOLDER_ID, MAX_ACTIVE_PINNED_CHATS } from '../../../config';\nimport { buildCollectionByKey, omit, pick } from '../../../util/iteratees';\nimport { closeMessageNotifications, notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  updateChatListIds,\n  updateChatListType,\n  replaceThreadParam,\n  leaveChat, updateTopic,\n} from '../../reducers';\nimport {\n  selectChat,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectChatListType,\n  selectCurrentMessageList,\n  selectThreadParam,\n} from '../../selectors';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport type { ActionReturnType } from '../../types';\n\nconst TYPING_STATUS_CLEAR_DELAY = 6000; // 6 seconds\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateChat': {\n      const { isForum: prevIsForum, lastReadOutboxMessageId } = selectChat(global, update.id) || {};\n\n      if (update.chat.lastReadOutboxMessageId && lastReadOutboxMessageId\n        && update.chat.lastReadOutboxMessageId < lastReadOutboxMessageId) {\n        update = {\n          ...update,\n          chat: omit(update.chat, ['lastReadInboxMessageId']),\n        };\n      }\n\n      global = updateChat(global, update.id, update.chat, update.newProfilePhoto);\n      setGlobal(global);\n\n      if (!update.noTopChatsRequest && !selectIsChatListed(global, update.id)) {\n        // Chat can appear in dialogs list.\n        actions.loadTopChats();\n      }\n\n      if (update.chat.id) {\n        closeMessageNotifications({\n          chatId: update.chat.id,\n          lastReadInboxMessageId: update.chat.lastReadInboxMessageId,\n        });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n        const chatUpdate = update as ApiUpdateChat;\n        // The property `isForum` was changed in another client\n        if (currentChatId === chatUpdate.id\n          && 'isForum' in chatUpdate.chat && prevIsForum !== chatUpdate.chat.isForum) {\n          if (prevIsForum) {\n            actions.closeForumPanel({ tabId });\n          }\n          actions.openChat({ id: currentChatId, tabId });\n        }\n      });\n\n      return undefined;\n    }\n\n    case 'updateChatJoin': {\n      const listType = selectChatListType(global, update.id);\n      if (!listType) {\n        return undefined;\n      }\n\n      global = updateChatListIds(global, listType, [update.id]);\n      global = updateChat(global, update.id, { isNotJoined: false });\n      setGlobal(global);\n\n      const chat = selectChat(global, update.id);\n      if (chat) {\n        actions.requestChatUpdate({ chatId: chat.id });\n      }\n\n      return undefined;\n    }\n\n    case 'updateChatLeave': {\n      return leaveChat(global, update.id);\n    }\n\n    case 'updateChatInbox': {\n      return updateChat(global, update.id, update.chat);\n    }\n\n    case 'updateChatTypingStatus': {\n      const { id, threadId = MAIN_THREAD_ID, typingStatus } = update;\n      global = replaceThreadParam(global, id, threadId, 'typingStatus', typingStatus);\n      setGlobal(global);\n\n      setTimeout(() => {\n        global = getGlobal();\n        const currentTypingStatus = selectThreadParam(global, id, threadId, 'typingStatus');\n        if (typingStatus && currentTypingStatus && typingStatus.timestamp === currentTypingStatus.timestamp) {\n          global = replaceThreadParam(global, id, threadId, 'typingStatus', undefined);\n          setGlobal(global);\n        }\n      }, TYPING_STATUS_CLEAR_DELAY);\n\n      return undefined;\n    }\n\n    case 'newMessage': {\n      const { message } = update;\n\n      if (message.senderId === global.currentUserId && !message.isFromScheduled) {\n        return undefined;\n      }\n\n      const chat = selectChat(global, update.chatId);\n      if (!chat) {\n        return undefined;\n      }\n\n      const hasMention = Boolean(update.message.id && update.message.hasUnreadMention);\n\n      global = updateChat(global, update.chatId, {\n        unreadCount: chat.unreadCount ? chat.unreadCount + 1 : 1,\n        ...(hasMention && { unreadMentionsCount: (chat.unreadMentionsCount || 0) + 1 }),\n      });\n\n      if (hasMention) {\n        global = updateChat(global, update.chatId, {\n          unreadMentions: [...(chat.unreadMentions || []), update.message.id!],\n        });\n      }\n\n      setGlobal(global);\n\n      notifyAboutMessage({\n        chat,\n        message,\n      });\n\n      return undefined;\n    }\n\n    case 'updateCommonBoxMessages':\n    case 'updateChannelMessages': {\n      const { ids, messageUpdate } = update;\n      if (messageUpdate.hasUnreadMention !== false) {\n        return undefined;\n      }\n\n      ids.forEach((id) => {\n        const chatId = ('channelId' in update ? update.channelId : selectCommonBoxChatId(global, id))!;\n        const chat = selectChat(global, chatId);\n\n        if (chat?.unreadReactionsCount) {\n          global = updateUnreadReactions(global, chatId, {\n            unreadReactionsCount: (chat.unreadReactionsCount - 1) || undefined,\n            unreadReactions: chat.unreadReactions?.filter((i) => i !== id),\n          });\n        }\n\n        if (chat?.unreadMentionsCount) {\n          global = updateChat(global, chatId, {\n            unreadMentionsCount: (chat.unreadMentionsCount - 1) || undefined,\n            unreadMentions: chat.unreadMentions?.filter((i) => i !== id),\n          });\n        }\n      });\n\n      return global;\n    }\n\n    case 'updateChatFullInfo': {\n      const { fullInfo } = update;\n      const targetChat = global.chats.byId[update.id];\n      if (!targetChat) {\n        return undefined;\n      }\n\n      return updateChat(global, update.id, {\n        fullInfo: {\n          ...targetChat.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updatePinnedChatIds': {\n      const { ids, folderId } = update;\n      const listType = folderId === ARCHIVED_FOLDER_ID ? 'archived' : 'active';\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: ids.length ? ids : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatPinned': {\n      const { id, isPinned } = update;\n      const listType = selectChatListType(global, id);\n      if (!listType) {\n        return undefined;\n      }\n\n      const { [listType]: orderedPinnedIds } = global.chats.orderedPinnedIds;\n\n      let newOrderedPinnedIds = orderedPinnedIds || [];\n      if (!isPinned) {\n        newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => pinnedId !== id);\n      } else if (!newOrderedPinnedIds.includes(id)) {\n        // When moving pinned chats to archive, active ordered pinned ids don't get updated\n        // (to preserve chat pinned state when it returns from archive)\n        // If user already has max pinned chats, we should check for orderedIds\n        // that don't point to listed chats\n        if (listType === 'active' && newOrderedPinnedIds.length >= MAX_ACTIVE_PINNED_CHATS) {\n          const listIds = global.chats.listIds.active;\n          newOrderedPinnedIds = newOrderedPinnedIds.filter((pinnedId) => listIds && listIds.includes(pinnedId));\n        }\n\n        newOrderedPinnedIds = [id, ...newOrderedPinnedIds];\n      }\n\n      return {\n        ...global,\n        chats: {\n          ...global.chats,\n          orderedPinnedIds: {\n            ...global.chats.orderedPinnedIds,\n            [listType]: newOrderedPinnedIds.length ? newOrderedPinnedIds : undefined,\n          },\n        },\n      };\n    }\n\n    case 'updateChatListType': {\n      const { id, folderId } = update;\n\n      return updateChatListType(global, id, folderId);\n    }\n\n    case 'updateChatFolder': {\n      const { id, folder } = update;\n      const { byId: chatFoldersById, orderedIds } = global.chatFolders;\n\n      const newChatFoldersById = folder\n        ? { ...chatFoldersById, [id]: folder }\n        : pick(\n          chatFoldersById,\n          Object.keys(chatFoldersById).map(Number).filter((folderId) => folderId !== id),\n        );\n\n      const newOrderedIds = folder\n        ? orderedIds && orderedIds.includes(id) ? orderedIds : [...(orderedIds || []), id]\n        : orderedIds ? orderedIds.filter((orderedId) => orderedId !== id) : undefined;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          byId: newChatFoldersById,\n          orderedIds: newOrderedIds,\n        },\n      };\n    }\n\n    case 'updateChatFoldersOrder': {\n      const { orderedIds } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          orderedIds,\n        },\n      };\n    }\n\n    case 'updateRecommendedChatFolders': {\n      const { folders } = update;\n\n      return {\n        ...global,\n        chatFolders: {\n          ...global.chatFolders,\n          recommended: folders,\n        },\n      };\n    }\n\n    case 'updateChatMembers': {\n      const targetChat = global.chats.byId[update.id];\n      const { replacedMembers, addedMember, deletedMemberId } = update;\n      if (!targetChat) {\n        return undefined;\n      }\n\n      let shouldUpdate = false;\n      let members = targetChat.fullInfo?.members\n        ? [...targetChat.fullInfo.members]\n        : [];\n\n      if (replacedMembers) {\n        members = replacedMembers;\n        shouldUpdate = true;\n      } else if (addedMember) {\n        if (\n          !members.length\n          || !members.some((m) => m.userId === addedMember.userId)\n        ) {\n          members.push(addedMember);\n          shouldUpdate = true;\n        }\n      } else if (members.length && deletedMemberId) {\n        const deleteIndex = members.findIndex((m) => m.userId === deletedMemberId);\n        if (deleteIndex > -1) {\n          members.slice(deleteIndex, 1);\n          shouldUpdate = true;\n        }\n      }\n\n      if (shouldUpdate) {\n        const adminMembers = members.filter(({ isOwner, isAdmin }) => isOwner || isAdmin);\n        // TODO Kicked members?\n\n        return updateChat(global, update.id, {\n          membersCount: members.length,\n          fullInfo: {\n            ...targetChat.fullInfo,\n            members,\n            adminMembersById: buildCollectionByKey(adminMembers, 'userId'),\n          },\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'deleteProfilePhotos': {\n      const { chatId, ids } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat?.photos) {\n        return updateChat(global, chatId, {\n          photos: chat.photos.filter((photo) => !ids.includes(photo.id)),\n        });\n      }\n\n      return undefined;\n    }\n\n    case 'draftMessage': {\n      const {\n        chatId, formattedText, date, replyingToId, threadId,\n      } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'draft', formattedText);\n      global = replaceThreadParam(global, chatId, threadId || MAIN_THREAD_ID, 'replyingToId', replyingToId);\n      global = updateChat(global, chatId, { draftDate: date });\n      return global;\n    }\n\n    case 'showInvite': {\n      const { data } = update;\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        actions.showDialog({ data, tabId });\n      });\n\n      return undefined;\n    }\n\n    case 'updatePendingJoinRequests': {\n      const { chatId, requestsPending, recentRequesterIds } = update;\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateChat(global, chatId, {\n        fullInfo: {\n          ...chat.fullInfo,\n          requestsPending,\n          recentRequesterIds,\n        },\n      });\n      setGlobal(global);\n\n      actions.loadChatJoinRequests({ chatId });\n      return undefined;\n    }\n\n    case 'updatePinnedTopic': {\n      const { chatId, topicId, isPinned } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) {\n        return undefined;\n      }\n\n      global = updateTopic(global, chatId, topicId, {\n        isPinned,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updatePinnedTopicsOrder': {\n      const { chatId, order } = update;\n\n      const chat = global.chats.byId[chatId];\n      if (!chat) return undefined;\n\n      global = updateChat(global, chatId, {\n        orderedPinnedTopicIds: order,\n      });\n      setGlobal(global);\n\n      return undefined;\n    }\n\n    case 'updateTopic': {\n      const { chatId, topicId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopicById({ chatId, topicId });\n\n      return undefined;\n    }\n\n    case 'updateTopics': {\n      const { chatId } = update;\n\n      const chat = selectChat(global, chatId);\n      if (!chat?.isForum) return undefined;\n\n      actions.loadTopics({ chatId, force: true });\n\n      return undefined;\n    }\n  }\n\n  return undefined;\n});\n","import type { RequiredGlobalActions } from '../../index';\nimport { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type {\n  ApiChat,\n  ApiMessage, ApiPollResult, ApiReactions, ApiThreadInfo,\n} from '../../../api/types';\nimport type {\n  ActiveEmojiInteraction, ActionReturnType, GlobalState, RequiredGlobalState,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { pickTruthy, unique } from '../../../util/iteratees';\nimport { areDeepEqual } from '../../../util/areDeepEqual';\nimport { notifyAboutMessage } from '../../../util/notifications';\nimport {\n  updateChat,\n  deleteChatMessages,\n  updateChatMessage,\n  updateListedIds,\n  addViewportId,\n  updateThreadInfo,\n  replaceThreadParam,\n  updateScheduledMessage,\n  deleteChatScheduledMessages,\n  updateThreadUnreadFromForwardedMessage,\n  updateTopic,\n  deleteTopic,\n  updateMessageTranslations,\n  clearMessageTranslation,\n} from '../../reducers';\nimport {\n  selectChatMessage,\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectListedIds,\n  selectChatMessageByPollId,\n  selectCommonBoxChatId,\n  selectIsChatListed,\n  selectThreadInfo,\n  selectThreadByMessage,\n  selectPinnedIds,\n  selectScheduledMessage,\n  selectChatScheduledMessages,\n  selectIsMessageInCurrentMessageList,\n  selectScheduledIds,\n  selectCurrentMessageList,\n  selectViewportIds,\n  selectFirstUnreadId,\n  selectChat,\n  selectIsServiceChatReady,\n  selectThreadIdFromMessage,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../selectors';\nimport {\n  getMessageContent, isUserId, isMessageLocal, getMessageText, checkIfHasUnreadReactions,\n} from '../../helpers';\nimport { onTickEnd } from '../../../util/schedulers';\nimport { updateUnreadReactions } from '../../reducers/reactions';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\nconst ANIMATION_DELAY = 350;\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'newMessage': {\n      const {\n        chatId, id, message, shouldForceReply,\n      } = update;\n      global = updateWithLocalMedia(global, chatId, id, message);\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum\n        && newMessage.isTopicReply\n        && !selectTopicFromMessage(global, newMessage)\n        && newMessage.replyToMessageId) {\n        actions.loadTopicById({ chatId, topicId: newMessage.replyToMessageId });\n      }\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const isLocal = isMessageLocal(message as ApiMessage);\n        if (selectIsMessageInCurrentMessageList(global, chatId, message as ApiMessage, tabId)) {\n          if (isLocal && message.isOutgoing && !(message.content?.action)) {\n            const currentMessageList = selectCurrentMessageList(global, tabId);\n            if (currentMessageList) {\n              // We do not use `actions.focusLastMessage` as it may be set with a delay (see below)\n              actions.focusMessage({\n                chatId,\n                threadId: currentMessageList.threadId,\n                messageId: message.id!,\n                noHighlight: true,\n                isResizingContainer: true,\n                tabId,\n              });\n            }\n          }\n\n          const { threadInfo } = selectThreadByMessage(global, message as ApiMessage) || {};\n          if (threadInfo && !isLocal) {\n            actions.requestThreadInfoUpdate({ chatId, threadId: threadInfo.threadId });\n          }\n\n          // @perf Wait until scroll animation finishes or simply rely on delivery status update\n          // (which is itself delayed)\n          if (!isLocal) {\n            setTimeout(() => {\n              global = getGlobal();\n              if (shouldForceReply) {\n                global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'replyingToId', id);\n              }\n              global = updateChatLastMessage(global, chatId, newMessage);\n              setGlobal(global);\n            }, ANIMATION_DELAY);\n          }\n        } else {\n          global = updateChatLastMessage(global, chatId, newMessage);\n        }\n      });\n\n      setGlobal(global);\n\n      // Edge case: New message in an old (not loaded) chat.\n      if (!selectIsChatListed(global, chatId)) {\n        actions.loadTopChats();\n      }\n\n      break;\n    }\n\n    case 'updateStartEmojiInteraction': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId } = selectCurrentMessageList(global, tabId) || {};\n\n        if (currentChatId !== update.id) return;\n        const message = selectChatMessage(global, currentChatId, update.messageId);\n\n        if (!message) return;\n\n        // Workaround for a weird behavior when interaction is received after watching reaction\n        if (getMessageText(message) !== update.emoji) return;\n\n        const tabState = selectTabState(global, tabId);\n        global = updateTabState(global, {\n          activeEmojiInteractions: [...(tabState.activeEmojiInteractions || []), {\n            id: tabState.activeEmojiInteractions?.length || 0,\n            animatedEffect: update.emoji,\n            messageId: update.messageId,\n          } as ActiveEmojiInteraction],\n        }, tabId);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'newScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', unique([...scheduledIds, id]));\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', unique([...threadScheduledIds, id]));\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, chatId);\n\n      global = updateWithLocalMedia(global, chatId, id, message);\n\n      const newMessage = selectChatMessage(global, chatId, id)!;\n      if (message.repliesThreadInfo) {\n        global = updateThreadInfo(\n          global,\n          message.repliesThreadInfo.chatId,\n          message.repliesThreadInfo.threadId,\n          message.repliesThreadInfo,\n        );\n      }\n\n      if (currentMessage) {\n        global = updateChatLastMessage(global, chatId, newMessage);\n      }\n\n      if (message.reactions && chat) {\n        global = updateReactions(global, chatId, id, message.reactions, chat, newMessage.isOutgoing, currentMessage);\n      }\n\n      if (message.content?.text?.text !== currentMessage?.content?.text?.text) {\n        global = clearMessageTranslation(global, chatId, id);\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessage': {\n      const { chatId, id, message } = update;\n\n      const currentMessage = selectScheduledMessage(global, chatId, id);\n      if (!currentMessage) {\n        return;\n      }\n\n      global = updateWithLocalMedia(global, chatId, id, message, true);\n      const ids = Object.keys(selectChatScheduledMessages(global, chatId) || {}).map(Number).sort((a, b) => b - a);\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', ids);\n\n      const threadId = selectThreadIdFromMessage(global, currentMessage);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', threadScheduledIds.sort((a, b) => b - a));\n      }\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n\n      global = updateListedAndViewportIds(global, actions, message as ApiMessage);\n\n      const currentMessage = selectChatMessage(global, chatId, localId);\n\n      global = deleteChatMessages(global, chatId, [localId]);\n\n      // Edge case for \"Send When Online\"\n      if (message.isScheduled) {\n        global = deleteChatScheduledMessages(global, chatId, [localId]);\n      }\n\n      global = updateChatMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      const newMessage = selectChatMessage(global, chatId, message.id)!;\n      global = updateChatLastMessage(global, chatId, newMessage);\n\n      const thread = selectThreadByMessage(global, message);\n      // For some reason Telegram requires to manually mark outgoing thread messages read\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { chatId: currentChatId, threadId: currentThreadId } = selectCurrentMessageList(global, tabId) || {};\n        if (currentChatId !== chatId\n          || (thread?.threadInfo?.threadId || MAIN_THREAD_ID) !== currentThreadId) {\n          return;\n        }\n\n        actions.markMessageListRead({ maxId: message.id, tabId });\n      });\n      if (thread?.threadInfo) {\n        global = replaceThreadParam(global, chatId, thread.threadInfo.threadId, 'threadInfo', {\n          ...thread.threadInfo,\n          lastMessageId: message.id,\n          lastReadInboxMessageId: message.id,\n        });\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateScheduledMessageSendSucceeded': {\n      const { chatId, localId, message } = update;\n      const scheduledIds = selectScheduledIds(global, chatId, MAIN_THREAD_ID) || [];\n      global = replaceThreadParam(global, chatId, MAIN_THREAD_ID, 'scheduledIds', [...scheduledIds, message.id]);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId !== MAIN_THREAD_ID) {\n        const threadScheduledIds = selectScheduledIds(global, chatId, threadId) || [];\n        global = replaceThreadParam(global, chatId, threadId, 'scheduledIds', [...threadScheduledIds, message.id]);\n      }\n\n      const currentMessage = selectScheduledMessage(global, chatId, localId);\n\n      global = deleteChatScheduledMessages(global, chatId, [localId]);\n      global = updateScheduledMessage(global, chatId, message.id, {\n        ...currentMessage,\n        ...message,\n        previousLocalId: localId,\n      });\n\n      setGlobal(global);\n      break;\n    }\n\n    case 'updatePinnedIds': {\n      const { chatId, isPinned, messageIds } = update;\n\n      const messages = pickTruthy(selectChatMessages(global, chatId), messageIds);\n      const updatePerThread: Record<number, number[]> = {\n        [MAIN_THREAD_ID]: messageIds,\n      };\n      Object.values(messages).forEach((message) => {\n        const threadId = selectThreadIdFromMessage(global, message);\n        if (threadId === MAIN_THREAD_ID) return;\n        const currentUpdatedInThread = updatePerThread[threadId] || [];\n        currentUpdatedInThread.push(message.id);\n        updatePerThread[threadId] = currentUpdatedInThread;\n      });\n\n      Object.entries(updatePerThread).forEach(([threadId, ids]) => {\n        const pinnedIds = selectPinnedIds(global, chatId, MAIN_THREAD_ID) || [];\n        const newPinnedIds = isPinned\n          ? unique(pinnedIds.concat(ids)).sort((a, b) => b - a)\n          : pinnedIds.filter((id) => !ids.includes(id));\n        global = replaceThreadParam(global, chatId, Number(threadId), 'pinnedIds', newPinnedIds);\n      });\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateThreadInfo': {\n      const {\n        chatId, threadId, threadInfo, firstMessageId,\n      } = update;\n\n      const currentThreadInfo = selectThreadInfo(global, chatId, threadId);\n      const newThreadInfo = {\n        ...currentThreadInfo,\n        ...threadInfo,\n      };\n\n      if (!newThreadInfo.threadId) {\n        return;\n      }\n\n      global = updateThreadInfo(global, chatId, threadId, newThreadInfo as ApiThreadInfo);\n\n      if (firstMessageId) {\n        global = replaceThreadParam(global, chatId, threadId, 'firstMessageId', firstMessageId);\n      }\n\n      const chat = selectChat(global, chatId);\n      if (chat?.isForum && threadInfo.lastReadInboxMessageId !== currentThreadInfo?.lastReadInboxMessageId) {\n        actions.loadTopicById({ chatId, topicId: threadId });\n      }\n\n      // Update reply thread last read message id if already read in main thread\n      if (threadInfo.topMessageId === threadId && !chat?.isForum) {\n        const lastReadInboxMessageId = chat?.lastReadInboxMessageId;\n        const lastReadInboxMessageIdInThread = newThreadInfo.lastReadInboxMessageId || lastReadInboxMessageId;\n        if (lastReadInboxMessageId && lastReadInboxMessageIdInThread) {\n          global = updateThreadInfo(global, chatId, threadId, {\n            lastReadInboxMessageId: Math.max(lastReadInboxMessageIdInThread, lastReadInboxMessageId),\n          });\n        }\n      }\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'resetMessages': {\n      const { id: chatId } = update;\n      const messagesById = selectChatMessages(global, chatId);\n\n      if (messagesById && !isUserId(chatId)) {\n        global = deleteChatMessages(global, chatId, Object.keys(messagesById).map(Number));\n        setGlobal(global);\n        actions.loadFullChat({ chatId, force: true, tabId: getCurrentTabId() });\n      }\n\n      break;\n    }\n\n    case 'deleteMessages': {\n      const { ids, chatId } = update;\n\n      deleteMessages(global, chatId, ids, actions);\n      break;\n    }\n\n    case 'deleteScheduledMessages': {\n      const { ids, chatId } = update;\n\n      deleteScheduledMessages(chatId, ids, actions, global);\n      break;\n    }\n\n    case 'deleteHistory': {\n      const { chatId } = update;\n      const chatMessages = global.messages.byChatId[chatId];\n      if (chatId === SERVICE_NOTIFICATIONS_USER_ID) {\n        global = {\n          ...global,\n          serviceNotifications: global.serviceNotifications.map((notification) => ({\n            ...notification,\n            isDeleted: true,\n          })),\n        };\n        setGlobal(global);\n      }\n\n      if (chatMessages) {\n        const ids = Object.keys(chatMessages.byId).map(Number);\n        global = getGlobal();\n        deleteMessages(global, chatId, ids, actions);\n      } else {\n        actions.requestChatUpdate({ chatId });\n      }\n\n      break;\n    }\n\n    case 'updateCommonBoxMessages': {\n      const { ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        const chatId = selectCommonBoxChatId(global, id);\n        if (chatId) {\n          global = updateChatMessage(global, chatId, id, messageUpdate);\n        }\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateChannelMessages': {\n      const { channelId, ids, messageUpdate } = update;\n\n      ids.forEach((id) => {\n        global = updateChatMessage(global, channelId, id, messageUpdate);\n      });\n\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateMessagePoll': {\n      const { pollId, pollUpdate } = update;\n\n      const message = selectChatMessageByPollId(global, pollId);\n\n      if (message?.content.poll) {\n        const oldResults = message.content.poll.results;\n        let newResults = oldResults;\n        if (pollUpdate.results?.results) {\n          if (!oldResults.results || !pollUpdate.results.isMin) {\n            newResults = pollUpdate.results;\n          } else if (oldResults.results) {\n            newResults = {\n              ...pollUpdate.results,\n              results: pollUpdate.results.results.map((result) => ({\n                ...result,\n                isChosen: oldResults.results!.find((r) => r.option === result.option)?.isChosen,\n              })),\n              isMin: undefined,\n            };\n          }\n        }\n        const updatedPoll = { ...message.content.poll, ...pollUpdate, results: newResults };\n\n        global = updateChatMessage(\n          global,\n          message.chatId,\n          message.id,\n          {\n            content: {\n              ...message.content,\n              poll: updatedPoll,\n            },\n          },\n        );\n        setGlobal(global);\n      }\n      break;\n    }\n\n    case 'updateMessagePollVote': {\n      const { pollId, userId, options } = update;\n      const message = selectChatMessageByPollId(global, pollId);\n      if (!message || !message.content.poll || !message.content.poll.results) {\n        break;\n      }\n\n      const { poll } = message.content;\n\n      const { recentVoterIds, totalVoters, results } = poll.results;\n      const newRecentVoterIds = recentVoterIds ? [...recentVoterIds] : [];\n      const newTotalVoters = totalVoters ? totalVoters + 1 : 1;\n      const newResults = results ? [...results] : [];\n\n      newRecentVoterIds.push(userId);\n\n      options.forEach((option) => {\n        const targetOptionIndex = newResults.findIndex((result) => result.option === option);\n        const targetOption = newResults[targetOptionIndex];\n        const updatedOption: ApiPollResult = targetOption ? { ...targetOption } : { option, votersCount: 0 };\n\n        updatedOption.votersCount += 1;\n        if (userId === global.currentUserId) {\n          updatedOption.isChosen = true;\n        }\n\n        if (targetOptionIndex) {\n          newResults[targetOptionIndex] = updatedOption;\n        } else {\n          newResults.push(updatedOption);\n        }\n      });\n\n      global = updateChatMessage(\n        global,\n        message.chatId,\n        message.id,\n        {\n          content: {\n            ...message.content,\n            poll: {\n              ...poll,\n              results: {\n                ...poll.results,\n                recentVoterIds: newRecentVoterIds,\n                totalVoters: newTotalVoters,\n                results: newResults,\n              },\n            },\n          },\n        },\n      );\n      setGlobal(global);\n\n      break;\n    }\n\n    case 'updateServiceNotification': {\n      const { message } = update;\n\n      if (selectIsServiceChatReady(global)) {\n        actions.createServiceNotification({ message });\n      }\n\n      break;\n    }\n\n    case 'updateMessageReactions': {\n      const { chatId, id, reactions } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      global = updateReactions(global, chatId, id, reactions, chat, message.isOutgoing, message);\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageExtendedMedia': {\n      const {\n        chatId, id, media, preview,\n      } = update;\n      const message = selectChatMessage(global, chatId, id);\n      const chat = selectChat(global, update.chatId);\n\n      if (!chat || !message) return;\n\n      if (preview) {\n        if (!message.content.invoice) return;\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...message.content,\n            invoice: {\n              ...message.content.invoice,\n              extendedMedia: preview,\n            },\n          },\n        });\n        setGlobal(global);\n      } else if (media) {\n        global = updateChatMessage(global, chatId, id, {\n          content: {\n            ...media,\n          },\n        });\n        setGlobal(global);\n      }\n\n      break;\n    }\n\n    case 'updateTranscribedAudio': {\n      const { transcriptionId, text, isPending } = update;\n\n      global = {\n        ...global,\n        transcriptions: {\n          ...global.transcriptions,\n          [transcriptionId]: {\n            ...(global.transcriptions[transcriptionId] || {}),\n            transcriptionId,\n            text,\n            isPending,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageSendFailed': {\n      const { chatId, localId, error } = update;\n\n      if (error.match(/CHAT_SEND_.+?FORBIDDEN/)) {\n        Object.values(global.byTabId).forEach(({ id: tabId }) => {\n          actions.showAllowedMessageTypesNotification({ chatId, tabId });\n        });\n      }\n\n      global = updateChatMessage(global, chatId, localId, { sendingState: 'messageSendingStateFailed' });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateMessageTranslations': {\n      const {\n        chatId, messageIds, toLanguageCode, translations,\n      } = update;\n\n      global = updateMessageTranslations(global, chatId, messageIds, toLanguageCode, translations);\n\n      setGlobal(global);\n      break;\n    }\n  }\n});\n\nfunction updateReactions<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  id: number,\n  reactions: ApiReactions,\n  chat: ApiChat,\n  isOutgoing?: boolean,\n  message?: ApiMessage,\n): T {\n  const currentReactions = message?.reactions;\n\n  // `updateMessageReactions` happens with an interval, so we try to avoid redundant global state updates\n  if (currentReactions && areDeepEqual(reactions, currentReactions)) {\n    return global;\n  }\n\n  global = updateChatMessage(global, chatId, id, { reactions });\n\n  if (!isOutgoing) {\n    return global;\n  }\n\n  const alreadyHasUnreadReaction = chat.unreadReactions?.includes(id);\n\n  // Only notify about added reactions, not removed ones\n  if (checkIfHasUnreadReactions(global, reactions) && !alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 0) + 1,\n      unreadReactions: [...(chat?.unreadReactions || []), id],\n    });\n\n    const newMessage = selectChatMessage(global, chatId, id);\n\n    if (!chat || !newMessage) return global;\n\n    onTickEnd(() => {\n      notifyAboutMessage({\n        chat,\n        message: newMessage,\n        isReaction: true,\n      });\n    });\n  } else if (alreadyHasUnreadReaction) {\n    global = updateUnreadReactions(global, chatId, {\n      unreadReactionsCount: (chat?.unreadReactionsCount || 1) - 1,\n      unreadReactions: chat?.unreadReactions?.filter((i) => i !== id),\n    });\n  }\n\n  return global;\n}\n\nfunction updateWithLocalMedia(\n  global: RequiredGlobalState, chatId: string, id: number, messageUpdate: Partial<ApiMessage>, isScheduled = false,\n) {\n  const currentMessage = isScheduled\n    ? selectScheduledMessage(global, chatId, id)\n    : selectChatMessage(global, chatId, id);\n\n  // Preserve locally uploaded media.\n  if (currentMessage && messageUpdate.content) {\n    const {\n      photo, video, sticker, document,\n    } = getMessageContent(currentMessage);\n    if (photo && messageUpdate.content.photo) {\n      messageUpdate.content.photo.blobUrl = photo.blobUrl;\n      messageUpdate.content.photo.thumbnail = photo.thumbnail;\n    } else if (video && messageUpdate.content.video) {\n      messageUpdate.content.video.blobUrl = video.blobUrl;\n    } else if (sticker && messageUpdate.content.sticker) {\n      messageUpdate.content.sticker.isPreloadedGlobally = sticker.isPreloadedGlobally;\n    } else if (document && messageUpdate.content.document) {\n      messageUpdate.content.document.previewBlobUrl = document.previewBlobUrl;\n    }\n  }\n\n  const newMessage = currentMessage ? { ...currentMessage, ...messageUpdate } : messageUpdate;\n\n  return isScheduled\n    ? updateScheduledMessage(global, chatId, id, newMessage)\n    : updateChatMessage(global, chatId, id, newMessage);\n}\n\nfunction updateThreadUnread<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage, isDeleting?: boolean,\n) {\n  const { chatId } = message;\n\n  const { threadInfo } = selectThreadByMessage(global, message) || {};\n\n  if (!threadInfo && message.replyToMessageId) {\n    const originMessage = selectChatMessage(global, chatId, message.replyToMessageId);\n    if (originMessage) {\n      global = updateThreadUnreadFromForwardedMessage(global, originMessage, chatId, message.id, isDeleting);\n    } else {\n      actions.loadMessage({\n        chatId,\n        messageId: message.replyToMessageId,\n        threadUpdate: {\n          isDeleting,\n          lastMessageId: message.id,\n        },\n      });\n    }\n  }\n\n  return global;\n}\n\nfunction updateListedAndViewportIds<T extends GlobalState>(\n  global: T, actions: RequiredGlobalActions, message: ApiMessage,\n) {\n  const { id, chatId } = message;\n\n  const { threadInfo, firstMessageId } = selectThreadByMessage(global, message) || {};\n\n  const chat = selectChat(global, chatId);\n  const isUnreadChatNotLoaded = chat?.unreadCount && !selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  global = updateThreadUnread(global, actions, message);\n\n  if (threadInfo) {\n    if (firstMessageId || !isMessageLocal(message)) {\n      global = updateListedIds(global, chatId, threadInfo.threadId, [id]);\n\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (selectIsViewportNewest(global, chatId, threadInfo.threadId, tabId)) {\n          global = addViewportId(global, chatId, threadInfo.threadId, id, tabId);\n\n          if (!firstMessageId) {\n            global = replaceThreadParam(global, chatId, threadInfo.threadId, 'firstMessageId', message.id);\n          }\n        }\n      });\n    }\n\n    global = replaceThreadParam(global, chatId, threadInfo.threadId, 'threadInfo', {\n      ...threadInfo,\n      lastMessageId: message.id,\n    });\n\n    if (!isMessageLocal(message)) {\n      global = updateThreadInfo(global, chatId, threadInfo.threadId, {\n        messagesCount: (threadInfo.messagesCount || 0) + 1,\n      });\n    }\n  }\n\n  if (isUnreadChatNotLoaded) {\n    return global;\n  }\n\n  global = updateListedIds(global, chatId, MAIN_THREAD_ID, [id]);\n\n  Object.values(global.byTabId).forEach(({ id: tabId }) => {\n    if (selectIsViewportNewest(global, chatId, MAIN_THREAD_ID, tabId)) {\n      // Always keep the first unread message in the viewport list\n      const firstUnreadId = selectFirstUnreadId(global, chatId, MAIN_THREAD_ID, tabId);\n      const candidateGlobal = addViewportId(global, chatId, MAIN_THREAD_ID, id, tabId);\n      const newViewportIds = selectViewportIds(candidateGlobal, chatId, MAIN_THREAD_ID, tabId);\n\n      if (!firstUnreadId || newViewportIds!.includes(firstUnreadId)) {\n        global = candidateGlobal;\n      }\n    }\n  });\n\n  return global;\n}\n\nfunction updateChatLastMessage<T extends GlobalState>(\n  global: T,\n  chatId: string,\n  message: ApiMessage,\n  force = false,\n) {\n  const { chats } = global;\n  const chat = chats.byId[chatId];\n  const currentLastMessage = chat?.lastMessage;\n\n  const topic = chat?.isForum ? selectTopicFromMessage(global, message) : undefined;\n  if (topic) {\n    global = updateTopic(global, chatId, topic.id, {\n      lastMessageId: message.id,\n    });\n  }\n\n  if (currentLastMessage && !force) {\n    const isSameOrNewer = (\n      currentLastMessage.id === message.id || currentLastMessage.id === message.previousLocalId\n    ) || message.id > currentLastMessage.id;\n\n    if (!isSameOrNewer) {\n      return global;\n    }\n  }\n\n  global = updateChat(global, chatId, { lastMessage: message });\n\n  return global;\n}\n\nfunction findLastMessage<T extends GlobalState>(global: T, chatId: string) {\n  const byId = selectChatMessages(global, chatId);\n  const listedIds = selectListedIds(global, chatId, MAIN_THREAD_ID);\n\n  if (!byId || !listedIds) {\n    return undefined;\n  }\n\n  let i = listedIds.length;\n  while (i--) {\n    const message = byId[listedIds[i]];\n    if (!message.isDeleting) {\n      return message;\n    }\n  }\n\n  return undefined;\n}\n\nfunction deleteMessages<T extends GlobalState>(\n  global: T, chatId: string | undefined, ids: number[], actions: RequiredGlobalActions,\n) {\n  // Channel update\n\n  if (chatId) {\n    const chat = selectChat(global, chatId);\n    if (!chat) return;\n\n    ids.forEach((id) => {\n      global = updateChatMessage(global, chatId, id, {\n        isDeleting: true,\n      });\n\n      global = clearMessageTranslation(global, chatId, id);\n\n      const newLastMessage = findLastMessage(global, chatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, chatId, newLastMessage, true);\n      }\n\n      if (chat.topics?.[id]) {\n        global = deleteTopic(global, chatId, id);\n      }\n    });\n\n    actions.requestChatUpdate({ chatId });\n\n    const threadIdsToUpdate: number[] = [];\n\n    ids.forEach((id) => {\n      const message = selectChatMessage(global, chatId, id);\n      if (!message) {\n        return;\n      }\n\n      global = updateThreadUnread(global, actions, message, true);\n\n      const threadId = selectThreadIdFromMessage(global, message);\n      if (threadId) {\n        threadIdsToUpdate.push(threadId);\n      }\n    });\n\n    setGlobal(global);\n\n    setTimeout(() => {\n      global = getGlobal();\n      global = deleteChatMessages(global, chatId, ids);\n      setGlobal(global);\n\n      unique(threadIdsToUpdate).forEach((threadId) => {\n        actions.requestThreadInfoUpdate({ chatId, threadId });\n      });\n    }, ANIMATION_DELAY);\n\n    return;\n  }\n\n  // Common box update\n\n  const chatsIdsToUpdate: string[] = [];\n\n  ids.forEach((id) => {\n    const commonBoxChatId = selectCommonBoxChatId(global, id);\n    if (commonBoxChatId) {\n      chatsIdsToUpdate.push(commonBoxChatId);\n\n      global = updateChatMessage(global, commonBoxChatId, id, {\n        isDeleting: true,\n      });\n\n      const newLastMessage = findLastMessage(global, commonBoxChatId);\n      if (newLastMessage) {\n        global = updateChatLastMessage(global, commonBoxChatId, newLastMessage, true);\n      }\n\n      setTimeout(() => {\n        global = getGlobal();\n        global = deleteChatMessages(global, commonBoxChatId, [id]);\n        setGlobal(global);\n      }, ANIMATION_DELAY);\n    }\n  });\n\n  setGlobal(global);\n\n  unique(chatsIdsToUpdate).forEach((id) => {\n    actions.requestChatUpdate({ chatId: id });\n  });\n}\n\nfunction deleteScheduledMessages<T extends GlobalState>(\n  chatId: string | undefined, ids: number[], actions: RequiredGlobalActions, global: T,\n) {\n  if (!chatId) {\n    return;\n  }\n\n  ids.forEach((id) => {\n    global = updateScheduledMessage(global, chatId, id, {\n      isDeleting: true,\n    });\n  });\n\n  setGlobal(global);\n\n  setTimeout(() => {\n    global = getGlobal();\n    global = deleteChatScheduledMessages(global, chatId, ids);\n    const scheduledMessages = selectChatScheduledMessages(global, chatId);\n    global = replaceThreadParam(\n      global, chatId, MAIN_THREAD_ID, 'scheduledIds', Object.keys(scheduledMessages || {}).map(Number),\n    );\n    setGlobal(global);\n  }, ANIMATION_DELAY);\n}\n","import { addActionHandler, getGlobal, setGlobal } from '../../index';\n\nimport type { ApiUserStatus } from '../../../api/types';\n\nimport { deleteContact, replaceUserStatuses, updateUser } from '../../reducers';\nimport { throttle } from '../../../util/schedulers';\nimport { selectIsCurrentUserPremium, selectUser } from '../../selectors';\nimport type { ActionReturnType, RequiredGlobalState } from '../../types';\n\nconst STATUS_UPDATE_THROTTLE = 3000;\n\nconst flushStatusUpdatesThrottled = throttle(flushStatusUpdates, STATUS_UPDATE_THROTTLE, true);\n\nlet pendingStatusUpdates: Record<string, ApiUserStatus> = {};\n\nfunction scheduleStatusUpdate(userId: string, statusUpdate: ApiUserStatus) {\n  pendingStatusUpdates[userId] = statusUpdate;\n  flushStatusUpdatesThrottled();\n}\n\nfunction flushStatusUpdates() {\n  // eslint-disable-next-line eslint-multitab-tt/no-immediate-global\n  let global = getGlobal() as RequiredGlobalState;\n\n  global = replaceUserStatuses(global, {\n    ...global.users.statusesById,\n    ...pendingStatusUpdates,\n  });\n  setGlobal(global);\n\n  pendingStatusUpdates = {};\n}\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'deleteContact': {\n      return deleteContact(global, update.id);\n    }\n\n    case 'updateUser': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        if (update.id === global.currentUserId && update.user.isPremium !== selectIsCurrentUserPremium(global)) {\n          // TODO Do not display modal if premium is bought from another device\n          if (update.user.isPremium) actions.openPremiumModal({ isSuccess: true, tabId });\n\n          // Reset translation cache cause premium provides additional formatting\n          global = {\n            ...global,\n            translations: {\n              byChatId: {},\n            },\n          };\n        }\n      });\n\n      return updateUser(global, update.id, update.user);\n    }\n\n    case 'updateRequestUserUpdate': {\n      actions.loadFullUser({ userId: update.id });\n      break;\n    }\n\n    case 'updateUserEmojiStatus': {\n      return updateUser(global, update.userId, { emojiStatus: update.emojiStatus });\n    }\n\n    case 'updateUserStatus': {\n      // Status updates come very often so we throttle them\n      scheduleStatusUpdate(update.userId, update.status);\n      return undefined;\n    }\n\n    case 'updateUserFullInfo': {\n      const { id, fullInfo } = update;\n      const targetUser = global.users.byId[id];\n      if (!targetUser) {\n        return undefined;\n      }\n\n      return updateUser(global, id, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          ...fullInfo,\n        },\n      });\n    }\n\n    case 'updateBotMenuButton': {\n      const { botId, button } = update;\n\n      const targetUser = selectUser(global, botId);\n      if (!targetUser?.fullInfo?.botInfo) {\n        return undefined;\n      }\n\n      return updateUser(global, botId, {\n        fullInfo: {\n          ...targetUser.fullInfo,\n          botInfo: {\n            ...targetUser.fullInfo.botInfo,\n            menuButton: button,\n          },\n        },\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { updateStickerSet } from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateStickerSet': {\n      return updateStickerSet(global, update.id, update.stickerSet);\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport type { ActionReturnType } from '../../types';\nimport { PaymentStep } from '../../../types';\n\nimport {\n  addBlockedContact, removeBlockedContact, setConfirmPaymentUrl, setPaymentStep,\n} from '../../reducers';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePeerBlocked':\n      if (update.isBlocked) {\n        return addBlockedContact(global, update.id);\n      } else {\n        return removeBlockedContact(global, update.id);\n      }\n\n    case 'updateResetContactList':\n      global = {\n        ...global,\n        contactList: {\n          userIds: [],\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updateConfig':\n      actions.loadConfig();\n      break;\n\n    case 'updateFavoriteStickers':\n      actions.loadFavoriteStickers();\n      break;\n\n    case 'updateRecentStickers':\n      actions.loadRecentStickers();\n      break;\n\n    case 'updateRecentEmojiStatuses':\n      actions.loadRecentEmojiStatuses();\n      break;\n\n    case 'updateMoveStickerSetToTop': {\n      const oldOrder = update.isCustomEmoji ? global.customEmojis.added.setIds : global.stickers.added.setIds;\n      if (!oldOrder) return global;\n      const newOrder = [update.id, ...oldOrder.filter((id) => id !== update.id)];\n      actions.reorderStickerSets({ order: newOrder, isCustomEmoji: update.isCustomEmoji });\n      break;\n    }\n\n    case 'updateStickerSets':\n      actions.loadStickerSets();\n      break;\n\n    case 'updateStickerSetsOrder':\n      actions.reorderStickerSets({ order: update.order, isCustomEmoji: update.isCustomEmoji });\n      break;\n\n    case 'updateSavedGifs':\n      actions.loadSavedGifs();\n      break;\n\n    case 'updatePrivacy':\n      global = {\n        ...global,\n        settings: {\n          ...global.settings,\n          privacy: {\n            ...global.settings.privacy,\n            [update.key]: update.rules,\n          },\n        },\n      };\n      setGlobal(global);\n      break;\n\n    case 'updatePaymentVerificationNeeded':\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        global = setConfirmPaymentUrl(global, update.url, tabId);\n        global = setPaymentStep(global, PaymentStep.ConfirmPayment, tabId);\n      });\n      setGlobal(global);\n      break;\n\n    case 'updateWebViewResultSent':\n      Object.values(global.byTabId).forEach((tabState) => {\n        if (tabState.webApp?.queryId === update.queryId) {\n          actions.setReplyingToId({ messageId: undefined, tabId: tabState.id });\n          actions.closeWebApp({ tabId: tabState.id });\n        }\n      });\n      break;\n  }\n\n  return undefined;\n});\n","import { addActionHandler, setGlobal } from '../../index';\n\nimport {\n  addNotifyException, updateChat, updateTopic, updateNotifySettings,\n} from '../../reducers';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateNotifySettings': {\n      return updateNotifySettings(global, update.peerType, update.isSilent, update.shouldShowPreviews);\n    }\n\n    case 'updateNotifyExceptions': {\n      const {\n        chatId, isMuted, isSilent, shouldShowPreviews,\n      } = update;\n      const chat = global.chats.byId[chatId];\n\n      if (chat) {\n        global = updateChat(global, chatId, { isMuted });\n      }\n\n      global = addNotifyException(global, chatId, { isMuted, isSilent, shouldShowPreviews });\n      setGlobal(global);\n      break;\n    }\n\n    case 'updateTopicNotifyExceptions': {\n      const {\n        chatId, topicId, isMuted,\n      } = update;\n\n      global = updateTopic(global, chatId, topicId, { isMuted });\n\n      setGlobal(global);\n      break;\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateTwoFaStateWaitCode': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          isLoading: false,\n          waitingEmailCodeLength: update.length,\n        },\n      };\n    }\n\n    case 'updateTwoFaError': {\n      return {\n        ...global,\n        twoFaSettings: {\n          ...global.twoFaSettings,\n          error: update.message,\n        },\n      };\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler, getGlobal } from '../../index';\nimport { removeGroupCall, updateGroupCall, updateGroupCallParticipant } from '../../reducers/calls';\nimport { omit } from '../../../util/iteratees';\nimport { selectChat } from '../../selectors';\nimport { updateChat } from '../../reducers';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\nimport { notifyAboutCall } from '../../../util/notifications';\nimport { selectGroupCall, selectPhoneCallUser } from '../../selectors/calls';\nimport { checkNavigatorUserMediaPermissions, initializeSounds } from '../ui/calls';\nimport { onTickEnd } from '../../../util/schedulers';\nimport type { ActionReturnType } from '../../types';\nimport { updateTabState } from '../../reducers/tabs';\nimport { getCurrentTabId } from '../../../util/establishMultitabRole';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updateGroupCall': {\n      if (update.call.connectionState === 'discarded') {\n        if (global.groupCalls.activeGroupCallId) {\n          if ('leaveGroupCall' in actions) actions.leaveGroupCall({ shouldRemove: true, tabId: getCurrentTabId() });\n          return undefined;\n        } else {\n          return removeGroupCall(global, update.call.id);\n        }\n      }\n\n      const groupCall = selectGroupCall(global, update.call.id);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n\n      return updateGroupCall(\n        global,\n        update.call.id,\n        omit(update.call, ['connectionState']),\n        undefined,\n        update.call.participantsCount,\n      );\n    }\n    case 'updateGroupCallChatId': {\n      const chat = selectChat(global, update.chatId);\n      if (chat) {\n        global = updateChat(global, update.chatId, {\n          fullInfo: {\n            ...chat.fullInfo,\n            groupCallId: update.call.id,\n          },\n        });\n      }\n      return global;\n    }\n    case 'updateGroupCallParticipants': {\n      const { groupCallId, participants, nextOffset } = update;\n      const { currentUserId } = global;\n\n      // `secret-sauce` should disconnect if the participant is us but from another device\n      global = getGlobal();\n      participants.forEach((participant) => {\n        if (participant.id) {\n          global = updateGroupCallParticipant(\n            global, groupCallId, participant.id, participant, Boolean(nextOffset) || currentUserId === participant.id,\n          );\n        }\n      });\n      if (nextOffset) {\n        global = updateGroupCall(global, groupCallId, {\n          nextOffset,\n        });\n      }\n\n      const groupCall = selectGroupCall(global, groupCallId);\n      const chatId = groupCall?.chatId;\n      if (chatId) {\n        global = updateChat(global, chatId, {\n          isCallNotEmpty: (groupCall.participantsCount > 0 || Boolean(groupCall.participants?.length)),\n        });\n      }\n      return global;\n    }\n    case 'updatePhoneCall': {\n      if (!ARE_CALLS_SUPPORTED) return undefined;\n\n      const {\n        phoneCall,\n        currentUserId,\n      } = global;\n\n      const { call } = update;\n\n      if (phoneCall) {\n        if (call.state === 'discarded') {\n          actions.playGroupCallSound({ sound: 'end' });\n          if ('hangUp' in actions) actions.hangUp({ tabId: getCurrentTabId() });\n\n          return {\n            ...global,\n            ...(call.needRating && { ratingPhoneCall: call }),\n          };\n        }\n\n        return undefined;\n      }\n\n      const isOutgoing = call?.adminId === currentUserId;\n\n      if (!isOutgoing && call.state === 'requested') {\n        onTickEnd(() => {\n          global = getGlobal();\n          notifyAboutCall({\n            call,\n            user: selectPhoneCallUser(global)!,\n          });\n        });\n\n        initializeSounds();\n        void checkNavigatorUserMediaPermissions(global, actions, call.isVideo, getCurrentTabId());\n        global = {\n          ...global,\n          phoneCall: call,\n        };\n\n        return updateTabState(global, {\n          isCallPanelVisible: false,\n        }, getCurrentTabId());\n      }\n    }\n  }\n\n  return undefined;\n});\n","import { addActionHandler } from '../../index';\n\nimport { IS_PRODUCTION_HOST } from '../../../util/environment';\nimport { closeInvoice } from '../../reducers';\nimport * as langProvider from '../../../util/langProvider';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { selectChatMessage, selectTabState } from '../../selectors';\nimport { updateTabState } from '../../reducers/tabs';\nimport type { ActionReturnType } from '../../types';\n\naddActionHandler('apiUpdate', (global, actions, update): ActionReturnType => {\n  switch (update['@type']) {\n    case 'updatePaymentStateCompleted': {\n      Object.values(global.byTabId).forEach(({ id: tabId }) => {\n        const { inputInvoice } = selectTabState(global, tabId).payment;\n\n        if (inputInvoice && 'chatId' in inputInvoice && 'messageId' in inputInvoice) {\n          const message = selectChatMessage(global, inputInvoice.chatId, inputInvoice.messageId);\n\n          if (message && message.content.invoice) {\n            const { amount, currency, title } = message.content.invoice;\n\n            actions.showNotification({\n              tabId,\n              message: langProvider.translate('PaymentInfoHint', [\n                formatCurrency(amount, currency, langProvider.getTranslationFn().code),\n                title,\n              ]),\n            });\n          }\n        }\n\n        // On the production host, the payment frame receives a message with the payment event,\n        // after which the payment form closes. In other cases, the payment form must be closed manually.\n        // Closing the invoice will cause the closing of the Payment Modal dialog and then closing the payment.\n        if (!IS_PRODUCTION_HOST) {\n          global = closeInvoice(global, tabId);\n        }\n\n        if (update.slug && inputInvoice && 'slug' in inputInvoice && inputInvoice.slug !== update.slug) {\n          return;\n        }\n\n        global = updateTabState(global, {\n          payment: {\n            ...selectTabState(global, tabId).payment,\n            status: 'paid',\n          },\n        }, tabId);\n      });\n    }\n  }\n\n  return undefined;\n});\n","import { useEffect } from '../lib/teact/teact';\n\nimport { onBeforeUnload } from '../util/schedulers';\n\nexport default function useBeforeUnload(callback: AnyToVoidFunction) {\n  useEffect(() => {\n    return onBeforeUnload(callback);\n  }, [callback]);\n}\n","import { useEffect } from '../lib/teact/teact';\nimport { IS_IOS, IS_PWA, IS_TOUCH_ENV } from '../util/environment';\n\nconst metaViewport = document.querySelector('meta[name=\"viewport\"]');\nconst defaultViewportContent = metaViewport?.getAttribute('content') || '';\nconst allowedZoomViewportContent = 'width=device-width, initial-scale=1, shrink-to-fit=no, viewport-fit=cover';\n\nexport default function usePreventPinchZoomGesture(isDisabled = false) {\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    if (isDisabled) {\n      // Clean viewport content from values values that disable the ability to zoom a webpage\n      // https://web.dev/meta-viewport/\n      metaViewport?.setAttribute('content', allowedZoomViewportContent);\n      return undefined;\n    }\n\n    metaViewport?.setAttribute('content', defaultViewportContent);\n\n    // Since iOS 10 `user-scaleable=no` is disabled in Safari for iOS,\n    // this is only applicable for the browser and does not apply to the PWA mode.\n    // https://newbedev.com/how-do-you-disable-viewport-zooming-on-mobile-safari\n    if (IS_IOS && !IS_PWA) {\n      document.addEventListener('gesturestart', preventEvent);\n    }\n\n    return () => {\n      metaViewport?.setAttribute('content', 'width=device-width, initial-scale=1, shrink-to-fit=no');\n      if (IS_IOS && !IS_PWA) {\n        document.removeEventListener('gesturestart', preventEvent);\n      }\n    };\n  }, [isDisabled]);\n}\n\nfunction preventEvent(e: Event) {\n  e.preventDefault();\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './StickerSetModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst StickerSetModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerSetModal = useModuleLoader(Bundles.Extra, 'StickerSetModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSetModal ? <StickerSetModal {...props} /> : undefined;\n};\n\nexport default memo(StickerSetModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { useFolderManagerForUnreadCounters } from '../../hooks/useFolderManager';\nimport { getAllNotificationsCount } from '../../util/folderManager';\nimport { updateAppBadge } from '../../util/appBadge';\n\ninterface OwnProps {\n  isForAppBadge?: boolean;\n}\n\nconst UnreadCounter: FC<OwnProps> = ({ isForAppBadge }) => {\n  useFolderManagerForUnreadCounters();\n  const unreadNotificationsCount = getAllNotificationsCount();\n\n  useEffect(() => {\n    if (isForAppBadge) {\n      updateAppBadge(unreadNotificationsCount);\n    }\n  }, [isForAppBadge, unreadNotificationsCount]);\n\n  if (isForAppBadge || !unreadNotificationsCount) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"unread-count active\">{formatIntegerCompact(unreadNotificationsCount)}</div>\n  );\n};\n\nexport default memo(UnreadCounter);\n","import type { GlobalState } from '../global/types';\n\nimport useBrowserOnline from './useBrowserOnline';\nimport type { LangFn } from './useLang';\n\nexport enum ConnectionStatus {\n  waitingForNetwork,\n  syncing,\n  online,\n}\n\ntype ConnectionStatusPosition =\n  'overlay'\n  | 'minimized'\n  | 'middleHeader'\n  | 'none';\n\nexport default function useConnectionStatus(\n  lang: LangFn,\n  connectionState: GlobalState['connectionState'],\n  isSyncing: GlobalState['isSyncing'],\n  hasMiddleHeader: boolean,\n  isMinimized?: boolean,\n  isDisabled?: boolean,\n) {\n  let status: ConnectionStatus;\n  const isBrowserOnline = useBrowserOnline();\n  if (!isBrowserOnline || connectionState === 'connectionStateConnecting') {\n    status = ConnectionStatus.waitingForNetwork;\n  } else if (isSyncing) {\n    status = ConnectionStatus.syncing;\n  } else {\n    status = ConnectionStatus.online;\n  }\n\n  let position: ConnectionStatusPosition;\n  if (status === ConnectionStatus.online || isDisabled) {\n    position = 'none';\n  } else if (hasMiddleHeader) {\n    position = 'middleHeader';\n  } else if (isMinimized) {\n    position = 'minimized';\n  } else {\n    position = 'overlay';\n  }\n\n  let text: string | undefined;\n  if (status === ConnectionStatus.waitingForNetwork) {\n    text = lang('WaitingForNetwork');\n  } else if (status === ConnectionStatus.syncing) {\n    text = lang('Updating');\n  }\n\n  if (position === 'middleHeader') {\n    text = text!.toLowerCase().replace(/\\.+$/, '');\n  }\n\n  return {\n    connectionStatus: status,\n    connectionStatusPosition: position,\n    connectionStatusText: text,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nexport default function useBrowserOnline() {\n  const [isOnline, setIsOnline] = useState(window.navigator.onLine);\n\n  useEffect(() => {\n    function handleChange() {\n      setIsOnline(window.navigator.onLine);\n    }\n\n    window.addEventListener('online', handleChange);\n    window.addEventListener('offline', handleChange);\n\n    return () => {\n      window.removeEventListener('offline', handleChange);\n      window.removeEventListener('online', handleChange);\n    };\n  }, []);\n\n  return isOnline;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport type { ConnectionStatus } from '../../hooks/useConnectionStatus';\n\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\n\nimport './ConnectionStatusOverlay.scss';\n\ntype OwnProps = {\n  connectionStatus: ConnectionStatus;\n  connectionStatusText: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst ConnectionStatusOverlay: FC<OwnProps> = ({\n  connectionStatus,\n  connectionStatusText,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <div id=\"ConnectionStatusOverlay\" dir={lang.isRtl ? 'rtl' : undefined} onClick={onClick}>\n      <Spinner color=\"black\" />\n      <div className=\"state-text\">\n        <Transition activeKey={connectionStatus} name=\"slide-fade\">\n          {connectionStatusText}\n        </Transition>\n      </div>\n      <Button\n        round\n        size=\"tiny\"\n        color=\"translucent-black\"\n      >\n        <span className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(ConnectionStatusOverlay);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"HAg4STRlxDV3frYuABYr\",\"particle\":\"HO3tML0GAC9vTH28baKB\"};","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiReactionCustomEmoji } from '../../../api/types';\n\nimport { IS_OFFSET_PATH_SUPPORTED } from '../../../util/environment';\nimport { getStickerPreviewHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport styles from './CustomEmojiEffect.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReactionCustomEmoji | ApiEmojiStatus;\n  className?: string;\n  isLottie?: boolean;\n};\n\nconst EFFECT_AMOUNT = 7;\n\nconst CustomEmojiEffect: FC<OwnProps> = ({\n  reaction,\n  isLottie,\n  className,\n}) => {\n  const stickerHash = getStickerPreviewHash(reaction.documentId);\n\n  const previewMediaData = useMedia(!isLottie ? stickerHash : undefined);\n\n  const paths: string[] = useMemo(() => {\n    if (!IS_OFFSET_PATH_SUPPORTED) return [];\n    return Array.from({ length: EFFECT_AMOUNT }).map(() => generateRandomDropPath());\n  }, []);\n\n  if (!previewMediaData && !isLottie) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName(styles.root, className)}>\n      {paths.map((path) => {\n        const style = `--offset-path: path('${path}');`;\n        if (isLottie) {\n          return (\n            <CustomEmoji\n              documentId={reaction.documentId}\n              className={styles.particle}\n              style={style}\n              withSharedAnimation\n            />\n          );\n        }\n\n        return (\n          <img\n            src={previewMediaData}\n            alt=\"\"\n            className={styles.particle}\n            style={style}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default memo(CustomEmojiEffect);\n\nfunction generateRandomDropPath() {\n  const x = (10 + Math.random() * 60) * (Math.random() > 0.5 ? 1 : -1);\n  const y = 20 + Math.random() * 80;\n\n  return `M 0 0 C 0 0 ${x} ${-y - 20} ${x} ${y}`;\n}\n","import React, { memo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StatusPickerMenu';\n\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StatusPickerMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StatusPickerMenu = useModuleLoader(Bundles.Extra, 'StatusPickerMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StatusPickerMenu ? <StatusPickerMenu {...props} /> : undefined;\n};\n\nexport default memo(StatusPickerMenuAsync);\n","import React, { memo, useCallback, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiEmojiStatus, ApiSticker } from '../../../api/types';\n\nimport { EMOJI_STATUS_LOOP_LIMIT } from '../../../config';\nimport { selectUser } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useTimeout from '../../../hooks/useTimeout';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport Button from '../../ui/Button';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport CustomEmojiEffect from '../../middle/message/CustomEmojiEffect';\nimport StatusPickerMenu from './StatusPickerMenu.async';\n\ninterface StateProps {\n  emojiStatus?: ApiEmojiStatus;\n}\n\nconst EFFECT_DURATION_MS = 1500;\nconst EMOJI_STATUS_SIZE = 24;\n\nconst StatusButton: FC<StateProps> = ({ emojiStatus }) => {\n  const { setEmojiStatus, loadCurrentUser } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLButtonElement>(null);\n  const [shouldShowEffect, markShouldShowEffect, unmarkShouldShowEffect] = useFlag(false);\n  const [isEffectShown, showEffect, hideEffect] = useFlag(false);\n  const [isStatusPickerOpen, openStatusPicker, closeStatusPicker] = useFlag(false);\n  const { isMobile } = useAppLayout();\n\n  const delay = emojiStatus?.until ? emojiStatus.until * 1000 - Date.now() + getServerTimeOffset() * 1000 : undefined;\n  useTimeout(loadCurrentUser, delay);\n\n  useEffectWithPrevDeps(([prevEmojiStatus]) => {\n    if (shouldShowEffect && emojiStatus && prevEmojiStatus && emojiStatus.documentId !== prevEmojiStatus.documentId) {\n      showEffect();\n      unmarkShouldShowEffect();\n    }\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [emojiStatus, shouldShowEffect, showEffect, unmarkShouldShowEffect] as const);\n\n  const handleEmojiStatusSet = useCallback((sticker: ApiSticker) => {\n    markShouldShowEffect();\n    setEmojiStatus({ emojiStatus: sticker });\n  }, [markShouldShowEffect, setEmojiStatus]);\n\n  useTimeout(hideEffect, isEffectShown ? EFFECT_DURATION_MS : undefined);\n\n  const handleEmojiStatusClick = useCallback(() => {\n    openStatusPicker();\n  }, [openStatusPicker]);\n\n  return (\n    <div className=\"extra-spacing\">\n      {Boolean(isEffectShown && emojiStatus) && (\n        <CustomEmojiEffect\n          reaction={emojiStatus!}\n          isLottie\n          className=\"emoji-status-effect\"\n        />\n      )}\n      <Button\n        round\n        ref={buttonRef}\n        ripple={!isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className=\"emoji-status\"\n        onClick={handleEmojiStatusClick}\n      >\n        {emojiStatus ? (\n          <CustomEmoji\n            key={emojiStatus.documentId}\n            documentId={emojiStatus.documentId}\n            size={EMOJI_STATUS_SIZE}\n            loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n          />\n        ) : <PremiumIcon />}\n      </Button>\n      <StatusPickerMenu\n        statusButtonRef={buttonRef}\n        isOpen={isStatusPickerOpen}\n        onEmojiStatusSelect={handleEmojiStatusSet}\n        onClose={closeStatusPicker}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal((global) => {\n  const { currentUserId } = global;\n  const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n  return {\n    emojiStatus: currentUser?.emojiStatus,\n  };\n})(StatusButton));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { AnimationLevel, ISettings } from '../../../types';\nimport { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { ApiChat } from '../../../api/types';\nimport type { TabState, GlobalState } from '../../../global/types';\n\nimport {\n  ANIMATION_LEVEL_MAX,\n  APP_NAME, APP_VERSION,\n  BETA_CHANGELOG_URL,\n  DEBUG,\n  FEEDBACK_URL,\n  IS_BETA,\n  IS_TEST,\n  PRODUCTION_HOSTNAME,\n} from '../../../config';\nimport { IS_PWA } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateToString } from '../../../util/dateFormat';\nimport switchTheme from '../../../util/switchTheme';\nimport { setPermanentWebVersion } from '../../../util/permanentWebVersion';\nimport { clearWebsync } from '../../../util/websync';\nimport {\n  selectCurrentMessageList, selectIsCurrentUserPremium, selectTabState, selectTheme,\n} from '../../../global/selectors';\nimport { isChatArchived } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useConnectionStatus from '../../../hooks/useConnectionStatus';\nimport { useHotkeys } from '../../../hooks/useHotkeys';\nimport { getPromptInstall } from '../../../util/installPrompt';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport useLeftHeaderButtonRtlForumTransition from './hooks/useLeftHeaderButtonRtlForumTransition';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport SearchInput from '../../ui/SearchInput';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\nimport Switcher from '../../ui/Switcher';\nimport ShowTransition from '../../ui/ShowTransition';\nimport ConnectionStatusOverlay from '../ConnectionStatusOverlay';\nimport StatusButton from './StatusButton';\n\nimport './LeftMainHeader.scss';\n\ntype OwnProps = {\n  shouldHideSearch?: boolean;\n  content: LeftColumnContent;\n  contactsFilter: string;\n  isClosingSearch?: boolean;\n  shouldSkipTransition?: boolean;\n  onSearchQuery: (query: string) => void;\n  onSelectSettings: () => void;\n  onSelectContacts: () => void;\n  onSelectArchived: () => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  {\n    searchQuery?: string;\n    isLoading: boolean;\n    currentUserId?: string;\n    globalSearchChatId?: string;\n    searchDate?: number;\n    theme: ISettings['theme'];\n    animationLevel: AnimationLevel;\n    chatsById?: Record<string, ApiChat>;\n    isMessageListOpen: boolean;\n    isCurrentUserPremium?: boolean;\n    isConnectionStatusMinimized: ISettings['isConnectionStatusMinimized'];\n    areChatsLoaded?: boolean;\n    hasPasscode?: boolean;\n  }\n  & Pick<GlobalState, 'connectionState' | 'isSyncing' | 'archiveSettings'> & Pick<TabState, 'canInstall'>;\n\nconst ANIMATION_LEVEL_OPTIONS = [0, 1, 2];\nconst WEBK_VERSION_URL = 'https://web.telegram.org/k/';\n\nconst LeftMainHeader: FC<OwnProps & StateProps> = ({\n  shouldHideSearch,\n  content,\n  contactsFilter,\n  onSearchQuery,\n  isClosingSearch,\n  onSelectSettings,\n  onSelectContacts,\n  onSelectArchived,\n  onReset,\n  searchQuery,\n  isLoading,\n  isCurrentUserPremium,\n  shouldSkipTransition,\n  currentUserId,\n  globalSearchChatId,\n  searchDate,\n  theme,\n  animationLevel,\n  chatsById,\n  connectionState,\n  isSyncing,\n  isMessageListOpen,\n  isConnectionStatusMinimized,\n  areChatsLoaded,\n  hasPasscode,\n  canInstall,\n  archiveSettings,\n}) => {\n  const {\n    openChat,\n    setGlobalSearchDate,\n    setSettingOption,\n    setGlobalSearchChatId,\n    openChatByUsername,\n    lockScreen,\n    requestNextSettingsScreen,\n    skipLockOnUnload,\n    openUrl,\n  } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const hasMenu = content === LeftColumnContent.ChatList;\n  const clearedDateSearchParam = { date: undefined };\n  const clearedChatSearchParam = { id: undefined };\n  const selectedSearchDate = useMemo(() => {\n    return searchDate\n      ? formatDateToString(new Date(searchDate * 1000))\n      : undefined;\n  }, [searchDate]);\n  const archivedUnreadChatsCount = useMemo(() => {\n    if (!hasMenu || !chatsById) {\n      return 0;\n    }\n\n    return Object.values(chatsById).reduce((total, chat) => {\n      if (!isChatArchived(chat)) {\n        return total;\n      }\n\n      return chat.unreadCount ? total + 1 : total;\n    }, 0);\n  }, [hasMenu, chatsById]);\n\n  const { connectionStatus, connectionStatusText, connectionStatusPosition } = useConnectionStatus(\n    lang, connectionState, isSyncing, isMessageListOpen, isConnectionStatusMinimized, !areChatsLoaded,\n  );\n\n  const handleLockScreenHotkey = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (hasPasscode) {\n      lockScreen();\n    } else {\n      requestNextSettingsScreen({ screen: SettingsScreens.PasscodeDisabled });\n    }\n  }, [hasPasscode, lockScreen, requestNextSettingsScreen]);\n\n  useHotkeys({\n    'Ctrl+Shift+L': handleLockScreenHotkey,\n    'Alt+Shift+L': handleLockScreenHotkey,\n    'Meta+Shift+L': handleLockScreenHotkey,\n    ...(IS_PWA && { 'Mod+L': handleLockScreenHotkey }),\n  });\n\n  const withOtherVersions = window.location.hostname === PRODUCTION_HOSTNAME || IS_TEST;\n\n  const MainButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={hasMenu && !isMobile}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={hasMenu ? onTrigger : () => onReset()}\n        ariaLabel={hasMenu ? lang('AccDescrOpenMenu2') : 'Return to chat list'}\n      >\n        <div className={buildClassName(\n          'animated-menu-icon',\n          !hasMenu && 'state-back',\n          shouldSkipTransition && 'no-animation',\n        )}\n        />\n      </Button>\n    );\n  }, [hasMenu, isMobile, lang, onReset, shouldSkipTransition]);\n\n  const handleSearchFocus = useCallback(() => {\n    if (!searchQuery) {\n      onSearchQuery('');\n    }\n  }, [searchQuery, onSearchQuery]);\n\n  const toggleConnectionStatus = useCallback(() => {\n    setSettingOption({ isConnectionStatusMinimized: !isConnectionStatusMinimized });\n  }, [isConnectionStatusMinimized, setSettingOption]);\n\n  const handleSelectSaved = useCallback(() => {\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleDarkModeToggle = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: false });\n    switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleAnimationLevelChange = useCallback((e: React.SyntheticEvent<HTMLElement>) => {\n    e.stopPropagation();\n\n    const newLevel = animationLevel === 0 ? 2 : 0;\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [animationLevel, setSettingOption]);\n\n  const handleChangelogClick = useCallback(() => {\n    window.open(BETA_CHANGELOG_URL, '_blank', 'noopener');\n  }, []);\n\n  const handleSwitchToWebK = useCallback(() => {\n    setPermanentWebVersion('K');\n    clearWebsync();\n    skipLockOnUnload();\n  }, [skipLockOnUnload]);\n\n  const handleOpenTipsChat = useCallback(() => {\n    openChatByUsername({ username: lang('Settings.TipsUsername') });\n  }, [lang, openChatByUsername]);\n\n  const handleBugReportClick = useCallback(() => {\n    openUrl({ url: FEEDBACK_URL });\n  }, [openUrl]);\n\n  const handleLockScreen = useCallback(() => {\n    lockScreen();\n  }, [lockScreen]);\n\n  const isSearchFocused = (\n    Boolean(globalSearchChatId)\n    || content === LeftColumnContent.GlobalSearch\n    || content === LeftColumnContent.Contacts\n  );\n\n  useEffect(() => (isSearchFocused ? captureEscKeyListener(() => onReset()) : undefined), [isSearchFocused, onReset]);\n\n  const searchInputPlaceholder = content === LeftColumnContent.Contacts\n    ? lang('SearchFriends')\n    : lang('Search');\n\n  const versionString = IS_BETA ? `${APP_VERSION} Beta (${APP_REVISION})` : (DEBUG ? APP_REVISION : APP_VERSION);\n\n  // Disable dropdown menu RTL animation for resize\n  const {\n    shouldDisableDropdownMenuTransitionRef,\n    handleDropdownMenuTransitionEnd,\n  } = useLeftHeaderButtonRtlForumTransition(shouldHideSearch);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem\n        icon=\"saved-messages\"\n        onClick={handleSelectSaved}\n      >\n        {lang('SavedMessages')}\n      </MenuItem>\n      {archiveSettings.isHidden && (\n        <MenuItem\n          icon=\"archive\"\n          onClick={onSelectArchived}\n        >\n          <span className=\"menu-item-name\">{lang('ArchivedChats')}</span>\n          {archivedUnreadChatsCount > 0 && (\n            <div className=\"right-badge\">{archivedUnreadChatsCount}</div>\n          )}\n        </MenuItem>\n      )}\n      <MenuItem\n        icon=\"user\"\n        onClick={onSelectContacts}\n      >\n        {lang('Contacts')}\n      </MenuItem>\n      <MenuItem\n        icon=\"settings\"\n        onClick={onSelectSettings}\n      >\n        {lang('Settings')}\n      </MenuItem>\n      <MenuItem\n        icon=\"darkmode\"\n        onClick={handleDarkModeToggle}\n      >\n        <span className=\"menu-item-name\">{lang('lng_menu_night_mode')}</span>\n        <Switcher\n          id=\"darkmode\"\n          label={lang(theme === 'dark' ? 'lng_settings_disable_night_theme' : 'lng_settings_enable_night_theme')}\n          checked={theme === 'dark'}\n          noAnimation\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"animations\"\n        onClick={handleAnimationLevelChange}\n      >\n        <span className=\"menu-item-name capitalize\">{lang('Appearance.Animations').toLowerCase()}</span>\n        <Switcher\n          id=\"animations\"\n          label=\"Toggle Animations\"\n          checked={animationLevel > 0}\n        />\n      </MenuItem>\n      <MenuItem\n        icon=\"help\"\n        onClick={handleOpenTipsChat}\n      >\n        {lang('TelegramFeatures')}\n      </MenuItem>\n      <MenuItem\n        icon=\"bug\"\n        onClick={handleBugReportClick}\n      >\n        Report Bug\n      </MenuItem>\n      {IS_BETA && (\n        <MenuItem\n          icon=\"permissions\"\n          onClick={handleChangelogClick}\n        >\n          Beta Changelog\n        </MenuItem>\n      )}\n      {withOtherVersions && (\n        <MenuItem\n          icon=\"char-K\"\n          href={WEBK_VERSION_URL}\n          onClick={handleSwitchToWebK}\n        >\n          Switch to K Version\n        </MenuItem>\n      )}\n      {canInstall && (\n        <MenuItem\n          icon=\"install\"\n          onClick={getPromptInstall()}\n        >\n          Install App\n        </MenuItem>\n      )}\n    </>\n  ), [\n    animationLevel, archivedUnreadChatsCount, canInstall, handleAnimationLevelChange, handleBugReportClick, lang,\n    handleChangelogClick, handleDarkModeToggle, handleOpenTipsChat, handleSelectSaved, handleSwitchToWebK,\n    onSelectArchived, onSelectContacts, onSelectSettings, theme, withOtherVersions, archiveSettings,\n  ]);\n\n  return (\n    <div className=\"LeftMainHeader\">\n      <div id=\"LeftMainHeader\" className=\"left-header\">\n        {lang.isRtl && <div className=\"DropdownMenuFiller\" />}\n        <DropdownMenu\n          trigger={MainButton}\n          footer={`${APP_NAME} ${versionString}`}\n          className={buildClassName(\n            lang.isRtl && 'rtl',\n            shouldHideSearch && lang.isRtl && 'right-aligned',\n            shouldDisableDropdownMenuTransitionRef.current && lang.isRtl && 'disable-transition',\n          )}\n          positionX={shouldHideSearch && lang.isRtl ? 'right' : 'left'}\n          onTransitionEnd={lang.isRtl ? handleDropdownMenuTransitionEnd : undefined}\n        >\n          {menuItems}\n        </DropdownMenu>\n        <SearchInput\n          inputId=\"telegram-search-input\"\n          parentContainerClassName=\"LeftSearch\"\n          className={buildClassName(\n            (globalSearchChatId || searchDate) ? 'with-picker-item' : undefined,\n            shouldHideSearch && 'SearchInput--hidden',\n          )}\n          value={isClosingSearch ? undefined : (contactsFilter || searchQuery)}\n          focused={isSearchFocused}\n          isLoading={isLoading || connectionStatusPosition === 'minimized'}\n          spinnerColor={connectionStatusPosition === 'minimized' ? 'yellow' : undefined}\n          spinnerBackgroundColor={connectionStatusPosition === 'minimized' && theme === 'light' ? 'light' : undefined}\n          placeholder={searchInputPlaceholder}\n          autoComplete=\"off\"\n          canClose={Boolean(globalSearchChatId || searchDate)}\n          onChange={onSearchQuery}\n          onReset={onReset}\n          onFocus={handleSearchFocus}\n          onSpinnerClick={connectionStatusPosition === 'minimized' ? toggleConnectionStatus : undefined}\n        >\n          {selectedSearchDate && (\n            <PickerSelectedItem\n              icon=\"calendar\"\n              title={selectedSearchDate}\n              canClose\n              isMinimized={Boolean(globalSearchChatId)}\n              className=\"search-date\"\n              onClick={setGlobalSearchDate}\n              clickArg={clearedDateSearchParam}\n            />\n          )}\n          {globalSearchChatId && (\n            <PickerSelectedItem\n              chatOrUserId={globalSearchChatId}\n              onClick={setGlobalSearchChatId}\n              canClose\n              clickArg={clearedChatSearchParam}\n            />\n          )}\n        </SearchInput>\n        {isCurrentUserPremium && <StatusButton />}\n        {hasPasscode && (\n          <Button\n            round\n            ripple={!isMobile}\n            size=\"smaller\"\n            color=\"translucent\"\n            ariaLabel={`${lang('ShortcutsController.Others.LockByPasscode')} (Ctrl+Shift+L)`}\n            onClick={handleLockScreen}\n            className={buildClassName(!isCurrentUserPremium && 'extra-spacing')}\n          >\n            <i className=\"icon-lock\" />\n          </Button>\n        )}\n        <ShowTransition\n          isOpen={connectionStatusPosition === 'overlay'}\n          isCustom\n          className=\"connection-state-wrapper\"\n        >\n          <ConnectionStatusOverlay\n            connectionStatus={connectionStatus}\n            connectionStatusText={connectionStatusText!}\n            onClick={toggleConnectionStatus}\n          />\n        </ShowTransition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      query: searchQuery, fetchingStatus, chatId, date,\n    } = tabState.globalSearch;\n    const {\n      currentUserId, connectionState, isSyncing, archiveSettings,\n    } = global;\n    const { byId: chatsById } = global.chats;\n    const { isConnectionStatusMinimized, animationLevel } = global.settings.byKey;\n\n    return {\n      searchQuery,\n      isLoading: fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false,\n      currentUserId,\n      chatsById,\n      globalSearchChatId: chatId,\n      searchDate: date,\n      theme: selectTheme(global),\n      animationLevel,\n      connectionState,\n      isSyncing,\n      isMessageListOpen: Boolean(selectCurrentMessageList(global)),\n      isConnectionStatusMinimized,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      areChatsLoaded: Boolean(global.chats.listIds.active),\n      hasPasscode: Boolean(global.passcode.hasPasscode),\n      canInstall: Boolean(tabState.canInstall),\n      archiveSettings,\n    };\n  },\n)(LeftMainHeader));\n","const PERMANENT_VERSION_KEY = 'kz_version';\nconst AVAILABLE_VERSIONS = ['Z', 'K'] as const;\n\nexport function setPermanentWebVersion(version: typeof AVAILABLE_VERSIONS[number]) {\n  localStorage.setItem(PERMANENT_VERSION_KEY, JSON.stringify(version));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatFolder } from '../../../api/types';\nimport type { LeftColumnContent, SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\nimport type { GlobalState } from '../../../global/types';\n\nimport { ALL_FOLDER_ID } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { captureEvents, SwipeDirection } from '../../../util/captureEvents';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { selectTabState, selectIsForumPanelOpen } from '../../../global/selectors';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForUnreadCounters } from '../../../hooks/useFolderManager';\n\nimport Transition from '../../ui/Transition';\nimport TabList from '../../ui/TabList';\nimport ChatList from './ChatList';\n\ntype OwnProps = {\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  foldersDispatch: FolderEditDispatch;\n  onLeftColumnContentChange: (content: LeftColumnContent) => void;\n  shouldHideFolderTabs?: boolean;\n};\n\ntype StateProps = {\n  chatFoldersById: Record<number, ApiChatFolder>;\n  orderedFolderIds?: number[];\n  activeChatFolder: number;\n  currentUserId?: string;\n  isForumPanelOpen?: boolean;\n  lastSyncTime?: number;\n  shouldSkipHistoryAnimations?: boolean;\n  maxFolders: number;\n  hasArchivedChats?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nconst SAVED_MESSAGES_HOTKEY = '0';\nconst FIRST_FOLDER_INDEX = 0;\n\nconst ChatFolders: FC<OwnProps & StateProps> = ({\n  foldersDispatch,\n  onSettingsScreenSelect,\n  onLeftColumnContentChange,\n  chatFoldersById,\n  orderedFolderIds,\n  activeChatFolder,\n  currentUserId,\n  isForumPanelOpen,\n  lastSyncTime,\n  shouldSkipHistoryAnimations,\n  maxFolders,\n  shouldHideFolderTabs,\n  hasArchivedChats,\n  archiveSettings,\n}) => {\n  const {\n    loadChatFolders,\n    setActiveChatFolder,\n    openChat,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadChatFolders();\n    }\n  }, [lastSyncTime, loadChatFolders]);\n\n  const allChatsFolder = useMemo(() => {\n    return {\n      id: ALL_FOLDER_ID,\n      title: orderedFolderIds?.[0] === ALL_FOLDER_ID ? lang('FilterAllChatsShort') : lang('FilterAllChats'),\n    };\n  }, [orderedFolderIds, lang]);\n\n  const displayedFolders = useMemo(() => {\n    return orderedFolderIds\n      ? orderedFolderIds.map((id) => {\n        if (id === ALL_FOLDER_ID) {\n          return allChatsFolder;\n        }\n\n        return chatFoldersById[id] || {};\n      }).filter(Boolean)\n      : undefined;\n  }, [chatFoldersById, allChatsFolder, orderedFolderIds]);\n\n  const allChatsFolderIndex = displayedFolders?.findIndex((folder) => folder.id === ALL_FOLDER_ID);\n  const isInAllChatsFolder = allChatsFolderIndex === activeChatFolder;\n  const isInFirstFolder = FIRST_FOLDER_INDEX === activeChatFolder;\n\n  const folderCountersById = useFolderManagerForUnreadCounters();\n  const folderTabs = useMemo(() => {\n    if (!displayedFolders || !displayedFolders.length) {\n      return undefined;\n    }\n\n    return displayedFolders.map(({ id, title }, i) => {\n      const isBlocked = id !== ALL_FOLDER_ID && i > maxFolders - 1;\n\n      return ({\n        id,\n        title,\n        badgeCount: folderCountersById[id]?.chatsCount,\n        isBadgeActive: Boolean(folderCountersById[id]?.notificationsCount),\n        isBlocked,\n      });\n    });\n  }, [displayedFolders, folderCountersById, maxFolders]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    setActiveChatFolder({ activeChatFolder: index }, { forceOnHeavyAnimation: true });\n  }, [setActiveChatFolder]);\n\n  // Prevent `activeTab` pointing at non-existing folder after update\n  useEffect(() => {\n    if (!folderTabs?.length) {\n      return;\n    }\n\n    if (activeChatFolder >= folderTabs.length) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }, [activeChatFolder, folderTabs, setActiveChatFolder]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || !folderTabs?.length || isForumPanelOpen) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current!, {\n      selectorToPreventScroll: '.chat-list',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveChatFolder(\n            { activeChatFolder: Math.min(activeChatFolder + 1, folderTabs.length - 1) },\n            { forceOnHeavyAnimation: true },\n          );\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveChatFolder({ activeChatFolder: Math.max(0, activeChatFolder - 1) }, { forceOnHeavyAnimation: true });\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [activeChatFolder, folderTabs, isForumPanelOpen, setActiveChatFolder]);\n\n  const isNotInFirstFolderRef = useRef();\n  isNotInFirstFolderRef.current = !isInFirstFolder;\n  useEffect(() => (isNotInFirstFolderRef.current ? captureEscKeyListener(() => {\n    if (isNotInFirstFolderRef.current) {\n      setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX });\n    }\n  }) : undefined), [activeChatFolder, setActiveChatFolder]);\n\n  useHistoryBack({\n    isActive: !isInFirstFolder,\n    onBack: () => setActiveChatFolder({ activeChatFolder: FIRST_FOLDER_INDEX }, { forceOnHeavyAnimation: true }),\n  });\n\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.ctrlKey && e.shiftKey && e.code.startsWith('Digit') && folderTabs) {\n        const [, digit] = e.code.match(/Digit(\\d)/) || [];\n        if (!digit) return;\n\n        if (digit === SAVED_MESSAGES_HOTKEY) {\n          openChat({ id: currentUserId, shouldReplaceHistory: true });\n          return;\n        }\n\n        const folder = Number(digit) - 1;\n        if (folder > folderTabs.length - 1) return;\n\n        setActiveChatFolder({ activeChatFolder: folder }, { forceOnHeavyAnimation: true });\n        e.preventDefault();\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown, true);\n\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, true);\n    };\n  }, [currentUserId, folderTabs, openChat, setActiveChatFolder]);\n\n  const {\n    shouldRender: shouldRenderPlaceholder, transitionClassNames,\n  } = useShowTransition(!orderedFolderIds, undefined, true);\n\n  function renderCurrentTab(isActive: boolean) {\n    const activeFolder = Object.values(chatFoldersById)\n      .find(({ id }) => id === folderTabs![activeChatFolder].id);\n    const isFolder = activeFolder && !isInAllChatsFolder;\n\n    return (\n      <ChatList\n        folderType={isFolder ? 'folder' : 'all'}\n        folderId={isFolder ? activeFolder.id : undefined}\n        isActive={isActive}\n        isForumPanelOpen={isForumPanelOpen}\n        lastSyncTime={lastSyncTime}\n        foldersDispatch={foldersDispatch}\n        onSettingsScreenSelect={onSettingsScreenSelect}\n        onLeftColumnContentChange={onLeftColumnContentChange}\n        canDisplayArchive={hasArchivedChats && !archiveSettings.isHidden}\n        archiveSettings={archiveSettings}\n      />\n    );\n  }\n\n  const shouldRenderFolders = folderTabs && folderTabs.length > 1;\n\n  return (\n    <div\n      className={buildClassName(\n        'ChatFolders',\n        shouldRenderFolders && shouldHideFolderTabs && 'ChatFolders--tabs-hidden',\n      )}\n    >\n      {shouldRenderFolders ? (\n        <TabList tabs={folderTabs} activeTab={activeChatFolder} onSwitchTab={handleSwitchTab} areFolders />\n      ) : shouldRenderPlaceholder ? (\n        <div className={buildClassName('tabs-placeholder', transitionClassNames)} />\n      ) : undefined}\n      <Transition\n        ref={transitionRef}\n        name={shouldSkipHistoryAnimations ? 'none' : lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        activeKey={activeChatFolder}\n        renderCount={shouldRenderFolders ? folderTabs.length : undefined}\n      >\n        {renderCurrentTab}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chatFolders: {\n        byId: chatFoldersById,\n        orderedIds: orderedFolderIds,\n      },\n      chats: {\n        listIds: {\n          archived,\n        },\n      },\n      currentUserId,\n      lastSyncTime,\n      archiveSettings,\n    } = global;\n    const { shouldSkipHistoryAnimations, activeChatFolder } = selectTabState(global);\n\n    return {\n      chatFoldersById,\n      orderedFolderIds,\n      activeChatFolder,\n      currentUserId,\n      isForumPanelOpen: selectIsForumPanelOpen(global),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      hasArchivedChats: Boolean(archived?.length),\n      maxFolders: selectCurrentLimit(global, 'dialogFilters'),\n      archiveSettings,\n    };\n  },\n)(ChatFolders));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './LeftSearch';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst LeftSearchAsync: FC<OwnProps> = (props) => {\n  const LeftSearch = useModuleLoader(Bundles.Extra, 'LeftSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return LeftSearch ? <LeftSearch {...props} /> : <Loading />;\n};\n\nexport default memo(LeftSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './ContactList';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst ContactListAsync: FC<OwnProps> = (props) => {\n  const ContactList = useModuleLoader(Bundles.Extra, 'ContactList');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContactList ? <ContactList {...props} /> : <Loading />;\n};\n\nexport default memo(ContactListAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback, useMemo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './NewChatButton.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  onNewPrivateChat: () => void;\n  onNewChannel: () => void;\n  onNewGroup: () => void;\n};\n\nconst NewChatButton: FC<OwnProps> = ({\n  isShown,\n  onNewPrivateChat,\n  onNewChannel,\n  onNewGroup,\n}) => {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n  useEffect(() => {\n    if (!isShown) {\n      setIsMenuOpen(false);\n    }\n  }, [isShown]);\n\n  const lang = useLang();\n\n  const fabClassName = buildClassName(\n    'NewChatButton',\n    isShown && 'revealed',\n    isMenuOpen && 'menu-is-open',\n  );\n\n  const toggleIsMenuOpen = useCallback(() => {\n    setIsMenuOpen(!isMenuOpen);\n  }, [isMenuOpen]);\n\n  const handleClose = useCallback(() => {\n    setIsMenuOpen(false);\n  }, []);\n\n  const menuItems = useMemo(() => (\n    <>\n      <MenuItem icon=\"channel\" onClick={onNewChannel}>{lang('NewChannel')}</MenuItem>\n      <MenuItem icon=\"group\" onClick={onNewGroup}>{lang('NewGroup')}</MenuItem>\n      <MenuItem icon=\"user\" onClick={onNewPrivateChat}>{lang('NewMessageTitle')}</MenuItem>\n    </>\n  ), [lang, onNewChannel, onNewGroup, onNewPrivateChat]);\n\n  return (\n    <div className={fabClassName} dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"primary\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={toggleIsMenuOpen}\n        ariaLabel={lang(isMenuOpen ? 'Close' : 'NewMessageTitle')}\n        tabIndex={-1}\n      >\n        <i className=\"icon-new-chat-filled\" />\n        <i className=\"icon-close\" />\n      </Button>\n      <Menu\n        isOpen={isMenuOpen}\n        positionX={lang.isRtl ? 'left' : 'right'}\n        positionY=\"bottom\"\n        autoClose\n        onClose={handleClose}\n      >\n        {menuItems}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(NewChatButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { SettingsScreens } from '../../../types';\nimport { LeftColumnContent } from '../../../types';\nimport type { FolderEditDispatch } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useForumPanelRender from '../../../hooks/useForumPanelRender';\n\nimport Transition from '../../ui/Transition';\nimport LeftMainHeader from './LeftMainHeader';\nimport ChatFolders from './ChatFolders';\nimport LeftSearch from '../search/LeftSearch.async';\nimport ContactList from './ContactList.async';\nimport NewChatButton from '../NewChatButton';\nimport Button from '../../ui/Button';\nimport ForumPanel from './ForumPanel';\n\nimport './LeftMain.scss';\nimport { getActions } from '../../../global';\n\ntype OwnProps = {\n  content: LeftColumnContent;\n  searchQuery?: string;\n  searchDate?: number;\n  contactsFilter: string;\n  shouldSkipTransition?: boolean;\n  foldersDispatch: FolderEditDispatch;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  isClosingSearch?: boolean;\n  onSearchQuery: (query: string) => void;\n  onContentChange: (content: LeftColumnContent) => void;\n  onSettingsScreenSelect: (screen: SettingsScreens) => void;\n  onTopicSearch: NoneToVoidFunction;\n  onReset: () => void;\n};\n\nconst TRANSITION_RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\nconst BUTTON_CLOSE_DELAY_MS = 250;\n\nlet closeTimeout: number | undefined;\n\nconst LeftMain: FC<OwnProps> = ({\n  content,\n  searchQuery,\n  searchDate,\n  isClosingSearch,\n  contactsFilter,\n  shouldSkipTransition,\n  foldersDispatch,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  onSearchQuery,\n  onContentChange,\n  onSettingsScreenSelect,\n  onReset,\n  onTopicSearch,\n}) => {\n  const { closeForumPanel } = getActions();\n  const [isNewChatButtonShown, setIsNewChatButtonShown] = useState(IS_TOUCH_ENV);\n\n  const { shouldRenderForumPanel, handleForumPanelAnimationEnd } = useForumPanelRender(isForumPanelOpen);\n  const isForumPanelVisible = isForumPanelOpen && content === LeftColumnContent.ChatList;\n\n  const {\n    shouldRender: shouldRenderUpdateButton,\n    transitionClassNames: updateButtonClassNames,\n  } = useShowTransition(isUpdateAvailable);\n\n  const isMouseInside = useRef(false);\n\n  const handleMouseEnter = useCallback(() => {\n    if (content !== LeftColumnContent.ChatList) {\n      return;\n    }\n    isMouseInside.current = true;\n    setIsNewChatButtonShown(true);\n  }, [content]);\n\n  const handleMouseLeave = useCallback(() => {\n    isMouseInside.current = false;\n\n    if (closeTimeout) {\n      clearTimeout(closeTimeout);\n      closeTimeout = undefined;\n    }\n\n    closeTimeout = window.setTimeout(() => {\n      if (!isMouseInside.current) {\n        setIsNewChatButtonShown(false);\n      }\n    }, BUTTON_CLOSE_DELAY_MS);\n  }, []);\n\n  const handleSelectSettings = useCallback(() => {\n    onContentChange(LeftColumnContent.Settings);\n  }, [onContentChange]);\n\n  const handleSelectContacts = useCallback(() => {\n    onContentChange(LeftColumnContent.Contacts);\n  }, [onContentChange]);\n\n  const handleSelectArchived = useCallback(() => {\n    onContentChange(LeftColumnContent.Archived);\n    closeForumPanel();\n  }, [closeForumPanel, onContentChange]);\n\n  const handleUpdateClick = useCallback(() => {\n    window.location.reload();\n  }, []);\n\n  const handleSelectNewChannel = useCallback(() => {\n    onContentChange(LeftColumnContent.NewChannelStep1);\n  }, [onContentChange]);\n\n  const handleSelectNewGroup = useCallback(() => {\n    onContentChange(LeftColumnContent.NewGroupStep1);\n  }, [onContentChange]);\n\n  useEffect(() => {\n    let autoCloseTimeout: number | undefined;\n    if (content !== LeftColumnContent.ChatList) {\n      autoCloseTimeout = window.setTimeout(() => {\n        setIsNewChatButtonShown(false);\n      }, BUTTON_CLOSE_DELAY_MS);\n    } else if (isMouseInside.current || IS_TOUCH_ENV) {\n      setIsNewChatButtonShown(true);\n    }\n\n    return () => {\n      if (autoCloseTimeout) {\n        clearTimeout(autoCloseTimeout);\n        autoCloseTimeout = undefined;\n      }\n    };\n  }, [content]);\n\n  const lang = useLang();\n\n  return (\n    <div\n      id=\"LeftColumn-main\"\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n    >\n      <LeftMainHeader\n        shouldHideSearch={isForumPanelVisible}\n        content={content}\n        contactsFilter={contactsFilter}\n        onSearchQuery={onSearchQuery}\n        onSelectSettings={handleSelectSettings}\n        onSelectContacts={handleSelectContacts}\n        onSelectArchived={handleSelectArchived}\n        onReset={onReset}\n        shouldSkipTransition={shouldSkipTransition}\n        isClosingSearch={isClosingSearch}\n      />\n      <Transition\n        name={shouldSkipTransition ? 'none' : 'zoom-fade'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={content}\n        shouldCleanup\n        cleanupExceptionKey={LeftColumnContent.ChatList}\n      >\n        {(isActive) => {\n          switch (content) {\n            case LeftColumnContent.ChatList:\n              return (\n                <ChatFolders\n                  shouldHideFolderTabs={isForumPanelVisible}\n                  onSettingsScreenSelect={onSettingsScreenSelect}\n                  onLeftColumnContentChange={onContentChange}\n                  foldersDispatch={foldersDispatch}\n                />\n              );\n            case LeftColumnContent.GlobalSearch:\n              return (\n                <LeftSearch\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  isActive={isActive}\n                  onReset={onReset}\n                />\n              );\n            case LeftColumnContent.Contacts:\n              return <ContactList filter={contactsFilter} isActive={isActive} onReset={onReset} />;\n            default:\n              return undefined;\n          }\n        }}\n      </Transition>\n      {shouldRenderUpdateButton && (\n        <Button\n          fluid\n          pill\n          className={buildClassName('btn-update', updateButtonClassNames)}\n          onClick={handleUpdateClick}\n        >\n          {lang('lng_update_telegram')}\n        </Button>\n      )}\n      {shouldRenderForumPanel && (\n        <ForumPanel\n          isOpen={isForumPanelOpen}\n          isHidden={!isForumPanelVisible}\n          onTopicSearch={onTopicSearch}\n          onCloseAnimationEnd={handleForumPanelAnimationEnd}\n        />\n      )}\n      <NewChatButton\n        isShown={isNewChatButtonShown}\n        onNewPrivateChat={handleSelectContacts}\n        onNewChannel={handleSelectNewChannel}\n        onNewGroup={handleSelectNewGroup}\n      />\n    </div>\n  );\n};\n\nexport default memo(LeftMain);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Settings';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst SettingsAsync: FC<OwnProps> = (props) => {\n  const Settings = useModuleLoader(Bundles.Extra, 'Settings');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Settings ? <Settings {...props} /> : <Loading />;\n};\n\nexport default memo(SettingsAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './NewChat';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst NewChatAsync: FC<OwnProps> = (props) => {\n  const NewChat = useModuleLoader(Bundles.Extra, 'NewChat');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewChat ? <NewChat {...props} /> : <Loading />;\n};\n\nexport default memo(NewChatAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ArchivedChats';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst ArchivedChatsAsync: FC<OwnProps> = (props) => {\n  const ArchivedChats = useModuleLoader(Bundles.Extra, 'ArchivedChats');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ArchivedChats ? <ArchivedChats {...props} /> : <Loading />;\n};\n\nexport default memo(ArchivedChatsAsync);\n","import React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { GlobalState } from '../../global/types';\nimport { LeftColumnContent, SettingsScreens } from '../../types';\n\nimport { IS_MAC_OS, IS_PWA, LAYERS_ANIMATION_NAME } from '../../util/environment';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { selectTabState, selectCurrentChat, selectIsForumPanelOpen } from '../../global/selectors';\nimport useFoldersReducer from '../../hooks/reducers/useFoldersReducer';\nimport { useResize } from '../../hooks/useResize';\nimport { useHotkeys } from '../../hooks/useHotkeys';\nimport useSyncEffect from '../../hooks/useSyncEffect';\n\nimport Transition from '../ui/Transition';\nimport LeftMain from './main/LeftMain';\nimport Settings from './settings/Settings.async';\nimport NewChat from './newChat/NewChat.async';\nimport ArchivedChats from './ArchivedChats.async';\n\nimport './LeftColumn.scss';\n\ntype StateProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isFirstChatFolderActive: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  leftColumnWidth?: number;\n  currentUserId?: string;\n  hasPasscode?: boolean;\n  nextSettingsScreen?: SettingsScreens;\n  isChatOpen: boolean;\n  isUpdateAvailable?: boolean;\n  isForumPanelOpen?: boolean;\n  forumPanelChatId?: string;\n  isClosingSearch?: boolean;\n  archiveSettings: GlobalState['archiveSettings'];\n};\n\nenum ContentType {\n  Main,\n  // eslint-disable-next-line @typescript-eslint/no-shadow\n  Settings,\n  Archived,\n  // eslint-disable-next-line no-shadow\n  NewGroup,\n  // eslint-disable-next-line no-shadow\n  NewChannel,\n}\n\nconst RENDER_COUNT = Object.keys(ContentType).length / 2;\nconst RESET_TRANSITION_DELAY_MS = 250;\n\nconst LeftColumn: FC<StateProps> = ({\n  searchQuery,\n  searchDate,\n  isFirstChatFolderActive,\n  shouldSkipHistoryAnimations,\n  leftColumnWidth,\n  currentUserId,\n  hasPasscode,\n  nextSettingsScreen,\n  isChatOpen,\n  isUpdateAvailable,\n  isForumPanelOpen,\n  forumPanelChatId,\n  isClosingSearch,\n  archiveSettings,\n}) => {\n  const {\n    setGlobalSearchQuery,\n    setGlobalSearchClosing,\n    setGlobalSearchChatId,\n    resetChatCreation,\n    setGlobalSearchDate,\n    loadPasswordInfo,\n    clearTwoFaError,\n    setLeftColumnWidth,\n    resetLeftColumnWidth,\n    openChat,\n    requestNextSettingsScreen,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const resizeRef = useRef<HTMLDivElement>(null);\n  const [content, setContent] = useState<LeftColumnContent>(LeftColumnContent.ChatList);\n  const [settingsScreen, setSettingsScreen] = useState(SettingsScreens.Main);\n  const [contactsFilter, setContactsFilter] = useState<string>('');\n  const [foldersState, foldersDispatch] = useFoldersReducer();\n\n  // Used to reset child components in background.\n  const [lastResetTime, setLastResetTime] = useState<number>(0);\n\n  let contentType: ContentType = ContentType.Main;\n  switch (content) {\n    case LeftColumnContent.Archived:\n      contentType = ContentType.Archived;\n      break;\n    case LeftColumnContent.Settings:\n      contentType = ContentType.Settings;\n      break;\n    case LeftColumnContent.NewChannelStep1:\n    case LeftColumnContent.NewChannelStep2:\n      contentType = ContentType.NewChannel;\n      break;\n    case LeftColumnContent.NewGroupStep1:\n    case LeftColumnContent.NewGroupStep2:\n      contentType = ContentType.NewGroup;\n      break;\n  }\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    function fullReset() {\n      setContent(LeftColumnContent.ChatList);\n      setContactsFilter('');\n      setGlobalSearchClosing({ isClosing: true });\n      resetChatCreation();\n      setTimeout(() => {\n        setGlobalSearchQuery({ query: '' });\n        setGlobalSearchDate({ date: undefined });\n        setGlobalSearchChatId({ id: undefined });\n        setGlobalSearchClosing({ isClosing: false });\n        setLastResetTime(Date.now());\n      }, RESET_TRANSITION_DELAY_MS);\n    }\n\n    if (forceReturnToChatList === true) {\n      fullReset();\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep2) {\n      setContent(LeftColumnContent.NewGroupStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewChannelStep2) {\n      setContent(LeftColumnContent.NewChannelStep1);\n      return;\n    }\n\n    if (content === LeftColumnContent.NewGroupStep1) {\n      const pickerSearchInput = document.getElementById('new-group-picker-search');\n      if (pickerSearchInput) {\n        pickerSearchInput.blur();\n      }\n    }\n\n    if (content === LeftColumnContent.Settings) {\n      switch (settingsScreen) {\n        case SettingsScreens.EditProfile:\n        case SettingsScreens.Folders:\n        case SettingsScreens.General:\n        case SettingsScreens.Notifications:\n        case SettingsScreens.DataStorage:\n        case SettingsScreens.Privacy:\n        case SettingsScreens.ActiveSessions:\n        case SettingsScreens.Language:\n        case SettingsScreens.Stickers:\n        case SettingsScreens.Experimental:\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.GeneralChatBackground:\n          setSettingsScreen(SettingsScreens.General);\n          return;\n        case SettingsScreens.GeneralChatBackgroundColor:\n          setSettingsScreen(SettingsScreens.GeneralChatBackground);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumber:\n        case SettingsScreens.PrivacyLastSeen:\n        case SettingsScreens.PrivacyProfilePhoto:\n        case SettingsScreens.PrivacyPhoneCall:\n        case SettingsScreens.PrivacyPhoneP2P:\n        case SettingsScreens.PrivacyForwarding:\n        case SettingsScreens.PrivacyGroupChats:\n        case SettingsScreens.PrivacyVoiceMessages:\n        case SettingsScreens.PrivacyBlockedUsers:\n        case SettingsScreens.ActiveWebsites:\n        case SettingsScreens.TwoFaDisabled:\n        case SettingsScreens.TwoFaEnabled:\n        case SettingsScreens.TwoFaCongratulations:\n        case SettingsScreens.PasscodeDisabled:\n        case SettingsScreens.PasscodeEnabled:\n        case SettingsScreens.PasscodeCongratulations:\n          setSettingsScreen(SettingsScreens.Privacy);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscode:\n          setSettingsScreen(hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeCurrent:\n        case SettingsScreens.PasscodeTurnOff:\n          setSettingsScreen(SettingsScreens.PasscodeEnabled);\n          return;\n\n        case SettingsScreens.PasscodeNewPasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeNewPasscode);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeNew:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeCurrent);\n          return;\n\n        case SettingsScreens.PasscodeChangePasscodeConfirm:\n          setSettingsScreen(SettingsScreens.PasscodeChangePasscodeNew);\n          return;\n\n        case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n        case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneNumber);\n          return;\n        case SettingsScreens.PrivacyLastSeenAllowedContacts:\n        case SettingsScreens.PrivacyLastSeenDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyLastSeen);\n          return;\n        case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n        case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyProfilePhoto);\n          return;\n        case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n        case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneCall);\n          return;\n        case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n        case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyPhoneP2P);\n          return;\n        case SettingsScreens.PrivacyForwardingAllowedContacts:\n        case SettingsScreens.PrivacyForwardingDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyForwarding);\n          return;\n        case SettingsScreens.PrivacyVoiceMessagesAllowedContacts:\n        case SettingsScreens.PrivacyVoiceMessagesDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyVoiceMessages);\n          return;\n        case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n          setSettingsScreen(SettingsScreens.PrivacyGroupChats);\n          return;\n        case SettingsScreens.TwoFaNewPassword:\n          setSettingsScreen(SettingsScreens.TwoFaDisabled);\n          return;\n        case SettingsScreens.TwoFaNewPasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaNewPassword);\n          return;\n        case SettingsScreens.TwoFaNewPasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmail:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordHint);\n          return;\n        case SettingsScreens.TwoFaNewPasswordEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaNewPasswordEmail);\n          return;\n        case SettingsScreens.TwoFaChangePasswordCurrent:\n        case SettingsScreens.TwoFaTurnOff:\n        case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n          setSettingsScreen(SettingsScreens.TwoFaEnabled);\n          return;\n        case SettingsScreens.TwoFaChangePasswordNew:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordCurrent);\n          return;\n        case SettingsScreens.TwoFaChangePasswordConfirm:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordNew);\n          return;\n        case SettingsScreens.TwoFaChangePasswordHint:\n          setSettingsScreen(SettingsScreens.TwoFaChangePasswordConfirm);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmail:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmailCurrentPassword);\n          return;\n        case SettingsScreens.TwoFaRecoveryEmailCode:\n          setSettingsScreen(SettingsScreens.TwoFaRecoveryEmail);\n          return;\n\n        case SettingsScreens.FoldersCreateFolder:\n        case SettingsScreens.FoldersEditFolder:\n          setSettingsScreen(SettingsScreens.Folders);\n          return;\n\n        case SettingsScreens.FoldersIncludedChatsFromChatList:\n        case SettingsScreens.FoldersExcludedChatsFromChatList:\n          setSettingsScreen(SettingsScreens.FoldersEditFolderFromChatList);\n          return;\n\n        case SettingsScreens.FoldersEditFolderFromChatList:\n          setContent(LeftColumnContent.ChatList);\n          setSettingsScreen(SettingsScreens.Main);\n          return;\n\n        case SettingsScreens.QuickReaction:\n        case SettingsScreens.CustomEmoji:\n          setSettingsScreen(SettingsScreens.Stickers);\n          return;\n\n        case SettingsScreens.DoNotTranslate:\n          setSettingsScreen(SettingsScreens.Language);\n          return;\n        default:\n          break;\n      }\n    }\n\n    if (content === LeftColumnContent.ChatList && isFirstChatFolderActive) {\n      setContent(LeftColumnContent.GlobalSearch);\n\n      return;\n    }\n\n    fullReset();\n  }, [\n    content, isFirstChatFolderActive, setGlobalSearchClosing, resetChatCreation, setGlobalSearchQuery,\n    setGlobalSearchDate, setGlobalSearchChatId, settingsScreen, hasPasscode,\n  ]);\n\n  const handleSearchQuery = useCallback((query: string) => {\n    if (content === LeftColumnContent.Contacts) {\n      setContactsFilter(query);\n      return;\n    }\n\n    setContent(LeftColumnContent.GlobalSearch);\n\n    if (query !== searchQuery) {\n      setGlobalSearchQuery({ query });\n    }\n  }, [content, searchQuery, setGlobalSearchQuery]);\n\n  const handleTopicSearch = useCallback(() => {\n    setContent(LeftColumnContent.GlobalSearch);\n    setGlobalSearchQuery({ query: '' });\n    setGlobalSearchChatId({ id: forumPanelChatId });\n  }, [forumPanelChatId, setGlobalSearchChatId, setGlobalSearchQuery]);\n\n  useEffect(\n    () => (content !== LeftColumnContent.ChatList || (isFirstChatFolderActive && !isChatOpen && !isForumPanelOpen)\n      ? captureEscKeyListener(() => handleReset())\n      : undefined),\n    [isFirstChatFolderActive, content, handleReset, isChatOpen, isForumPanelOpen],\n  );\n\n  const handleHotkeySearch = useCallback((e: KeyboardEvent) => {\n    if (content === LeftColumnContent.GlobalSearch) {\n      return;\n    }\n\n    e.preventDefault();\n    setContent(LeftColumnContent.GlobalSearch);\n  }, [content]);\n\n  const handleHotkeySavedMessages = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    openChat({ id: currentUserId, shouldReplaceHistory: true });\n  }, [currentUserId, openChat]);\n\n  const handleArchivedChats = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Archived);\n  }, []);\n\n  const handleHotkeySettings = useCallback((e: KeyboardEvent) => {\n    e.preventDefault();\n    setContent(LeftColumnContent.Settings);\n  }, []);\n\n  useHotkeys({\n    'Mod+Shift+F': handleHotkeySearch,\n    'Mod+Shift+S': handleHotkeySavedMessages,\n    ...(IS_PWA && {\n      'Mod+0': handleHotkeySavedMessages,\n      'Mod+9': handleArchivedChats,\n    }),\n    ...(IS_MAC_OS && IS_PWA && { 'Mod+,': handleHotkeySettings }),\n  });\n\n  useEffect(() => {\n    clearTwoFaError();\n\n    if (settingsScreen === SettingsScreens.Privacy) {\n      loadPasswordInfo();\n    }\n  }, [clearTwoFaError, loadPasswordInfo, settingsScreen]);\n\n  useSyncEffect(() => {\n    if (nextSettingsScreen !== undefined) {\n      setContent(LeftColumnContent.Settings);\n      setSettingsScreen(nextSettingsScreen);\n      requestNextSettingsScreen({ screen: undefined });\n    }\n  }, [nextSettingsScreen, requestNextSettingsScreen]);\n\n  const {\n    initResize, resetResize, handleMouseUp,\n  } = useResize(resizeRef, (n) => setLeftColumnWidth({\n    leftColumnWidth: n,\n  }), resetLeftColumnWidth, leftColumnWidth, '--left-column-width');\n\n  const handleSettingsScreenSelect = useCallback((screen: SettingsScreens) => {\n    setContent(LeftColumnContent.Settings);\n    setSettingsScreen(screen);\n  }, []);\n\n  return (\n    <div\n      id=\"LeftColumn\"\n      ref={resizeRef}\n    >\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : LAYERS_ANIMATION_NAME}\n        renderCount={RENDER_COUNT}\n        activeKey={contentType}\n        shouldCleanup\n        cleanupExceptionKey={ContentType.Main}\n      >\n        {(isActive) => {\n          switch (contentType) {\n            case ContentType.Archived:\n              return (\n                <ArchivedChats\n                  isActive={isActive}\n                  onReset={handleReset}\n                  onTopicSearch={handleTopicSearch}\n                  foldersDispatch={foldersDispatch}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onLeftColumnContentChange={setContent}\n                  isForumPanelOpen={isForumPanelOpen}\n                  archiveSettings={archiveSettings}\n                />\n              );\n            case ContentType.Settings:\n              return (\n                <Settings\n                  isActive={isActive}\n                  currentScreen={settingsScreen}\n                  foldersState={foldersState}\n                  foldersDispatch={foldersDispatch}\n                  onScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                />\n              );\n            case ContentType.NewChannel:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  isChannel\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            case ContentType.NewGroup:\n              return (\n                <NewChat\n                  key={lastResetTime}\n                  isActive={isActive}\n                  content={content}\n                  onContentChange={setContent}\n                  onReset={handleReset}\n                />\n              );\n            default:\n              return (\n                <LeftMain\n                  content={content}\n                  isClosingSearch={isClosingSearch}\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  contactsFilter={contactsFilter}\n                  foldersDispatch={foldersDispatch}\n                  onContentChange={setContent}\n                  onSearchQuery={handleSearchQuery}\n                  onSettingsScreenSelect={handleSettingsScreenSelect}\n                  onReset={handleReset}\n                  shouldSkipTransition={shouldSkipHistoryAnimations}\n                  isUpdateAvailable={isUpdateAvailable}\n                  isForumPanelOpen={isForumPanelOpen}\n                  onTopicSearch={handleTopicSearch}\n                />\n              );\n          }\n        }}\n      </Transition>\n      <div\n        className=\"resize-handle\"\n        onMouseDown={initResize}\n        onMouseUp={handleMouseUp}\n        onDoubleClick={resetResize}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const tabState = selectTabState(global);\n    const {\n      globalSearch: {\n        query,\n        date,\n      },\n      shouldSkipHistoryAnimations,\n      activeChatFolder,\n      nextSettingsScreen,\n    } = tabState;\n    const {\n      leftColumnWidth,\n      currentUserId,\n      passcode: {\n        hasPasscode,\n      },\n      isUpdateAvailable,\n      archiveSettings,\n    } = global;\n\n    const currentChat = selectCurrentChat(global);\n    const isChatOpen = Boolean(currentChat?.id);\n    const isForumPanelOpen = selectIsForumPanelOpen(global);\n    const forumPanelChatId = tabState.forumPanelChatId;\n\n    return {\n      searchQuery: query,\n      searchDate: date,\n      isFirstChatFolderActive: activeChatFolder === 0,\n      shouldSkipHistoryAnimations,\n      leftColumnWidth,\n      currentUserId,\n      hasPasscode,\n      nextSettingsScreen,\n      isChatOpen,\n      isUpdateAvailable,\n      isForumPanelOpen,\n      forumPanelChatId,\n      isClosingSearch: tabState.globalSearch.isClosing,\n      archiveSettings,\n    };\n  },\n)(LeftColumn));\n","import type { RefObject } from 'react';\nimport {\n  useState, useEffect, useLayoutEffect, useCallback,\n} from '../lib/teact/teact';\nimport useFlag from './useFlag';\n\nexport function useResize(\n  elementRef: RefObject<HTMLElement>,\n  onResize: (width: number) => void,\n  onReset: NoneToVoidFunction,\n  initialWidth?: number,\n  cssPropertyName?: string,\n) {\n  const [isActive, markIsActive, unmarkIsActive] = useFlag();\n  const [initialMouseX, setInitialMouseX] = useState<number>();\n  const [initialElementWidth, setInitialElementWidth] = useState<number>();\n\n  const setElementStyle = useCallback((width?: number) => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const widthPx = width ? `${width}px` : '';\n    elementRef.current.style.width = widthPx;\n    if (cssPropertyName) {\n      elementRef.current.style.setProperty(cssPropertyName, widthPx);\n    }\n  }, [cssPropertyName, elementRef]);\n\n  useLayoutEffect(() => {\n    if (!elementRef.current || !initialWidth) {\n      return;\n    }\n\n    setElementStyle(initialWidth);\n  }, [cssPropertyName, elementRef, initialWidth, setElementStyle]);\n\n  function handleMouseUp() {\n    document.body.classList.remove('cursor-ew-resize');\n  }\n\n  function initResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n\n    document.body.classList.add('cursor-ew-resize');\n\n    setInitialMouseX(e.clientX);\n    setInitialElementWidth(elementRef.current!.offsetWidth);\n    markIsActive();\n  }\n\n  function resetResize(e: React.MouseEvent<HTMLElement, MouseEvent>) {\n    e.preventDefault();\n    setElementStyle(undefined);\n    onReset();\n  }\n\n  useEffect(() => {\n    if (!isActive) return undefined;\n\n    const handleMouseMove = (e: MouseEvent) => {\n      const newWidth = Math.ceil(initialElementWidth + e.clientX - initialMouseX);\n      setElementStyle(newWidth);\n    };\n\n    function stopDrag() {\n      cleanup();\n      onResize(elementRef.current!.offsetWidth);\n    }\n\n    function cleanup() {\n      handleMouseUp();\n      document.removeEventListener('mousemove', handleMouseMove, false);\n      document.removeEventListener('mouseup', stopDrag, false);\n      document.removeEventListener('blur', stopDrag, false);\n      unmarkIsActive();\n    }\n\n    document.addEventListener('mousemove', handleMouseMove, false);\n    document.addEventListener('mouseup', stopDrag, false);\n    document.addEventListener('blur', stopDrag, false);\n\n    return cleanup;\n  }, [initialElementWidth, initialMouseX, elementRef, onResize, isActive, unmarkIsActive, setElementStyle]);\n\n  return { initResize, resetResize, handleMouseUp };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef,\n  useEffect,\n  useMemo,\n  memo,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  count: number;\n  index: number;\n};\n\nconst BORDER_MASK_LEVEL = 4;\n\nconst PinnedMessageNavigation: FC<OwnProps> = ({\n  count, index,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const markupParams = useMemo(() => {\n    return calculateMarkup(count, index);\n  }, [count, index]);\n\n  useEffect(() => {\n    if (!containerRef.current) {\n      return;\n    }\n\n    const {\n      trackHeight,\n      trackTranslateY,\n      markHeight,\n      markTranslateY,\n      clipPathId,\n      clipPath,\n    } = markupParams;\n\n    const firstChild = containerRef.current.firstElementChild;\n    if (containerRef?.current) {\n      const currentElement = containerRef.current;\n      const { style } = currentElement;\n      style.height = `${trackHeight}px`;\n      style.transform = `translateY(-${trackTranslateY}px)`;\n      style.clipPath = `url(\"#${clipPathId}\")`;\n      const svg = currentElement.querySelector('svg');\n      const div = currentElement.querySelector('div');\n      const defs = currentElement.querySelector('defs');\n      if (!svg) {\n        if (firstChild) {\n          firstChild.innerHTML = `<svg height=\"0\" width=\"0\"><defs> ${clipPath} </defs></svg>`;\n        }\n      }\n      if (defs) {\n        defs.innerHTML = clipPath;\n      }\n      if (div) {\n        div.style.height = `${markHeight}px`;\n        div.style.transform = `translateY(${markTranslateY}px)`;\n      }\n    }\n  }, [markupParams]);\n\n  if (count === 1) {\n    return (\n      <div className=\"pinned-message-border\">\n        <div\n          className=\"pinned-message-border-wrapper-1\"\n          ref={containerRef}\n        />\n      </div>\n    );\n  }\n\n  const {\n    trackHeight, trackTranslateY, markHeight, markTranslateY, clipPathId,\n  } = markupParams;\n\n  return (\n    <div className={buildClassName('pinned-message-border', count > BORDER_MASK_LEVEL && 'pinned-message-border-mask')}>\n      <div\n        className=\"pinned-message-border-wrapper\"\n        ref={containerRef}\n        style={\n          `clip-path: url(\"#${clipPathId}\"); width: 2px;\n          height: ${trackHeight}px; transform: translateY(-${trackTranslateY}px);`\n        }\n      >\n        <span />\n        <div\n          className=\"pinned-message-border-mark\"\n          style={`height: ${markHeight}px; transform: translateY(${markTranslateY}px);`}\n        />\n      </div>\n    </div>\n  );\n};\n\nfunction calculateMarkup(count: number, index: number) {\n  const reverseIndex = count - index - 1;\n  const barHeight = getBarHeight(count);\n  const markHeight = getMarkHeight(count, reverseIndex);\n  const trackHeight = getTrackHeight(count, barHeight);\n\n  const clipPathId = `clipPath${count}`;\n  const clipPath = getClipPath(clipPathId, barHeight, count);\n\n  const markTranslateY = getMarkTranslateY(reverseIndex, barHeight, count);\n  const trackTranslateY = getTrackTranslateY(reverseIndex, count, barHeight, trackHeight);\n  return {\n    markHeight,\n    clipPath,\n    markTranslateY,\n    trackTranslateY,\n    trackHeight,\n    clipPathId,\n  };\n}\n\nfunction getBarHeight(count: number): number {\n  let barHeight = 8;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getMarkHeight(count: number, index: number) {\n  let barHeight = 36;\n  if (count === 1) {\n    barHeight = 36;\n  } else if (count === 2) {\n    barHeight = 17;\n  } else if (count === 3) {\n    barHeight = index === 1 ? 12 : 11;\n  } else if (count === 4) {\n    barHeight = 7.5;\n  } else if (count > 3) {\n    barHeight = 7.5;\n  }\n\n  return barHeight;\n}\n\nfunction getTrackHeight(count: number, barHeight: number) {\n  return count <= 3 ? 36 : barHeight * count + 2 * (count - 1);\n}\n\nfunction getClipPath(id: string, barHeight: number, count: number) {\n  const radius = 1;\n\n  let d = '';\n  if (count === 3) {\n    d = drawRect(0, 0, 2, barHeight, radius)\n      + drawRect(0, 12, 2, barHeight + 1, radius)\n      + drawRect(0, 25, 2, barHeight, radius);\n  } else {\n    for (let i = 0; i < count; i++) {\n      d += drawRect(0, (barHeight + 2) * i, 2, barHeight, radius);\n    }\n  }\n\n  return (\n    `<clipPath id=\"${id}\">\n      <path d=\"${d}\" />\n    </clipPath>`\n  );\n}\n\nfunction drawRect(x: number, y: number, width: number, height: number, radius: number) {\n  return `M${x},${y + radius}a${radius},${radius},0,0,1,\n  ${width},0v${height - 2 * radius}a${radius},${radius},0,0,1,${-width},0Z`;\n}\n\nfunction getMarkTranslateY(index: number, barHeight: number, count: number) {\n  if (count === 1) {\n    return 0;\n  } else if (count === 2) {\n    return index === 0 ? 0 : barHeight + 2;\n  }\n\n  if (count === 3) {\n    if (index === 0) {\n      return 0;\n    } else if (index === 1) {\n      return 12;\n    }\n\n    return 25;\n  } else {\n    return (barHeight + 2) * index;\n  }\n}\n\nfunction getTrackTranslateY(index: number, count: number, barHeight: number, trackHeight: number) {\n  if (count <= 4) {\n    return 0;\n  }\n\n  if (index <= 1) {\n    return 0;\n  } else if (index >= count - 2) {\n    return trackHeight - 36;\n  }\n\n  return (barHeight + 4) / 2 + (index - 2) * (barHeight + 2);\n}\n\nexport default memo(PinnedMessageNavigation);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { getPictogramDimensions } from '../common/helpers/mediaDimensions';\nimport {\n  getMessageIsSpoiler,\n  getMessageMediaHash, getMessageSingleInlineButton,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport renderText from '../common/helpers/renderText';\n\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useFlag from '../../hooks/useFlag';\nimport useLang from '../../hooks/useLang';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport PinnedMessageNavigation from './PinnedMessageNavigation';\nimport MessageSummary from '../common/MessageSummary';\nimport MediaSpoiler from '../common/MediaSpoiler';\n\ntype OwnProps = {\n  message: ApiMessage;\n  index: number;\n  count: number;\n  customTitle?: string;\n  className?: string;\n  onUnpinMessage?: (id: number) => void;\n  onClick?: () => void;\n  onAllPinnedClick?: () => void;\n};\n\nconst HeaderPinnedMessage: FC<OwnProps> = ({\n  message, count, index, customTitle, className, onUnpinMessage, onClick, onAllPinnedClick,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const lang = useLang();\n  const mediaThumbnail = useThumbnail(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'pictogram'));\n\n  const isSpoiler = getMessageIsSpoiler(message);\n\n  const [isUnpinDialogOpen, openUnpinDialog, closeUnpinDialog] = useFlag();\n\n  const handleUnpinMessage = useCallback(() => {\n    closeUnpinDialog();\n\n    if (onUnpinMessage) {\n      onUnpinMessage(message.id);\n    }\n  }, [closeUnpinDialog, onUnpinMessage, message.id]);\n\n  const inlineButton = getMessageSingleInlineButton(message);\n\n  const handleInlineButtonClick = useCallback(() => {\n    if (inlineButton) {\n      clickBotInlineButton({ messageId: message.id, button: inlineButton });\n    }\n  }, [clickBotInlineButton, inlineButton, message.id]);\n\n  const [noHoverColor, markNoHoverColor, unmarkNoHoverColor] = useFlag();\n\n  return (\n    <div className={buildClassName('HeaderPinnedMessage-wrapper', className)}>\n      {count > 1 && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          className=\"pin-list-button\"\n          ariaLabel={lang('EventLogFilterPinnedMessages')}\n          onClick={onAllPinnedClick}\n        >\n          <i className=\"icon-pin-list\" />\n        </Button>\n      )}\n      {onUnpinMessage && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          ariaLabel={lang('UnpinMessageAlertTitle')}\n          className=\"unpin-button\"\n          onClick={openUnpinDialog}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <ConfirmDialog\n        isOpen={isUnpinDialogOpen}\n        onClose={closeUnpinDialog}\n        text=\"Would you like to unpin this message?\"\n        confirmLabel=\"Unpin\"\n        confirmHandler={handleUnpinMessage}\n      />\n      <div\n        className={buildClassName('HeaderPinnedMessage', noHoverColor && 'no-hover')}\n        onClick={onClick}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        <PinnedMessageNavigation\n          count={count}\n          index={index}\n        />\n        {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isSpoiler)}\n        <div className=\"message-text\">\n          <div className=\"title\" dir=\"auto\">\n            {customTitle ? renderText(customTitle) : `${lang('PinnedMessage')} ${index > 0 ? `#${count - index}` : ''}`}\n          </div>\n          <p dir=\"auto\">\n            <MessageSummary lang={lang} message={message} noEmoji={Boolean(mediaThumbnail)} />\n          </p>\n          <RippleEffect />\n        </div>\n        {inlineButton && (\n          <Button\n            size=\"tiny\"\n            className=\"inline-button\"\n            onClick={handleInlineButtonClick}\n            shouldStopPropagation\n            onMouseEnter={!IS_TOUCH_ENV ? markNoHoverColor : undefined}\n            onMouseLeave={!IS_TOUCH_ENV ? unmarkNoHoverColor : undefined}\n          >\n            {inlineButton.text}\n          </Button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPictogram(thumbDataUri: string, blobUrl?: string, isSpoiler?: boolean) {\n  const { width, height } = getPictogramDimensions();\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className=\"pinned-thumb\">\n      {!isSpoiler && <img className=\"pinned-thumb-image\" src={srcUrl} width={width} height={height} alt=\"\" />}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n    </div>\n  );\n}\n\nexport default memo(HeaderPinnedMessage);\n","import { getAverageColor, getColorLuma } from './colors';\n\nconst LUMA_THRESHOLD = 240;\n\nexport function scaleImage(image: string | Blob, ratio: number, outputType: string = 'image/png'): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, img.width * ratio, img.height * ratio, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nexport function resizeImage(\n  image: string | Blob, width: number, height: number, outputType: string = 'image/png',\n): Promise<string> {\n  const url = image instanceof Blob ? URL.createObjectURL(image) : image;\n  const img = new Image();\n  return new Promise((resolve) => {\n    img.onload = () => {\n      scale(img, width, height, outputType)\n        .then((blob) => {\n          if (!blob) throw new Error('Image resize failed!');\n          return URL.createObjectURL(blob);\n        })\n        .then(resolve)\n        .finally(() => {\n          if (image instanceof Blob) {\n            URL.revokeObjectURL(url); // Revoke blob url that we created\n          }\n        });\n    };\n    img.src = url;\n  });\n}\n\nasync function scale(\n  img: HTMLImageElement, width: number, height: number, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  // Safari does not have built-in resize method with quality control\n  if ('createImageBitmap' in window) {\n    try {\n      const bitmap = await window.createImageBitmap(img,\n        { resizeWidth: width, resizeHeight: height, resizeQuality: 'high' });\n      if (bitmap.height !== height || bitmap.width !== width) {\n        throw new Error('Image bitmap resize not supported!'); // FF93 added support for options, but not resize\n      }\n      const averageColor = await getAverageColor(img.src);\n      const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n      return await new Promise((res) => {\n        const canvas = document.createElement('canvas');\n        canvas.width = bitmap.width;\n        canvas.height = bitmap.height;\n        const ctx2D = canvas.getContext('2d')!;\n        ctx2D.fillStyle = fillColor;\n        ctx2D.fillRect(0, 0, canvas.width, canvas.height);\n        const ctx = canvas.getContext('bitmaprenderer');\n        if (ctx) {\n          ctx.transferFromImageBitmap(bitmap);\n        } else {\n          ctx2D.drawImage(bitmap, 0, 0);\n        }\n        canvas.toBlob(res, outputType);\n      });\n    } catch (e) {\n      // Fallback. Firefox below 93 does not recognize `createImageBitmap` with 2 parameters\n      return steppedScale(img, width, height, undefined, outputType);\n    }\n  } else {\n    return steppedScale(img, width, height, undefined, outputType);\n  }\n}\n\nasync function steppedScale(\n  img: HTMLImageElement, width: number, height: number, step: number = 0.5, outputType: string = 'image/png',\n): Promise<Blob | null> {\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n  const oc = document.createElement('canvas');\n  const octx = oc.getContext('2d')!;\n\n  canvas.width = width;\n  canvas.height = height;\n\n  if (img.width * step > width) { // For performance avoid unnecessary drawing\n    const mul = 1 / step;\n    let cur = {\n      width: Math.floor(img.width * step),\n      height: Math.floor(img.height * step),\n    };\n\n    oc.width = cur.width;\n    oc.height = cur.height;\n\n    octx.drawImage(img, 0, 0, cur.width, cur.height);\n\n    while (cur.width * step > width) {\n      cur = {\n        width: Math.floor(cur.width * step),\n        height: Math.floor(cur.height * step),\n      };\n      octx.drawImage(oc, 0, 0, cur.width * mul, cur.height * mul, 0, 0, cur.width, cur.height);\n    }\n\n    ctx.drawImage(oc, 0, 0, cur.width, cur.height, 0, 0, canvas.width, canvas.height);\n  } else {\n    ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n  }\n\n  const averageColor = await getAverageColor(img.src);\n  const fillColor = getColorLuma(averageColor) < LUMA_THRESHOLD ? '#fff' : '#000';\n  ctx.fillStyle = fillColor;\n  ctx.globalCompositeOperation = 'destination-over';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  return new Promise((resolve) => {\n    canvas.toBlob(resolve, outputType);\n  });\n}\n","import { useMemo } from '../lib/teact/teact';\n\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser, ApiVoice,\n} from '../api/types';\n\nimport {\n  getAudioHasCover, getChatAvatarHash, getChatTitle, getMessageContent, getMessageMediaHash, getSenderTitle,\n} from '../global/helpers';\nimport { buildMediaMetadata } from '../util/mediaSession';\nimport { scaleImage, resizeImage } from '../util/imageResize';\nimport { AVATAR_FULL_DIMENSIONS } from '../components/common/helpers/mediaDimensions';\n\nimport useLang from './useLang';\nimport useMedia from './useMedia';\nimport useAsync from './useAsync';\n\nimport telegramLogoPath from '../assets/telegram-logo-filled.svg';\n\nconst LOGO_DIMENSIONS = { width: 200, height: 200 };\nconst MINIMAL_SIZE = 115; // spec says 100, but on Chrome 93 it's not showing\n\n// TODO Add support for video in future\nconst useMessageMediaMetadata = (\n  message: ApiMessage, sender?: ApiUser | ApiChat, chat?: ApiChat,\n): MediaMetadata | undefined => {\n  const lang = useLang();\n\n  const { audio, voice } = getMessageContent(message);\n  const title = audio ? (audio.title || audio.fileName) : voice ? 'Voice message' : '';\n  const artist = audio?.performer || (sender && getSenderTitle(lang, sender));\n  const album = (chat && getChatTitle(lang, chat)) || 'Telegram';\n\n  const audioCoverHash = (audio && getAudioHasCover(audio) && getMessageMediaHash(message, 'pictogram'));\n  const avatarHash = sender && getChatAvatarHash(sender, 'big');\n  const hash = (audio && audioCoverHash) || (voice && avatarHash);\n  const media = useMedia(hash);\n\n  const size = useMemo(() => {\n    return getCoverSize(audio, voice, media);\n  }, [audio, media, voice]);\n  const { result: url } = useAsync(() => (\n    makeGoodArtwork(media, size)\n  ), [media, size], telegramLogoPath);\n  return useMemo(() => {\n    return buildMediaMetadata({\n      title,\n      artist,\n      album,\n      artwork: [{ src: url }],\n    });\n  }, [album, artist, title, url]);\n};\n\nfunction makeGoodArtwork(url?: string, size?: { width: number; height: number }): Promise<string> {\n  if (!url) return Promise.resolve(telegramLogoPath);\n  if (!size) return resizeImage(url, MINIMAL_SIZE, MINIMAL_SIZE);\n  const min = Math.min(size.width, size.height);\n  if (min < MINIMAL_SIZE) {\n    const ratio = MINIMAL_SIZE / min;\n    return scaleImage(url, ratio);\n  }\n  return Promise.resolve(url);\n}\n\nfunction getCoverSize(audio?: ApiAudio, voice?: ApiVoice, url?: string) {\n  if (!url) return LOGO_DIMENSIONS;\n  if (audio) {\n    if (!audio.thumbnailSizes?.length) return undefined;\n    const preferred = audio.thumbnailSizes.find((size) => size.type === 'm');\n    return preferred || audio.thumbnailSizes[0]; // Sometimes `m` is not present\n  }\n\n  if (voice) {\n    return AVATAR_FULL_DIMENSIONS;\n  }\n\n  return undefined;\n}\n\nexport default useMessageMediaMetadata;\n","import React, { useCallback, useMemo, useRef } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { AudioOrigin } from '../../types';\nimport type {\n  ApiAudio, ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\n\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION } from '../../config';\n\nimport * as mediaLoader from '../../util/mediaLoader';\nimport {\n  getMediaDuration, getMessageContent, getMessageMediaHash, getSenderTitle, isMessageLocal,\n} from '../../global/helpers';\nimport { selectChat, selectTabState, selectSender } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { makeTrackId } from '../../util/audioPlayer';\nimport { clearMediaSession } from '../../util/mediaSession';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useAudioPlayer from '../../hooks/useAudioPlayer';\nimport useMessageMediaMetadata from '../../hooks/useMessageMediaMetadata';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport RippleEffect from '../ui/RippleEffect';\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './AudioPlayer.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  origin?: AudioOrigin;\n  className?: string;\n  noUi?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiChat | ApiUser;\n  chat?: ApiChat;\n  volume: number;\n  playbackRate: number;\n  isPlaybackRateActive?: boolean;\n  isMuted: boolean;\n};\n\nconst PLAYBACK_RATES: Record<number, number> = {\n  0.5: 0.66,\n  0.75: 0.8,\n  1: 1,\n  1.5: 1.4,\n  2: 1.8,\n};\nconst PLAYBACK_RATE_VALUES = Object.keys(PLAYBACK_RATES).sort().map(Number);\n\nconst REGULAR_PLAYBACK_RATE = 1;\nconst DEFAULT_FAST_PLAYBACK_RATE = 2;\n\nconst AudioPlayer: FC<OwnProps & StateProps> = ({\n  message,\n  className,\n  noUi,\n  sender,\n  chat,\n  volume,\n  playbackRate,\n  isPlaybackRateActive,\n  isMuted,\n}) => {\n  const {\n    setAudioPlayerVolume,\n    setAudioPlayerPlaybackRate,\n    setAudioPlayerMuted,\n    focusMessage,\n    closeAudioPlayer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n  const { audio, voice, video } = getMessageContent(message);\n  const isVoice = Boolean(voice || video);\n  const shouldRenderPlaybackButton = isVoice || (audio?.duration || 0) > PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION;\n  const senderName = sender ? getSenderTitle(lang, sender) : undefined;\n  const mediaData = mediaLoader.getFromMemory(getMessageMediaHash(message, 'inline')!) as (string | undefined);\n  const mediaMetadata = useMessageMediaMetadata(message, sender, chat);\n\n  const {\n    playPause,\n    stop,\n    isPlaying,\n    requestNextTrack,\n    requestPreviousTrack,\n    isFirst,\n    isLast,\n    setVolume,\n    toggleMuted,\n    setPlaybackRate,\n  } = useAudioPlayer(\n    makeTrackId(message),\n    getMediaDuration(message)!,\n    isVoice ? 'voice' : 'audio',\n    mediaData,\n    undefined,\n    mediaMetadata,\n    undefined,\n    true,\n    undefined,\n    undefined,\n    isMessageLocal(message),\n    true,\n  );\n\n  const {\n    isContextMenuOpen,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId: message.chatId, messageId: message.id });\n  }, [focusMessage, message.chatId, message.id]);\n\n  const handleClose = useCallback(() => {\n    if (isPlaying) {\n      playPause();\n    }\n    closeAudioPlayer();\n    clearMediaSession();\n    stop();\n  }, [closeAudioPlayer, isPlaying, playPause, stop]);\n\n  const handleVolumeChange = useCallback((value: number) => {\n    setAudioPlayerVolume({ volume: value / 100 });\n\n    setVolume(value / 100);\n  }, [setAudioPlayerVolume, setVolume]);\n\n  const handleVolumeClick = useCallback(() => {\n    if (IS_TOUCH_ENV && !IS_IOS) return;\n    toggleMuted();\n    setAudioPlayerMuted({ isMuted: !isMuted });\n  }, [isMuted, setAudioPlayerMuted, toggleMuted]);\n\n  const updatePlaybackRate = useCallback((newRate: number, isActive = true) => {\n    const rate = PLAYBACK_RATES[newRate];\n    const shouldBeActive = newRate !== REGULAR_PLAYBACK_RATE && isActive;\n    setAudioPlayerPlaybackRate({ playbackRate: rate, isPlaybackRateActive: shouldBeActive });\n    setPlaybackRate(shouldBeActive ? rate : REGULAR_PLAYBACK_RATE);\n  }, [setAudioPlayerPlaybackRate, setPlaybackRate]);\n\n  const handlePlaybackClick = useCallback(() => {\n    handleContextMenuClose();\n    const oldRate = Number(Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0])\n      || REGULAR_PLAYBACK_RATE;\n    const newIsActive = !isPlaybackRateActive;\n\n    updatePlaybackRate(\n      newIsActive && oldRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : oldRate,\n      newIsActive,\n    );\n  }, [handleContextMenuClose, isPlaybackRateActive, playbackRate, updatePlaybackRate]);\n\n  const PlaybackRateButton = useCallback(() => {\n    const displayRate = Object.entries(PLAYBACK_RATES).find(([, rate]) => rate === playbackRate)?.[0]\n      || REGULAR_PLAYBACK_RATE;\n    const text = `${playbackRate === REGULAR_PLAYBACK_RATE ? DEFAULT_FAST_PLAYBACK_RATE : displayRate}Х`;\n    return (\n      <div className=\"playback-wrapper\">\n        {isContextMenuOpen && <div className=\"playback-backdrop\" onClick={handleContextMenuClose} />}\n\n        <Button\n          round\n          className={buildClassName(\n            'playback-button', isPlaybackRateActive && 'applied', isContextMenuOpen && 'on-top',\n          )}\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Playback Rate\"\n          ripple={!isMobile}\n          onMouseEnter={handleContextMenu}\n          onClick={handlePlaybackClick}\n          onMouseDown={handleBeforeContextMenu}\n          onContextMenu={handleContextMenu}\n        >\n          <span className={buildClassName(\n            'playback-button-inner',\n            text.length === 4 && 'small',\n            text.length === 5 && 'tiny',\n          )}\n          >\n            {text}\n          </span>\n        </Button>\n      </div>\n    );\n  }, [\n    handleBeforeContextMenu, handleContextMenu, handleContextMenuClose, handlePlaybackClick, isContextMenuOpen,\n    isMobile, isPlaybackRateActive, playbackRate,\n  ]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  if (noUi) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('AudioPlayer', className)} dir={lang.isRtl ? 'rtl' : undefined} ref={ref}>\n      <div className=\"AudioPlayer-content\" onClick={handleClick}>\n        {audio ? renderAudio(audio) : renderVoice(lang('AttachAudio'), senderName)}\n        <RippleEffect />\n      </div>\n\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isFirst()}\n        onClick={requestPreviousTrack}\n        ariaLabel=\"Previous track\"\n      >\n        <i className=\"icon-skip-previous\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className={buildClassName('toggle-play', 'player-button', isPlaying ? 'pause' : 'play')}\n        onClick={playPause}\n        ariaLabel={isPlaying ? 'Pause audio' : 'Play audio'}\n      >\n        <i className=\"icon-play\" />\n        <i className=\"icon-pause\" />\n      </Button>\n      <Button\n        round\n        ripple={!isMobile}\n        color=\"translucent\"\n        size=\"smaller\"\n        className=\"player-button\"\n        disabled={isLast()}\n        onClick={requestNextTrack}\n        ariaLabel=\"Next track\"\n      >\n        <i className=\"icon-skip-next\" />\n      </Button>\n\n      <div className=\"volume-button-wrapper\">\n        <Button\n          round\n          className=\"player-button volume-button\"\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel=\"Volume\"\n          onClick={handleVolumeClick}\n          ripple={!isMobile}\n        >\n          <i className={volumeIcon} />\n        </Button>\n\n        {!IS_IOS && (\n          <div className=\"volume-slider-wrapper\">\n            <div className=\"volume-slider-spacer\" />\n            <div className=\"volume-slider\">\n              <RangeSlider bold value={isMuted ? 0 : volume * 100} onChange={handleVolumeChange} />\n            </div>\n          </div>\n        )}\n      </div>\n\n      {shouldRenderPlaybackButton && (\n        <DropdownMenu\n          forceOpen={isContextMenuOpen}\n          positionX=\"right\"\n          positionY=\"top\"\n          className=\"playback-rate-menu\"\n          trigger={PlaybackRateButton}\n          onClose={handleContextMenuClose}\n          onHide={handleContextMenuHide}\n          onMouseEnterBackdrop={handleContextMenuClose}\n        >\n          {PLAYBACK_RATE_VALUES.map((rate) => {\n            return renderPlaybackRateMenuItem(rate, playbackRate, updatePlaybackRate, isPlaybackRateActive);\n          })}\n        </DropdownMenu>\n      )}\n\n      <Button\n        round\n        className=\"player-close\"\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={handleClose}\n        ariaLabel=\"Close player\"\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nfunction renderAudio(audio: ApiAudio) {\n  const { title, performer, fileName } = audio;\n\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{renderText(title || fileName)}</div>\n      {performer && (\n        <div className=\"subtitle\" dir=\"auto\">{renderText(performer)}</div>\n      )}\n    </>\n  );\n}\n\nfunction renderVoice(subtitle: string, senderName?: string) {\n  return (\n    <>\n      <div className=\"title\" dir=\"auto\">{senderName && renderText(senderName)}</div>\n      <div className=\"subtitle\" dir=\"auto\">{subtitle}</div>\n    </>\n  );\n}\n\nfunction renderPlaybackRateMenuItem(\n  rate: number, currentRate: number, onClick: (rate: number) => void,\n  isPlaybackRateActive?: boolean,\n) {\n  const isSelected = (currentRate === PLAYBACK_RATES[rate] && isPlaybackRateActive)\n    || (rate === REGULAR_PLAYBACK_RATE && !isPlaybackRateActive);\n  return (\n    <MenuItem\n      key={rate}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(rate)}\n      icon={isSelected ? 'check' : undefined}\n      customIcon={!isSelected ? <i className=\"icon-placeholder\" /> : undefined}\n    >\n      {rate}X\n    </MenuItem>\n  );\n}\n\nexport default withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const sender = selectSender(global, message);\n    const chat = selectChat(global, message.chatId);\n    const {\n      volume, playbackRate, isMuted, isPlaybackRateActive,\n    } = selectTabState(global).audioPlayer;\n\n    return {\n      sender,\n      chat,\n      volume,\n      playbackRate,\n      isPlaybackRateActive,\n      isMuted,\n    };\n  },\n)(AudioPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { withGlobal, getActions } from '../../global';\n\nimport type { ApiChat, ApiChatSettings, ApiUser } from '../../api/types';\n\nimport { selectChat, selectUser } from '../../global/selectors';\nimport {\n  getChatTitle, getUserFirstOrLastName, getUserFullName, isChatBasicGroup, isUserId,\n} from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Button from '../ui/Button';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ChatReportPanel.scss';\n\ntype OwnProps = {\n  chatId: string;\n  className?: string;\n  settings?: ApiChatSettings;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  chat?: ApiChat;\n  user?: ApiUser;\n};\n\nconst ChatReportPanel: FC<OwnProps & StateProps> = ({\n  chatId, className, chat, user, settings, currentUserId,\n}) => {\n  const {\n    openAddContactDialog,\n    blockContact,\n    reportSpam,\n    deleteChat,\n    leaveChannel,\n    deleteChatUser,\n    deleteHistory,\n    toggleChatArchived,\n    hideChatReportPanel,\n  } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const [shouldReportSpam, setShouldReportSpam] = useState<boolean>(true);\n  const [shouldDeleteChat, setShouldDeleteChat] = useState<boolean>(true);\n  const { accessHash } = chat || {};\n  const {\n    isAutoArchived, canReportSpam, canAddContact, canBlockContact,\n  } = settings || {};\n  const isBasicGroup = chat && isChatBasicGroup(chat);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    if (isAutoArchived) {\n      toggleChatArchived({ id: chatId });\n    }\n  }, [openAddContactDialog, isAutoArchived, toggleChatArchived, chatId]);\n\n  const handleConfirmBlock = useCallback(() => {\n    closeBlockUserModal();\n    blockContact({ contactId: chatId, accessHash: accessHash! });\n    if (canReportSpam && shouldReportSpam) {\n      reportSpam({ chatId });\n    }\n    if (shouldDeleteChat) {\n      deleteChat({ chatId });\n    }\n  }, [\n    accessHash, blockContact, closeBlockUserModal, deleteChat, reportSpam, canReportSpam, shouldDeleteChat,\n    shouldReportSpam, chatId,\n  ]);\n\n  const handleCloseReportPanel = useCallback(() => {\n    hideChatReportPanel({ chatId });\n  }, [chatId, hideChatReportPanel]);\n\n  const handleChatReportSpam = useCallback(() => {\n    closeBlockUserModal();\n    reportSpam({ chatId });\n    if (isBasicGroup) {\n      deleteChatUser({ chatId, userId: currentUserId! });\n      deleteHistory({ chatId, shouldDeleteForAll: false });\n    } else {\n      leaveChannel({ chatId });\n    }\n  }, [\n    chatId, closeBlockUserModal, currentUserId, deleteChatUser, deleteHistory, isBasicGroup, leaveChannel, reportSpam,\n  ]);\n\n  if (!settings) {\n    return undefined;\n  }\n\n  return (\n    <div className={buildClassName('ChatReportPanel', className)} dir={lang.isRtl ? 'rtl' : undefined}>\n      {canAddContact && (\n        <Button\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={handleAddContact}\n        >\n          {lang('lng_new_contact_add')}\n        </Button>\n      )}\n      {canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_new_contact_block')}\n        </Button>\n      )}\n      {canReportSpam && !canBlockContact && (\n        <Button\n          color=\"danger\"\n          isText\n          fluid\n          size=\"tiny\"\n          className=\"UserReportPanel--Button\"\n          onClick={openBlockUserModal}\n        >\n          {lang('lng_report_spam_and_leave')}\n        </Button>\n      )}\n      <Button\n        round\n        ripple\n        size=\"tiny\"\n        color=\"translucent\"\n        onClick={handleCloseReportPanel}\n        ariaLabel={lang('Close')}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <ConfirmDialog\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n        title={lang('BlockUserTitle', user ? getUserFirstOrLastName(user) : getChatTitle(lang, chat!))}\n        text={user\n          ? lang('UserInfo.BlockConfirmationTitle', getUserFullName(user))\n          : lang('Chat.Confirm.ReportSpam.Channel')}\n        confirmIsDestructive\n        confirmLabel={lang('Block')}\n        confirmHandler={user ? handleConfirmBlock : handleChatReportSpam}\n      >\n        {user && (\n          <Checkbox\n            label={lang('DeleteThisChat')}\n            checked={shouldDeleteChat}\n            onCheck={setShouldDeleteChat}\n          />\n        )}\n        {user && canReportSpam && (\n          <Checkbox\n            label={lang('ReportChat')}\n            checked={shouldReportSpam}\n            onCheck={setShouldReportSpam}\n          />\n        )}\n      </ConfirmDialog>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => ({\n    currentUserId: global.currentUserId,\n    chat: selectChat(global, chatId),\n    user: isUserId(chatId) ? selectUser(global, chatId) : undefined,\n  }),\n)(ChatReportPanel));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\nimport cycleRestrict from '../../util/cycleRestrict';\n\nimport type { GlobalState, MessageListType } from '../../global/types';\nimport type {\n  ApiChat, ApiMessage, ApiTypingStatus, ApiUser,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport {\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES,\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n} from '../../config';\nimport {\n  getChatTitle, getMessageKey, getSenderTitle, isChatChannel, isChatSuperGroup, isUserId,\n} from '../../global/helpers';\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectTabState,\n  selectForwardedSender,\n  selectIsChatBotNotStarted,\n  selectIsChatWithBot,\n  selectIsChatWithSelf,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectScheduledIds,\n  selectThreadInfo,\n  selectThreadParam,\n  selectThreadTopMessageId,\n} from '../../global/selectors';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\nimport useConnectionStatus from '../../hooks/useConnectionStatus';\nimport usePrevious from '../../hooks/usePrevious';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport GroupChatInfo from '../common/GroupChatInfo';\nimport UnreadCounter from '../common/UnreadCounter';\nimport Transition from '../ui/Transition';\nimport Button from '../ui/Button';\nimport HeaderActions from './HeaderActions';\nimport HeaderPinnedMessage from './HeaderPinnedMessage';\nimport AudioPlayer from './AudioPlayer';\nimport GroupCallTopPane from '../calls/group/GroupCallTopPane';\nimport ChatReportPanel from './ChatReportPanel';\n\nimport './MiddleHeader.scss';\n\nconst ANIMATION_DURATION = 350;\nconst BACK_BUTTON_INACTIVE_TIME = 450;\nconst EMOJI_STATUS_SIZE = 22;\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  isReady?: boolean;\n  isMobile?: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  pinnedMessageIds?: number[] | number;\n  messagesById?: Record<number, ApiMessage>;\n  canUnpin?: boolean;\n  topMessageSender?: ApiChat | ApiUser;\n  typingStatus?: ApiTypingStatus;\n  isSelectModeActive?: boolean;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  audioMessage?: ApiMessage;\n  messagesCount?: number;\n  isComments?: boolean;\n  isChatWithSelf?: boolean;\n  lastSyncTime?: number;\n  hasButtonInHeader?: boolean;\n  hasReachedFocusedMessage?: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  connectionState?: GlobalState['connectionState'];\n  isSyncing?: GlobalState['isSyncing'];\n};\n\nconst MiddleHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isReady,\n  isMobile,\n  pinnedMessageIds,\n  messagesById,\n  canUnpin,\n  topMessageSender,\n  typingStatus,\n  isSelectModeActive,\n  isLeftColumnShown,\n  isRightColumnShown,\n  audioMessage,\n  chat,\n  messagesCount,\n  isComments,\n  isChatWithSelf,\n  lastSyncTime,\n  hasButtonInHeader,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  connectionState,\n  hasReachedFocusedMessage,\n  isSyncing,\n}) => {\n  const {\n    openChatWithInfo,\n    pinMessage,\n    focusMessage,\n    openChat,\n    openPreviousChat,\n    setReachedFocusedMessage,\n    loadPinnedMessages,\n    toggleLeftColumn,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const lang = useLang();\n  const isBackButtonActive = useRef(true);\n  const [isWaitingForPinnedMessageFocus, setWaitingForPinnedMessageFocus] = useState(false);\n  const { isTablet } = useAppLayout();\n\n  const [pinnedMessageIndex, setPinnedMessageIndex] = useState(0);\n  const pinnedMessageId = Array.isArray(pinnedMessageIds) ? pinnedMessageIds[pinnedMessageIndex] : pinnedMessageIds;\n  const pinnedMessage = messagesById && pinnedMessageId ? messagesById[pinnedMessageId] : undefined;\n  const pinnedMessagesCount = Array.isArray(pinnedMessageIds)\n    ? pinnedMessageIds.length : (pinnedMessageIds ? 1 : undefined);\n  const chatTitleLength = chat && getChatTitle(lang, chat).length;\n  const topMessageTitle = topMessageSender ? getSenderTitle(lang, topMessageSender) : undefined;\n  const { settings } = chat || {};\n  const isForum = chat?.isForum;\n\n  useEffect(() => {\n    if (lastSyncTime && isReady && (threadId === MAIN_THREAD_ID || isForum)) {\n      loadPinnedMessages({ chatId, threadId });\n    }\n  }, [chatId, loadPinnedMessages, lastSyncTime, threadId, isReady, isForum]);\n\n  // Reset pinned index when switching chats and pinning/unpinning\n  useEffect(() => {\n    setPinnedMessageIndex(0);\n    setWaitingForPinnedMessageFocus(false);\n  }, [pinnedMessageIds]);\n\n  useEffect(() => {\n    if (hasReachedFocusedMessage && isWaitingForPinnedMessageFocus) {\n      setReachedFocusedMessage({ hasReached: false });\n      setWaitingForPinnedMessageFocus(false);\n\n      const newIndex = cycleRestrict(pinnedMessagesCount || 1, pinnedMessageIndex + 1);\n      setPinnedMessageIndex(newIndex);\n    }\n  }, [\n    hasReachedFocusedMessage, isWaitingForPinnedMessageFocus, pinnedMessageIndex, pinnedMessagesCount,\n    setReachedFocusedMessage,\n  ]);\n\n  useEnsureMessage(chatId, pinnedMessageId, pinnedMessage);\n\n  const { width: windowWidth } = useWindowSize();\n\n  const isLeftColumnHideable = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN;\n  const shouldShowCloseButton = isTablet && isLeftColumnShown;\n\n  // eslint-disable-next-line no-null/no-null\n  const componentRef = useRef<HTMLDivElement>(null);\n  const shouldAnimateTools = useRef<boolean>(true);\n\n  const handleHeaderClick = useCallback(() => {\n    openChatWithInfo({ id: chatId, threadId });\n  }, [openChatWithInfo, chatId, threadId]);\n\n  const handleUnpinMessage = useCallback((messageId: number) => {\n    pinMessage({ messageId, isUnpin: true });\n  }, [pinMessage]);\n\n  const handlePinnedMessageClick = useCallback((): void => {\n    if (pinnedMessage) {\n      focusMessage({\n        chatId: pinnedMessage.chatId, threadId, messageId: pinnedMessage.id, noForumTopicPanel: true,\n      });\n\n      setWaitingForPinnedMessageFocus(true);\n    }\n  }, [pinnedMessage, focusMessage, threadId]);\n\n  const handleAllPinnedClick = useCallback(() => {\n    openChat({ id: chatId, threadId, type: 'pinned' });\n  }, [openChat, chatId, threadId]);\n\n  const setBackButtonActive = useCallback(() => {\n    setTimeout(() => {\n      isBackButtonActive.current = true;\n    }, BACK_BUTTON_INACTIVE_TIME);\n  }, []);\n\n  const handleBackClick = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (!isBackButtonActive.current) return;\n\n    // Workaround for missing UI when quickly clicking the Back button\n    isBackButtonActive.current = false;\n    if (isMobile) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      messageInput?.blur();\n    }\n\n    if (isSelectModeActive) {\n      exitMessageSelectMode();\n      setBackButtonActive();\n      return;\n    }\n\n    if (messageListType === 'thread' && currentTransitionKey === 0) {\n      if (!isTablet || shouldShowCloseButton) {\n        e.stopPropagation(); // Stop propagation to prevent chat re-opening on tablets\n        openChat({ id: undefined }, { forceOnHeavyAnimation: true });\n      } else {\n        toggleLeftColumn();\n      }\n\n      setBackButtonActive();\n\n      return;\n    }\n\n    openPreviousChat();\n    setBackButtonActive();\n  }, [\n    isMobile, isSelectModeActive, messageListType, currentTransitionKey, setBackButtonActive, isTablet,\n    shouldShowCloseButton,\n  ]);\n\n  const canToolsCollideWithChatInfo = (\n    windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n  ) || (\n    windowWidth > MOBILE_SCREEN_MAX_WIDTH\n    && windowWidth < MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n    && (!chatTitleLength || chatTitleLength > 30)\n  );\n  const shouldUseStackedToolsClass = canToolsCollideWithChatInfo || (\n    windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n  );\n\n  const hasChatSettings = Boolean(settings?.canAddContact || settings?.canBlockContact || settings?.canReportSpam);\n  const {\n    shouldRender: shouldShowChatReportPanel,\n    transitionClassNames: chatReportPanelClassNames,\n  } = useShowTransition(hasChatSettings);\n  const renderingChatSettings = useCurrentOrPrev(hasChatSettings ? settings : undefined, true);\n\n  const {\n    shouldRender: shouldRenderAudioPlayer,\n    transitionClassNames: audioPlayerClassNames,\n  } = useShowTransition(Boolean(audioMessage));\n\n  const renderingAudioMessage = useCurrentOrPrev(audioMessage, true);\n\n  const {\n    shouldRender: shouldRenderPinnedMessage,\n    transitionClassNames: pinnedMessageClassNames,\n  } = useShowTransition(Boolean(pinnedMessage));\n\n  const renderingPinnedMessage = useCurrentOrPrev(pinnedMessage, true);\n  const renderingPinnedMessagesCount = useCurrentOrPrev(pinnedMessagesCount, true);\n  const renderingCanUnpin = useCurrentOrPrev(canUnpin, true);\n  const renderingPinnedMessageTitle = useCurrentOrPrev(topMessageTitle);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const canRevealTools = (shouldRenderPinnedMessage && renderingPinnedMessage)\n    || (shouldRenderAudioPlayer && renderingAudioMessage);\n\n  // Logic for transition to and from custom display of AudioPlayer/PinnedMessage on smaller screens\n  useEffect(() => {\n    const componentEl = componentRef.current;\n    if (!componentEl) {\n      return;\n    }\n\n    if (!shouldUseStackedToolsClass || !canRevealTools) {\n      componentEl.classList.remove('tools-stacked', 'animated');\n      shouldAnimateTools.current = true;\n      return;\n    }\n\n    if (isRightColumnShown || canToolsCollideWithChatInfo) {\n      if (shouldAnimateTools.current) {\n        componentEl.classList.add('tools-stacked', 'animated');\n        shouldAnimateTools.current = false;\n      }\n\n      // Remove animation class to prevent it messing up the show transitions\n      setTimeout(() => {\n        componentEl.classList.remove('animated');\n      }, ANIMATION_DURATION);\n    } else {\n      componentEl.classList.remove('tools-stacked');\n      shouldAnimateTools.current = true;\n    }\n  }, [shouldUseStackedToolsClass, canRevealTools, canToolsCollideWithChatInfo, isRightColumnShown]);\n\n  const { connectionStatusText } = useConnectionStatus(lang, connectionState, isSyncing, true);\n\n  function renderInfo() {\n    if (messageListType === 'thread') {\n      if (threadId === MAIN_THREAD_ID || chat?.isForum) {\n        return renderChatInfo();\n      }\n    }\n\n    return (\n      <>\n        {renderBackButton()}\n        <h3>\n          {messagesCount !== undefined ? (\n            messageListType === 'thread' ? (\n              lang(isComments ? 'CommentsCount' : 'Replies', messagesCount, 'i'))\n              : messageListType === 'pinned' ? (lang('PinnedMessagesCount', messagesCount, 'i'))\n                : messageListType === 'scheduled' ? (\n                  isChatWithSelf ? lang('Reminders') : lang('messages', messagesCount, 'i')\n                ) : undefined\n          ) : lang('Loading')}\n        </h3>\n      </>\n    );\n  }\n\n  function renderChatInfo() {\n    return (\n      <>\n        {(isLeftColumnHideable || currentTransitionKey > 0) && renderBackButton(shouldShowCloseButton, true)}\n        <div className=\"chat-info-wrapper\" onClick={handleHeaderClick}>\n          {isUserId(chatId) ? (\n            <PrivateChatInfo\n              key={chatId}\n              userId={chatId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withFullInfo\n              withMediaViewer\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              emojiStatusSize={EMOJI_STATUS_SIZE}\n              noRtl\n            />\n          ) : (\n            <GroupChatInfo\n              key={chatId}\n              chatId={chatId}\n              threadId={threadId}\n              typingStatus={typingStatus}\n              status={connectionStatusText}\n              withDots={Boolean(connectionStatusText)}\n              withMediaViewer={threadId === MAIN_THREAD_ID}\n              withFullInfo={threadId === MAIN_THREAD_ID}\n              withUpdatingStatus\n              withVideoAvatar={isReady}\n              noRtl\n            />\n          )}\n        </div>\n      </>\n    );\n  }\n\n  function renderBackButton(asClose = false, withUnreadCounter = false) {\n    return (\n      <div className=\"back-button\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleBackClick}\n          ariaLabel={lang(asClose ? 'Close' : 'Back')}\n        >\n          <div className={buildClassName('animated-close-icon', !asClose && 'state-back')} />\n        </Button>\n        {withUnreadCounter && <UnreadCounter />}\n      </div>\n    );\n  }\n\n  const isAudioPlayerRendered = Boolean(shouldRenderAudioPlayer && renderingAudioMessage);\n  const isPinnedMessagesFullWidth = isAudioPlayerRendered\n    || (!isMobile && hasButtonInHeader && windowWidth < MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES);\n\n  return (\n    <div className=\"MiddleHeader\" ref={componentRef}>\n      <Transition\n        name={shouldSkipHistoryAnimations ? 'none' : 'slide-fade'}\n        activeKey={currentTransitionKey}\n        shouldCleanup\n        cleanupExceptionKey={cleanupExceptionKey}\n      >\n        {renderInfo()}\n      </Transition>\n\n      {threadId === MAIN_THREAD_ID && !chat?.isForum && (\n        <GroupCallTopPane\n          hasPinnedOffset={\n            (shouldRenderPinnedMessage && Boolean(renderingPinnedMessage))\n          || (shouldRenderAudioPlayer && Boolean(renderingAudioMessage))\n          }\n          chatId={chatId}\n        />\n      )}\n\n      {shouldRenderPinnedMessage && renderingPinnedMessage && (\n        <HeaderPinnedMessage\n          key={chatId}\n          message={renderingPinnedMessage}\n          count={renderingPinnedMessagesCount || 0}\n          index={pinnedMessageIndex}\n          customTitle={renderingPinnedMessageTitle}\n          className={buildClassName(pinnedMessageClassNames, isPinnedMessagesFullWidth && 'full-width')}\n          onUnpinMessage={renderingCanUnpin ? handleUnpinMessage : undefined}\n          onClick={handlePinnedMessageClick}\n          onAllPinnedClick={handleAllPinnedClick}\n        />\n      )}\n\n      {shouldShowChatReportPanel && (\n        <ChatReportPanel\n          key={chatId}\n          chatId={chatId}\n          settings={renderingChatSettings}\n          className={chatReportPanelClassNames}\n        />\n      )}\n\n      <div className=\"header-tools\">\n        {isAudioPlayerRendered && (\n          <AudioPlayer\n            key={getMessageKey(renderingAudioMessage!)}\n            message={renderingAudioMessage!}\n            className={audioPlayerClassNames}\n          />\n        )}\n        <HeaderActions\n          chatId={chatId}\n          threadId={threadId}\n          messageListType={messageListType}\n          isMobile={isMobile}\n          canExpandActions={!isAudioPlayerRendered}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const {\n      isLeftColumnShown, shouldSkipHistoryAnimations, audioPlayer, messageLists,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const chat = selectChat(global, chatId);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    let messagesCount: number | undefined;\n    if (messageListType === 'pinned') {\n      const pinnedIds = selectPinnedIds(global, chatId, threadId);\n      messagesCount = pinnedIds?.length;\n    } else if (messageListType === 'scheduled') {\n      const scheduledIds = selectScheduledIds(global, chatId, threadId);\n      messagesCount = scheduledIds?.length;\n    } else if (messageListType === 'thread' && threadId !== MAIN_THREAD_ID) {\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n      messagesCount = threadInfo?.messagesCount || 0;\n    }\n\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChatWithBot = chat && selectIsChatWithBot(global, chat);\n    const canRestartBot = Boolean(isChatWithBot && selectIsUserBlocked(global, chatId));\n    const canStartBot = isChatWithBot && !canRestartBot && Boolean(selectIsChatBotNotStarted(global, chatId));\n    const canSubscribe = Boolean(\n      chat && (isMainThread || chat.isForum) && (isChatChannel(chat) || isChatSuperGroup(chat)) && chat.isNotJoined,\n    );\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const typingStatus = selectThreadParam(global, chatId, threadId, 'typingStatus');\n    const focusedMessage = selectTabState(global).focusedMessage;\n\n    const state: StateProps = {\n      typingStatus,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      audioMessage,\n      chat,\n      messagesCount,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      lastSyncTime,\n      shouldSkipHistoryAnimations,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      connectionState: global.connectionState,\n      isSyncing: global.isSyncing,\n      hasButtonInHeader: canStartBot || canRestartBot || canSubscribe || shouldSendJoinRequest,\n      hasReachedFocusedMessage: !focusedMessage || focusedMessage.hasReachedMessage,\n    };\n\n    const messagesById = selectChatMessages(global, chatId);\n    if (messageListType !== 'thread' || !messagesById) {\n      return state;\n    }\n\n    Object.assign(state, { messagesById });\n\n    if (threadId !== MAIN_THREAD_ID && !chat?.isForum) {\n      const pinnedMessageId = selectThreadTopMessageId(global, chatId, threadId);\n      const message = pinnedMessageId ? selectChatMessage(global, chatId, pinnedMessageId) : undefined;\n      const topMessageSender = message ? selectForwardedSender(global, message) : undefined;\n      const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n      return {\n        ...state,\n        pinnedMessageIds: pinnedMessageId,\n        canUnpin: false,\n        topMessageSender,\n        isComments: Boolean(threadInfo?.originChannelId),\n      };\n    }\n\n    const pinnedMessageIds = selectPinnedIds(global, chatId, threadId);\n    if (pinnedMessageIds?.length) {\n      const firstPinnedMessage = messagesById[pinnedMessageIds[0]];\n      const {\n        canUnpin,\n      } = (firstPinnedMessage && selectAllowedMessageActions(global, firstPinnedMessage, threadId)) || {};\n\n      return {\n        ...state,\n        pinnedMessageIds,\n        canUnpin,\n      };\n    }\n\n    return state;\n  },\n)(MiddleHeader));\n","import type { ApiMessage } from '../../../api/types';\nimport type { IAlbum } from '../../../types';\n\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport { isActionMessage } from '../../../global/helpers';\n\ntype SenderGroup = (ApiMessage | IAlbum)[];\n\nconst GROUP_INTERVAL_SECONDS = 600; // 10 minutes\n\nexport type MessageDateGroup = {\n  originalDate: number;\n  datetime: number;\n  senderGroups: SenderGroup[];\n};\n\nexport function isAlbum(messageOrAlbum: ApiMessage | IAlbum): messageOrAlbum is IAlbum {\n  return 'albumId' in messageOrAlbum;\n}\n\nexport function groupMessages(messages: ApiMessage[], firstUnreadId?: number) {\n  let currentSenderGroup: SenderGroup = [];\n  let currentDateGroup = {\n    originalDate: messages[0].date,\n    datetime: getDayStartAt(messages[0].date * 1000),\n    senderGroups: [currentSenderGroup],\n  };\n  let currentAlbum: IAlbum | undefined;\n\n  const dateGroups: MessageDateGroup[] = [currentDateGroup];\n\n  messages.forEach((message, index) => {\n    if (message.isInAlbum) {\n      if (!currentAlbum) {\n        currentAlbum = {\n          albumId: message.groupedId!,\n          messages: [message],\n          mainMessage: message,\n        };\n      } else {\n        currentAlbum.messages.push(message);\n        if (message.content.text) {\n          currentAlbum.mainMessage = message;\n        }\n      }\n    } else {\n      currentSenderGroup.push(message);\n    }\n\n    const nextMessage = messages[index + 1];\n\n    if (\n      currentAlbum\n      && (!nextMessage || !nextMessage.groupedId || nextMessage.groupedId !== currentAlbum.albumId)\n    ) {\n      currentSenderGroup.push(currentAlbum);\n      currentAlbum = undefined;\n    }\n    if (nextMessage) {\n      const nextMessageDayStartsAt = getDayStartAt(nextMessage.date * 1000);\n      if (currentDateGroup.datetime !== nextMessageDayStartsAt) {\n        currentDateGroup = {\n          originalDate: nextMessage.date,\n          datetime: nextMessageDayStartsAt,\n          senderGroups: [],\n        };\n        dateGroups.push(currentDateGroup);\n\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      } else if (\n        nextMessage.id === firstUnreadId\n        || message.senderId !== nextMessage.senderId\n        || message.isOutgoing !== nextMessage.isOutgoing\n        || isActionMessage(message)\n        || isActionMessage(nextMessage)\n        || (\n          message.forwardInfo && nextMessage.forwardInfo\n          && (\n            message.forwardInfo.senderUserId !== nextMessage.forwardInfo.senderUserId\n            || message.forwardInfo.fromChatId !== nextMessage.forwardInfo.fromChatId\n            || message.forwardInfo.hiddenUserName !== nextMessage.forwardInfo.hiddenUserName\n          )\n        )\n        || message.inlineButtons\n        || nextMessage.inlineButtons\n        || (nextMessage.date - message.date) > GROUP_INTERVAL_SECONDS\n      ) {\n        currentSenderGroup = [];\n        currentDateGroup.senderGroups.push(currentSenderGroup);\n      }\n    }\n  });\n\n  return dateGroups;\n}\n","import { useHotkeys } from './useHotkeys';\nimport getMessageIdsForSelectedText from '../util/getMessageIdsForSelectedText';\n\nconst useNativeCopySelectedMessages = (copyMessagesByIds: ({ messageIds }: { messageIds?: number[] }) => void) => {\n  function handleCopy(e: KeyboardEvent) {\n    const messageIds = getMessageIdsForSelectedText();\n\n    if (messageIds && messageIds.length > 1) {\n      e.preventDefault();\n      copyMessagesByIds({ messageIds });\n    }\n  }\n\n  useHotkeys({ 'Mod+C': handleCopy });\n};\n\nexport default useNativeCopySelectedMessages;\n","import { useLayoutEffect } from '../lib/teact/teact';\nimport usePrevious from './usePrevious';\n\nconst useLayoutEffectWithPrevDeps = <T extends readonly any[]>(\n  cb: (args: T | readonly []) => void, dependencies: T, debugKey?: string,\n) => {\n  const prevDeps = usePrevious<T>(dependencies);\n  return useLayoutEffect(() => {\n    return cb(prevDeps || []);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, dependencies, debugKey);\n};\n\nexport default useLayoutEffectWithPrevDeps;\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\n\nimport { IS_ANDROID } from '../../../util/environment';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useBackgroundMode from '../../../hooks/useBackgroundMode';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nconst INTERSECTION_THROTTLE_FOR_READING = 150;\nconst INTERSECTION_THROTTLE_FOR_MEDIA = IS_ANDROID ? 1000 : 350;\n\nexport default function useMessageObservers(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  memoFirstUnreadIdRef: { current: number | undefined },\n) {\n  const { markMessageListRead, markMentionsRead, animateUnreadReaction } = getActions();\n\n  const { isMobile } = useAppLayout();\n  const INTERSECTION_MARGIN_FOR_LOADING = isMobile ? 300 : 500;\n\n  const {\n    observe: observeIntersectionForReading, freeze: freezeForReading, unfreeze: unfreezeForReading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_READING,\n  }, (entries) => {\n    if (type !== 'thread') {\n      return;\n    }\n\n    let maxId = 0;\n    const mentionIds: number[] = [];\n    const reactionIds: number[] = [];\n\n    entries.forEach((entry) => {\n      const { isIntersecting, target } = entry;\n\n      if (!isIntersecting) {\n        return;\n      }\n\n      const { dataset } = target as HTMLDivElement;\n\n      const messageId = Number(dataset.lastMessageId || dataset.messageId);\n      if (messageId > maxId) {\n        maxId = messageId;\n      }\n\n      if (dataset.hasUnreadMention) {\n        mentionIds.push(messageId);\n      }\n\n      if (dataset.hasUnreadReaction) {\n        reactionIds.push(messageId);\n      }\n    });\n\n    if (memoFirstUnreadIdRef.current && maxId >= memoFirstUnreadIdRef.current) {\n      markMessageListRead({ maxId });\n    }\n\n    if (mentionIds.length) {\n      markMentionsRead({ messageIds: mentionIds });\n    }\n\n    if (reactionIds.length) {\n      animateUnreadReaction({ messageIds: reactionIds });\n    }\n  });\n\n  useBackgroundMode(freezeForReading, unfreezeForReading);\n\n  const {\n    observe: observeIntersectionForLoading,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n    margin: INTERSECTION_MARGIN_FOR_LOADING,\n  });\n\n  const { observe: observeIntersectionForPlaying } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE_FOR_MEDIA,\n  });\n\n  return {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\nimport { calculateInlineImageDimensions, calculateVideoDimensions } from '../../../common/helpers/mediaDimensions';\nimport {\n  getMessageText,\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  isOwnMessage,\n  getMessageVideo,\n  getMessageWebPageVideo,\n} from '../../../../global/helpers';\n\nconst MIN_MEDIA_WIDTH = 100;\nconst MIN_MEDIA_WIDTH_WITH_COMMENTS = 238;\nconst MIN_MEDIA_WIDTH_WITH_TEXT = 175;\nconst MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS = 238;\nconst MIN_MEDIA_HEIGHT = 90;\nconst SMALL_IMAGE_THRESHOLD = 12;\n\nexport function getMinMediaWidth(hasText?: boolean, hasCommentButton?: boolean) {\n  return hasText\n    ? (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_TEXT_AND_COMMENTS : MIN_MEDIA_WIDTH_WITH_TEXT)\n    : (hasCommentButton ? MIN_MEDIA_WIDTH_WITH_COMMENTS : MIN_MEDIA_WIDTH);\n}\n\nexport function calculateMediaDimensions(\n  message: ApiMessage, asForwarded?: boolean, noAvatars?: boolean, isMobile?: boolean,\n) {\n  const isOwn = isOwnMessage(message);\n  const photo = getMessagePhoto(message) || getMessageWebPagePhoto(message);\n  const video = getMessageVideo(message);\n\n  const isWebPagePhoto = Boolean(getMessageWebPagePhoto(message));\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const { width, height } = photo\n    ? calculateInlineImageDimensions(photo, isOwn, asForwarded, isWebPagePhoto, noAvatars, isMobile)\n    : calculateVideoDimensions(video!, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const hasText = Boolean(getMessageText(message));\n  const minMediaWidth = getMinMediaWidth(hasText);\n\n  let stretchFactor = 1;\n  if (width < minMediaWidth && minMediaWidth - width < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = minMediaWidth / width;\n  }\n  if (height * stretchFactor < MIN_MEDIA_HEIGHT && MIN_MEDIA_HEIGHT - height * stretchFactor < SMALL_IMAGE_THRESHOLD) {\n    stretchFactor = MIN_MEDIA_HEIGHT / height;\n  }\n\n  const finalWidth = Math.round(width * stretchFactor);\n  const finalHeight = Math.round(height * stretchFactor);\n\n  return {\n    width: finalWidth,\n    height: finalHeight,\n    isSmall: finalWidth < minMediaWidth || finalHeight < MIN_MEDIA_HEIGHT,\n  };\n}\n","/* eslint-disable no-bitwise */\n// Based on\n// https://github.com/telegramdesktop/tdesktop/blob/dev/Telegram/SourceFiles/ui/grouped_layout.cpp\n// https://github.com/overtake/TelegramSwift/blob/master/Telegram-Mac/GroupedLayout.swift#L83\n\nimport type { IAlbum } from '../../../../types';\nimport type { ApiMessage, ApiDimensions } from '../../../../api/types';\n\nimport { getAvailableWidth, REM } from '../../../common/helpers/mediaDimensions';\nimport { calculateMediaDimensions } from './mediaDimensions';\nimport { clamp } from '../../../../util/math';\n\nexport const AlbumRectPart = {\n  None: 0,\n  Top: 1,\n  Right: 2,\n  Bottom: 4,\n  Left: 8,\n};\n\ntype IAttempt = {\n  lineCounts: number[];\n  heights: number[];\n};\nexport type IMediaDimensions = {\n  width: number;\n  height: number;\n  x: number;\n  y: number;\n};\ntype IMediaLayout = {\n  dimensions: IMediaDimensions;\n  sides: number;\n};\ntype ILayoutParams = {\n  ratios: number[];\n  proportions: string;\n  averageRatio: number;\n  maxWidth: number;\n  minWidth: number;\n  maxHeight: number;\n  spacing: number;\n};\nexport type IAlbumLayout = {\n  layout: IMediaLayout[];\n  containerStyle: ApiDimensions;\n};\n\nfunction getRatios(messages: ApiMessage[], isMobile?: boolean) {\n  return messages.map(\n    (message) => {\n      const dimensions = calculateMediaDimensions(message, undefined, undefined, isMobile) as ApiDimensions;\n\n      return dimensions.width / dimensions.height;\n    },\n  );\n}\n\nfunction getProportions(ratios: number[]) {\n  return ratios.map((ratio) => (ratio > 1.2 ? 'w' : (ratio < 0.8 ? 'n' : 'q'))).join('');\n}\n\nfunction getAverageRatio(ratios: number[]) {\n  return ratios.reduce((result, ratio) => ratio + result, 1) / ratios.length;\n}\n\nfunction accumulate(list: number[], initValue: number) {\n  return list.reduce((accumulator, item) => accumulator + item, initValue);\n}\n\nfunction cropRatios(ratios: number[], averageRatio: number) {\n  return ratios.map((ratio) => {\n    return (averageRatio > 1.1 ? clamp(ratio, 1, 2.75) : clamp(ratio, 0.6667, 1));\n  });\n}\n\nfunction calculateContainerSize(layout: IMediaLayout[]) {\n  const styles: ApiDimensions = { width: 0, height: 0 };\n  layout.forEach(({\n    dimensions,\n    sides,\n  }) => {\n    if (sides & AlbumRectPart.Right) {\n      styles.width = dimensions.width + dimensions.x;\n    }\n    if (sides & AlbumRectPart.Bottom) {\n      styles.height = dimensions.height + dimensions.y;\n    }\n  });\n\n  return styles;\n}\n\nexport function calculateAlbumLayout(\n  isOwn: boolean,\n  asForwarded: boolean,\n  noAvatars: boolean,\n  album: IAlbum,\n  isMobile?: boolean,\n): IAlbumLayout {\n  const spacing = 2;\n  const ratios = getRatios(album.messages, isMobile);\n  const proportions = getProportions(ratios);\n  const averageRatio = getAverageRatio(ratios);\n  const albumCount = ratios.length;\n  const forceCalc = ratios.some((ratio) => ratio > 2);\n  const maxWidth = getAvailableWidth(isOwn, asForwarded, false, noAvatars, isMobile) - (asForwarded ? 2.5 : 0) * REM;\n  const maxHeight = maxWidth;\n\n  let layout;\n\n  const params = {\n    ratios,\n    proportions,\n    averageRatio,\n    maxWidth,\n    minWidth: 100,\n    maxHeight,\n    spacing,\n  };\n\n  if (albumCount >= 5 || forceCalc) {\n    layout = layoutWithComplexLayouter(params);\n  } else if (albumCount === 2) {\n    layout = layoutTwo(params);\n  } else if (albumCount === 3) {\n    layout = layoutThree(params);\n  } else {\n    layout = layoutFour(params);\n  }\n\n  return {\n    layout,\n    containerStyle: calculateContainerSize(layout),\n  };\n}\n\nfunction layoutWithComplexLayouter({\n  ratios: originalRatios,\n  averageRatio,\n  maxWidth,\n  minWidth,\n  spacing,\n  maxHeight = (4 * maxWidth) / 3,\n}: ILayoutParams) {\n  const ratios = cropRatios(originalRatios, averageRatio);\n  const count = originalRatios.length;\n  const result = new Array(count);\n  const attempts: IAttempt[] = [];\n\n  const multiHeight = (offset: number, attemptCount: number) => {\n    const attemptRatios = ratios.slice(offset, offset + attemptCount);\n    const sum = accumulate(attemptRatios, 0);\n\n    return (maxWidth - (attemptCount - 1) * spacing) / sum;\n  };\n\n  const pushAttempt = (lineCounts: number[]) => {\n    const heights: number[] = [];\n    let offset = 0;\n    lineCounts.forEach((currentCount) => {\n      heights.push(multiHeight(offset, currentCount));\n      offset += currentCount;\n    });\n\n    attempts.push({\n      lineCounts,\n      heights,\n    });\n  };\n\n  for (let first = 1; first !== count; ++first) {\n    const second = count - first;\n    if (first <= 3 && second <= 3) {\n      pushAttempt([first, second]);\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      const third = count - first - second;\n      if (first <= 3 && second <= (averageRatio < 0.85 ? 4 : 3) && third <= 3) {\n        pushAttempt([first, second, third]);\n      }\n    }\n  }\n\n  for (let first = 1; first !== count - 1; ++first) {\n    for (let second = 1; second !== count - first; ++second) {\n      for (let third = 1; third !== count - first - second; ++third) {\n        const fourth = count - first - second - third;\n        if (first <= 3 && second <= 3 && third <= 3 && fourth <= 4) {\n          pushAttempt([first, second, third, fourth]);\n        }\n      }\n    }\n  }\n\n  let optimalAttempt: IAttempt | undefined;\n  let optimalDiff = 0;\n  for (let i = 0; i < attempts.length; i++) {\n    const {\n      heights,\n      lineCounts,\n    } = attempts[i];\n    const lineCount = lineCounts.length;\n    const totalHeight = accumulate(heights, 0) + spacing * (lineCount - 1);\n    const minLineHeight = Math.min(...heights);\n    const bad1 = minLineHeight < minWidth ? 1.5 : 1;\n    const bad2 = (() => {\n      for (let line = 1; line !== lineCount; ++line) {\n        if (lineCounts[line - 1] > lineCounts[line]) {\n          return 1.5;\n        }\n      }\n\n      return 1;\n    })();\n    const diff = Math.abs(totalHeight - maxHeight) * bad1 * bad2;\n\n    if (!optimalAttempt || diff < optimalDiff) {\n      optimalAttempt = attempts[i];\n      optimalDiff = diff;\n    }\n  }\n\n  const optimalCounts = optimalAttempt!.lineCounts;\n  const optimalHeights = optimalAttempt!.heights;\n  const rowCount = optimalCounts.length;\n  let index = 0;\n  let y = 0;\n  for (let row = 0; row !== rowCount; ++row) {\n    const colCount = optimalCounts[row];\n    const lineHeight = optimalHeights[row];\n    const height = Math.round(lineHeight);\n    let x = 0;\n\n    for (let col = 0; col !== colCount; ++col) {\n      const sides = AlbumRectPart.None\n        | (row === 0 ? AlbumRectPart.Top : AlbumRectPart.None)\n        | (row === rowCount - 1 ? AlbumRectPart.Bottom : AlbumRectPart.None)\n        | (col === 0 ? AlbumRectPart.Left : AlbumRectPart.None)\n        | (col === colCount - 1 ? AlbumRectPart.Right : AlbumRectPart.None);\n      const ratio = ratios[index];\n      const width = col === colCount - 1 ? maxWidth - x : Math.round(ratio * lineHeight);\n      result[index] = {\n        dimensions: {\n          x,\n          y,\n          width,\n          height,\n        },\n        sides,\n      };\n      x += width + spacing;\n      ++index;\n    }\n    y += height + spacing;\n  }\n\n  return result;\n}\n\nfunction layoutTwo(params: ILayoutParams) {\n  const {\n    ratios,\n    proportions,\n    averageRatio,\n  } = params;\n  return proportions === 'ww' && averageRatio > 1.4 && ratios[1] - ratios[0] < 0.2\n    ? layoutTwoTopBottom(params)\n    : proportions === 'ww' || proportions === 'qq'\n      ? layoutTwoLeftRightEqual(params)\n      : layoutTwoLeftRight(params);\n}\n\nfunction layoutTwoTopBottom(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const height = Math.round(Math.min(maxWidth / ratios[0], Math.min(maxWidth / ratios[1], (maxHeight - spacing) / 2)));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: height + spacing,\n      width: maxWidth,\n      height,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutTwoLeftRightEqual(params: ILayoutParams) {\n  const {\n    ratios,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const width = (maxWidth - spacing) / 2;\n  const height = Math.round(Math.min(width / ratios[0], Math.min(width / ratios[1], maxHeight)));\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: width + spacing,\n      y: 0,\n      width,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutTwoLeftRight(params: ILayoutParams) {\n  const {\n    ratios,\n    minWidth,\n    maxWidth,\n    spacing,\n    maxHeight,\n  } = params;\n  const minimalWidth = Math.round(1.5 * minWidth);\n  const secondWidth = Math.min(\n    Math.round(\n      Math.max(\n        0.4 * (maxWidth - spacing),\n        (maxWidth - spacing) / ratios[0] / (1 / ratios[0] + 1 / ratios[1]),\n      ),\n    ),\n    maxWidth - spacing - minimalWidth,\n  );\n  const firstWidth = maxWidth - secondWidth - spacing;\n  const height = Math.min(maxHeight, Math.round(Math.min(firstWidth / ratios[0], secondWidth / ratios[1])));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: firstWidth + spacing,\n      y: 0,\n      width: secondWidth,\n      height,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutThree(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'n'\n    ? layoutThreeLeftAndOther(params)\n    : layoutThreeTopAndOther(params);\n}\n\nfunction layoutThreeLeftAndOther(params: ILayoutParams) {\n  const {\n    maxHeight,\n    spacing,\n    ratios,\n    maxWidth,\n    minWidth,\n  } = params;\n  const firstHeight = maxHeight;\n  const thirdHeight = Math.round(\n    Math.min(\n      (maxHeight - spacing) / 2,\n      (ratios[1] * (maxWidth - spacing)) / (ratios[2] + ratios[1]),\n    ),\n  );\n  const secondHeight = firstHeight - thirdHeight - spacing;\n  const rightWidth = Math.max(\n    minWidth,\n    Math.round(\n      Math.min(\n        (maxWidth - spacing) / 2,\n        Math.min(\n          thirdHeight * ratios[2],\n          secondHeight * ratios[1],\n        ),\n      ),\n    ),\n  );\n  const leftWidth = Math.min(Math.round(firstHeight * ratios[0]), maxWidth - spacing - rightWidth);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: leftWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: 0,\n      width: rightWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: leftWidth + spacing,\n      y: secondHeight + spacing,\n      width: rightWidth,\n      height: thirdHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutThreeTopAndOther(params: ILayoutParams) {\n  const {\n    maxWidth,\n    ratios,\n    maxHeight,\n    spacing,\n  } = params;\n  const firstWidth = maxWidth;\n  const firstHeight = Math.round(Math.min(firstWidth / ratios[0], 0.66 * (maxHeight - spacing)));\n  const secondWidth = (maxWidth - spacing) / 2;\n  const secondHeight = Math.min(\n    maxHeight - firstHeight - spacing,\n    Math.round(Math.min(\n      secondWidth / ratios[1],\n      secondWidth / ratios[2],\n    )),\n  );\n  const thirdWidth = firstWidth - secondWidth - spacing;\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: firstWidth,\n      height: firstHeight,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: firstHeight + spacing,\n      width: secondWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: secondWidth + spacing,\n      y: firstHeight + spacing,\n      width: thirdWidth,\n      height: secondHeight,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n\nfunction layoutFour(params: ILayoutParams) {\n  const { proportions } = params;\n\n  return proportions[0] === 'w'\n    ? layoutFourTopAndOther(params)\n    : layoutFourLeftAndOther(params);\n}\n\nfunction layoutFourTopAndOther({\n  maxWidth,\n  ratios,\n  spacing,\n  maxHeight,\n  minWidth,\n}: ILayoutParams) {\n  const w = maxWidth;\n  const h0 = Math.round(Math.min(w / ratios[0], 0.66 * (maxHeight - spacing)));\n  const h = Math.round((maxWidth - 2 * spacing) / (ratios[1] + ratios[2] + ratios[3]));\n  const w0 = Math.max(minWidth, Math.round(Math.min(0.4 * (maxWidth - 2 * spacing), h * ratios[1])));\n  const w2 = Math.round(Math.max(Math.max(minWidth, 0.33 * (maxWidth - 2 * spacing)), h * ratios[3]));\n  const w1 = w - w0 - w2 - 2 * spacing;\n  const h1 = Math.min(maxHeight - h0 - spacing, h);\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w,\n      height: h0,\n    },\n    sides: AlbumRectPart.Left | AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: 0,\n      y: h0 + spacing,\n      width: w0,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Left,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing + w1 + spacing,\n      y: h0 + spacing,\n      width: w2,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right | AlbumRectPart.Bottom,\n  }];\n}\n\nfunction layoutFourLeftAndOther({\n  maxHeight,\n  ratios,\n  maxWidth,\n  spacing,\n  minWidth,\n}: ILayoutParams) {\n  const h = maxHeight;\n  const w0 = Math.round(Math.min(h * ratios[0], 0.6 * (maxWidth - spacing)));\n  const w = Math.round((maxHeight - 2 * spacing) / (1 / ratios[1] + 1 / ratios[2] + 1 / ratios[3]));\n  const h0 = Math.round(w / ratios[1]);\n  const h1 = Math.round(w / ratios[2]);\n  const h2 = h - h0 - h1 - 2 * spacing;\n  const w1 = Math.max(minWidth, Math.min(maxWidth - w0 - spacing, w));\n\n  return [{\n    dimensions: {\n      x: 0,\n      y: 0,\n      width: w0,\n      height: h,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Left | AlbumRectPart.Bottom,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: 0,\n      width: w1,\n      height: h0,\n    },\n    sides: AlbumRectPart.Top | AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + spacing,\n      width: w1,\n      height: h1,\n    },\n    sides: AlbumRectPart.Right,\n  }, {\n    dimensions: {\n      x: w0 + spacing,\n      y: h0 + h1 + 2 * spacing,\n      width: w1,\n      height: h2,\n    },\n    sides: AlbumRectPart.Bottom | AlbumRectPart.Right,\n  }];\n}\n","let element: HTMLSpanElement | undefined;\nlet fontFamily: string | undefined;\nexport default function calculateAuthorWidth(text: string) {\n  if (!fontFamily) {\n    fontFamily = getComputedStyle(document.documentElement).getPropertyValue('--font-family');\n  }\n\n  if (!element) {\n    element = document.createElement('span');\n    element.style.font = `400 12px ${fontFamily}`;\n    element.style.whiteSpace = 'nowrap';\n    element.style.position = 'absolute';\n    element.style.left = '-999px';\n    element.style.opacity = '.01';\n    document.body.appendChild(element);\n  }\n\n  element.textContent = text;\n\n  return element.offsetWidth;\n}\n","import { getActions } from '../../../../global';\n\nimport type { FocusDirection } from '../../../../types';\n\nimport { useLayoutEffect } from '../../../../lib/teact/teact';\nimport fastSmoothScroll from '../../../../util/fastSmoothScroll';\n\n// This is used when the viewport was replaced.\nconst RELOCATED_FOCUS_OFFSET = 1000;\nconst FOCUS_MARGIN = 20;\n\nexport default function useFocusMessage(\n  elementRef: { current: HTMLDivElement | null },\n  chatId: string,\n  isFocused?: boolean,\n  focusDirection?: FocusDirection,\n  noFocusHighlight?: boolean,\n  isResizingContainer?: boolean,\n) {\n  const { setReachedFocusedMessage } = getActions();\n\n  useLayoutEffect(() => {\n    if (isFocused && elementRef.current) {\n      const messagesContainer = elementRef.current.closest<HTMLDivElement>('.MessageList')!;\n\n      setReachedFocusedMessage({\n        hasReached: true,\n      });\n\n      fastSmoothScroll(\n        messagesContainer,\n        elementRef.current,\n        // `noFocusHighlight` always called from “scroll-to-bottom” buttons\n        noFocusHighlight ? 'end' : 'centerOrTop',\n        FOCUS_MARGIN,\n        focusDirection !== undefined ? RELOCATED_FOCUS_OFFSET : undefined,\n        focusDirection,\n        undefined,\n        isResizingContainer,\n      );\n    }\n  }, [\n    elementRef, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer, setReachedFocusedMessage,\n  ]);\n}\n","import type { RefObject } from 'react';\nimport type React from '../../../../lib/teact/teact';\nimport { useEffect, useRef } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../../util/environment';\nimport windowSize from '../../../../util/windowSize';\nimport { captureEvents, SwipeDirection } from '../../../../util/captureEvents';\nimport useFlag from '../../../../hooks/useFlag';\nimport { preventMessageInputBlur } from '../../helpers/preventMessageInputBlur';\nimport stopEvent from '../../../../util/stopEvent';\nimport { REM } from '../../../common/helpers/mediaDimensions';\n\nconst ANDROID_KEYBOARD_HIDE_DELAY_MS = 350;\nconst SWIPE_ANIMATION_DURATION = 150;\nconst QUICK_REACTION_DOUBLE_TAP_DELAY = 200;\nconst QUICK_REACTION_AREA_WIDTH = 3 * REM;\nconst QUICK_REACTION_AREA_HEIGHT = Number(REM);\nconst GROUP_MESSAGE_HOVER_ATTRIBUTE = 'data-is-document-group-hover';\n\nexport default function useOuterHandlers(\n  selectMessage: (e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  containerRef: RefObject<HTMLDivElement>,\n  messageId: number,\n  isAlbum: boolean,\n  isInSelectMode: boolean,\n  canReply: boolean,\n  isProtected: boolean,\n  onContextMenu: (e: React.MouseEvent) => void,\n  handleBeforeContextMenu: (e: React.MouseEvent) => void,\n  chatId: string,\n  isContextMenuShown: boolean,\n  contentRef: RefObject<HTMLDivElement>,\n  isOwn: boolean,\n  shouldHandleMouseLeave: boolean,\n) {\n  const { setReplyingToId, sendDefaultReaction } = getActions();\n\n  const [isQuickReactionVisible, markQuickReactionVisible, unmarkQuickReactionVisible] = useFlag();\n  const [isSwiped, markSwiped, unmarkSwiped] = useFlag();\n  const doubleTapTimeoutRef = useRef<NodeJS.Timeout>();\n\n  function handleMouseDown(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    const container = contentRef.current;\n    if (!container) return;\n\n    const { clientX, clientY } = e;\n    const {\n      x, width, y, height,\n    } = container.getBoundingClientRect();\n\n    const isVisibleX = Math.abs((isOwn ? (clientX - x) : (x + width - clientX))) < QUICK_REACTION_AREA_WIDTH;\n    const isVisibleY = Math.abs(y + height - clientY) < QUICK_REACTION_AREA_HEIGHT;\n    if (isVisibleX && isVisibleY) {\n      markQuickReactionVisible();\n    } else {\n      unmarkQuickReactionVisible();\n    }\n  }\n\n  function handleSendQuickReaction() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleTap(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      const target = e.target as HTMLDivElement;\n      if (!target.classList.contains('text-content') && !target.classList.contains('Message')) {\n        return;\n      }\n\n      if (windowSize.getIsKeyboardVisible()) {\n        setTimeout(() => {\n          onContextMenu(e);\n        }, ANDROID_KEYBOARD_HIDE_DELAY_MS);\n      } else {\n        onContextMenu(e);\n      }\n    }\n  }\n\n  function handleDoubleTap() {\n    sendDefaultReaction({\n      chatId,\n      messageId,\n    });\n  }\n\n  function handleClick(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (isInSelectMode) {\n      selectMessage(e);\n      return;\n    }\n\n    if (!IS_TOUCH_ENV) return;\n\n    if (doubleTapTimeoutRef.current) {\n      clearInterval(doubleTapTimeoutRef.current);\n      doubleTapTimeoutRef.current = undefined;\n      handleDoubleTap();\n      return;\n    }\n\n    doubleTapTimeoutRef.current = setTimeout(() => {\n      doubleTapTimeoutRef.current = undefined;\n      handleTap(e);\n    }, QUICK_REACTION_DOUBLE_TAP_DELAY);\n  }\n\n  function handleContextMenu(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (IS_ANDROID) {\n      if ((e.target as HTMLElement).matches('a[href]') || isContextMenuShown) {\n        return;\n      }\n\n      e.preventDefault();\n      selectMessage();\n    } else {\n      onContextMenu(e);\n    }\n  }\n\n  function handleContainerDoubleClick() {\n    if (IS_TOUCH_ENV || !canReply) return;\n\n    setReplyingToId({ messageId });\n  }\n\n  function stopPropagation(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.stopPropagation();\n  }\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV || isInSelectMode || !canReply || isContextMenuShown) {\n      return undefined;\n    }\n\n    let startedAt: number | undefined;\n    return captureEvents(containerRef.current!, {\n      selectorToPreventScroll: '.MessageList',\n      excludedClosestSelector: '.no-word-wrap',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          if (!startedAt) {\n            startedAt = Date.now();\n          }\n\n          markSwiped();\n\n          return true;\n        }\n\n        return false;\n      }),\n      onRelease: () => {\n        if (!startedAt || !canReply) {\n          return;\n        }\n\n        setReplyingToId({ messageId });\n\n        setTimeout(unmarkSwiped, Math.max(0, SWIPE_ANIMATION_DURATION - (Date.now() - startedAt)));\n        startedAt = undefined;\n      },\n    });\n  }, [\n    containerRef, isInSelectMode, messageId, setReplyingToId, markSwiped, unmarkSwiped, canReply, isContextMenuShown,\n  ]);\n\n  function handleMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n    unmarkQuickReactionVisible();\n    if (shouldHandleMouseLeave) handleDocumentGroupMouseLeave(e);\n  }\n\n  return {\n    handleMouseDown: !isInSelectMode ? handleMouseDown : undefined,\n    handleClick,\n    handleContextMenu: !isInSelectMode ? handleContextMenu : (isProtected ? stopEvent : undefined),\n    handleDoubleClick: !isInSelectMode ? handleContainerDoubleClick : undefined,\n    handleContentDoubleClick: !IS_TOUCH_ENV ? stopPropagation : undefined,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  };\n}\n\nfunction handleDocumentGroupMouseEnter(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.setAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE, '');\n  }\n}\n\nfunction handleDocumentGroupMouseLeave(e: React.MouseEvent<HTMLDivElement>) {\n  const lastGroupElement = getLastElementInDocumentGroup(e.currentTarget);\n  if (lastGroupElement) {\n    lastGroupElement.removeAttribute(GROUP_MESSAGE_HOVER_ATTRIBUTE);\n  }\n}\n\nfunction getLastElementInDocumentGroup(element: Element) {\n  let current: Element | null = element;\n\n  do {\n    current = current.nextElementSibling;\n  } while (current && !current.classList.contains('last-in-document-group'));\n\n  return current;\n}\n","import type { FastTextApi } from '../lib/fasttextweb/fasttext.worker';\nimport type { Connector } from './PostMessageConnector';\n\nimport { createConnector } from './PostMessageConnector';\nimport Deferred from './Deferred';\n\nconst WORKER_INIT_DELAY = 4000;\n\nconst DEFAULT_THRESHOLD = 0.2;\nconst DEFAULT_LABELS_COUNT = 5;\n\nlet worker: Connector<FastTextApi> | undefined;\nconst initializationDeferred = new Deferred();\n\nsetTimeout(initWorker, WORKER_INIT_DELAY);\n\nfunction initWorker() {\n  if (!worker) {\n    worker = createConnector<FastTextApi>(\n      new Worker(new URL('../lib/fasttextweb/fasttext.worker.ts', import.meta.url)),\n    );\n    initializationDeferred.resolve();\n  }\n}\n\nexport async function detectLanguage(text: string, threshold = DEFAULT_THRESHOLD) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguage', args: [text, threshold] });\n  return result;\n}\n\nexport async function detectLanguageProbability(\n  text: string, labelsCount = DEFAULT_LABELS_COUNT, threshold = DEFAULT_THRESHOLD,\n) {\n  if (!worker) await initializationDeferred.promise;\n  const result = await worker!.request({ name: 'detectLanguageProbability', args: [text, labelsCount, threshold] });\n  return result;\n}\n","export default class Deferred<T = void> {\n  promise: Promise<T>;\n\n  reject!: (reason?: any) => void;\n\n  resolve!: (value: T | PromiseLike<T>) => void;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.reject = reject;\n      this.resolve = resolve;\n    });\n  }\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './ContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst ContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ContextMenuContainer = useModuleLoader(Bundles.Extra, 'ContextMenuContainer', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ContextMenuContainer ? <ContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(ContextMenuContainerAsync);\n","import React, { memo, useCallback, useState } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiMessage } from '../../api/types';\nimport type { TextPart } from '../../types';\nimport { MediaViewerOrigin, SettingsScreens } from '../../types';\nimport { ApiMediaFormat, MAIN_THREAD_ID } from '../../api/types';\n\nimport { getMessageMediaHash } from '../../global/helpers';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport useMedia from '../../hooks/useMedia';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Avatar from '../common/Avatar';\nimport CropModal from '../ui/CropModal';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\ntype OwnProps = {\n  message: ApiMessage;\n  content?: TextPart;\n};\n\nconst ActionMessageSuggestedAvatar: FC<OwnProps> = ({\n  message,\n  content,\n}) => {\n  const {\n    openMediaViewer, uploadProfilePhoto, showNotification,\n  } = getActions();\n\n  const { isOutgoing } = message;\n\n  const lang = useLang();\n  const [cropModalBlob, setCropModalBlob] = useState<Blob | undefined>();\n  const [isVideoModalOpen, openVideoModal, closeVideoModal] = useFlag(false);\n  const suggestedPhotoUrl = useMedia(getMessageMediaHash(message, 'full'));\n  const isVideo = message.content.action!.photo?.isVideo;\n\n  const showAvatarNotification = useCallback(() => {\n    showNotification({\n      title: lang('ApplyAvatarHintTitle'),\n      message: lang('ApplyAvatarHint'),\n      action: {\n        action: 'requestNextSettingsScreen',\n        payload: {\n          screen: SettingsScreens.Main,\n        },\n      },\n      actionText: lang('Open'),\n    });\n  }, [lang, showNotification]);\n\n  const handleSetSuggestedAvatar = useCallback((file: File) => {\n    setCropModalBlob(undefined);\n    uploadProfilePhoto({ file });\n    showAvatarNotification();\n  }, [showAvatarNotification, uploadProfilePhoto]);\n\n  const handleCloseCropModal = useCallback(() => {\n    setCropModalBlob(undefined);\n  }, []);\n\n  const handleSetVideo = useCallback(async () => {\n    closeVideoModal();\n    showAvatarNotification();\n\n    // TODO Once we support uploading video avatars, add crop/trim modal here\n    const photo = message.content.action!.photo!;\n    const blobUrl = await mediaLoader.fetch(`videoAvatar${photo.id}?size=u`, ApiMediaFormat.BlobUrl);\n    const blob = await fetch(blobUrl).then((r) => r.blob());\n    uploadProfilePhoto({\n      file: new File([blob], 'avatar.mp4'),\n      isVideo: true,\n      videoTs: photo.videoSizes?.find((l) => l.videoStartTs !== undefined)?.videoStartTs,\n    });\n  }, [closeVideoModal, message.content.action, showAvatarNotification, uploadProfilePhoto]);\n\n  const handleViewSuggestedAvatar = async () => {\n    if (!isOutgoing && suggestedPhotoUrl) {\n      if (isVideo) {\n        openVideoModal();\n      } else {\n        setCropModalBlob(await fetch(suggestedPhotoUrl).then((r) => r.blob()));\n      }\n    } else {\n      openMediaViewer({\n        chatId: message.chatId,\n        mediaId: message.id,\n        threadId: MAIN_THREAD_ID,\n        origin: MediaViewerOrigin.SuggestedAvatar,\n      });\n    }\n  };\n\n  return (\n    <span className=\"action-message-suggested-avatar\" tabIndex={0} role=\"button\" onClick={handleViewSuggestedAvatar}>\n      <Avatar\n        photo={message.content.action!.photo}\n        showVideoOverwrite\n        loopIndefinitely\n        withVideo={isVideo}\n        size=\"jumbo\"\n      />\n      <span>{content}</span>\n\n      <span className=\"action-message-button\">{lang(isVideo ? 'ViewVideoAction' : 'ViewPhotoAction')}</span>\n      <CropModal\n        file={cropModalBlob}\n        onClose={handleCloseCropModal}\n        onChange={handleSetSuggestedAvatar}\n      />\n      <ConfirmDialog\n        isOpen={isVideoModalOpen}\n        title={lang('SuggestedVideo')}\n        confirmHandler={handleSetVideo}\n        onClose={closeVideoModal}\n        textParts={content}\n      />\n    </span>\n  );\n};\n\nexport default memo(ActionMessageSuggestedAvatar);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useMemo, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat, ApiSticker, ApiTopic,\n} from '../../api/types';\nimport type { FocusDirection } from '../../types';\n\nimport {\n  selectUser,\n  selectChatMessage,\n  selectIsMessageFocused,\n  selectChat,\n  selectTopicFromMessage,\n  selectTabState,\n} from '../../global/selectors';\nimport { getMessageHtmlId, isChatChannel } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { renderActionMessageText } from '../common/helpers/renderActionMessageText';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useEnsureMessage from '../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting, useOnIntersect } from '../../hooks/useIntersectionObserver';\nimport useFocusMessage from './message/hooks/useFocusMessage';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useShowTransition from '../../hooks/useShowTransition';\n\nimport ContextMenuContainer from './message/ContextMenuContainer.async';\nimport AnimatedIconFromSticker from '../common/AnimatedIconFromSticker';\nimport ActionMessageSuggestedAvatar from './ActionMessageSuggestedAvatar';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersectionForReading?: ObserveFn;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  isEmbedded?: boolean;\n  appearanceOrder?: number;\n  isLastInList?: boolean;\n  isInsideTopic?: boolean;\n  memoFirstUnreadIdRef?: { current: number | undefined };\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  senderUser?: ApiUser;\n  senderChat?: ApiChat;\n  targetUserIds?: string[];\n  targetMessage?: ApiMessage;\n  targetChatId?: string;\n  isFocused: boolean;\n  topic?: ApiTopic;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  premiumGiftSticker?: ApiSticker;\n};\n\nconst APPEARANCE_DELAY = 10;\n\nconst ActionMessage: FC<OwnProps & StateProps> = ({\n  message,\n  isEmbedded,\n  appearanceOrder = 0,\n  isLastInList,\n  usersById,\n  senderUser,\n  senderChat,\n  targetUserIds,\n  targetMessage,\n  targetChatId,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  premiumGiftSticker,\n  isInsideTopic,\n  topic,\n  memoFirstUnreadIdRef,\n  observeIntersectionForReading,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n}) => {\n  const { openPremiumModal, requestConfetti } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersectionForReading);\n  useEnsureMessage(message.chatId, message.replyToMessageId, targetMessage);\n  useFocusMessage(ref, message.chatId, isFocused, focusDirection, noFocusHighlight);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  const isGift = Boolean(message.content.action?.text.startsWith('ActionGift'));\n  const isSuggestedAvatar = message.content.action?.type === 'suggestProfilePhoto' && message.content.action!.photo;\n\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n\n  const isVisible = useIsIntersecting(ref, observeIntersectionForPlaying);\n\n  const shouldShowConfettiRef = useRef((() => {\n    const isUnread = memoFirstUnreadIdRef?.current && message.id >= memoFirstUnreadIdRef.current;\n    return isGift && !message.isOutgoing && isUnread;\n  })());\n\n  useEffect(() => {\n    if (isVisible && shouldShowConfettiRef.current) {\n      shouldShowConfettiRef.current = false;\n      requestConfetti();\n    }\n  }, [isVisible, requestConfetti]);\n\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const targetUsers = useMemo(() => {\n    return targetUserIds\n      ? targetUserIds.map((userId) => usersById?.[userId]).filter(Boolean)\n      : undefined;\n  }, [targetUserIds, usersById]);\n\n  const content = renderActionMessageText(\n    lang,\n    message,\n    senderUser,\n    senderChat,\n    targetUsers,\n    targetMessage,\n    targetChatId,\n    topic,\n    { isEmbedded },\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  );\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n  const isContextMenuShown = contextMenuPosition !== undefined;\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handlePremiumGiftClick = () => {\n    openPremiumModal({\n      isGift: true,\n      fromUserId: senderUser?.id,\n      toUserId: targetUserIds?.[0],\n      monthsAmount: message.content.action?.months || 0,\n    });\n  };\n\n  // TODO Refactoring for action rendering\n  const shouldSkipRender = isInsideTopic && message.content.action?.text === 'TopicWasCreatedAction';\n  if (shouldSkipRender) {\n    return <span ref={ref} />;\n  }\n\n  if (isEmbedded) {\n    return <span ref={ref} className=\"embedded-action-message\">{content}</span>;\n  }\n\n  function renderGift() {\n    return (\n      <span className=\"action-message-gift\" tabIndex={0} role=\"button\" onClick={handlePremiumGiftClick}>\n        <AnimatedIconFromSticker\n          key={message.id}\n          sticker={premiumGiftSticker}\n          play\n          noLoop\n          nonInteractive\n        />\n        <strong>{lang('ActionGiftPremiumTitle')}</strong>\n        <span>{lang('ActionGiftPremiumSubtitle', lang('Months', message.content.action?.months, 'i'))}</span>\n\n        <span className=\"action-message-button\">{lang('ActionGiftPremiumView')}</span>\n      </span>\n    );\n  }\n\n  const className = buildClassName(\n    'ActionMessage message-list-item',\n    isFocused && !noFocusHighlight && 'focused',\n    (isGift || isSuggestedAvatar) && 'centered-action',\n    isContextMenuShown && 'has-menu-open',\n    isLastInList && 'last-in-list',\n    !isGift && !isSuggestedAvatar && 'in-one-row',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={className}\n      data-message-id={message.id}\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      {!isSuggestedAvatar && <span className=\"action-message-content\">{content}</span>}\n      {isGift && renderGift()}\n      {isSuggestedAvatar && (\n        <ActionMessageSuggestedAvatar\n          message={message}\n          content={content}\n        />\n      )}\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          messageListType=\"thread\"\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const { byId: usersById } = global.users;\n    const userId = message.senderId;\n    const { targetUserIds, targetChatId } = message.content.action || {};\n    const targetMessageId = message.replyToMessageId;\n    const targetMessage = targetMessageId\n      ? selectChatMessage(global, message.chatId, targetMessageId)\n      : undefined;\n\n    const isFocused = selectIsMessageFocused(global, message);\n    const {\n      direction: focusDirection,\n      noHighlight: noFocusHighlight,\n    } = (isFocused && selectTabState(global).focusedMessage) || {};\n\n    const chat = selectChat(global, message.chatId);\n    const isChat = chat && (isChatChannel(chat) || userId === message.chatId);\n    const senderUser = !isChat && userId ? selectUser(global, userId) : undefined;\n    const senderChat = isChat ? chat : undefined;\n    const premiumGiftSticker = global.premiumGifts?.stickers?.[0];\n    const topic = selectTopicFromMessage(global, message);\n\n    return {\n      usersById,\n      senderUser,\n      senderChat,\n      targetChatId,\n      targetUserIds,\n      targetMessage,\n      isFocused,\n      premiumGiftSticker,\n      topic,\n      ...(isFocused && { focusDirection, noFocusHighlight }),\n    };\n  },\n)(ActionMessage));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useRef } from '../../lib/teact/teact';\n\nimport type {\n  ApiUser, ApiMessage, ApiChat,\n} from '../../api/types';\n\nimport {\n  getMessageMediaHash,\n  isActionMessage,\n  getSenderTitle,\n  getMessageRoundVideo,\n  getUserColorKey,\n  getMessageIsSpoiler,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport { getPictogramDimensions } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\n\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport useMedia from '../../hooks/useMedia';\nimport useThumbnail from '../../hooks/useThumbnail';\nimport useLang from '../../hooks/useLang';\n\nimport ActionMessage from '../middle/ActionMessage';\nimport MessageSummary from './MessageSummary';\nimport MediaSpoiler from './MediaSpoiler';\n\nimport './EmbeddedMessage.scss';\n\ntype OwnProps = {\n  className?: string;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  title?: string;\n  customText?: string;\n  noUserColors?: boolean;\n  isProtected?: boolean;\n  hasContextMenu?: boolean;\n  observeIntersectionForLoading?: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  onClick: NoneToVoidFunction;\n};\n\nconst NBSP = '\\u00A0';\n\nconst EmbeddedMessage: FC<OwnProps> = ({\n  className,\n  message,\n  sender,\n  title,\n  customText,\n  isProtected,\n  noUserColors,\n  hasContextMenu,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  onClick,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const isIntersecting = useIsIntersecting(ref, observeIntersectionForLoading);\n\n  const mediaBlobUrl = useMedia(message && getMessageMediaHash(message, 'pictogram'), !isIntersecting);\n  const mediaThumbnail = useThumbnail(message);\n  const isRoundVideo = Boolean(message && getMessageRoundVideo(message));\n  const isSpoiler = Boolean(message && getMessageIsSpoiler(message));\n\n  const lang = useLang();\n\n  const senderTitle = sender ? getSenderTitle(lang, sender) : message?.forwardInfo?.hiddenUserName;\n\n  return (\n    <div\n      ref={ref}\n      className={buildClassName(\n        'EmbeddedMessage',\n        className,\n        sender && !noUserColors && `color-${getUserColorKey(sender)}`,\n      )}\n      onClick={message ? onClick : undefined}\n    >\n      {mediaThumbnail && renderPictogram(mediaThumbnail, mediaBlobUrl, isRoundVideo, isProtected, isSpoiler)}\n      <div className=\"message-text\">\n        <p dir=\"auto\">\n          {!message ? (\n            customText || NBSP\n          ) : isActionMessage(message) ? (\n            <ActionMessage\n              message={message}\n              isEmbedded\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          ) : (\n            <MessageSummary\n              lang={lang}\n              message={message}\n              noEmoji={Boolean(mediaThumbnail)}\n              observeIntersectionForLoading={observeIntersectionForLoading}\n              observeIntersectionForPlaying={observeIntersectionForPlaying}\n            />\n          )}\n        </p>\n        <div className=\"message-title\" dir=\"auto\">{renderText(senderTitle || title || NBSP)}</div>\n      </div>\n      {hasContextMenu && <i className=\"embedded-more icon-more\" />}\n    </div>\n  );\n};\n\nfunction renderPictogram(\n  thumbDataUri: string,\n  blobUrl?: string,\n  isRoundVideo?: boolean,\n  isProtected?: boolean,\n  isSpoiler?: boolean,\n) {\n  const { width, height } = getPictogramDimensions();\n\n  const srcUrl = blobUrl || thumbDataUri;\n\n  return (\n    <div className={buildClassName('embedded-thumb', isRoundVideo && 'round')}>\n      {!isSpoiler && (\n        <img\n          src={srcUrl}\n          width={width}\n          height={height}\n          alt=\"\"\n          className=\"pictogram\"\n          draggable={false}\n        />\n      )}\n      <MediaSpoiler thumbDataUri={srcUrl} isVisible={Boolean(isSpoiler)} width={width} height={height} />\n      {isProtected && <span className=\"protector\" />}\n    </div>\n  );\n}\n\nexport default EmbeddedMessage;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiMessageOutgoingStatus, ApiThreadInfo,\n} from '../../../api/types';\n\nimport { formatDateTimeToString, formatTime } from '../../../util/dateFormat';\nimport { formatIntegerCompact } from '../../../util/textFormat';\n\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\n\nimport MessageOutgoingStatus from '../../common/MessageOutgoingStatus';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './MessageMeta.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  withReactionOffset?: boolean;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  signature?: string;\n  availableReactions?: ApiAvailableReaction[];\n  noReplies?: boolean;\n  repliesThreadInfo?: ApiThreadInfo;\n  isTranslated?: boolean;\n  onClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onTranslationClick: (e: React.MouseEvent<HTMLDivElement>) => void;\n  onOpenThread: NoneToVoidFunction;\n};\n\nconst MessageMeta: FC<OwnProps> = ({\n  message,\n  outgoingStatus,\n  signature,\n  withReactionOffset,\n  repliesThreadInfo,\n  noReplies,\n  isTranslated,\n  onClick,\n  onTranslationClick,\n  onOpenThread,\n}) => {\n  const { showNotification } = getActions();\n  const lang = useLang();\n  const [isActivated, markActivated] = useFlag();\n\n  const handleClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    showNotification({\n      message: lang('ImportedInfo'),\n    });\n  };\n\n  function handleOpenThread(e: React.MouseEvent) {\n    e.stopPropagation();\n    onOpenThread();\n  }\n\n  const title = useMemo(() => {\n    if (!isActivated) return undefined;\n    const createDateTime = formatDateTimeToString(message.date * 1000, lang.code);\n    const editDateTime = message.isEdited && formatDateTimeToString(message.editDate! * 1000, lang.code);\n    const forwardedDateTime = message.forwardInfo && formatDateTimeToString(message.forwardInfo.date * 1000, lang.code);\n\n    let text = createDateTime;\n    if (editDateTime) {\n      text += '\\n';\n      text += lang('lng_edited_date').replace('{date}', editDateTime);\n    }\n    if (forwardedDateTime) {\n      text += '\\n';\n      text += lang('lng_forwarded_date').replace('{date}', forwardedDateTime);\n    }\n\n    return text;\n  }, [isActivated, lang, message]);\n\n  const fullClassName = buildClassName(\n    'MessageMeta',\n    withReactionOffset && 'reactions-offset',\n    message.forwardInfo?.isImported && 'is-imported',\n  );\n\n  return (\n    <span\n      className={fullClassName}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={onClick}\n      data-ignore-on-paste\n    >\n      {isTranslated && (\n        <i className=\"icon-language message-translated\" onClick={onTranslationClick} />\n      )}\n      {Boolean(message.views) && (\n        <>\n          <span className=\"message-views\">\n            {formatIntegerCompact(message.views!)}\n          </span>\n          <i className=\"icon-channelviews\" />\n        </>\n      )}\n      {!noReplies && Boolean(repliesThreadInfo?.messagesCount) && (\n        <span onClick={handleOpenThread}>\n          <span className=\"message-replies\">\n            <AnimatedCounter text={formatIntegerCompact(repliesThreadInfo!.messagesCount!)} />\n          </span>\n          <i className=\"icon-reply-filled\" />\n        </span>\n      )}\n      {signature && (\n        <span className=\"message-signature\">{renderText(signature)}</span>\n      )}\n      <span className=\"message-time\" title={title} onMouseEnter={markActivated}>\n        {message.forwardInfo?.isImported && (\n          <>\n            <span className=\"message-imported\" onClick={handleClick}>\n              {formatDateTimeToString(message.forwardInfo.date * 1000, lang.code, true)}\n            </span>\n            <span className=\"message-imported\" onClick={handleClick}>{lang('ImportedMessage')}</span>\n          </>\n        )}\n        {message.isEdited && `${lang('EditedMessage')} `}\n        {formatTime(lang, message.date * 1000)}\n      </span>\n      {outgoingStatus && (\n        <MessageOutgoingStatus status={outgoingStatus} />\n      )}\n    </span>\n  );\n};\n\nexport default memo(MessageMeta);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getStickerDimensions } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getActions } from '../../../global';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport usePrevious from '../../../hooks/usePrevious';\n\nimport StickerView from '../../common/StickerView';\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './Sticker.scss';\n\n// https://github.com/telegramdesktop/tdesktop/blob/master/Telegram/SourceFiles/history/view/media/history_view_sticker.cpp#L42\nconst EFFECT_SIZE_MULTIPLIER = 1 + 0.245 * 2;\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  observeIntersectionForPlaying: ObserveFn;\n  shouldLoop?: boolean;\n  lastSyncTime?: number;\n  shouldPlayEffect?: boolean;\n  onPlayEffect?: VoidFunction;\n  onStopEffect?: VoidFunction;\n};\n\nconst Sticker: FC<OwnProps> = ({\n  message, observeIntersection, observeIntersectionForPlaying, shouldLoop, lastSyncTime,\n  shouldPlayEffect, onPlayEffect, onStopEffect,\n}) => {\n  const { showNotification, openStickerSet } = getActions();\n\n  const lang = useLang();\n  const { isMobile } = useAppLayout();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const sticker = message.content.sticker!;\n  const { stickerSetInfo, isVideo, hasEffect } = sticker;\n\n  const mediaHash = sticker.isPreloadedGlobally ? undefined : (\n    getMessageMediaHash(message, isVideo && !IS_WEBM_SUPPORTED ? 'pictogram' : 'inline')!\n  );\n\n  const canLoad = useIsIntersecting(ref, observeIntersection);\n  const canPlay = useIsIntersecting(ref, observeIntersectionForPlaying);\n  const mediaHashEffect = `sticker${sticker.id}?size=f`;\n  const effectBlobUrl = useMedia(\n    mediaHashEffect,\n    !canLoad || !hasEffect,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n  const [isPlayingEffect, startPlayingEffect, stopPlayingEffect] = useFlag();\n\n  const handleEffectEnded = useCallback(() => {\n    stopPlayingEffect();\n    onStopEffect?.();\n  }, [onStopEffect, stopPlayingEffect]);\n\n  const previousShouldPlayEffect = usePrevious(shouldPlayEffect);\n\n  useEffect(() => {\n    if (hasEffect && canPlay && (shouldPlayEffect || previousShouldPlayEffect)) {\n      startPlayingEffect();\n      onPlayEffect?.();\n    }\n  }, [hasEffect, canPlay, onPlayEffect, shouldPlayEffect, previousShouldPlayEffect, startPlayingEffect]);\n\n  const openModal = useCallback(() => {\n    openStickerSet({\n      stickerSetInfo: sticker.stickerSetInfo,\n    });\n  }, [openStickerSet, sticker]);\n\n  const handleClick = useCallback(() => {\n    if (hasEffect) {\n      if (isPlayingEffect) {\n        showNotification({\n          message: lang('PremiumStickerTooltip'),\n          action: {\n            action: 'openStickerSet',\n            payload: {\n              stickerSetInfo: sticker.stickerSetInfo,\n            },\n          },\n          actionText: lang('ViewAction'),\n        });\n        return;\n      } else {\n        startPlayingEffect();\n        onPlayEffect?.();\n        return;\n      }\n    }\n    openModal();\n  }, [\n    hasEffect, isPlayingEffect, lang, onPlayEffect, openModal, showNotification, startPlayingEffect,\n    sticker.stickerSetInfo,\n  ]);\n\n  const isMemojiSticker = 'isMissing' in stickerSetInfo;\n  const { width, height } = getStickerDimensions(sticker, isMobile);\n  const className = buildClassName(\n    'Sticker media-inner',\n    isMemojiSticker && 'inactive',\n    hasEffect && !message.isOutgoing && 'reversed',\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={className}\n      style={`width: ${width}px; height: ${height}px;`}\n      onClick={!isMemojiSticker ? handleClick : undefined}\n    >\n      <StickerView\n        containerRef={ref}\n        sticker={sticker}\n        fullMediaHash={mediaHash}\n        fullMediaClassName=\"full-media\"\n        size={width}\n        shouldLoop={shouldLoop}\n        noLoad={!canLoad}\n        noPlay={!canPlay}\n        withSharedAnimation\n        cacheBuster={lastSyncTime}\n      />\n      {hasEffect && canLoad && isPlayingEffect && (\n        <AnimatedSticker\n          key={mediaHashEffect}\n          className=\"effect-sticker\"\n          tgsUrl={effectBlobUrl}\n          size={width * EFFECT_SIZE_MULTIPLIER}\n          play\n          isLowPriority\n          noLoop\n          onEnded={handleEffectEnded}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Sticker;\n","import {\n  useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ActiveEmojiInteraction } from '../../../global/types';\n\nimport safePlay from '../../../util/safePlay';\nimport buildStyle from '../../../util/buildStyle';\nimport { REM } from '../helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\n\nconst SIZE = 7 * REM;\nconst INTERACTION_BUNCH_TIME = 1000;\nconst MS_DIVIDER = 1000;\nconst TIME_DEFAULT = 0;\n\nexport default function useAnimatedEmoji(\n  chatId?: string,\n  messageId?: number,\n  soundId?: string,\n  activeEmojiInteractions?: ActiveEmojiInteraction[],\n  isOwn?: boolean,\n  emoji?: string,\n  preferredSize?: number,\n) {\n  const {\n    interactWithAnimatedEmoji, sendEmojiInteraction, sendWatchingEmojiInteraction,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  // eslint-disable-next-line no-null/no-null\n  const audioRef = useRef<HTMLAudioElement | undefined>(null);\n\n  const soundMediaData = useMedia(soundId ? `document${soundId}` : undefined, !soundId);\n\n  const size = preferredSize || SIZE;\n  const style = buildStyle(`width: ${size}px`, `height: ${size}px`, emoji && 'cursor: pointer');\n\n  const interactions = useRef<number[] | undefined>(undefined);\n  const startedInteractions = useRef<number | undefined>(undefined);\n  const sendInteractionBunch = useCallback(() => {\n    const container = ref.current;\n\n    if (!container) return;\n\n    sendEmojiInteraction({\n      chatId: chatId!,\n      messageId: messageId!,\n      emoji: emoji!,\n      interactions: interactions.current!,\n    });\n    startedInteractions.current = undefined;\n    interactions.current = undefined;\n  }, [sendEmojiInteraction, chatId, messageId, emoji]);\n\n  const play = useCallback(() => {\n    const audio = audioRef.current;\n    if (soundMediaData) {\n      if (audio) {\n        audio.pause();\n        audio.remove();\n      }\n      audioRef.current = new Audio();\n      audioRef.current.src = soundMediaData;\n      safePlay(audioRef.current);\n      audioRef.current.addEventListener('ended', () => {\n        audioRef.current = undefined;\n      }, { once: true });\n    }\n  }, [soundMediaData]);\n\n  const handleClick = useCallback(() => {\n    play();\n\n    const container = ref.current;\n\n    if (!emoji || !container || !messageId || !chatId) {\n      return;\n    }\n\n    const { x, y } = container.getBoundingClientRect();\n\n    interactWithAnimatedEmoji({\n      emoji: emoji!,\n      x,\n      y,\n      startSize: size,\n      isReversed: !isOwn,\n    });\n\n    if (!interactions.current) {\n      interactions.current = [];\n      startedInteractions.current = performance.now();\n      setTimeout(sendInteractionBunch, INTERACTION_BUNCH_TIME);\n    }\n\n    interactions.current.push(startedInteractions.current\n      ? (performance.now() - startedInteractions.current) / MS_DIVIDER\n      : TIME_DEFAULT);\n  }, [chatId, emoji, interactWithAnimatedEmoji, isOwn, messageId, play, sendInteractionBunch, size]);\n\n  // Set an end anchor for remote activated interaction\n  useEffect(() => {\n    const container = ref.current;\n\n    if (!container || !activeEmojiInteractions) return;\n\n    activeEmojiInteractions.forEach(({\n      id,\n      startSize,\n      messageId: interactionMessageId,\n    }) => {\n      if (startSize || messageId !== interactionMessageId) {\n        return;\n      }\n\n      const { x, y } = container.getBoundingClientRect();\n\n      sendWatchingEmojiInteraction({\n        id,\n        chatId: chatId!,\n        emoticon: emoji!,\n        startSize: size,\n        x,\n        y,\n        isReversed: !isOwn,\n      });\n      play();\n    });\n  }, [activeEmojiInteractions, chatId, emoji, isOwn, messageId, play, sendWatchingEmojiInteraction, size]);\n\n  return {\n    ref,\n    size,\n    style,\n    handleClick,\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmoji,\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport AnimatedIconFromSticker from '../../common/AnimatedIconFromSticker';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  emoji: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  observeIntersection?: ObserveFn;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst QUALITY = 1;\n\nconst AnimatedEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  observeIntersection,\n  lastSyncTime,\n  forceLoadPreview,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji);\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  return (\n    <AnimatedIconFromSticker\n      sticker={sticker}\n      size={size}\n      quality={QUALITY}\n      noLoad={!isIntersecting}\n      forcePreview={forceLoadPreview}\n      lastSyncTime={lastSyncTime}\n      play={isIntersecting}\n      forceOnHeavyAnimation\n      ref={ref}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { emoji, withEffects }) => {\n  return {\n    sticker: selectAnimatedEmoji(global, emoji),\n    effect: withEffects ? selectAnimatedEmojiEffect(global, emoji) : undefined,\n    soundId: selectAnimatedEmojiSound(global, emoji),\n  };\n})(AnimatedEmoji));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { ActiveEmojiInteraction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { LIKE_STICKER_ID } from '../../common/helpers/mediaDimensions';\nimport {\n  selectAnimatedEmojiEffect,\n  selectAnimatedEmojiSound,\n} from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport useAnimatedEmoji from '../../common/hooks/useAnimatedEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\n\nimport './AnimatedEmoji.scss';\n\ntype OwnProps = {\n  customEmojiId: string;\n  withEffects: boolean;\n  isOwn?: boolean;\n  lastSyncTime?: number;\n  forceLoadPreview?: boolean;\n  messageId?: number;\n  chatId?: string;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  observeIntersection?: ObserveFn;\n};\n\ninterface StateProps {\n  sticker?: ApiSticker;\n  effect?: ApiSticker;\n  soundId?: string;\n}\n\nconst AnimatedCustomEmoji: FC<OwnProps & StateProps> = ({\n  isOwn,\n  customEmojiId,\n  messageId,\n  chatId,\n  activeEmojiInteractions,\n  sticker,\n  effect,\n  soundId,\n  observeIntersection,\n}) => {\n  const {\n    ref,\n    size,\n    style,\n    handleClick,\n  } = useAnimatedEmoji(\n    chatId, messageId, soundId, activeEmojiInteractions, isOwn, effect?.emoji, getCustomEmojiSize(1),\n  );\n\n  return (\n    <CustomEmoji\n      ref={ref}\n      documentId={customEmojiId}\n      className={buildClassName('AnimatedEmoji media-inner', sticker?.id === LIKE_STICKER_ID && 'like-sticker-thumb')}\n      style={style}\n      size={size}\n      isBig\n      withSharedAnimation\n      forceOnHeavyAnimation\n      observeIntersectionForLoading={observeIntersection}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { customEmojiId, withEffects }) => {\n  const sticker = global.customEmojis.byId[customEmojiId];\n  return {\n    sticker,\n    effect: sticker?.emoji && withEffects ? selectAnimatedEmojiEffect(global, sticker.emoji) : undefined,\n    soundId: sticker?.emoji && selectAnimatedEmojiSound(global, sticker.emoji),\n  };\n})(AnimatedCustomEmoji));\n","import type { ISettings } from '../../../../types';\n\nconst SELECTED_APPENDIX_COLORS = {\n  dark: {\n    outgoing: 'rgb(135,116,225)',\n    incoming: 'rgb(33,33,33)',\n  },\n  light: {\n    outgoing: 'rgb(238,255,222)',\n    incoming: 'rgb(255,255,255)',\n  },\n};\n\nexport default function getCustomAppendixBg(\n  src: string, isOwn: boolean, inSelectMode?: boolean, isSelected?: boolean, theme?: ISettings['theme'],\n) {\n  if (isSelected) {\n    return Promise.resolve(SELECTED_APPENDIX_COLORS[theme || 'light'][isOwn ? 'outgoing' : 'incoming']);\n  }\n  return getAppendixColorFromImage(src, isOwn);\n}\n\nasync function getAppendixColorFromImage(src: string, isOwn: boolean) {\n  const img = new Image();\n  img.src = src;\n  img.crossOrigin = 'anonymous';\n\n  if (!img.width) {\n    await new Promise((resolve) => {\n      img.onload = resolve;\n    });\n  }\n\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d')!;\n\n  canvas.width = img.width;\n  canvas.height = img.height;\n\n  ctx.drawImage(img, 0, 0, img.width, img.height);\n\n  const x = isOwn ? img.width - 1 : 0;\n  const y = img.height - 1;\n\n  const pixel = Array.from(ctx.getImageData(x, y, 1, 1).data);\n  return `rgba(${pixel.join(',')})`;\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { IS_CANVAS_FILTER_SUPPORTED } from '../../../../util/environment';\nimport { getMessageMediaThumbDataUri } from '../../../../global/helpers';\nimport useCanvasBlur from '../../../../hooks/useCanvasBlur';\nimport useAppLayout from '../../../../hooks/useAppLayout';\n\nexport default function useBlurredMediaThumbRef(message: ApiMessage, isDisabled?: boolean | string) {\n  const { isMobile } = useAppLayout();\n\n  return useCanvasBlur(\n    getMessageMediaThumbDataUri(message),\n    Boolean(isDisabled),\n    isMobile && !IS_CANVAS_FILTER_SUPPORTED,\n  );\n}\n","import React, {\n  useCallback, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessagePhoto,\n  getMessageWebPagePhoto,\n  getMessageMediaHash,\n  getMediaTransferState,\n  isOwnMessage,\n  getMessageMediaFormat,\n  getMessageMediaThumbDataUri,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\n\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  uploadProgress?: number;\n  size?: 'inline' | 'pictogram';\n  shouldAffectAppendix?: boolean;\n  dimensions?: IMediaDimensions & { isSmall?: boolean };\n  asForwarded?: boolean;\n  nonInteractive?: boolean;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Photo: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  isInSelectMode,\n  isSelected,\n  uploadProgress,\n  size = 'inline',\n  dimensions,\n  asForwarded,\n  nonInteractive,\n  shouldAffectAppendix,\n  isDownloading,\n  isProtected,\n  theme,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const photo = (getMessagePhoto(message) || getMessageWebPagePhoto(message))!;\n  const localBlobUrl = photo.blobUrl;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = isLoadAllowed && isIntersecting;\n  const {\n    mediaData, loadProgress,\n  } = useMediaWithLoadProgress(getMessageMediaHash(message, size), !shouldLoad);\n  const fullMediaData = localBlobUrl || mediaData;\n\n  const [withThumb] = useState(!fullMediaData);\n  const noThumb = Boolean(fullMediaData);\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(photo.isSpoiler);\n\n  const {\n    loadProgress: downloadProgress,\n  } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'), !isDownloading, getMessageMediaFormat(message, 'download'),\n  );\n\n  const {\n    isUploading, isTransferring, transferProgress,\n  } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    shouldLoad && !fullMediaData,\n  );\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled, 'slow');\n  const {\n    shouldRender: shouldRenderDownloadButton,\n    transitionClassNames: downloadButtonClassNames,\n  } = useShowTransition(!fullMediaData && !isLoadAllowed);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [fullMediaData, hideSpoiler, isSpoilerShown, isUploading, message, onCancelUpload, onClick]);\n\n  const isOwn = isOwnMessage(message);\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n    if (fullMediaData) {\n      getCustomAppendixBg(fullMediaData, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    } else {\n      contentEl.classList.add('has-appendix-thumb');\n    }\n  }, [shouldAffectAppendix, fullMediaData, isOwn, isInSelectMode, isSelected, theme]);\n\n  const { width, height, isSmall } = dimensions || calculateMediaDimensions(message, asForwarded, noAvatars, isMobile);\n\n  const className = buildClassName(\n    'media-inner',\n    !isUploading && !nonInteractive && 'interactive',\n    isSmall && 'small-image',\n    width === height && 'square-image',\n  );\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = size === 'inline' ? `height: ${height}px;${dimensionsStyle}` : undefined;\n\n  return (\n    <div\n      id={id}\n      ref={ref}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      <img\n        src={fullMediaData}\n        className=\"full-media\"\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {withThumb && (\n        <canvas ref={thumbRef} className={buildClassName('thumbnail', thumbClassNames)} />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      {shouldRenderSpinner && !shouldRenderDownloadButton && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={transferProgress} onClick={isUploading ? handleClick : undefined} />\n        </div>\n      )}\n      {shouldRenderDownloadButton && <i className={buildClassName('icon-download', downloadButtonClassNames)} />}\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {isTransferring && (\n        <span className=\"message-transfer-progress\">{Math.round(transferProgress * 100)}%</span>\n      )}\n    </div>\n  );\n};\n\nexport default Photo;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useRef, useState } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { IMediaDimensions } from './helpers/calculateAlbumLayout';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { calculateVideoDimensions } from '../../common/helpers/mediaDimensions';\nimport {\n  getMediaTransferState,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageWebPageVideo,\n  isOwnMessage,\n} from '../../../global/helpers';\nimport * as mediaLoader from '../../../util/mediaLoader';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\nimport useFlag from '../../../hooks/useFlag';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nexport type OwnProps = {\n  id?: string;\n  message: ApiMessage;\n  observeIntersectionForLoading: ObserveFn;\n  observeIntersectionForPlaying?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  uploadProgress?: number;\n  dimensions?: IMediaDimensions;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading: boolean;\n  isProtected?: boolean;\n  onClick?: (id: number) => void;\n  onCancelUpload?: (message: ApiMessage) => void;\n};\n\nconst Video: FC<OwnProps> = ({\n  id,\n  message,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  uploadProgress,\n  lastSyncTime,\n  dimensions,\n  asForwarded,\n  isDownloading,\n  isProtected,\n  onClick,\n  onCancelUpload,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const video = (getMessageVideo(message) || getMessageWebPageVideo(message))!;\n  const localBlobUrl = video.blobUrl;\n\n  const [isSpoilerShown, , hideSpoiler] = useFlag(video.isSpoiler);\n\n  const isIntersectingForLoading = useIsIntersecting(ref, observeIntersectionForLoading);\n  const isIntersectingForPlaying = (\n    useIsIntersecting(ref, observeIntersectionForPlaying)\n    && isIntersectingForLoading\n  );\n  const wasIntersectedRef = useRef(isIntersectingForLoading);\n  if (isIntersectingForPlaying && !wasIntersectedRef.current) {\n    wasIntersectedRef.current = true;\n  }\n\n  const { isMobile } = useAppLayout();\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersectingForLoading && lastSyncTime);\n  const [isPlayAllowed, setIsPlayAllowed] = useState(canAutoPlay && !isSpoilerShown);\n\n  const fullMediaHash = getMessageMediaHash(message, 'inline');\n  const [isFullMediaPreloaded] = useState(Boolean(fullMediaHash && mediaLoader.getFromMemory(fullMediaHash)));\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    fullMediaHash, !shouldLoad, getMessageMediaFormat(message, 'inline'), lastSyncTime,\n  );\n  const fullMediaData = localBlobUrl || mediaData;\n  const [isPlayerReady, markPlayerReady] = useFlag();\n\n  const thumbDataUri = getMessageMediaThumbDataUri(message);\n  const hasThumb = Boolean(thumbDataUri);\n\n  const previewMediaHash = getMessageMediaHash(message, 'preview');\n  const [isPreviewPreloaded] = useState(Boolean(previewMediaHash && mediaLoader.getFromMemory(previewMediaHash)));\n  const canLoadPreview = isIntersectingForLoading && lastSyncTime;\n  const previewBlobUrl = useMedia(previewMediaHash, !canLoadPreview, undefined, lastSyncTime);\n  const previewClassNames = useMediaTransition((hasThumb || previewBlobUrl) && !isPlayerReady);\n\n  const noThumb = !hasThumb || previewBlobUrl || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isInline = fullMediaData && wasIntersectedRef.current;\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    getMessageMediaFormat(message, 'download'),\n    lastSyncTime,\n  );\n\n  const { isUploading, isTransferring, transferProgress } = getMediaTransferState(\n    message,\n    uploadProgress || (isDownloading ? downloadProgress : loadProgress),\n    (shouldLoad && !isPlayerReady && !isFullMediaPreloaded) || isDownloading,\n  );\n\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n  const {\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(Boolean((isLoadAllowed || fullMediaData) && !isPlayAllowed && !shouldRenderSpinner));\n\n  const [playProgress, setPlayProgress] = useState<number>(0);\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setPlayProgress(Math.max(0, e.currentTarget.currentTime - 1));\n  }, []);\n\n  const duration = videoRef.current?.duration || video.duration || 0;\n\n  const isOwn = isOwnMessage(message);\n  const isWebPageVideo = Boolean(getMessageWebPageVideo(message));\n  const {\n    width, height,\n  } = dimensions || calculateVideoDimensions(video, isOwn, asForwarded, isWebPageVideo, noAvatars, isMobile);\n\n  const handleClick = useCallback(() => {\n    if (isUploading) {\n      onCancelUpload?.(message);\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    if (!fullMediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n      return;\n    }\n\n    if (fullMediaData && !isPlayAllowed) {\n      setIsPlayAllowed(true);\n    }\n\n    if (isSpoilerShown) {\n      hideSpoiler();\n      return;\n    }\n\n    onClick?.(message.id);\n  }, [\n    isUploading, isDownloading, fullMediaData, isPlayAllowed, isSpoilerShown, onClick, message, onCancelUpload,\n    hideSpoiler,\n  ]);\n\n  const className = buildClassName('media-inner dark', !isUploading && 'interactive');\n\n  const dimensionsStyle = dimensions ? ` width: ${width}px; left: ${dimensions.x}px; top: ${dimensions.y}px;` : '';\n  const style = `height: ${height}px;${dimensionsStyle}`;\n\n  return (\n    <div\n      ref={ref}\n      id={id}\n      className={className}\n      style={style}\n      onClick={isUploading ? undefined : handleClick}\n    >\n      {isInline && (\n        <OptimizedVideo\n          ref={videoRef}\n          src={fullMediaData}\n          className=\"full-media\"\n          canPlay={isPlayAllowed && isIntersectingForPlaying}\n          muted\n          loop\n          playsInline\n          draggable={!isProtected}\n          onTimeUpdate={handleTimeUpdate}\n          onReady={markPlayerReady}\n        />\n      )}\n      <img\n        src={previewBlobUrl}\n        className={buildClassName('thumbnail', previewClassNames)}\n        alt=\"\"\n        draggable={!isProtected}\n      />\n      {hasThumb && !isPreviewPreloaded && (\n        <canvas\n          ref={thumbRef}\n          className={buildClassName('thumbnail', thumbClassNames)}\n        />\n      )}\n      {isProtected && <span className=\"protector\" />}\n      <i className={buildClassName('icon-large-play', playButtonClassNames)} />\n      <MediaSpoiler\n        isVisible={isSpoilerShown}\n        withAnimation\n        thumbDataUri={thumbDataUri}\n        width={width}\n        height={height}\n        className=\"media-spoiler\"\n      />\n      {shouldRenderSpinner && (\n        <div className={buildClassName('media-loading', spinnerClassNames)}>\n          <ProgressSpinner progress={transferProgress} onClick={handleClick} />\n        </div>\n      )}\n      {!isLoadAllowed && !fullMediaData && (\n        <i className=\"icon-download\" />\n      )}\n      {isTransferring ? (\n        <span className=\"message-transfer-progress\">\n          {(isUploading || isDownloading) ? `${Math.round(transferProgress * 100)}%` : '...'}\n        </span>\n      ) : (\n        <div className=\"message-media-duration\">\n          {video.isGif ? 'GIF' : formatMediaDuration(Math.max(duration - playProgress, 0))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Video;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiContact, ApiCountryCode } from '../../../api/types';\nimport type { AnimationLevel } from '../../../types';\n\nimport { selectUser } from '../../../global/selectors';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport buildClassName from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\n\nimport './Contact.scss';\n\ntype OwnProps = {\n  contact: ApiContact;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  phoneCodeList: ApiCountryCode[];\n  animationLevel: AnimationLevel;\n};\n\nconst UNREGISTERED_CONTACT_ID = '0';\n\nconst Contact: FC<OwnProps & StateProps> = ({\n  contact, user, phoneCodeList, animationLevel,\n}) => {\n  const { openChat } = getActions();\n\n  const {\n    firstName,\n    lastName,\n    phoneNumber,\n    userId,\n  } = contact;\n  const isRegistered = userId !== UNREGISTERED_CONTACT_ID;\n\n  const handleClick = useCallback(() => {\n    openChat({ id: userId });\n  }, [openChat, userId]);\n\n  return (\n    <div\n      className={buildClassName('Contact', isRegistered && 'interactive')}\n      onClick={isRegistered ? handleClick : undefined}\n    >\n      <Avatar size=\"large\" user={user} text={firstName || lastName} animationLevel={animationLevel} withVideo />\n      <div className=\"contact-info\">\n        <div className=\"contact-name\">{firstName} {lastName}</div>\n        <div className=\"contact-phone\">{formatPhoneNumberWithCode(phoneCodeList, phoneNumber)}</div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { contact }): StateProps => {\n    const { countryList: { phoneCodes: phoneCodeList } } = global;\n    return {\n      user: selectUser(global, contact.userId),\n      phoneCodeList,\n      animationLevel: global.settings.byKey.animationLevel,\n    };\n  },\n)(Contact);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useState, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiPollAnswer, ApiPollResult } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\n\nimport './PollOption.scss';\n\ntype OwnProps = {\n  answer: ApiPollAnswer;\n  voteResults?: ApiPollResult[];\n  totalVoters?: number;\n  maxVotersCount?: number;\n  correctResults: string[];\n  shouldAnimate: boolean;\n};\n\nconst PollOption: FC<OwnProps> = ({\n  answer,\n  voteResults,\n  totalVoters,\n  maxVotersCount,\n  correctResults,\n  shouldAnimate,\n}) => {\n  const result = voteResults && voteResults.find((r) => r.option === answer.option);\n  const correctAnswer = correctResults.length === 0 || correctResults.indexOf(answer.option) !== -1;\n  const showIcon = (correctResults.length > 0 && correctAnswer) || (result?.isChosen);\n  const answerPercent = result ? getPercentage(result.votersCount, totalVoters || 0) : 0;\n  const [finalPercent, setFinalPercent] = useState(shouldAnimate ? 0 : answerPercent);\n  // eslint-disable-next-line no-null/no-null\n  const lineRef = useRef<HTMLDivElement>(null);\n  const lineWidth = result ? getPercentage(result.votersCount, maxVotersCount || 0) : 0;\n  const isAnimationDoesNotStart = finalPercent !== answerPercent;\n\n  useEffect(() => {\n    if (shouldAnimate) {\n      setFinalPercent(answerPercent);\n    }\n  }, [shouldAnimate, answerPercent]);\n\n  useEffect(() => {\n    const lineEl = lineRef.current;\n\n    if (lineEl && shouldAnimate) {\n      const svgEl = lineEl.firstElementChild;\n\n      const style = isAnimationDoesNotStart ? '' : 'stroke-dasharray: 100% 200%; stroke-dashoffset: -44';\n      if (!svgEl) {\n        lineEl.innerHTML = `\n          <svg class=\"poll-line\" xmlns=\"http://www.w3.org/2000/svg\" style=\"${style}\">\n            <path d=\"M4.47 5.33v13.6a9 9 0 009 9h13\"/>\n          </svg>`;\n      } else {\n        svgEl.setAttribute('style', style);\n      }\n    }\n  }, [isAnimationDoesNotStart, shouldAnimate]);\n\n  if (!voteResults || !result) {\n    return undefined;\n  }\n\n  const lineStyle = `width: ${lineWidth}%; transform:scaleX(${isAnimationDoesNotStart ? 0 : 1})`;\n\n  return (\n    <div className=\"PollOption\" dir=\"ltr\">\n      <div className={`poll-option-share ${answerPercent === '100' ? 'limit-width' : ''}`}>\n        {answerPercent}%\n        {showIcon && (\n          <span className={buildClassName(\n            'poll-option-chosen',\n            !correctAnswer && 'wrong',\n            shouldAnimate && 'animate',\n          )}\n          >\n            <i className={correctAnswer ? 'icon-check' : 'icon-close'} />\n          </span>\n        )}\n      </div>\n      <div className=\"poll-option-right\">\n        <div className=\"poll-option-text\" dir=\"auto\">\n          {renderText(answer.text)}\n        </div>\n        <div className={buildClassName('poll-option-answer', showIcon && !correctAnswer && 'wrong')}>\n          <div className=\"poll-option-corner\" ref={lineRef} />\n          <div\n            className=\"poll-option-line\"\n            style={lineStyle}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default PollOption;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useState,\n  memo,\n  useMemo,\n  useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiMessage, ApiPoll, ApiUser, ApiPollAnswer,\n} from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getServerTimeOffset } from '../../../util/serverTime';\n\nimport CheckboxGroup from '../../ui/CheckboxGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport Notification from '../../ui/Notification';\nimport PollOption from './PollOption';\n\nimport './Poll.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  poll: ApiPoll;\n  onSendVote: (options: string[]) => void;\n};\n\ntype StateProps = {\n  recentVoterIds?: number[];\n  usersById: Record<string, ApiUser>;\n};\n\nconst SOLUTION_CONTAINER_ID = '#middle-column-portals';\nconst SOLUTION_DURATION = 5000;\nconst NBSP = '\\u00A0';\n\nconst Poll: FC<OwnProps & StateProps> = ({\n  message,\n  poll,\n  recentVoterIds,\n  usersById,\n  onSendVote,\n}) => {\n  const { loadMessage, openPollResults, requestConfetti } = getActions();\n\n  const { id: messageId, chatId } = message;\n  const { summary, results } = poll;\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [chosenOptions, setChosenOptions] = useState<string[]>([]);\n  const [isSolutionShown, setIsSolutionShown] = useState<boolean>(false);\n  const [wasSubmitted, setWasSubmitted] = useState<boolean>(false);\n  const [closePeriod, setClosePeriod] = useState<number>(\n    !summary.closed && summary.closeDate && summary.closeDate > 0\n      ? Math.min(summary.closeDate - Math.floor(Date.now() / 1000) + getServerTimeOffset(), summary.closePeriod!)\n      : 0,\n  );\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const { results: voteResults, totalVoters } = results;\n  const hasVoted = voteResults && voteResults.some((r) => r.isChosen);\n  const canVote = !summary.closed && !hasVoted;\n  const canViewResult = !canVote && summary.isPublic && Number(results.totalVoters) > 0;\n  const isMultiple = canVote && summary.multipleChoice;\n  const maxVotersCount = voteResults ? Math.max(...voteResults.map((r) => r.votersCount)) : totalVoters;\n  const correctResults = voteResults ? voteResults.reduce((answers: string[], r) => {\n    if (r.isCorrect) {\n      answers.push(r.option);\n    }\n\n    return answers;\n  }, []) : [];\n  const answers = summary.answers.map((a) => ({\n    label: a.text,\n    value: a.option,\n    hidden: Boolean(summary.quiz && summary.closePeriod && closePeriod <= 0),\n  }));\n\n  useEffect(() => {\n    const chosen = poll.results.results?.find((result) => result.isChosen);\n    if (isSubmitting && chosen) {\n      if (chosen.isCorrect) {\n        requestConfetti();\n      }\n      setIsSubmitting(false);\n    }\n  }, [isSubmitting, poll.results.results, requestConfetti]);\n\n  useEffect(() => {\n    if (closePeriod > 0) {\n      setTimeout(() => setClosePeriod(closePeriod - 1), 1000);\n    }\n\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      const circumference = 6 * 2 * Math.PI;\n      const svgEl = countdownEl.lastElementChild;\n      const timerEl = countdownEl.firstElementChild;\n      if (closePeriod <= 5) {\n        countdownEl.classList.add('hurry-up');\n      }\n\n      if (!svgEl || !timerEl) {\n        countdownEl.innerHTML = `\n        <span>${formatMediaDuration(closePeriod)}</span>\n        <svg width=\"16px\" height=\"16px\">\n          <circle cx=\"8\" cy=\"8\" r=\"6\" class=\"poll-countdown-progress\" transform=\"rotate(-90, 8, 8)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"0\"\n          />\n        </svg>`;\n      } else {\n        const strokeDashOffset = ((summary.closePeriod! - closePeriod) / summary.closePeriod!) * circumference;\n        timerEl.textContent = formatMediaDuration(closePeriod);\n        (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n      }\n    }\n  }, [closePeriod, summary.closePeriod]);\n\n  useEffect(() => {\n    if (summary.quiz && (closePeriod <= 0 || (hasVoted && !summary.closed))) {\n      loadMessage({ chatId, messageId });\n    }\n  }, [chatId, closePeriod, hasVoted, loadMessage, messageId, summary.closed, summary.quiz]);\n\n  // If the client time is not synchronized, the poll must be updated after the closePeriod time has expired.\n  useEffect(() => {\n    let timer: number | undefined;\n\n    if (summary.quiz && !summary.closed && summary.closePeriod && summary.closePeriod > 0) {\n      timer = window.setTimeout(() => {\n        loadMessage({ chatId, messageId });\n      }, summary.closePeriod * 1000);\n    }\n\n    return () => {\n      if (timer) {\n        window.clearTimeout(timer);\n      }\n    };\n  }, [canVote, chatId, loadMessage, messageId, summary.closePeriod, summary.closed, summary.quiz]);\n\n  const recentVoters = useMemo(() => {\n    return recentVoterIds ? recentVoterIds.reduce((result: ApiUser[], id) => {\n      const user = usersById[id];\n      if (user) {\n        result.push(user);\n      }\n\n      return result;\n    }, []) : [];\n  }, [usersById, recentVoterIds]);\n\n  const handleRadioChange = useCallback(\n    (option: string) => {\n      setChosenOptions([option]);\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote([option]);\n    }, [onSendVote],\n  );\n\n  const handleCheckboxChange = useCallback(\n    (options: string[]) => {\n      setChosenOptions(options);\n    }, [],\n  );\n\n  const handleVoteClick = useCallback(\n    () => {\n      setIsSubmitting(true);\n      setWasSubmitted(true);\n      onSendVote(chosenOptions);\n    }, [onSendVote, chosenOptions],\n  );\n\n  const handleViewResultsClick = useCallback(\n    () => {\n      openPollResults({ chatId, messageId });\n    }, [chatId, messageId, openPollResults],\n  );\n\n  const handleSolutionShow = useCallback(() => {\n    setIsSolutionShown(true);\n  }, []);\n\n  const handleSolutionHide = useCallback(() => {\n    setIsSolutionShown(false);\n    setWasSubmitted(false);\n  }, []);\n\n  // Show the solution to quiz if the answer was incorrect\n  useEffect(() => {\n    if (wasSubmitted && hasVoted && summary.quiz && results.results && poll.results.solution) {\n      const correctResult = results.results.find((r) => r.isChosen && r.isCorrect);\n      if (!correctResult) {\n        setIsSolutionShown(true);\n      }\n    }\n  }, [hasVoted, wasSubmitted, results.results, summary.quiz, poll.results.solution]);\n\n  const lang = useLang();\n\n  function renderResultOption(answer: ApiPollAnswer) {\n    return (\n      <PollOption\n        key={answer.option}\n        shouldAnimate={wasSubmitted || !canVote}\n        answer={answer}\n        voteResults={voteResults}\n        totalVoters={totalVoters}\n        maxVotersCount={maxVotersCount}\n        correctResults={correctResults}\n      />\n    );\n  }\n\n  function renderRecentVoters() {\n    return (\n      recentVoters.length > 0 && (\n        <div className=\"poll-recent-voters\">\n          {recentVoters.map((user) => (\n            <Avatar\n              size=\"micro\"\n              user={user}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  function renderSolution() {\n    return (\n      isSolutionShown && poll.results.solution && (\n        <Notification\n          message={renderTextWithEntities(poll.results.solution, poll.results.solutionEntities)}\n          duration={SOLUTION_DURATION}\n          onDismiss={handleSolutionHide}\n          containerId={SOLUTION_CONTAINER_ID}\n        />\n      )\n    );\n  }\n\n  return (\n    <div className=\"Poll\" dir={lang.isRtl ? 'auto' : 'ltr'}>\n      {renderSolution()}\n      <div className=\"poll-question\">{renderText(summary.question, ['emoji', 'br'])}</div>\n      <div className=\"poll-type\">\n        {lang(getPollTypeString(summary))}\n        {renderRecentVoters()}\n        {closePeriod > 0 && canVote && <div ref={countdownRef} className=\"poll-countdown\" />}\n        {summary.quiz && poll.results.solution && !canVote && (\n          <Button\n            round\n            size=\"tiny\"\n            color=\"translucent\"\n            className=\"poll-quiz-help\"\n            disabled={isSolutionShown}\n            onClick={handleSolutionShow}\n            ariaLabel=\"Show Solution\"\n          >\n            <i className=\"icon-lamp\" />\n          </Button>\n        )}\n      </div>\n      {canVote && (\n        <div className=\"poll-answers\" onClick={stopPropagation}>\n          {isMultiple\n            ? (\n              <CheckboxGroup\n                options={answers}\n                onChange={handleCheckboxChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOptions={isSubmitting ? chosenOptions : undefined}\n                round\n              />\n            )\n            : (\n              <RadioGroup\n                name={`poll-${messageId}`}\n                options={answers}\n                onChange={handleRadioChange}\n                disabled={message.isScheduled || isSubmitting}\n                loadingOption={isSubmitting ? chosenOptions[0] : undefined}\n              />\n            )}\n        </div>\n      )}\n      {!canVote && (\n        <div className=\"poll-results\">\n          {summary.answers.map(renderResultOption)}\n        </div>\n      )}\n      {!canViewResult && !isMultiple && (\n        <div className=\"poll-voters-count\">{getReadableVotersCount(lang, summary.quiz, results.totalVoters)}</div>\n      )}\n      {isMultiple && (\n        <Button\n          isText\n          disabled={chosenOptions.length === 0}\n          size=\"tiny\"\n          onClick={handleVoteClick}\n        >\n          {lang('PollSubmitVotes')}\n        </Button>\n      )}\n      {canViewResult && (\n        <Button\n          isText\n          size=\"tiny\"\n          onClick={handleViewResultsClick}\n        >\n          {lang('PollViewResults')}\n        </Button>\n      )}\n    </div>\n  );\n};\n\nfunction getPollTypeString(summary: ApiPoll['summary']) {\n  // When we just created the poll, some properties don't exist.\n  if (typeof summary.isPublic === 'undefined') {\n    return NBSP;\n  }\n\n  if (summary.closed) {\n    return 'FinalResults';\n  }\n\n  if (summary.quiz) {\n    return summary.isPublic ? 'QuizPoll' : 'AnonymousQuizPoll';\n  }\n\n  return summary.isPublic ? 'PublicPoll' : 'AnonymousPoll';\n}\n\nfunction getReadableVotersCount(lang: LangFn, isQuiz: true | undefined, count?: number) {\n  if (!count) {\n    return lang(isQuiz ? 'Chat.Quiz.TotalVotesEmpty' : 'Chat.Poll.TotalVotesResultEmpty');\n  }\n\n  return lang(isQuiz ? 'Answer' : 'Vote', count, 'i');\n}\n\nfunction stopPropagation(e: React.MouseEvent<HTMLDivElement>) {\n  e.stopPropagation();\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { poll }) => {\n    const { recentVoterIds } = poll.results;\n    const { users: { byId: usersById } } = global;\n    if (!recentVoterIds || recentVoterIds.length === 0) {\n      return {};\n    }\n\n    return {\n      recentVoterIds,\n      usersById,\n    };\n  },\n)(Poll));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type { ISettings } from '../../../types';\n\nimport { getMessageWebPage } from '../../../global/helpers';\nimport { calculateMediaDimensions } from './helpers/mediaDimensions';\nimport renderText from '../../common/helpers/renderText';\nimport trimText from '../../../util/trimText';\nimport buildClassName from '../../../util/buildClassName';\nimport useAppLayout from '../../../hooks/useAppLayout';\n\nimport SafeLink from '../../common/SafeLink';\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './WebPage.scss';\n\nconst MAX_TEXT_LENGTH = 170; // symbols\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection?: ObserveFn;\n  noAvatars?: boolean;\n  canAutoLoad?: boolean;\n  canAutoPlay?: boolean;\n  inPreview?: boolean;\n  asForwarded?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n  isProtected?: boolean;\n  theme: ISettings['theme'];\n  onMediaClick?: () => void;\n  onCancelMediaTransfer?: () => void;\n};\n\nconst WebPage: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  noAvatars,\n  canAutoLoad,\n  canAutoPlay,\n  inPreview,\n  asForwarded,\n  lastSyncTime,\n  isDownloading = false,\n  isProtected,\n  theme,\n  onMediaClick,\n  onCancelMediaTransfer,\n}) => {\n  const webPage = getMessageWebPage(message);\n  const { isMobile } = useAppLayout();\n\n  const handleMediaClick = useCallback(() => {\n    onMediaClick!();\n  }, [onMediaClick]);\n\n  if (!webPage) {\n    return undefined;\n  }\n\n  const {\n    siteName,\n    url,\n    displayUrl,\n    title,\n    description,\n    photo,\n    video,\n  } = webPage;\n  const truncatedDescription = trimText(description, MAX_TEXT_LENGTH);\n  const isArticle = Boolean(truncatedDescription || title || siteName);\n  let isSquarePhoto = false;\n  if (isArticle && webPage?.photo && !webPage.video) {\n    const { width, height } = calculateMediaDimensions(message, undefined, undefined, isMobile);\n    isSquarePhoto = width === height;\n  }\n  const isMediaInteractive = (photo || video) && onMediaClick && !isSquarePhoto;\n\n  const className = buildClassName(\n    'WebPage',\n    inPreview && 'in-preview',\n    isSquarePhoto && 'with-square-photo',\n    !photo && !video && !inPreview && 'without-media',\n    video && 'with-video',\n    !isArticle && 'no-article',\n  );\n\n  return (\n    <div\n      className={className}\n      data-initial={(siteName || displayUrl)[0]}\n      dir=\"auto\"\n    >\n      {photo && !video && (\n        <Photo\n          message={message}\n          observeIntersection={observeIntersection}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          size={isSquarePhoto ? 'pictogram' : 'inline'}\n          asForwarded={asForwarded}\n          nonInteractive={!isMediaInteractive}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          theme={theme}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n      {isArticle && (\n        <div className=\"WebPage-text\">\n          <SafeLink className=\"site-name\" url={url} text={siteName || displayUrl} />\n          {!inPreview && title && (\n            <p className=\"site-title\">{renderText(title)}</p>\n          )}\n          {truncatedDescription && (\n            <p className=\"site-description\">{renderText(truncatedDescription, ['emoji', 'br'])}</p>\n          )}\n        </div>\n      )}\n      {!inPreview && video && (\n        <Video\n          message={message}\n          observeIntersectionForLoading={observeIntersection!}\n          noAvatars={noAvatars}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          lastSyncTime={lastSyncTime}\n          asForwarded={asForwarded}\n          isDownloading={isDownloading}\n          isProtected={isProtected}\n          onClick={isMediaInteractive ? handleMediaClick : undefined}\n          onCancelUpload={onCancelMediaTransfer}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(WebPage);\n","import React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport { getMessageInvoice, getWebDocumentHash } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport renderText from '../../common/helpers/renderText';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\n\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\nimport useLang from '../../../hooks/useLang';\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Invoice.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  shouldAffectAppendix?: boolean;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Invoice: FC<OwnProps> = ({\n  message,\n  shouldAffectAppendix,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const {\n    title,\n    text,\n    amount,\n    currency,\n    isTest,\n    photo,\n  } = invoice!;\n\n  const photoUrl = useMedia(getWebDocumentHash(photo));\n\n  useLayoutEffectWithPrevDeps(([prevShouldAffectAppendix]) => {\n    if (!shouldAffectAppendix) {\n      if (prevShouldAffectAppendix) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (photoUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(photoUrl, false, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldAffectAppendix, photoUrl, isInSelectMode, isSelected, theme]);\n\n  return (\n    <div\n      ref={ref}\n      className=\"Invoice\"\n    >\n      {title && (\n        <p className=\"title\">{renderText(title)}</p>\n      )}\n      {text && (\n        <div>{renderText(text, ['emoji', 'br'])}</div>\n      )}\n      <div className={`description ${photo ? 'has-image' : ''}`}>\n        {photoUrl && (\n          <img\n            className=\"invoice-image\"\n            src={photoUrl}\n            alt=\"\"\n            crossOrigin=\"anonymous\"\n          />\n        )}\n        {!photoUrl && photo && (\n          <Skeleton width={photo.dimensions?.width} height={photo.dimensions?.height} forceAspectRatio />\n        )}\n        <p className=\"description-text\">\n          {formatCurrency(amount, currency, lang.code)}\n          {isTest && <span>{lang('PaymentTestInvoice')}</span>}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(Invoice);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"rwnm0xOh31c2MY4kK2No\",\"duration\":\"lKSp02aI8WDGX3393nkh\",\"buy\":\"gxQfWp0jp0_2Z4qWiXKN\",\"spoiler\":\"z2tB5Vd_jKJ9IYX4Nijd\"};","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getMessageInvoice } from '../../../global/helpers';\nimport { formatCurrency } from '../../../util/formatCurrency';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useInterval from '../../../hooks/useInterval';\n\nimport MediaSpoiler from '../../common/MediaSpoiler';\n\nimport styles from './InvoiceMediaPreview.module.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst POLLING_INTERVAL = 30000;\n\nconst InvoiceMediaPreview: FC<OwnProps> = ({\n  message,\n  lastSyncTime,\n}) => {\n  const { openInvoice, loadExtendedMedia } = getActions();\n  const lang = useLang();\n  const invoice = getMessageInvoice(message);\n\n  const { chatId, id } = message;\n\n  const refreshExtendedMedia = useCallback(() => {\n    loadExtendedMedia({ chatId, ids: [id] });\n  }, [chatId, id, loadExtendedMedia]);\n\n  useInterval(refreshExtendedMedia, lastSyncTime ? POLLING_INTERVAL : undefined);\n\n  const {\n    amount,\n    currency,\n    extendedMedia,\n  } = invoice!;\n\n  const {\n    width, height, thumbnail, duration,\n  } = extendedMedia!;\n\n  const handleClick = useCallback(() => {\n    openInvoice({\n      chatId,\n      messageId: id,\n      isExtendedMedia: true,\n    });\n  }, [chatId, id, openInvoice]);\n\n  return (\n    <div\n      className={buildClassName(styles.root, 'media-inner')}\n      onClick={handleClick}\n    >\n      <MediaSpoiler\n        thumbDataUri={thumbnail?.dataUri}\n        width={width}\n        height={height}\n        isVisible\n        className={styles.spoiler}\n      />\n      {Boolean(duration) && <div className={styles.duration}>{formatMediaDuration(duration)}</div>}\n      <div className={styles.buy}>\n        <i className={buildClassName('icon-lock', styles.lock)} />\n        {lang('Checkout.PayPrice', formatCurrency(amount, currency))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(InvoiceMediaPreview);\n","const PROVIDER = 'https://maps.google.com/maps';\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L82\nconst VENUE_COLORS = new Map(Object.entries({\n  'building/medical': '#43b3f4',\n  'building/gym': '#43b3f4',\n  'education/cafeteria': '#f7943f',\n  'travel/bedandbreakfast': '#9987ff',\n  'travel/hotel': '#9987ff',\n  'travel/hostel': '#9987ff',\n  'travel/resort': '#9987ff',\n  'travel/hotel_bar': '#e56dd6',\n  arts_entertainment: '#e56dd6',\n  building: '#6e81b2',\n  education: '#a57348',\n  event: '#959595',\n  food: '#f7943f',\n  home: '#00aeef',\n  nightlife: '#e56dd6',\n  parks_outdoors: '#6cc039',\n  shops: '#ffb300',\n  travel: '#1c9fff',\n  work: '#ad7854',\n}));\n\nconst RANDOM_COLORS = [\n  '#e56cd5', '#f89440', '#9986ff', '#44b3f5', '#6dc139', '#ff5d5a', '#f87aad', '#6e82b3', '#f5ba21',\n];\n\nexport function prepareMapUrl(lat: number, long: number, zoom: number) {\n  return `${PROVIDER}/place/${lat}+${long}/@${lat},${long},${zoom}z`;\n}\n\nexport function getMetersPerPixel(lat: number, zoom: number) {\n  // https://groups.google.com/g/google-maps-js-api-v3/c/hDRO4oHVSeM/m/osOYQYXg2oUJ\n  return (156543.03392 * Math.cos(lat * (Math.PI / 180))) / 2 ** zoom;\n}\n\nexport function getVenueIconUrl(type?: string) {\n  if (!type) return '';\n  return `https://ss3.4sqi.net/img/categories_v2/${type}_88.png`;\n}\n\n// https://github.com/TelegramMessenger/Telegram-iOS/blob/2a32c871882c4e1b1ccdecd34fccd301723b30d9/submodules/LocationResources/Sources/VenueIconResources.swift#L104\nexport function getVenueColor(type?: string) {\n  if (!type) return '#008df2';\n  return VENUE_COLORS.get(type)\n    || VENUE_COLORS.get(type.split('/')[0])\n    || RANDOM_COLORS[stringToNumber(type) % RANDOM_COLORS.length];\n}\n\nfunction stringToNumber(str: string) {\n  return str.split('').reduce((prevHash, currVal) => (\n    // eslint-disable-next-line no-bitwise\n    (((prevHash << 5) - prevHash) + currVal.charCodeAt(0)) | 0), 0);\n}\n","import React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { CUSTOM_APPENDIX_ATTRIBUTE, MESSAGE_CONTENT_SELECTOR } from '../../../config';\nimport {\n  getMessageLocation,\n  buildStaticMapHash,\n  isGeoLiveExpired,\n  isOwnMessage,\n  isUserId,\n} from '../../../global/helpers';\nimport getCustomAppendixBg from './helpers/getCustomAppendixBg';\nimport { formatCountdownShort, formatLastUpdated } from '../../../util/dateFormat';\nimport {\n  getMetersPerPixel, getVenueColor, getVenueIconUrl, prepareMapUrl,\n} from '../../../util/map';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport useTimeout from '../../../hooks/useTimeout';\nimport buildClassName from '../../../util/buildClassName';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useInterval from '../../../hooks/useInterval';\nimport useLayoutEffectWithPrevDeps from '../../../hooks/useLayoutEffectWithPrevDeps';\n\nimport Avatar from '../../common/Avatar';\nimport Skeleton from '../../ui/Skeleton';\n\nimport mapPin from '../../../assets/map-pin.svg';\nimport './Location.scss';\n\nconst MOVE_THRESHOLD = 0.0001; // ~11m\nconst DEFAULT_MAP_CONFIG = {\n  width: 400,\n  height: 300,\n  zoom: 16,\n  scale: 2,\n};\n\n// eslint-disable-next-line max-len\nconst SVG_PIN = { __html: '<svg version=\"1.1\" class=\"round-pin\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" viewBox=\"0 0 64 64\" style=\"enable-background:new 0 0 64 64;\" xml:space=\"preserve\"><g><circle cx=\"32\" cy=\"32\" r=\"24.5\"/><path d=\"M32,8c13.23,0,24,10.77,24,24S45.23,56,32,56S8,45.23,8,32S18.77,8,32,8 M32,7C18.19,7,7,18.19,7,32s11.19,25,25,25 s25-11.19,25-25S45.81,7,32,7L32,7z\"/></g><g><polygon points=\"29.38,57.67 27.4,56.08 30.42,54.42 32,51.54 33.58,54.42 36.6,56.08 34.69,57.61 32,60.73\"/><path d=\"M32,52.58l1.07,1.95l0.14,0.26l0.26,0.14l2.24,1.22l-1.33,1.06l-0.07,0.06l-0.06,0.07L32,59.96l-2.24-2.61l-0.06-0.07 l-0.07-0.06l-1.33-1.06l2.24-1.22l0.26-0.14l0.14-0.26L32,52.58 M32,50.5l-1.94,3.56L26.5,56l2.5,2l3,3.5l3-3.5l2.5-2l-3.56-1.94 L32,50.5L32,50.5z\"/></g></svg>' };\n\ntype OwnProps = {\n  message: ApiMessage;\n  peer?: ApiUser | ApiChat;\n  lastSyncTime?: number;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst Location: FC<OwnProps> = ({\n  message,\n  peer,\n  lastSyncTime,\n  isInSelectMode,\n  isSelected,\n  theme,\n}) => {\n  const { openUrl } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const countdownRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const forceUpdate = useForceUpdate();\n\n  const location = getMessageLocation(message)!;\n  const { type, geo } = location;\n\n  const serverTime = getServerTime();\n  const isExpired = isGeoLiveExpired(message, serverTime);\n  const secondsBeforeEnd = (type === 'geoLive' && !isExpired) ? message.date + location.period - serverTime\n    : undefined;\n\n  const [point, setPoint] = useState(geo);\n\n  const shouldRenderText = type === 'venue' || (type === 'geoLive' && !isExpired);\n  const {\n    width, height, zoom, scale,\n  } = DEFAULT_MAP_CONFIG;\n\n  const mediaHash = Boolean(lastSyncTime) && buildStaticMapHash(point, width, height, zoom, scale);\n  const mediaBlobUrl = useMedia(mediaHash);\n  const prevMediaBlobUrl = usePrevious(mediaBlobUrl);\n  const mapBlobUrl = mediaBlobUrl || prevMediaBlobUrl;\n\n  const isPeerUser = peer && isUserId(peer.id);\n  const avatarUser = (peer && isPeerUser) ? peer as ApiUser : undefined;\n  const avatarChat = (peer && !isPeerUser) ? peer as ApiChat : undefined;\n\n  const isOwn = isOwnMessage(message);\n\n  const accuracyRadiusPx = useMemo(() => {\n    if (type !== 'geoLive' || !point.accuracyRadius) {\n      return 0;\n    }\n\n    const { lat, accuracyRadius } = point;\n    return accuracyRadius / getMetersPerPixel(lat, zoom);\n  }, [type, point, zoom]);\n\n  const handleClick = () => {\n    const url = prepareMapUrl(point.lat, point.long, zoom);\n    openUrl({ url });\n  };\n\n  const updateCountdown = useCallback((countdownEl: HTMLDivElement) => {\n    if (type !== 'geoLive') return;\n    const radius = 12;\n    const circumference = radius * 2 * Math.PI;\n    const svgEl = countdownEl.lastElementChild;\n    const timerEl = countdownEl.firstElementChild as SVGElement;\n\n    const timeLeft = message.date + location.period - getServerTime();\n    const strokeDashOffset = (1 - timeLeft / location.period) * circumference;\n    const text = formatCountdownShort(lang, timeLeft * 1000);\n\n    if (!svgEl || !timerEl) {\n      countdownEl.innerHTML = `\n        <span class=\"geo-countdown-text\">${text}</span>\n        <svg width=\"32px\" height=\"32px\">\n          <circle cx=\"16\" cy=\"16\" r=\"${radius}\" class=\"geo-countdown-progress\" transform=\"rotate(-90, 16, 16)\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"-${strokeDashOffset}\"\n          />\n        </svg>`;\n    } else {\n      timerEl.textContent = text;\n      svgEl.firstElementChild!.setAttribute('stroke-dashoffset', `-${strokeDashOffset}`);\n    }\n  }, [type, message.date, location, lang]);\n\n  useLayoutEffect(() => {\n    if (countdownRef.current) {\n      updateCountdown(countdownRef.current);\n    }\n  }, [updateCountdown]);\n\n  useLayoutEffectWithPrevDeps(([prevShouldRenderText]) => {\n    if (shouldRenderText) {\n      if (!prevShouldRenderText) {\n        ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!.removeAttribute(CUSTOM_APPENDIX_ATTRIBUTE);\n      }\n      return;\n    }\n\n    if (mapBlobUrl) {\n      const contentEl = ref.current!.closest<HTMLDivElement>(MESSAGE_CONTENT_SELECTOR)!;\n      getCustomAppendixBg(mapBlobUrl, isOwn, isInSelectMode, isSelected, theme).then((appendixBg) => {\n        contentEl.style.setProperty('--appendix-bg', appendixBg);\n        contentEl.classList.add('has-appendix-thumb');\n        contentEl.setAttribute(CUSTOM_APPENDIX_ATTRIBUTE, '');\n      });\n    }\n  }, [shouldRenderText, isOwn, isInSelectMode, isSelected, theme, mapBlobUrl]);\n\n  useEffect(() => {\n    // Prevent map refetching for slight location changes\n    if (Math.abs(geo.lat - point.lat) < MOVE_THRESHOLD && Math.abs(geo.long - point.long) < MOVE_THRESHOLD) {\n      if (point.accuracyRadius !== geo.accuracyRadius) {\n        setPoint({\n          ...point,\n          accuracyRadius: geo.accuracyRadius,\n        });\n      }\n      return;\n    }\n    setPoint(geo);\n  }, [geo, point]);\n\n  useTimeout(() => {\n    forceUpdate();\n  }, !isExpired ? (secondsBeforeEnd || 0) * 1000 : undefined);\n\n  useInterval(() => {\n    const countdownEl = countdownRef.current;\n\n    if (countdownEl) {\n      updateCountdown(countdownEl);\n    }\n  }, secondsBeforeEnd ? 1000 : undefined);\n\n  function renderInfo() {\n    if (!shouldRenderText) return undefined;\n    if (type === 'venue') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">\n            {location.title}\n          </div>\n          <div className=\"location-info-subtitle\">\n            {location.address}\n          </div>\n        </div>\n      );\n    }\n    if (type === 'geoLive') {\n      return (\n        <div className=\"location-info\">\n          <div className=\"location-info-title\">{lang('AttachLiveLocation')}</div>\n          <div className=\"location-info-subtitle\">\n            {formatLastUpdated(lang, serverTime, message.editDate)}\n          </div>\n          {!isExpired && <div className=\"geo-countdown\" ref={countdownRef} />}\n        </div>\n      );\n    }\n    return undefined;\n  }\n\n  function renderMap() {\n    if (!mapBlobUrl) return <Skeleton width={width} height={height} />;\n    return (\n      <img\n        className=\"full-media map\"\n        src={mapBlobUrl}\n        alt=\"Location on a map\"\n        style={`width: ${DEFAULT_MAP_CONFIG.width}px; height: ${DEFAULT_MAP_CONFIG.height}px;`}\n      />\n    );\n  }\n\n  function renderPin() {\n    const pinClassName = buildClassName(\n      'pin',\n      type,\n      isExpired && 'expired',\n    );\n    if (type === 'geoLive') {\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN}>\n          <Avatar chat={avatarChat} user={avatarUser} className=\"location-avatar\" />\n          {location.heading !== undefined && (\n            <div className=\"direction\" style={`--direction: ${location.heading}deg`} />\n          )}\n        </div>\n      );\n    }\n\n    if (type === 'venue') {\n      const color = getVenueColor(location.venueType);\n      const iconSrc = getVenueIconUrl(location.venueType);\n      return (\n        <div className={pinClassName} dangerouslySetInnerHTML={SVG_PIN} style={`--pin-color: ${color}`}>\n          <img src={iconSrc} className=\"venue-icon\" alt=\"\" />\n        </div>\n      );\n    }\n\n    return (\n      <img className={pinClassName} src={mapPin} alt=\"\" />\n    );\n  }\n\n  function renderOverlay() {\n    if (!mapBlobUrl) return undefined;\n\n    return (\n      <>\n        {Boolean(accuracyRadiusPx) && !isExpired && (\n          <div\n            className=\"location-accuracy\"\n            style={`width: ${accuracyRadiusPx * 2}px; height: ${accuracyRadiusPx * 2}px`}\n          />\n        )}\n        {renderPin()}\n      </>\n    );\n  }\n\n  return (\n    <div\n      ref={ref}\n      className=\"Location media-inner interactive\"\n      onClick={handleClick}\n    >\n      <div className=\"map-wrapper\">\n        {renderMap()}\n        {renderOverlay()}\n      </div>\n      {renderInfo()}\n    </div>\n  );\n};\n\nexport default memo(Location);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { getActions } from '../../../global';\nimport { getGamePreviewPhotoHash, getGamePreviewVideoHash, getMessageText } from '../../../global/helpers';\n\nimport useMedia from '../../../hooks/useMedia';\n\nimport Skeleton from '../../ui/Skeleton';\n\nimport './Game.scss';\n\nconst DEFAULT_PREVIEW_DIMENSIONS = {\n  width: 480,\n  height: 270,\n};\n\ntype OwnProps = {\n  message: ApiMessage;\n  canAutoLoadMedia?: boolean;\n  lastSyncTime?: number;\n};\n\nconst Game: FC<OwnProps> = ({\n  message,\n  canAutoLoadMedia,\n  lastSyncTime,\n}) => {\n  const { clickBotInlineButton } = getActions();\n  const game = message.content.game!;\n  const {\n    title, description,\n  } = game;\n\n  const photoHash = Boolean(lastSyncTime) && getGamePreviewPhotoHash(game);\n  const videoHash = Boolean(lastSyncTime) && getGamePreviewVideoHash(game);\n  const photoBlobUrl = useMedia(photoHash, !canAutoLoadMedia);\n  const videoBlobUrl = useMedia(videoHash, !canAutoLoadMedia);\n\n  const handleGameClick = () => {\n    clickBotInlineButton({\n      messageId: message.id,\n      button: message.inlineButtons![0][0],\n    });\n  };\n\n  return (\n    <div className=\"Game\">\n      <div\n        className=\"preview\"\n        style={`width: ${DEFAULT_PREVIEW_DIMENSIONS.width}px; height: ${DEFAULT_PREVIEW_DIMENSIONS.height}px`}\n        onClick={handleGameClick}\n      >\n        {!photoBlobUrl && !videoBlobUrl && (\n          <Skeleton className=\"skeleton preview-content\" />\n        )}\n        {photoBlobUrl && (\n          <img\n            className=\"preview-content\"\n            src={photoBlobUrl}\n            alt={title}\n          />\n        )}\n        {videoBlobUrl && (\n          <video\n            className=\"preview-content\"\n            playsInline\n            muted\n            disablePictureInPicture\n            autoPlay\n            loop\n            src={videoBlobUrl}\n          />\n        )}\n      </div>\n      <div className=\"title\">{title}</div>\n      {!getMessageText(message) && <div className=\"description\">{description}</div>}\n    </div>\n  );\n};\n\nexport default memo(Game);\n","import type { MouseEvent as ReactMouseEvent } from 'react';\nimport type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useMemo,\n  memo,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { OwnProps as PhotoProps } from '../Photo';\nimport type { OwnProps as VideoProps } from '../Video';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport {\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n} from '../../../../global/selectors';\n\ntype OwnProps =\n  PhotoProps\n  & VideoProps;\n\ntype StateProps = {\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n};\n\nexport default function withSelectControl(WrappedComponent: FC) {\n  const ComponentWithSelectControl: FC<OwnProps & StateProps> = (props) => {\n    const {\n      isInSelectMode,\n      isSelected,\n      message,\n      dimensions,\n    } = props;\n    const { toggleMessageSelection } = getActions();\n\n    const handleMessageSelect = useCallback((e: ReactMouseEvent<HTMLDivElement, MouseEvent>) => {\n      e.stopPropagation();\n      toggleMessageSelection({ messageId: message.id, withShift: e?.shiftKey });\n    }, [toggleMessageSelection, message]);\n\n    const newProps = useMemo(() => {\n      const { dimensions: dims, onClick } = props;\n      return {\n        ...props,\n        isInSelectMode,\n        isSelected,\n        dimensions: {\n          ...dims,\n          x: 0,\n          y: 0,\n        },\n        onClick: isInSelectMode ? undefined : onClick,\n      };\n    }, [props, isInSelectMode, isSelected]);\n\n    return (\n      <div\n        className={buildClassName('album-item-select-wrapper', isSelected && 'is-selected')}\n        style={dimensions ? `left: ${dimensions.x}px; top: ${dimensions.y}px;` : ''}\n        onClick={isInSelectMode ? handleMessageSelect : undefined}\n      >\n        {isInSelectMode && (\n          <div className=\"message-select-control\">\n            {isSelected && (\n              <i className=\"icon-select\" />\n            )}\n          </div>\n        )}\n        {/* eslint-disable-next-line react/jsx-props-no-spreading */}\n        <WrappedComponent {...newProps} />\n      </div>\n    );\n  };\n\n  return memo(withGlobal<OwnProps>(\n    (global, ownProps) => {\n      const { message } = ownProps;\n      return {\n        isInSelectMode: selectIsInSelectMode(global),\n        isSelected: selectIsMessageSelected(global, message.id),\n      };\n    },\n  )(ComponentWithSelectControl));\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback } from '../../../lib/teact/teact';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiMessage } from '../../../api/types';\nimport type { IAlbum, ISettings } from '../../../types';\nimport type { IAlbumLayout } from './helpers/calculateAlbumLayout';\nimport { AlbumRectPart } from './helpers/calculateAlbumLayout';\n\nimport { getMessageContent, getMessageHtmlId, getMessageOriginalId } from '../../../global/helpers';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\nimport withSelectControl from './hocs/withSelectControl';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport {\n  selectActiveDownloadIds,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectTheme,\n} from '../../../global/selectors';\n\nimport Photo from './Photo';\nimport Video from './Video';\n\nimport './Album.scss';\n\nconst PhotoWithSelect = withSelectControl(Photo);\nconst VideoWithSelect = withSelectControl(Video);\n\ntype OwnProps = {\n  album: IAlbum;\n  observeIntersection: ObserveFn;\n  hasCustomAppendix?: boolean;\n  lastSyncTime?: number;\n  isOwn: boolean;\n  isProtected?: boolean;\n  albumLayout: IAlbumLayout;\n  onMediaClick: (messageId: number) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  uploadsById: GlobalState['fileUploads']['byMessageLocalId'];\n  activeDownloadIds: number[];\n};\n\nconst Album: FC<OwnProps & StateProps> = ({\n  album,\n  observeIntersection,\n  hasCustomAppendix,\n  lastSyncTime,\n  isOwn,\n  isProtected,\n  albumLayout,\n  onMediaClick,\n  uploadsById,\n  activeDownloadIds,\n  theme,\n}) => {\n  const { cancelSendingMessage } = getActions();\n\n  const mediaCount = album.messages.length;\n\n  const handleCancelUpload = useCallback((message: ApiMessage) => {\n    cancelSendingMessage({ chatId: message.chatId, messageId: message.id });\n  }, [cancelSendingMessage]);\n\n  function renderAlbumMessage(message: ApiMessage, index: number) {\n    const { photo, video } = getMessageContent(message);\n    const fileUpload = uploadsById[getMessageOriginalId(message)];\n    const uploadProgress = fileUpload?.progress;\n    const { dimensions, sides } = albumLayout.layout[index];\n\n    // Ignoring global updates is a known drawback here\n    const canAutoLoad = selectCanAutoLoadMedia(getGlobal(), message);\n    const canAutoPlay = selectCanAutoPlayMedia(getGlobal(), message);\n\n    if (photo) {\n      const shouldAffectAppendix = hasCustomAppendix && (\n        // eslint-disable-next-line no-bitwise\n        (isOwn ? index === mediaCount - 1 : Boolean(sides & AlbumRectPart.Left && sides & AlbumRectPart.Bottom))\n      );\n\n      return (\n        <PhotoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          shouldAffectAppendix={shouldAffectAppendix}\n          uploadProgress={uploadProgress}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    } else if (video) {\n      return (\n        <VideoWithSelect\n          id={`album-media-${getMessageHtmlId(message.id)}`}\n          message={message}\n          observeIntersectionForLoading={observeIntersection}\n          canAutoLoad={canAutoLoad}\n          canAutoPlay={canAutoPlay}\n          uploadProgress={uploadProgress}\n          lastSyncTime={lastSyncTime}\n          dimensions={dimensions}\n          isProtected={isProtected}\n          onClick={onMediaClick}\n          onCancelUpload={handleCancelUpload}\n          isDownloading={activeDownloadIds.includes(message.id)}\n          theme={theme}\n        />\n      );\n    }\n\n    return undefined;\n  }\n\n  const { width: containerWidth, height: containerHeight } = albumLayout.containerStyle;\n\n  return (\n    <div\n      className=\"Album\"\n      style={`width: ${containerWidth}px; height: ${containerHeight}px;`}\n    >\n      {album.messages.map(renderAlbumMessage)}\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { album }): StateProps => {\n    const { chatId } = album.mainMessage;\n    const theme = selectTheme(global);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n    return {\n      theme,\n      uploadsById: global.fileUploads.byMessageLocalId,\n      activeDownloadIds,\n    };\n  },\n)(Album);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { ROUND_VIDEO_DIMENSIONS_PX } from '../../common/helpers/mediaDimensions';\nimport { getMessageMediaFormat, getMessageMediaHash, getMessageMediaThumbDataUri } from '../../../global/helpers';\nimport { formatMediaDuration } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { stopCurrentAudio } from '../../../util/audioPlayer';\nimport safePlay from '../../../util/safePlay';\nimport { fastRaf } from '../../../util/schedulers';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useFlag from '../../../hooks/useFlag';\nimport useBlurredMediaThumbRef from './hooks/useBlurredMediaThumbRef';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\nimport OptimizedVideo from '../../ui/OptimizedVideo';\n\nimport './RoundVideo.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  observeIntersection: ObserveFn;\n  canAutoLoad?: boolean;\n  lastSyncTime?: number;\n  isDownloading?: boolean;\n};\n\nlet stopPrevious: NoneToVoidFunction;\n\nconst RoundVideo: FC<OwnProps> = ({\n  message,\n  observeIntersection,\n  canAutoLoad,\n  lastSyncTime,\n  isDownloading,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playingProgressRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const playerRef = useRef<HTMLVideoElement>(null);\n\n  const video = message.content.video!;\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const [isLoadAllowed, setIsLoadAllowed] = useState(canAutoLoad);\n  const shouldLoad = Boolean(isLoadAllowed && isIntersecting && lastSyncTime);\n  const { mediaData, loadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'inline'),\n    !shouldLoad,\n    getMessageMediaFormat(message, 'inline'),\n    lastSyncTime,\n  );\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    getMessageMediaHash(message, 'download'),\n    !isDownloading,\n    ApiMediaFormat.BlobUrl,\n    lastSyncTime,\n  );\n\n  const [isPlayerReady, markPlayerReady] = useFlag();\n  const hasThumb = Boolean(getMessageMediaThumbDataUri(message));\n  const noThumb = !hasThumb || isPlayerReady;\n  const thumbRef = useBlurredMediaThumbRef(message, noThumb);\n  const thumbClassNames = useMediaTransition(!noThumb);\n\n  const isTransferring = (isLoadAllowed && !isPlayerReady) || isDownloading;\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n\n  const {\n    shouldRender: shouldSpinnerRender,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(isTransferring, undefined, wasLoadDisabled);\n\n  const [isActivated, setIsActivated] = useState<boolean>(false);\n  const [progress, setProgress] = useState<number>(0);\n\n  useEffect(() => {\n    if (!isActivated) {\n      return;\n    }\n\n    const svgCenter = ROUND_VIDEO_DIMENSIONS_PX / 2;\n    const svgMargin = 6;\n    const circumference = (svgCenter - svgMargin) * 2 * Math.PI;\n    const strokeDashOffset = circumference - progress * circumference;\n\n    const playerEl = playerRef.current!;\n    const playingProgressEl = playingProgressRef.current!;\n    const svgEl = playingProgressEl.firstElementChild;\n\n    if (!svgEl) {\n      playingProgressEl.innerHTML = `\n        <svg width=\"${ROUND_VIDEO_DIMENSIONS_PX}px\" height=\"${ROUND_VIDEO_DIMENSIONS_PX}px\">\n          <circle cx=\"${svgCenter}\" cy=\"${svgCenter}\" r=\"${svgCenter - svgMargin}\" class=\"progress-circle\"\n            transform=\"rotate(-90, ${svgCenter}, ${svgCenter})\"\n            stroke-dasharray=\"${circumference} ${circumference}\"\n            stroke-dashoffset=\"${circumference}\"\n          />\n        </svg>`;\n    } else {\n      (svgEl.firstElementChild as SVGElement).setAttribute('stroke-dashoffset', strokeDashOffset.toString());\n    }\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, [isActivated, progress]);\n\n  const shouldPlay = Boolean(mediaData && isIntersecting);\n\n  const stopPlaying = useCallback(() => {\n    if (!playerRef.current) {\n      return;\n    }\n\n    setIsActivated(false);\n    setProgress(0);\n    safePlay(playerRef.current);\n\n    fastRaf(() => {\n      playingProgressRef.current!.innerHTML = '';\n    });\n  }, []);\n\n  const capturePlaying = useCallback(() => {\n    stopPrevious?.();\n    stopPrevious = stopPlaying;\n  }, [stopPlaying]);\n\n  const handleClick = useCallback(() => {\n    if (!mediaData) {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n\n      return;\n    }\n\n    if (isDownloading) {\n      getActions().cancelMessageMediaDownload({ message });\n      return;\n    }\n\n    const playerEl = playerRef.current!;\n    if (isActivated) {\n      if (playerEl.paused) {\n        safePlay(playerEl);\n        stopCurrentAudio();\n      } else {\n        playerEl.pause();\n      }\n    } else {\n      capturePlaying();\n      // Pause is a workaround for iOS Safari – otherwise it stops video after several frames\n      playerEl.pause();\n      playerEl.currentTime = 0;\n      safePlay(playerEl);\n      stopCurrentAudio();\n\n      setIsActivated(true);\n    }\n  }, [capturePlaying, isActivated, isDownloading, mediaData, message]);\n\n  const handleTimeUpdate = useCallback((e: React.UIEvent<HTMLVideoElement>) => {\n    const playerEl = e.currentTarget;\n\n    setProgress(playerEl.currentTime / playerEl.duration);\n  }, []);\n\n  return (\n    <div\n      ref={ref}\n      className=\"RoundVideo media-inner\"\n      onClick={handleClick}\n    >\n      {mediaData && (\n        <div className=\"video-wrapper\">\n          <OptimizedVideo\n            canPlay={shouldPlay}\n            ref={playerRef}\n            src={mediaData}\n            className=\"full-media\"\n            width={ROUND_VIDEO_DIMENSIONS_PX}\n            height={ROUND_VIDEO_DIMENSIONS_PX}\n            autoPlay\n            disablePictureInPicture\n            muted={!isActivated}\n            loop={!isActivated}\n            playsInline\n            onEnded={isActivated ? stopPlaying : undefined}\n            onTimeUpdate={isActivated ? handleTimeUpdate : undefined}\n            onReady={markPlayerReady}\n          />\n        </div>\n      )}\n      <canvas\n        ref={thumbRef}\n        className={buildClassName('thumbnail', thumbClassNames)}\n        style={`width: ${ROUND_VIDEO_DIMENSIONS_PX}px; height: ${ROUND_VIDEO_DIMENSIONS_PX}px`}\n      />\n      <div className=\"progress\" ref={playingProgressRef} />\n      {shouldSpinnerRender && (\n        <div className={`media-loading ${spinnerClassNames}`}>\n          <ProgressSpinner progress={isDownloading ? downloadProgress : loadProgress} />\n        </div>\n      )}\n      {!mediaData && !isLoadAllowed && (\n        <i className=\"icon-download\" />\n      )}\n      <div className=\"message-media-duration\">\n        {isActivated ? formatMediaDuration(playerRef.current!.currentTime) : formatMediaDuration(video.duration)}\n        {(!isActivated || playerRef.current!.paused) && <i className=\"icon-muted\" />}\n      </div>\n    </div>\n  );\n};\n\nexport default RoundVideo;\n","import React from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiKeyboardButton, ApiMessage } from '../../../api/types';\n\nimport { RE_TME_LINK } from '../../../config';\nimport renderText from '../../common/helpers/renderText';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\nimport './InlineButtons.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  onClick: ({ messageId, button }: { messageId: number; button: ApiKeyboardButton }) => void;\n};\n\nconst InlineButtons: FC<OwnProps> = ({ message, onClick }) => {\n  const lang = useLang();\n\n  const renderIcon = (button: ApiKeyboardButton) => {\n    const { type } = button;\n    switch (type) {\n      case 'url': {\n        if (!RE_TME_LINK.test(button.url)) {\n          return <i className=\"icon-arrow-right\" />;\n        }\n        break;\n      }\n      case 'urlAuth':\n        return <i className=\"icon-arrow-right\" />;\n      case 'buy':\n      case 'receipt':\n        return <i className=\"icon-cart\" />;\n      case 'switchBotInline':\n        return <i className=\"icon-share-filled\" />;\n      case 'webView':\n      case 'simpleWebView':\n        return <i className=\"icon-webapp\" />;\n    }\n    return undefined;\n  };\n\n  return (\n    <div className=\"InlineButtons\">\n      {message.inlineButtons!.map((row) => (\n        <div className=\"row\">\n          {row.map((button) => (\n            <Button\n              size=\"tiny\"\n              ripple\n              disabled={button.type === 'unsupported'}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onClick({ messageId: message.id, button })}\n            >\n              <span className=\"inline-button-text\">{renderText(lang(button.text))}</span>\n              {renderIcon(button)}\n            </Button>\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default InlineButtons;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiThreadInfo, ApiUser,\n} from '../../../api/types';\n\nimport { isUserId } from '../../../global/helpers';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './CommentButton.scss';\n\ntype OwnProps = {\n  threadInfo: ApiThreadInfo;\n  disabled?: boolean;\n};\n\nconst CommentButton: FC<OwnProps> = ({\n  threadInfo,\n  disabled,\n}) => {\n  const { openComments } = getActions();\n\n  const lang = useLang();\n  const {\n    threadId, chatId, messagesCount, lastMessageId, lastReadInboxMessageId, recentReplierIds, originChannelId,\n  } = threadInfo;\n\n  const handleClick = useCallback(() => {\n    openComments({ id: chatId, threadId, originChannelId });\n  }, [openComments, chatId, threadId, originChannelId]);\n\n  const recentRepliers = useMemo(() => {\n    if (!recentReplierIds?.length) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on chats and users, so we avoid them\n    const { users: { byId: usersById }, chats: { byId: chatsById } } = getGlobal();\n\n    return recentReplierIds.map((peerId) => {\n      return isUserId(peerId) ? usersById[peerId] : chatsById[peerId];\n    }).filter(Boolean);\n  }, [recentReplierIds]);\n\n  if (messagesCount === undefined) {\n    return undefined;\n  }\n\n  function renderRecentRepliers() {\n    return (\n      recentRepliers && recentRepliers.length > 0 && (\n        <div className=\"recent-repliers\" dir={lang.isRtl ? 'rtl' : 'ltr'}>\n          {recentRepliers.map((user) => (\n            <Avatar\n              key={user.id}\n              size=\"small\"\n              user={isUserId(user.id) ? user as ApiUser : undefined}\n              chat={!isUserId(user.id) ? user as ApiChat : undefined}\n            />\n          ))}\n        </div>\n      )\n    );\n  }\n\n  const hasUnread = Boolean(lastReadInboxMessageId && lastMessageId && lastReadInboxMessageId < lastMessageId);\n\n  const commentsText = messagesCount ? (lang('Comments', '%COMMENTS_COUNT%', undefined, messagesCount) as string)\n    .split('%')\n    .map((s) => {\n      return (s === 'COMMENTS_COUNT' ? <AnimatedCounter text={formatIntegerCompact(messagesCount)} /> : s);\n    })\n    : undefined;\n\n  return (\n    <div\n      data-cnt={formatIntegerCompact(messagesCount)}\n      className={buildClassName('CommentButton', hasUnread && 'has-unread', disabled && 'disabled')}\n      dir={lang.isRtl ? 'rtl' : 'ltr'}\n      onClick={handleClick}\n    >\n      <i className=\"icon-comments-sticker\" />\n      {(!recentRepliers || recentRepliers.length === 0) && <i className=\"icon-comments\" />}\n      {renderRecentRepliers()}\n      <div className=\"label\" dir=\"auto\">\n        {messagesCount ? commentsText : lang('LeaveAComment')}\n      </div>\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(CommentButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"JY0NZH9bysPBqR3sIbLu\",\"is-custom-emoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"isCustomEmoji\":\"T1R9OVCwcfQHR4vN8cx_\",\"animated-icon\":\"WTrBqa2uxq57nYJAIelk\",\"animatedIcon\":\"WTrBqa2uxq57nYJAIelk\",\"effect\":\"z9v8vlAIGxI3ITxuyEG1\",\"animating\":\"sB0FGOzwkiDvNWHWcVEL\"};","import React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiReaction, ApiStickerSet } from '../../../api/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { isSameReaction } from '../../../global/helpers';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useCustomEmoji from '../../common/hooks/useCustomEmoji';\n\nimport CustomEmoji from '../../common/CustomEmoji';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport AnimatedSticker from '../../common/AnimatedSticker';\nimport CustomEmojiEffect from './CustomEmojiEffect';\n\nimport styles from './ReactionAnimatedEmoji.module.scss';\n\ntype OwnProps = {\n  reaction: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n};\n\nconst CENTER_ICON_SIZE = 2.5 * REM;\nconst EFFECT_SIZE = 6.5 * REM;\n\nconst ReactionAnimatedEmoji: FC<OwnProps> = ({\n  reaction,\n  genericEffects,\n  activeReactions,\n  availableReactions,\n  observeIntersection,\n}) => {\n  const { stopActiveReaction } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isCustom = 'documentId' in reaction;\n\n  const availableReaction = useMemo(() => (\n    availableReactions?.find((r) => isSameReaction(r.reaction, reaction))\n  ), [availableReactions, reaction]);\n  const centerIconId = availableReaction?.centerIcon?.id;\n\n  const customEmoji = useCustomEmoji(isCustom ? reaction.documentId : undefined);\n\n  const assignedEffectId = useMemo(() => {\n    if (!isCustom) return availableReaction?.aroundAnimation?.id;\n\n    if (!customEmoji) return undefined;\n    const assignedId = availableReactions?.find((available) => available.reaction.emoticon === customEmoji.emoji)\n      ?.aroundAnimation?.id;\n    return assignedId;\n  }, [availableReaction, availableReactions, customEmoji, isCustom]);\n\n  const effectId = useMemo(() => {\n    if (assignedEffectId) {\n      return assignedEffectId;\n    }\n\n    if (!genericEffects?.stickers) {\n      return undefined;\n    }\n\n    const { stickers } = genericEffects;\n    const randomIndex = Math.floor(Math.random() * stickers.length);\n\n    return stickers[randomIndex].id;\n  }, [assignedEffectId, genericEffects]);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHashCenterIcon = centerIconId && `sticker${centerIconId}`;\n  const mediaHashEffect = effectId && `sticker${effectId}`;\n\n  const mediaDataCenterIcon = useMedia(mediaHashCenterIcon, !centerIconId);\n  const mediaDataEffect = useMedia(mediaHashEffect, !effectId);\n\n  const activeReaction = useMemo(() => (\n    activeReactions?.find((active) => isSameReaction(active.reaction, reaction))\n  ), [activeReactions, reaction]);\n\n  const shouldPlay = Boolean(activeReaction && (isCustom || mediaDataCenterIcon) && mediaDataEffect);\n  const {\n    shouldRender: shouldRenderAnimation,\n    transitionClassNames: animationClassNames,\n  } = useShowTransition(shouldPlay, undefined, true, 'slow');\n\n  const handleEnded = useCallback(() => {\n    if (!activeReaction?.messageId) return;\n    stopActiveReaction({ messageId: activeReaction.messageId, reaction });\n  }, [activeReaction?.messageId, reaction, stopActiveReaction]);\n\n  const [isAnimationLoaded, markAnimationLoaded, unmarkAnimationLoaded] = useFlag();\n  const shouldRenderStatic = !isCustom && (!shouldPlay || !isAnimationLoaded);\n\n  const className = buildClassName(\n    styles.root,\n    shouldRenderAnimation && styles.animating,\n    isCustom && styles.isCustomEmoji,\n  );\n\n  return (\n    <div className={className} ref={ref}>\n      {shouldRenderStatic && <ReactionStaticEmoji reaction={reaction} availableReactions={availableReactions} />}\n      {isCustom && (\n        <CustomEmoji\n          documentId={reaction.documentId}\n          className={styles.customEmoji}\n          observeIntersectionForPlaying={observeIntersection}\n        />\n      )}\n      {shouldRenderAnimation && (\n        <>\n          <AnimatedSticker\n            key={effectId}\n            className={buildClassName(styles.effect, animationClassNames)}\n            size={EFFECT_SIZE}\n            tgsUrl={mediaDataEffect}\n            play={isIntersecting}\n            noLoop\n            forceOnHeavyAnimation\n            onEnded={handleEnded}\n          />\n          {isCustom ? (\n            !assignedEffectId && isIntersecting && <CustomEmojiEffect reaction={reaction} />\n          ) : (\n            <AnimatedSticker\n              key={centerIconId}\n              className={buildClassName(styles.animatedIcon, animationClassNames)}\n              size={CENTER_ICON_SIZE}\n              tgsUrl={mediaDataCenterIcon}\n              play={isIntersecting}\n              noLoop\n              forceOnHeavyAnimation\n              onLoad={markAnimationLoaded}\n              onEnded={unmarkAnimationLoaded}\n            />\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionAnimatedEmoji);\n","import React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport type {\n  ApiAvailableReaction, ApiMessage, ApiReactionCount, ApiStickerSet, ApiUser,\n} from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatIntegerCompact } from '../../../util/textFormat';\nimport { isSameReaction, isReactionChosen } from '../../../global/helpers';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport ReactionAnimatedEmoji from './ReactionAnimatedEmoji';\nimport AnimatedCounter from '../../common/AnimatedCounter';\n\nimport './Reactions.scss';\n\nconst ReactionButton: FC<{\n  reaction: ApiReactionCount;\n  message: ApiMessage;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  withRecentReactors?: boolean;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n}> = ({\n  reaction,\n  message,\n  activeReactions,\n  availableReactions,\n  withRecentReactors,\n  genericEffects,\n  observeIntersection,\n}) => {\n  const { toggleReaction } = getActions();\n  const { recentReactions } = message.reactions!;\n\n  const recentReactors = useMemo(() => {\n    if (!withRecentReactors || !recentReactions) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return recentReactions\n      .filter((recentReaction) => isSameReaction(recentReaction.reaction, reaction.reaction))\n      .map((recentReaction) => usersById[recentReaction.userId])\n      .filter(Boolean) as ApiUser[];\n  }, [reaction.reaction, recentReactions, withRecentReactors]);\n\n  const handleClick = useCallback(() => {\n    toggleReaction({\n      reaction: reaction.reaction,\n      chatId: message.chatId,\n      messageId: message.id,\n    });\n  }, [message, reaction, toggleReaction]);\n\n  return (\n    <Button\n      className={buildClassName(isReactionChosen(reaction) && 'chosen')}\n      size=\"tiny\"\n      onClick={handleClick}\n    >\n      <ReactionAnimatedEmoji\n        activeReactions={activeReactions}\n        reaction={reaction.reaction}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersection}\n      />\n      {recentReactors?.length ? (\n        <div className=\"avatars\">\n          {recentReactors.map((user) => <Avatar user={user} size=\"micro\" />)}\n        </div>\n      ) : <AnimatedCounter text={formatIntegerCompact(reaction.count)} />}\n    </Button>\n  );\n};\n\nexport default memo(ReactionButton);\n","import React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiAvailableReaction, ApiMessage, ApiStickerSet } from '../../../api/types';\nimport type { ActiveReaction } from '../../../global/types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\n\nimport { getReactionUniqueKey } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ReactionButton from './ReactionButton';\n\nimport './Reactions.scss';\n\ntype OwnProps = {\n  message: ApiMessage;\n  isOutside?: boolean;\n  maxWidth?: number;\n  activeReactions?: ActiveReaction[];\n  availableReactions?: ApiAvailableReaction[];\n  metaChildren?: React.ReactNode;\n  genericEffects?: ApiStickerSet;\n  observeIntersection?: ObserveFn;\n  noRecentReactors?: boolean;\n};\n\nconst MAX_RECENT_AVATARS = 3;\n\nconst Reactions: FC<OwnProps> = ({\n  message,\n  isOutside,\n  maxWidth,\n  activeReactions,\n  availableReactions,\n  metaChildren,\n  genericEffects,\n  observeIntersection,\n  noRecentReactors,\n}) => {\n  const totalCount = useMemo(() => (\n    message.reactions!.results.reduce((acc, reaction) => acc + reaction.count, 0)\n  ), [message]);\n\n  return (\n    <div\n      className={buildClassName('Reactions', isOutside && 'is-outside')}\n      style={maxWidth ? `max-width: ${maxWidth}px` : undefined}\n    >\n      {message.reactions!.results.map((reaction) => (\n        <ReactionButton\n          key={getReactionUniqueKey(reaction.reaction)}\n          reaction={reaction}\n          message={message}\n          activeReactions={activeReactions}\n          availableReactions={availableReactions}\n          withRecentReactors={totalCount <= MAX_RECENT_AVATARS && !noRecentReactors}\n          genericEffects={genericEffects}\n          observeIntersection={observeIntersection}\n        />\n      ))}\n      {metaChildren}\n    </div>\n  );\n};\n\nexport default memo(Reactions);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, PhoneCallAction } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { formatTimeDuration, formatTime } from '../../../util/dateFormat';\nimport { ARE_CALLS_SUPPORTED } from '../../../util/environment';\n\nimport Button from '../../ui/Button';\n\nimport styles from './MessagePhoneCall.module.scss';\n\ntype OwnProps = {\n  phoneCall: PhoneCallAction;\n  message: ApiMessage;\n  chatId: string;\n};\n\nconst MessagePhoneCall: FC<OwnProps> = ({\n  phoneCall,\n  message,\n  chatId,\n}) => {\n  const { requestMasterAndRequestCall } = getActions();\n\n  const lang = useLang();\n  const { isOutgoing, isVideo, reason } = phoneCall;\n  const isMissed = reason === 'missed';\n  const isCancelled = reason === 'busy' && !isOutgoing;\n\n  const handleCall = useCallback(() => {\n    requestMasterAndRequestCall({ isVideo, userId: chatId });\n  }, [chatId, isVideo, requestMasterAndRequestCall]);\n\n  const reasonText = useMemo(() => {\n    if (isVideo) {\n      if (isCancelled) return 'CallMessageVideoIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageVideoOutgoingMissed' : 'CallMessageVideoIncomingMissed';\n\n      return isOutgoing ? 'CallMessageVideoOutgoing' : 'CallMessageVideoIncoming';\n    } else {\n      if (isCancelled) return 'CallMessageIncomingDeclined';\n      if (isMissed) return isOutgoing ? 'CallMessageOutgoingMissed' : 'CallMessageIncomingMissed';\n\n      return isOutgoing ? 'CallMessageOutgoing' : 'CallMessageIncoming';\n    }\n  }, [isCancelled, isMissed, isOutgoing, isVideo]);\n\n  const duration = useMemo(() => {\n    return phoneCall.duration ? formatTimeDuration(lang, phoneCall.duration) : undefined;\n  }, [lang, phoneCall.duration]);\n\n  const timeFormatted = formatTime(lang, message.date * 1000);\n  return (\n    <div className={styles.root}>\n      <Button\n        size=\"smaller\"\n        color=\"translucent\"\n        round\n        ripple\n        onClick={handleCall}\n        className={styles.button}\n        disabled={!ARE_CALLS_SUPPORTED}\n        ariaLabel={lang(isOutgoing ? 'CallAgain' : 'CallBack')}\n      >\n        <i className={isVideo ? 'icon-video-outlined' : 'icon-phone'} />\n      </Button>\n      <div className={styles.info}>\n        <div className={styles.reason}>{lang(reasonText)}</div>\n        <div className={styles.meta}>\n          <i\n            className={buildClassName(\n              'icon-arrow-right', styles.arrow, isMissed && styles.missed, !isOutgoing && styles.incoming,\n            )}\n          />\n          <span className={styles.duration}>\n            {duration ? lang('CallMessageWithDuration', [timeFormatted, duration]) : timeFormatted}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(MessagePhoneCall);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vDeypQzM845_JE14qGId\",\"button\":\"OtJi45yywgt1n_y6VPkE\",\"info\":\"_0BG8sziTJQ_NYrsspMg\",\"reason\":\"LWVSvxVjeEyHPBrCb2sD\",\"arrow\":\"wrUkWet7enyh9L1iPKvA\",\"incoming\":\"e0Vhbj8gfzQn1zJQoFLK\",\"missed\":\"V5tKkKZpcY5yq_f5nO8l\",\"meta\":\"nuIsoCP15iD4ETadJ44R\",\"duration\":\"TJ2lYkLxYUie3A0JqtMR\"};","import React, { memo } from '../../lib/teact/teact';\n\nimport type { ApiTopic } from '../../api/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { getTopicColorCssVariable } from '../../util/forumColors';\nimport { REM } from './helpers/mediaDimensions';\nimport buildClassName from '../../util/buildClassName';\nimport renderText from './helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from './TopicIcon';\n\nimport styles from './TopicChip.module.scss';\nimport blankSrc from '../../assets/blank.png';\n\ntype OwnProps = {\n  topic?: ApiTopic;\n  className?: string;\n  onClick?: NoneToVoidFunction;\n};\n\nconst TOPIC_ICON_SIZE = 1.125 * REM;\n\nconst TopicChip: FC<OwnProps> = ({\n  topic,\n  className,\n  onClick,\n}) => {\n  const lang = useLang();\n  return (\n    <div\n      className={buildClassName(styles.root, className)}\n      style={`--topic-button-accent-color: var(${getTopicColorCssVariable(topic?.iconColor)})`}\n      onClick={onClick}\n    >\n      {topic\n        ? <TopicIcon topic={topic} size={TOPIC_ICON_SIZE} />\n        : <img src={blankSrc} alt=\"\" />}\n      {topic?.title ? renderText(topic.title) : lang('Loading')}\n      {topic?.isClosed && <i className=\"icon-lock\" />}\n      <i className=\"icon-next\" />\n    </div>\n  );\n};\n\nexport default memo(TopicChip);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"wUl1jHjVuMxmGhsdl358\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ActiveEmojiInteraction, ActiveReaction, ChatTranslatedMessages, MessageListType,\n} from '../../../global/types';\nimport type {\n  ApiMessage,\n  ApiMessageOutgoingStatus,\n  ApiUser,\n  ApiChat,\n  ApiThreadInfo,\n  ApiAvailableReaction,\n  ApiChatMember,\n  ApiUsername,\n  ApiTopic,\n  ApiReaction,\n  ApiStickerSet,\n} from '../../../api/types';\nimport type {\n  AnimationLevel, FocusDirection, IAlbum, ISettings,\n} from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { AudioOrigin } from '../../../types';\nimport { MAIN_THREAD_ID } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { EMOJI_STATUS_LOOP_LIMIT, GENERAL_TOPIC_ID } from '../../../config';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectUploadProgress,\n  selectIsChatWithSelf,\n  selectOutgoingStatus,\n  selectUser,\n  selectIsMessageFocused,\n  selectCurrentTextSearch,\n  selectIsInSelectMode,\n  selectIsMessageSelected,\n  selectIsDocumentGroupSelected,\n  selectSender,\n  selectForwardedSender,\n  selectThreadTopMessageId,\n  selectCanAutoLoadMedia,\n  selectCanAutoPlayMedia,\n  selectShouldLoopStickers,\n  selectTheme,\n  selectAllowedMessageActions,\n  selectIsDownloading,\n  selectThreadInfo,\n  selectMessageIdsByGroupId,\n  selectIsMessageProtected,\n  selectDefaultReaction,\n  selectReplySender,\n  selectAnimatedEmoji,\n  selectIsCurrentUserPremium,\n  selectIsChatProtected,\n  selectTopicFromMessage,\n  selectTabState,\n  selectChatTranslations,\n  selectRequestedTranslationLanguage,\n} from '../../../global/selectors';\nimport {\n  getMessageContent,\n  isOwnMessage,\n  isReplyMessage,\n  isAnonymousOwnMessage,\n  isMessageLocal,\n  isUserId,\n  isChatWithRepliesBot,\n  getMessageCustomShape,\n  isChatChannel,\n  getMessageSingleRegularEmoji,\n  getSenderTitle,\n  getUserColorKey,\n  areReactionsEmpty,\n  getMessageHtmlId,\n  isGeoLiveExpired,\n  getMessageSingleCustomEmoji,\n  hasMessageText,\n  isChatGroup,\n  getMessageLocation,\n} from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport {\n  calculateDimensionsForMessageMedia,\n  REM,\n  ROUND_VIDEO_DIMENSIONS_PX,\n} from '../../common/helpers/mediaDimensions';\nimport { buildContentClassName } from './helpers/buildContentClassName';\nimport { getMinMediaWidth, calculateMediaDimensions } from './helpers/mediaDimensions';\nimport { calculateAlbumLayout } from './helpers/calculateAlbumLayout';\nimport renderText from '../../common/helpers/renderText';\nimport calculateAuthorWidth from './helpers/calculateAuthorWidth';\nimport { getServerTime } from '../../../util/serverTime';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\nimport { getCustomEmojiSize } from '../composer/helpers/customEmoji';\nimport { isAnimatingScroll } from '../../../util/fastSmoothScroll';\n\nimport useEnsureMessage from '../../../hooks/useEnsureMessage';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\nimport useFocusMessage from './hooks/useFocusMessage';\nimport useOuterHandlers from './hooks/useOuterHandlers';\nimport useInnerHandlers from './hooks/useInnerHandlers';\nimport useAppLayout from '../../../hooks/useAppLayout';\nimport useResizeObserver from '../../../hooks/useResizeObserver';\nimport useThrottledCallback from '../../../hooks/useThrottledCallback';\nimport useMessageTranslation from './hooks/useMessageTranslation';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useTextLanguage from '../../../hooks/useTextLanguage';\n\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport Document from '../../common/Document';\nimport Audio from '../../common/Audio';\nimport MessageMeta from './MessageMeta';\nimport ContextMenuContainer from './ContextMenuContainer.async';\nimport Sticker from './Sticker';\nimport AnimatedEmoji from './AnimatedEmoji';\nimport AnimatedCustomEmoji from './AnimatedCustomEmoji';\nimport Photo from './Photo';\nimport Video from './Video';\nimport Contact from './Contact';\nimport Poll from './Poll';\nimport WebPage from './WebPage';\nimport Invoice from './Invoice';\nimport InvoiceMediaPreview from './InvoiceMediaPreview';\nimport Location from './Location';\nimport Game from './Game';\nimport Album from './Album';\nimport RoundVideo from './RoundVideo';\nimport InlineButtons from './InlineButtons';\nimport CommentButton from './CommentButton';\nimport Reactions from './Reactions';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport MessagePhoneCall from './MessagePhoneCall';\nimport DotAnimation from '../../common/DotAnimation';\nimport CustomEmoji from '../../common/CustomEmoji';\nimport PremiumIcon from '../../common/PremiumIcon';\nimport FakeIcon from '../../common/FakeIcon';\nimport MessageText from '../../common/MessageText';\nimport TopicChip from '../../common/TopicChip';\n\nimport './Message.scss';\n\ntype MessagePositionProperties = {\n  isFirstInGroup: boolean;\n  isLastInGroup: boolean;\n  isFirstInDocumentGroup: boolean;\n  isLastInDocumentGroup: boolean;\n  isLastInList: boolean;\n};\n\ntype OwnProps =\n  {\n    message: ApiMessage;\n    observeIntersectionForBottom: ObserveFn;\n    observeIntersectionForLoading: ObserveFn;\n    observeIntersectionForPlaying: ObserveFn;\n    album?: IAlbum;\n    noAvatars?: boolean;\n    withAvatar?: boolean;\n    withSenderName?: boolean;\n    threadId: number;\n    messageListType: MessageListType;\n    noComments: boolean;\n    noReplies: boolean;\n    appearanceOrder: number;\n    memoFirstUnreadIdRef: { current: number | undefined };\n  }\n  & MessagePositionProperties;\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  forceSenderName?: boolean;\n  chatUsernames?: ApiUsername[];\n  sender?: ApiUser | ApiChat;\n  canShowSender: boolean;\n  originSender?: ApiUser | ApiChat;\n  botSender?: ApiUser;\n  isThreadTop?: boolean;\n  shouldHideReply?: boolean;\n  replyMessage?: ApiMessage;\n  replyMessageSender?: ApiUser | ApiChat;\n  outgoingStatus?: ApiMessageOutgoingStatus;\n  uploadProgress?: number;\n  isInDocumentGroup: boolean;\n  isProtected?: boolean;\n  isChatProtected?: boolean;\n  isFocused?: boolean;\n  focusDirection?: FocusDirection;\n  noFocusHighlight?: boolean;\n  isResizingContainer?: boolean;\n  isForwarding?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isChannel?: boolean;\n  isGroup?: boolean;\n  canReply?: boolean;\n  lastSyncTime?: number;\n  highlight?: string;\n  animatedEmoji?: string;\n  animatedCustomEmoji?: string;\n  genericEffects?: ApiStickerSet;\n  isInSelectMode?: boolean;\n  isSelected?: boolean;\n  isGroupSelected?: boolean;\n  isDownloading: boolean;\n  threadId?: number;\n  isPinnedList?: boolean;\n  canAutoLoadMedia?: boolean;\n  canAutoPlayMedia?: boolean;\n  shouldLoopStickers?: boolean;\n  autoLoadFileMaxSizeMb: number;\n  repliesThreadInfo?: ApiThreadInfo;\n  reactionMessage?: ApiMessage;\n  availableReactions?: ApiAvailableReaction[];\n  defaultReaction?: ApiReaction;\n  activeReactions?: ActiveReaction[];\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  hasUnreadReaction?: boolean;\n  isTranscribing?: boolean;\n  transcribedText?: string;\n  isTranscriptionError?: boolean;\n  isPremium: boolean;\n  animationLevel: AnimationLevel;\n  senderAdminMember?: ApiChatMember;\n  messageTopic?: ApiTopic;\n  hasTopicChip?: boolean;\n  chatTranslations?: ChatTranslatedMessages;\n  areTranslationsEnabled?: boolean;\n  requestedTranslationLanguage?: string;\n};\n\ntype MetaPosition =\n  'in-text'\n  | 'standalone'\n  | 'none';\ntype ReactionsPosition =\n  'inside'\n  | 'outside'\n  | 'none';\n\nconst NBSP = '\\u00A0';\n// eslint-disable-next-line max-len\nconst APPENDIX_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#EEFFDE\" class=\"corner\"/></g></svg>' };\n// eslint-disable-next-line max-len\nconst APPENDIX_NOT_OWN = { __html: '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M3 17h6V0c-.193 2.84-.876 5.767-2.05 8.782-.904 2.325-2.446 4.485-4.625 6.48A1 1 0 003 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>' };\nconst APPEARANCE_DELAY = 10;\nconst NO_MEDIA_CORNERS_THRESHOLD = 18;\nconst QUICK_REACTION_SIZE = 1.75 * REM;\nconst EXTRA_SPACE_FOR_REACTIONS = 2.25 * REM;\nconst BOTTOM_FOCUS_SCROLL_THRESHOLD = 5;\nconst THROTTLE_MS = 300;\n\nconst Message: FC<OwnProps & StateProps> = ({\n  message,\n  chatUsernames,\n  observeIntersectionForBottom,\n  observeIntersectionForLoading,\n  observeIntersectionForPlaying,\n  album,\n  noAvatars,\n  withAvatar,\n  withSenderName,\n  noComments,\n  noReplies,\n  appearanceOrder,\n  isFirstInGroup,\n  isPremium,\n  isLastInGroup,\n  isFirstInDocumentGroup,\n  isLastInDocumentGroup,\n  isTranscribing,\n  transcribedText,\n  isLastInList,\n  theme,\n  forceSenderName,\n  sender,\n  canShowSender,\n  originSender,\n  botSender,\n  isThreadTop,\n  shouldHideReply,\n  replyMessage,\n  replyMessageSender,\n  outgoingStatus,\n  uploadProgress,\n  isInDocumentGroup,\n  isProtected,\n  isChatProtected,\n  isFocused,\n  focusDirection,\n  noFocusHighlight,\n  isResizingContainer,\n  isForwarding,\n  isChatWithSelf,\n  isRepliesChat,\n  isChannel,\n  isGroup,\n  canReply,\n  lastSyncTime,\n  highlight,\n  animatedEmoji,\n  animatedCustomEmoji,\n  genericEffects,\n  isInSelectMode,\n  isSelected,\n  isGroupSelected,\n  threadId,\n  reactionMessage,\n  availableReactions,\n  defaultReaction,\n  activeReactions,\n  activeEmojiInteractions,\n  messageListType,\n  isPinnedList,\n  isDownloading,\n  canAutoLoadMedia,\n  canAutoPlayMedia,\n  shouldLoopStickers,\n  autoLoadFileMaxSizeMb,\n  repliesThreadInfo,\n  hasUnreadReaction,\n  memoFirstUnreadIdRef,\n  animationLevel,\n  senderAdminMember,\n  messageTopic,\n  hasTopicChip,\n  chatTranslations,\n  areTranslationsEnabled,\n  requestedTranslationLanguage,\n}) => {\n  const {\n    toggleMessageSelection,\n    clickBotInlineButton,\n    disableContextMenuHint,\n    animateUnreadReaction,\n    focusLastMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const bottomMarkerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n\n  const messageHeightRef = useRef(0);\n\n  const lang = useLang();\n\n  const [isTranscriptionHidden, setTranscriptionHidden] = useState(false);\n  const [hasActiveStickerEffect, startStickerEffect, stopStickerEffect] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  useOnIntersect(bottomMarkerRef, observeIntersectionForBottom);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu: onContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV && isInSelectMode, true, IS_ANDROID);\n\n  useEffect(() => {\n    if (isContextMenuOpen) {\n      disableContextMenuHint();\n    }\n  }, [isContextMenuOpen, disableContextMenuHint]);\n\n  const noAppearanceAnimation = appearanceOrder <= 0;\n  const [isShown, markShown] = useFlag(noAppearanceAnimation);\n  useEffect(() => {\n    if (noAppearanceAnimation) {\n      return;\n    }\n\n    setTimeout(markShown, appearanceOrder * APPEARANCE_DELAY);\n  }, [appearanceOrder, markShown, noAppearanceAnimation]);\n  const { transitionClassNames } = useShowTransition(isShown, undefined, noAppearanceAnimation, false);\n\n  const {\n    id: messageId, chatId, forwardInfo, viaBotId, isTranscriptionError,\n  } = message;\n\n  const isLocal = isMessageLocal(message);\n  const isOwn = isOwnMessage(message);\n  const isScheduled = messageListType === 'scheduled' || message.isScheduled;\n  const hasReply = isReplyMessage(message) && !shouldHideReply;\n  const hasThread = Boolean(repliesThreadInfo) && messageListType === 'thread';\n  const isCustomShape = getMessageCustomShape(message);\n  const hasAnimatedEmoji = isCustomShape && (animatedEmoji || animatedCustomEmoji);\n  const hasReactions = reactionMessage?.reactions && !areReactionsEmpty(reactionMessage.reactions);\n  const asForwarded = (\n    forwardInfo\n    && (!isChatWithSelf || isScheduled)\n    && !isRepliesChat\n    && !forwardInfo.isLinkedChannelPost\n    && !isCustomShape\n  );\n  const isAlbum = Boolean(album) && album!.messages.length > 1\n    && !album?.messages.some((msg) => Object.keys(msg.content).length === 0);\n  const isInDocumentGroupNotFirst = isInDocumentGroup && !isFirstInDocumentGroup;\n  const isInDocumentGroupNotLast = isInDocumentGroup && !isLastInDocumentGroup;\n  const isContextMenuShown = contextMenuPosition !== undefined;\n  const canShowActionButton = (\n    !(isContextMenuShown || isInSelectMode || isForwarding)\n    && !isInDocumentGroupNotLast\n  );\n  const canForward = isChannel && !isScheduled && message.isForwardingAllowed && !isChatProtected;\n  const canFocus = Boolean(isPinnedList\n    || (forwardInfo\n      && (forwardInfo.isChannelPost || (isChatWithSelf && !isOwn) || isRepliesChat)\n      && forwardInfo.fromMessageId\n    ));\n\n  const hasSubheader = hasTopicChip || hasReply;\n\n  const selectMessage = useCallback((e?: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => {\n    toggleMessageSelection({\n      messageId,\n      groupedId,\n      ...(e?.shiftKey && { withShift: true }),\n      ...(isAlbum && { childMessageIds: album!.messages.map(({ id }) => id) }),\n    });\n  }, [toggleMessageSelection, messageId, isAlbum, album]);\n\n  const messageSender = canShowSender ? sender : undefined;\n  const withVoiceTranscription = Boolean(!isTranscriptionHidden && (isTranscriptionError || transcribedText));\n\n  const avatarPeer = forwardInfo && (isChatWithSelf || isRepliesChat || !messageSender) ? originSender : messageSender;\n  const senderPeer = forwardInfo ? originSender : messageSender;\n\n  const {\n    handleMouseDown,\n    handleClick,\n    handleContextMenu,\n    handleDoubleClick,\n    handleContentDoubleClick,\n    handleMouseMove,\n    handleSendQuickReaction,\n    handleMouseLeave,\n    isSwiped,\n    isQuickReactionVisible,\n    handleDocumentGroupMouseEnter,\n  } = useOuterHandlers(\n    selectMessage,\n    ref,\n    messageId,\n    isAlbum,\n    Boolean(isInSelectMode),\n    Boolean(canReply),\n    Boolean(isProtected),\n    onContextMenu,\n    handleBeforeContextMenu,\n    chatId,\n    isContextMenuShown,\n    contentRef,\n    isOwn,\n    isInDocumentGroupNotLast,\n  );\n\n  const {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll,\n    handleTopicChipClick,\n  } = useInnerHandlers(\n    lang,\n    selectMessage,\n    message,\n    chatId,\n    threadId,\n    isInDocumentGroup,\n    asForwarded,\n    isScheduled,\n    isRepliesChat,\n    album,\n    avatarPeer,\n    senderPeer,\n    botSender,\n    messageTopic,\n  );\n\n  useEffect(() => {\n    if (!isLastInList) {\n      return;\n    }\n\n    if (withVoiceTranscription && transcribedText) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage, isLastInList, transcribedText, withVoiceTranscription]);\n\n  const containerClassName = buildClassName(\n    'Message message-list-item',\n    isFirstInGroup && 'first-in-group',\n    isProtected && 'is-protected',\n    isLastInGroup && 'last-in-group',\n    isFirstInDocumentGroup && 'first-in-document-group',\n    isLastInDocumentGroup && 'last-in-document-group',\n    isLastInList && 'last-in-list',\n    isOwn && 'own',\n    Boolean(message.views) && 'has-views',\n    message.isEdited && 'was-edited',\n    hasReply && 'has-reply',\n    isContextMenuShown && 'has-menu-open',\n    isFocused && !noFocusHighlight && 'focused',\n    isForwarding && 'is-forwarding',\n    message.isDeleting && 'is-deleting',\n    isInDocumentGroup && 'is-in-document-group',\n    isAlbum && 'is-album',\n    message.hasUnreadMention && 'has-unread-mention',\n    isSelected && 'is-selected',\n    isInSelectMode && 'is-in-selection-mode',\n    isThreadTop && !withAvatar && 'is-thread-top',\n    Boolean(message.inlineButtons) && 'has-inline-buttons',\n    isSwiped && 'is-swiped',\n    transitionClassNames,\n    (Boolean(activeReactions) || hasActiveStickerEffect) && 'has-active-reaction',\n  );\n\n  const {\n    text, photo, video, audio, voice, document, sticker, contact, poll, webPage, invoice, location, action, game,\n  } = getMessageContent(message);\n\n  const { result: detectedLanguage } = useTextLanguage(areTranslationsEnabled ? text?.text : undefined);\n\n  const { isPending: isTranslationPending, translatedText } = useMessageTranslation(\n    chatTranslations, chatId, messageId, requestedTranslationLanguage,\n  );\n  // Used to display previous result while new one is loading\n  const previousTranslatedText = usePrevious(translatedText, true);\n\n  const currentText = isTranslationPending ? (previousTranslatedText || text) : translatedText;\n  const currentTranslatedText = translatedText || previousTranslatedText;\n\n  const { phoneCall } = action || {};\n\n  const withCommentButton = repliesThreadInfo && !isInDocumentGroupNotLast && messageListType === 'thread'\n    && !noComments;\n  const withQuickReactionButton = !IS_TOUCH_ENV && !phoneCall && !isInSelectMode && defaultReaction\n    && !isInDocumentGroupNotLast;\n\n  const contentClassName = buildContentClassName(message, {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread: hasThread && !noComments,\n    forceSenderName,\n    hasComments: repliesThreadInfo && repliesThreadInfo.messagesCount > 0,\n    hasActionButton: canForward || canFocus,\n    hasReactions,\n    isGeoLiveActive: location?.type === 'geoLive' && !isGeoLiveExpired(message, getServerTime()),\n    withVoiceTranscription,\n  });\n\n  const withAppendix = contentClassName.includes('has-appendix');\n  const hasText = hasMessageText(message);\n  const emojiSize = getCustomEmojiSize(message.emojiOnlyCount);\n\n  let metaPosition!: MetaPosition;\n  if (phoneCall) {\n    metaPosition = 'none';\n  } else if (isInDocumentGroupNotLast) {\n    metaPosition = 'none';\n  } else if (hasText && !webPage && !hasAnimatedEmoji) {\n    metaPosition = 'in-text';\n  } else {\n    metaPosition = 'standalone';\n  }\n\n  let reactionsPosition!: ReactionsPosition;\n  if (hasReactions) {\n    if (isCustomShape || ((photo || video) && !hasText)) {\n      reactionsPosition = 'outside';\n    } else if (asForwarded) {\n      metaPosition = 'standalone';\n      reactionsPosition = 'inside';\n    } else {\n      reactionsPosition = 'inside';\n    }\n  } else {\n    reactionsPosition = 'none';\n  }\n\n  useEnsureMessage(\n    isRepliesChat && message.replyToChatId ? message.replyToChatId : chatId,\n    hasReply ? message.replyToMessageId : undefined,\n    replyMessage,\n    message.id,\n  );\n  useFocusMessage(ref, chatId, isFocused, focusDirection, noFocusHighlight, isResizingContainer);\n\n  const shouldFocusOnResize = isLastInGroup;\n\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    const lastHeight = messageHeightRef.current;\n\n    const newHeight = entry.target.clientHeight;\n    messageHeightRef.current = newHeight;\n    if (isAnimatingScroll() || !lastHeight || newHeight <= lastHeight) return;\n\n    const container = entry.target.closest<HTMLDivElement>('.MessageList');\n    if (!container) return;\n\n    const resizeDiff = newHeight - lastHeight;\n    const { offsetHeight, scrollHeight, scrollTop } = container;\n    const currentScrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const previousScrollBottom = currentScrollBottom - resizeDiff;\n\n    if (previousScrollBottom <= BOTTOM_FOCUS_SCROLL_THRESHOLD) {\n      focusLastMessage();\n    }\n  }, [focusLastMessage]);\n\n  const throttledResize = useThrottledCallback(handleResize, [handleResize], THROTTLE_MS, false);\n\n  useResizeObserver(shouldFocusOnResize ? ref : undefined, throttledResize);\n\n  useEffect(() => {\n    const bottomMarker = bottomMarkerRef.current;\n    if (hasUnreadReaction && bottomMarker && isElementInViewport(bottomMarker)) {\n      animateUnreadReaction({ messageIds: [messageId] });\n    }\n  }, [hasUnreadReaction, messageId, animateUnreadReaction]);\n\n  let style = '';\n  let calculatedWidth;\n  let reactionsMaxWidth;\n  let noMediaCorners = false;\n  const albumLayout = useMemo(() => {\n    return isAlbum\n      ? calculateAlbumLayout(isOwn, Boolean(asForwarded), Boolean(noAvatars), album!, isMobile)\n      : undefined;\n  }, [isAlbum, isOwn, asForwarded, noAvatars, album, isMobile]);\n\n  const extraPadding = asForwarded ? 28 : 0;\n  if (!isAlbum && (photo || video || invoice?.extendedMedia)) {\n    let width: number | undefined;\n    if (photo) {\n      width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n    } else if (video) {\n      if (video.isRound) {\n        width = ROUND_VIDEO_DIMENSIONS_PX;\n      } else {\n        width = calculateMediaDimensions(message, asForwarded, noAvatars, isMobile).width;\n      }\n    } else if (invoice?.extendedMedia && (\n      invoice.extendedMedia.width && invoice.extendedMedia.height\n    )) {\n      const { width: previewWidth, height: previewHeight } = invoice.extendedMedia;\n      width = calculateDimensionsForMessageMedia({\n        width: previewWidth,\n        height: previewHeight,\n        fromOwnMessage: isOwn,\n        asForwarded,\n        noAvatars,\n        isMobile,\n      }).width;\n    }\n\n    if (width) {\n      calculatedWidth = Math.max(getMinMediaWidth(Boolean(currentText), withCommentButton), width);\n      if (invoice?.extendedMedia && calculatedWidth - width > NO_MEDIA_CORNERS_THRESHOLD) {\n        noMediaCorners = true;\n      }\n    }\n  } else if (albumLayout) {\n    calculatedWidth = Math.max(\n      getMinMediaWidth(Boolean(currentText), withCommentButton), albumLayout.containerStyle.width,\n    );\n    if (calculatedWidth - albumLayout.containerStyle.width > NO_MEDIA_CORNERS_THRESHOLD) {\n      noMediaCorners = true;\n    }\n  }\n\n  if (calculatedWidth) {\n    style = `width: ${calculatedWidth + extraPadding}px`;\n    reactionsMaxWidth = calculatedWidth + EXTRA_SPACE_FOR_REACTIONS;\n  }\n\n  const signature = (isChannel && message.postAuthorTitle)\n    || (!asForwarded && forwardInfo?.postAuthorTitle)\n    || undefined;\n  const metaSafeAuthorWidth = useMemo(() => {\n    return signature ? calculateAuthorWidth(signature) : undefined;\n  }, [signature]);\n\n  function renderAvatar() {\n    const isAvatarPeerUser = avatarPeer && isUserId(avatarPeer.id);\n    const avatarUser = (avatarPeer && isAvatarPeerUser) ? avatarPeer as ApiUser : undefined;\n    const avatarChat = (avatarPeer && !isAvatarPeerUser) ? avatarPeer as ApiChat : undefined;\n    const hiddenName = (!avatarPeer && forwardInfo) ? forwardInfo.hiddenUserName : undefined;\n\n    return (\n      <Avatar\n        size={isMobile ? 'small-mobile' : 'small'}\n        user={avatarUser}\n        chat={avatarChat}\n        text={hiddenName}\n        lastSyncTime={lastSyncTime}\n        onClick={(avatarUser || avatarChat) ? handleAvatarClick : undefined}\n        observeIntersection={observeIntersectionForLoading}\n        animationLevel={animationLevel}\n        withVideo\n      />\n    );\n  }\n\n  function renderMessageText(isForAnimation?: boolean) {\n    return (\n      <MessageText\n        message={message}\n        translatedText={requestedTranslationLanguage ? currentTranslatedText : undefined}\n        isForAnimation={isForAnimation}\n        emojiSize={emojiSize}\n        highlight={highlight}\n        isProtected={isProtected}\n        observeIntersectionForLoading={observeIntersectionForLoading}\n        observeIntersectionForPlaying={observeIntersectionForPlaying}\n        withTranslucentThumbs={isCustomShape}\n      />\n    );\n  }\n\n  function renderReactionsAndMeta() {\n    const meta = (\n      <MessageMeta\n        message={message}\n        noReplies={noReplies}\n        repliesThreadInfo={repliesThreadInfo}\n        outgoingStatus={outgoingStatus}\n        signature={signature}\n        withReactionOffset={reactionsPosition === 'inside'}\n        availableReactions={availableReactions}\n        isTranslated={Boolean(requestedTranslationLanguage ? currentTranslatedText : undefined)}\n        onClick={handleMetaClick}\n        onTranslationClick={handleTranslationClick}\n        onOpenThread={handleOpenThread}\n      />\n    );\n\n    if (reactionsPosition !== 'inside') {\n      return meta;\n    }\n\n    return (\n      <Reactions\n        activeReactions={activeReactions}\n        message={reactionMessage!}\n        metaChildren={meta}\n        availableReactions={availableReactions}\n        genericEffects={genericEffects}\n        observeIntersection={observeIntersectionForPlaying}\n        noRecentReactors={isChannel}\n      />\n    );\n  }\n\n  function renderContent() {\n    const className = buildClassName(\n      'content-inner',\n      asForwarded && 'forwarded-message',\n      hasSubheader && 'with-subheader',\n      noMediaCorners && 'no-media-corners',\n    );\n    const hasCustomAppendix = isLastInGroup && !hasText && !asForwarded && !withCommentButton;\n    const textContentClass = buildClassName(\n      'text-content',\n      'clearfix',\n      metaPosition === 'in-text' && 'with-meta',\n      outgoingStatus && 'with-outgoing-icon',\n    );\n\n    return (\n      <div className={className} onDoubleClick={handleContentDoubleClick} dir=\"auto\">\n        {renderSenderName()}\n        {hasSubheader && (\n          <div className=\"message-subheader\">\n            {hasTopicChip && (\n              <TopicChip\n                topic={messageTopic}\n                onClick={handleTopicChipClick}\n                className=\"message-topic\"\n              />\n            )}\n            {hasReply && (\n              <EmbeddedMessage\n                message={replyMessage}\n                noUserColors={isOwn || isChannel}\n                isProtected={isProtected}\n                sender={replyMessageSender}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n                onClick={handleReplyClick}\n              />\n            )}\n          </div>\n        )}\n        {sticker && (\n          <Sticker\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            shouldLoop={shouldLoopStickers}\n            lastSyncTime={lastSyncTime}\n            shouldPlayEffect={(\n              sticker.hasEffect && ((\n                memoFirstUnreadIdRef.current && messageId >= memoFirstUnreadIdRef.current\n              ) || isLocal)\n            ) || undefined}\n            onPlayEffect={startStickerEffect}\n            onStopEffect={stopStickerEffect}\n          />\n        )}\n        {hasAnimatedEmoji && animatedCustomEmoji && (\n          <AnimatedCustomEmoji\n            customEmojiId={animatedCustomEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {hasAnimatedEmoji && animatedEmoji && (\n          <AnimatedEmoji\n            emoji={animatedEmoji}\n            withEffects={isUserId(chatId)}\n            isOwn={isOwn}\n            observeIntersection={observeIntersectionForLoading}\n            lastSyncTime={lastSyncTime}\n            forceLoadPreview={isLocal}\n            messageId={messageId}\n            chatId={chatId}\n            activeEmojiInteractions={activeEmojiInteractions}\n          />\n        )}\n        {isAlbum && (\n          <Album\n            album={album!}\n            albumLayout={albumLayout!}\n            observeIntersection={observeIntersectionForLoading}\n            isOwn={isOwn}\n            isProtected={isProtected}\n            hasCustomAppendix={hasCustomAppendix}\n            lastSyncTime={lastSyncTime}\n            onMediaClick={handleAlbumMediaClick}\n          />\n        )}\n        {phoneCall && (\n          <MessagePhoneCall\n            message={message}\n            phoneCall={phoneCall}\n            chatId={chatId}\n          />\n        )}\n        {!isAlbum && photo && (\n          <Photo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            uploadProgress={uploadProgress}\n            shouldAffectAppendix={hasCustomAppendix}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            theme={theme}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {!isAlbum && video && video.isRound && (\n          <RoundVideo\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n          />\n        )}\n        {!isAlbum && video && !video.isRound && (\n          <Video\n            message={message}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            asForwarded={asForwarded}\n            onClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n          />\n        )}\n        {(audio || voice) && (\n          <Audio\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Inline}\n            uploadProgress={uploadProgress}\n            lastSyncTime={lastSyncTime}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            noAvatars={noAvatars}\n            onPlay={handleAudioPlay}\n            onReadMedia={voice && (!isOwn || isChatWithSelf) ? handleReadMedia : undefined}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n            isTranscribing={isTranscribing}\n            isTranscriptionHidden={isTranscriptionHidden}\n            isTranscribed={Boolean(transcribedText)}\n            isTranscriptionError={isTranscriptionError}\n            canDownload={!isProtected}\n            onHideTranscription={setTranscriptionHidden}\n            canTranscribe={isPremium}\n          />\n        )}\n        {document && (\n          <Document\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            canAutoLoad={canAutoLoadMedia}\n            autoLoadFileMaxSizeMb={autoLoadFileMaxSizeMb}\n            uploadProgress={uploadProgress}\n            isSelectable={isInDocumentGroup}\n            isSelected={isSelected}\n            onMediaClick={handleMediaClick}\n            onCancelUpload={handleCancelUpload}\n            isDownloading={isDownloading}\n          />\n        )}\n        {contact && (\n          <Contact contact={contact} />\n        )}\n        {poll && (\n          <Poll message={message} poll={poll} onSendVote={handleVoteSend} />\n        )}\n        {game && (\n          <Game\n            message={message}\n            canAutoLoadMedia={canAutoLoadMedia}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n        {invoice?.extendedMedia && (\n          <InvoiceMediaPreview\n            message={message}\n            lastSyncTime={lastSyncTime}\n          />\n        )}\n\n        {withVoiceTranscription && (\n          <p\n            className={buildClassName(\n              'transcription',\n              !isTranscriptionHidden && isTranscriptionError && 'transcription-error',\n            )}\n            dir=\"auto\"\n          >\n            {(isTranscriptionError ? lang('NoWordsRecognized') : (\n              isTranscribing && transcribedText ? <DotAnimation content={transcribedText} /> : transcribedText\n            ))}\n          </p>\n        )}\n\n        {!hasAnimatedEmoji && hasText && (\n          <div className={textContentClass} dir=\"auto\">\n            {renderMessageText()}\n            {isTranslationPending && (\n              <div className=\"translation-animation\">\n                <div className=\"text-loading\">\n                  {renderMessageText(true)}\n                </div>\n              </div>\n            )}\n            {metaPosition === 'in-text' && renderReactionsAndMeta()}\n          </div>\n        )}\n\n        {webPage && (\n          <WebPage\n            message={message}\n            observeIntersection={observeIntersectionForLoading}\n            noAvatars={noAvatars}\n            canAutoLoad={canAutoLoadMedia}\n            canAutoPlay={canAutoPlayMedia}\n            asForwarded={asForwarded}\n            lastSyncTime={lastSyncTime}\n            isDownloading={isDownloading}\n            isProtected={isProtected}\n            theme={theme}\n            onMediaClick={handleMediaClick}\n            onCancelMediaTransfer={handleCancelUpload}\n          />\n        )}\n        {invoice && !invoice.extendedMedia && (\n          <Invoice\n            message={message}\n            shouldAffectAppendix={hasCustomAppendix}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n          />\n        )}\n        {location && (\n          <Location\n            message={message}\n            lastSyncTime={lastSyncTime}\n            isInSelectMode={isInSelectMode}\n            isSelected={isSelected}\n            theme={theme}\n            peer={sender}\n          />\n        )}\n      </div>\n    );\n  }\n\n  function renderSenderName() {\n    const media = photo || video || location;\n    const shouldRender = !(isCustomShape && !viaBotId) && (\n      (withSenderName && (!media || hasTopicChip)) || asForwarded || viaBotId || forceSenderName\n    ) && !isInDocumentGroupNotFirst && !(hasReply && isCustomShape);\n\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    let senderTitle;\n    let senderColor;\n    if (senderPeer && !(isCustomShape && viaBotId)) {\n      senderTitle = getSenderTitle(lang, senderPeer);\n\n      if (!asForwarded && !isOwn) {\n        senderColor = `color-${getUserColorKey(senderPeer)}`;\n      }\n    } else if (forwardInfo?.hiddenUserName) {\n      senderTitle = forwardInfo.hiddenUserName;\n    }\n    const senderEmojiStatus = senderPeer && 'emojiStatus' in senderPeer && senderPeer.emojiStatus;\n    const senderIsPremium = senderPeer && 'isPremium' in senderPeer && senderPeer.isPremium;\n\n    return (\n      <div className=\"message-title\" dir=\"ltr\">\n        {senderTitle ? (\n          <span\n            className={buildClassName('message-title-name interactive', senderColor)}\n            onClick={handleSenderClick}\n            dir=\"ltr\"\n          >\n            {renderText(senderTitle)}\n            {!asForwarded && senderEmojiStatus && (\n              <CustomEmoji\n                documentId={senderEmojiStatus.documentId}\n                loopLimit={EMOJI_STATUS_LOOP_LIMIT}\n                observeIntersectionForLoading={observeIntersectionForLoading}\n                observeIntersectionForPlaying={observeIntersectionForPlaying}\n              />\n            )}\n            {!asForwarded && !senderEmojiStatus && senderIsPremium && <PremiumIcon />}\n            {senderPeer?.fakeType && <FakeIcon fakeType={senderPeer.fakeType} />}\n          </span>\n        ) : !botSender ? (\n          NBSP\n        ) : undefined}\n        {botSender && (\n          <>\n            <span className=\"via\">{lang('ViaBot')}</span>\n            <span\n              className=\"interactive\"\n              onClick={handleViaBotClick}\n            >\n              {renderText(`@${botSender.usernames![0].username}`)}\n            </span>\n          </>\n        )}\n        {forwardInfo?.isLinkedChannelPost ? (\n          <span className=\"admin-title\" dir=\"auto\">{lang('DiscussChannel')}</span>\n        ) : message.forwardInfo?.postAuthorTitle && isGroup && asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.forwardInfo?.postAuthorTitle}</span>\n        ) : message.postAuthorTitle && isGroup && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">{message.postAuthorTitle}</span>\n        ) : senderAdminMember && !asForwarded ? (\n          <span className=\"admin-title\" dir=\"auto\">\n            {senderAdminMember.customTitle || lang(\n              senderAdminMember.isOwner ? 'GroupInfo.LabelOwner' : 'GroupInfo.LabelAdmin',\n            )}\n          </span>\n        ) : undefined}\n      </div>\n    );\n  }\n\n  const forwardAuthor = isGroup && asForwarded ? message.postAuthorTitle : undefined;\n  const chatUsername = useMemo(() => chatUsernames?.find((c) => c.isActive), [chatUsernames]);\n\n  return (\n    <div\n      ref={ref}\n      id={getMessageHtmlId(message.id)}\n      className={containerClassName}\n      style={metaSafeAuthorWidth ? `--meta-safe-author-width: ${metaSafeAuthorWidth}px` : undefined}\n      data-message-id={messageId}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n      onDoubleClick={handleDoubleClick}\n      onMouseEnter={isInDocumentGroupNotLast ? handleDocumentGroupMouseEnter : undefined}\n      onMouseMove={withQuickReactionButton ? handleMouseMove : undefined}\n      onMouseLeave={(withQuickReactionButton || isInDocumentGroupNotLast) ? handleMouseLeave : undefined}\n    >\n      <div\n        ref={bottomMarkerRef}\n        className=\"bottom-marker\"\n        data-message-id={messageId}\n        data-last-message-id={album ? album.messages[album.messages.length - 1].id : undefined}\n        data-has-unread-mention={message.hasUnreadMention || undefined}\n        data-has-unread-reaction={hasUnreadReaction || undefined}\n      />\n      {!isInDocumentGroup && (\n        <div className=\"message-select-control\">\n          {isSelected && <i className=\"icon-select\" />}\n        </div>\n      )}\n      {isLastInDocumentGroup && (\n        <div\n          className={buildClassName('message-select-control group-select', isGroupSelected && 'is-selected')}\n          onClick={handleDocumentGroupSelectAll}\n        >\n          {isGroupSelected && (\n            <i className=\"icon-select\" />\n          )}\n        </div>\n      )}\n      {withAvatar && renderAvatar()}\n      <div\n        className={buildClassName('message-content-wrapper', contentClassName.includes('text') && 'can-select-text')}\n      >\n        <div\n          ref={contentRef}\n          className={contentClassName}\n          style={style}\n          dir=\"auto\"\n        >\n          {asForwarded && !isInDocumentGroupNotFirst && (\n            <div className=\"message-title\">\n              {lang('ForwardedMessage')}\n              {forwardAuthor && <span className=\"admin-title\" dir=\"auto\">{forwardAuthor}</span>}\n            </div>\n          )}\n          {renderContent()}\n          {!isInDocumentGroupNotLast && metaPosition === 'standalone' && renderReactionsAndMeta()}\n          {canShowActionButton && canForward ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel={lang('lng_context_forward_msg')}\n              onClick={isLastInDocumentGroup ? handleGroupForward : handleForward}\n            >\n              <i className=\"icon-share-filled\" />\n            </Button>\n          ) : canShowActionButton && canFocus ? (\n            <Button\n              className=\"message-action-button\"\n              color=\"translucent-white\"\n              round\n              size=\"tiny\"\n              ariaLabel=\"Focus message\"\n              onClick={isPinnedList ? handleFocus : handleFocusForwarded}\n            >\n              <i className=\"icon-arrow-right\" />\n            </Button>\n          ) : undefined}\n          {withCommentButton && <CommentButton threadInfo={repliesThreadInfo!} disabled={noComments} />}\n          {withAppendix && (\n            <div className=\"svg-appendix\" dangerouslySetInnerHTML={isOwn ? APPENDIX_OWN : APPENDIX_NOT_OWN} />\n          )}\n          {withQuickReactionButton && (\n            <div\n              className={buildClassName('quick-reaction', isQuickReactionVisible && !activeReactions && 'visible')}\n              onClick={handleSendQuickReaction}\n            >\n              <ReactionStaticEmoji\n                reaction={defaultReaction}\n                size={QUICK_REACTION_SIZE}\n                availableReactions={availableReactions}\n                observeIntersection={observeIntersectionForPlaying}\n              />\n            </div>\n          )}\n        </div>\n        {message.inlineButtons && (\n          <InlineButtons message={message} onClick={clickBotInlineButton} />\n        )}\n        {reactionsPosition === 'outside' && (\n          <Reactions\n            message={reactionMessage!}\n            isOutside\n            maxWidth={reactionsMaxWidth}\n            activeReactions={activeReactions}\n            availableReactions={availableReactions}\n            genericEffects={genericEffects}\n            observeIntersection={observeIntersectionForPlaying}\n            noRecentReactors={isChannel}\n          />\n        )}\n      </div>\n      {contextMenuPosition && (\n        <ContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message}\n          album={album}\n          chatUsername={chatUsername?.username}\n          messageListType={messageListType}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          repliesThreadInfo={repliesThreadInfo}\n          noReplies={noReplies}\n          detectedLanguage={detectedLanguage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      focusedMessage, forwardMessages, activeReactions, activeEmojiInteractions,\n    } = selectTabState(global);\n    const { lastSyncTime } = global;\n    const {\n      message, album, withSenderName, withAvatar, threadId, messageListType, isLastInDocumentGroup, isFirstInGroup,\n    } = ownProps;\n    const {\n      id, chatId, viaBotId, replyToChatId, replyToMessageId, isOutgoing, repliesThreadInfo, forwardInfo,\n      transcriptionId,\n    } = message;\n\n    const chat = selectChat(global, chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isRepliesChat = isChatWithRepliesBot(chatId);\n    const isChannel = chat && isChatChannel(chat);\n    const isGroup = chat && isChatGroup(chat);\n    const chatUsernames = chat?.usernames;\n\n    const isForwarding = forwardMessages.messageIds && forwardMessages.messageIds.includes(id);\n    const forceSenderName = !isChatWithSelf && isAnonymousOwnMessage(message);\n    const canShowSender = withSenderName || withAvatar || forceSenderName;\n    const sender = selectSender(global, message);\n    const originSender = selectForwardedSender(global, message);\n    const botSender = viaBotId ? selectUser(global, viaBotId) : undefined;\n    const senderAdminMember = sender?.id && isGroup\n      ? chat.fullInfo?.adminMembersById?.[sender?.id]\n      : undefined;\n\n    const threadTopMessageId = threadId ? selectThreadTopMessageId(global, chatId, threadId) : undefined;\n    const isThreadTop = message.id === threadTopMessageId;\n\n    const shouldHideReply = replyToMessageId === threadTopMessageId;\n    const replyMessage = replyToMessageId && !shouldHideReply\n      ? selectChatMessage(global, isRepliesChat && replyToChatId ? replyToChatId : chatId, replyToMessageId)\n      : undefined;\n    const replyMessageSender = replyMessage && selectReplySender(global, replyMessage, Boolean(forwardInfo));\n    const isReplyToTopicStart = replyMessage?.content.action?.type === 'topicCreate';\n\n    const uploadProgress = selectUploadProgress(global, message);\n    const isFocused = messageListType === 'thread' && (\n      album\n        ? album.messages.some((m) => selectIsMessageFocused(global, m))\n        : selectIsMessageFocused(global, message)\n    );\n\n    const {\n      direction: focusDirection, noHighlight: noFocusHighlight, isResizingContainer,\n    } = (isFocused && focusedMessage) || {};\n\n    const { query: highlight } = selectCurrentTextSearch(global) || {};\n\n    const singleEmoji = getMessageSingleRegularEmoji(message);\n    const animatedEmoji = singleEmoji && selectAnimatedEmoji(global, singleEmoji) ? singleEmoji : undefined;\n    const animatedCustomEmoji = getMessageSingleCustomEmoji(message);\n\n    let isSelected: boolean;\n    if (album?.messages) {\n      isSelected = album.messages.every(({ id: messageId }) => selectIsMessageSelected(global, messageId));\n    } else {\n      isSelected = selectIsMessageSelected(global, id);\n    }\n\n    const { canReply } = (messageListType === 'thread' && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isDownloading = selectIsDownloading(global, message);\n    const actualRepliesThreadInfo = repliesThreadInfo\n      ? selectThreadInfo(global, repliesThreadInfo.chatId, repliesThreadInfo.threadId) || repliesThreadInfo\n      : undefined;\n\n    const isInDocumentGroup = Boolean(message.groupedId) && !message.isInAlbum;\n    const documentGroupFirstMessageId = isInDocumentGroup\n      ? selectMessageIdsByGroupId(global, chatId, message.groupedId!)![0]\n      : undefined;\n    const reactionMessage = isInDocumentGroup ? (\n      isLastInDocumentGroup ? selectChatMessage(global, chatId, documentGroupFirstMessageId!) : undefined\n    ) : message;\n\n    const hasUnreadReaction = chat?.unreadReactions?.includes(message.id);\n\n    const hasTopicChip = threadId === MAIN_THREAD_ID && chat?.isForum && isFirstInGroup;\n    const messageTopic = hasTopicChip ? (selectTopicFromMessage(global, message) || chat?.topics?.[GENERAL_TOPIC_ID])\n      : undefined;\n\n    const isLocation = Boolean(getMessageLocation(message));\n    const chatTranslations = selectChatTranslations(global, chatId);\n    const requestedTranslationLanguage = selectRequestedTranslationLanguage(global, chatId, message.id);\n\n    return {\n      theme: selectTheme(global),\n      chatUsernames,\n      forceSenderName,\n      canShowSender,\n      originSender,\n      botSender,\n      shouldHideReply: shouldHideReply || isReplyToTopicStart,\n      isThreadTop,\n      replyMessage,\n      replyMessageSender,\n      isInDocumentGroup,\n      isProtected: selectIsMessageProtected(global, message),\n      isChatProtected: selectIsChatProtected(global, chatId),\n      isFocused,\n      isForwarding,\n      reactionMessage,\n      isChatWithSelf,\n      isRepliesChat,\n      isChannel,\n      isGroup,\n      canReply,\n      lastSyncTime,\n      highlight,\n      animatedEmoji,\n      animatedCustomEmoji,\n      isInSelectMode: selectIsInSelectMode(global),\n      isSelected,\n      isGroupSelected: (\n        Boolean(message.groupedId)\n        && !message.isInAlbum\n        && selectIsDocumentGroupSelected(global, chatId, message.groupedId)\n      ),\n      threadId,\n      isDownloading,\n      isPinnedList: messageListType === 'pinned',\n      canAutoLoadMedia: selectCanAutoLoadMedia(global, message),\n      canAutoPlayMedia: selectCanAutoPlayMedia(global, message),\n      autoLoadFileMaxSizeMb: global.settings.byKey.autoLoadFileMaxSizeMb,\n      shouldLoopStickers: selectShouldLoopStickers(global),\n      repliesThreadInfo: actualRepliesThreadInfo,\n      availableReactions: global.availableReactions,\n      defaultReaction: isMessageLocal(message) ? undefined : selectDefaultReaction(global, chatId),\n      activeReactions: reactionMessage && activeReactions[reactionMessage.id],\n      activeEmojiInteractions,\n      hasUnreadReaction,\n      isTranscribing: transcriptionId !== undefined && global.transcriptions[transcriptionId]?.isPending,\n      transcribedText: transcriptionId !== undefined ? global.transcriptions[transcriptionId]?.text : undefined,\n      isPremium: selectIsCurrentUserPremium(global),\n      animationLevel: global.settings.byKey.animationLevel,\n      senderAdminMember,\n      messageTopic,\n      genericEffects: global.genericEmojiEffects,\n      hasTopicChip,\n      chatTranslations,\n      areTranslationsEnabled: global.settings.byKey.canTranslate,\n      requestedTranslationLanguage,\n      ...((canShowSender || isLocation) && { sender }),\n      ...(isOutgoing && { outgoingStatus: selectOutgoingStatus(global, message, messageListType === 'scheduled') }),\n      ...(typeof uploadProgress === 'number' && { uploadProgress }),\n      ...(isFocused && { focusDirection, noFocusHighlight, isResizingContainer }),\n    };\n  },\n)(Message));\n","import type React from '../../../../lib/teact/teact';\nimport { useCallback } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { IAlbum } from '../../../../types';\nimport { MediaViewerOrigin } from '../../../../types';\nimport type {\n  ApiChat, ApiTopic, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport { MAIN_THREAD_ID } from '../../../../api/types';\nimport type { LangFn } from '../../../../hooks/useLang';\n\nexport default function useInnerHandlers(\n  lang: LangFn,\n  selectMessage: (e: React.MouseEvent<HTMLDivElement, MouseEvent>, groupedId?: string) => void,\n  message: ApiMessage,\n  chatId: string,\n  threadId: number,\n  isInDocumentGroup: boolean,\n  asForwarded?: boolean,\n  isScheduled?: boolean,\n  isChatWithRepliesBot?: boolean,\n  album?: IAlbum,\n  avatarPeer?: ApiUser | ApiChat,\n  senderPeer?: ApiUser | ApiChat,\n  botSender?: ApiUser,\n  messageTopic?: ApiTopic,\n) {\n  const {\n    openChat, showNotification, focusMessage, openMediaViewer, openAudioPlayer,\n    markMessagesRead, cancelSendingMessage, sendPollVote, openForwardMenu, focusMessageInComments,\n    openMessageLanguageModal,\n  } = getActions();\n\n  const {\n    id: messageId, forwardInfo, replyToMessageId, replyToChatId, replyToTopMessageId, groupedId,\n  } = message;\n\n  const handleAvatarClick = useCallback(() => {\n    if (!avatarPeer) {\n      return;\n    }\n\n    openChat({ id: avatarPeer.id });\n  }, [avatarPeer, openChat]);\n\n  const handleSenderClick = useCallback(() => {\n    if (!senderPeer) {\n      showNotification({ message: lang('HidAccount') });\n\n      return;\n    }\n\n    if (asForwarded && forwardInfo?.channelPostId) {\n      focusMessage({ chatId: senderPeer.id, messageId: forwardInfo.channelPostId });\n    } else {\n      openChat({ id: senderPeer.id });\n    }\n  }, [\n    asForwarded, focusMessage, forwardInfo, lang, openChat, senderPeer, showNotification,\n  ]);\n\n  const handleViaBotClick = useCallback(() => {\n    if (!botSender) {\n      return;\n    }\n\n    openChat({ id: botSender.id });\n  }, [botSender, openChat]);\n\n  const handleReplyClick = useCallback((): void => {\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId,\n      messageId: replyToMessageId!,\n      replyMessageId: isChatWithRepliesBot && replyToChatId ? undefined : messageId,\n      noForumTopicPanel: true,\n    });\n  }, [focusMessage, isChatWithRepliesBot, replyToChatId, chatId, threadId, replyToMessageId, messageId]);\n\n  const handleMediaClick = useCallback((): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: messageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledInline : MediaViewerOrigin.Inline,\n    });\n  }, [chatId, threadId, messageId, openMediaViewer, isScheduled]);\n\n  const handleAudioPlay = useCallback((): void => {\n    openAudioPlayer({ chatId, messageId });\n  }, [chatId, messageId, openAudioPlayer]);\n\n  const handleAlbumMediaClick = useCallback((albumMessageId: number): void => {\n    openMediaViewer({\n      chatId,\n      threadId,\n      mediaId: albumMessageId,\n      origin: isScheduled ? MediaViewerOrigin.ScheduledAlbum : MediaViewerOrigin.Album,\n    });\n  }, [chatId, threadId, openMediaViewer, isScheduled]);\n\n  const handleReadMedia = useCallback((): void => {\n    markMessagesRead({ messageIds: [messageId] });\n  }, [messageId, markMessagesRead]);\n\n  const handleCancelUpload = useCallback(() => {\n    cancelSendingMessage({ chatId, messageId });\n  }, [cancelSendingMessage, chatId, messageId]);\n\n  const handleVoteSend = useCallback((options: string[]) => {\n    sendPollVote({ chatId, messageId, options });\n  }, [chatId, messageId, sendPollVote]);\n\n  const handleGroupForward = useCallback(() => {\n    openForwardMenu({ fromChatId: chatId, groupedId });\n  }, [openForwardMenu, chatId, groupedId]);\n\n  const handleForward = useCallback(() => {\n    if (album && album.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n    }\n  }, [album, openForwardMenu, chatId, messageId]);\n\n  const handleFocus = useCallback(() => {\n    focusMessage({\n      chatId, threadId: MAIN_THREAD_ID, messageId,\n    });\n  }, [focusMessage, chatId, messageId]);\n\n  const handleFocusForwarded = useCallback(() => {\n    if (isInDocumentGroup) {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, groupedId, groupedChatId: chatId, messageId: forwardInfo!.fromMessageId!,\n      });\n      return;\n    }\n\n    if (isChatWithRepliesBot && replyToChatId) {\n      focusMessageInComments({\n        chatId: replyToChatId,\n        threadId: replyToTopMessageId!,\n        messageId: forwardInfo!.fromMessageId!,\n      });\n    } else {\n      focusMessage({\n        chatId: forwardInfo!.fromChatId!, messageId: forwardInfo!.fromMessageId!,\n      });\n    }\n  }, [\n    isInDocumentGroup, isChatWithRepliesBot, replyToChatId, focusMessage, forwardInfo, groupedId, chatId,\n    focusMessageInComments, replyToTopMessageId,\n  ]);\n\n  const selectWithGroupedId = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    selectMessage(e, groupedId);\n  }, [selectMessage, groupedId]);\n\n  const handleTranslationClick = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\n    e.stopPropagation();\n\n    openMessageLanguageModal({ chatId, id: messageId });\n  }, [chatId, messageId, openMessageLanguageModal]);\n\n  const handleOpenThread = useCallback(() => {\n    openChat({\n      id: message.chatId,\n      threadId: message.id,\n    });\n  }, [message.chatId, message.id, openChat]);\n\n  const handleTopicChipClick = useCallback(() => {\n    if (!messageTopic) return;\n    focusMessage({\n      chatId: isChatWithRepliesBot && replyToChatId ? replyToChatId : chatId,\n      threadId: messageTopic.id,\n      messageId,\n    });\n  }, [chatId, focusMessage, isChatWithRepliesBot, messageTopic, messageId, replyToChatId]);\n\n  return {\n    handleAvatarClick,\n    handleSenderClick,\n    handleViaBotClick,\n    handleReplyClick,\n    handleMediaClick,\n    handleAudioPlay,\n    handleAlbumMediaClick,\n    handleMetaClick: selectWithGroupedId,\n    handleTranslationClick,\n    handleOpenThread,\n    handleReadMedia,\n    handleCancelUpload,\n    handleVoteSend,\n    handleGroupForward,\n    handleForward,\n    handleFocus,\n    handleFocusForwarded,\n    handleDocumentGroupSelectAll: selectWithGroupedId,\n    handleTopicChipClick,\n  };\n}\n","import { detectLanguage } from '../util/languageDetection';\nimport useAsync from './useAsync';\n\nexport default function useTextLanguage(text?: string) {\n  const language = useAsync(() => (text ? detectLanguage(text) : Promise.resolve(undefined)), [text], undefined);\n  return language;\n}\n","import { useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\nimport type { ChatTranslatedMessages } from '../../../../global/types';\n\nexport default function useMessageTranslation(\n  chatTranslations: ChatTranslatedMessages | undefined,\n  chatId: string,\n  messageId: number,\n  requestedLanguageCode?: string,\n) {\n  const { translateMessages } = getActions();\n  const messageTranslation = requestedLanguageCode\n    ? chatTranslations?.byLangCode[requestedLanguageCode]?.[messageId] : undefined;\n\n  const { isPending, text } = messageTranslation || {};\n\n  useEffect(() => {\n    if (!text && !isPending && requestedLanguageCode) {\n      translateMessages({ chatId, messageIds: [messageId], toLanguageCode: requestedLanguageCode });\n    }\n  }, [chatId, text, isPending, messageId, requestedLanguageCode, translateMessages]);\n\n  return {\n    isPending,\n    translatedText: text,\n  };\n}\n","import type { ApiMessage } from '../../../../api/types';\n\nimport { EMOJI_SIZES, MESSAGE_CONTENT_CLASS_NAME } from '../../../../config';\nimport { getMessageContent } from '../../../../global/helpers';\n\nexport function buildContentClassName(\n  message: ApiMessage,\n  {\n    hasSubheader,\n    isCustomShape,\n    isLastInGroup,\n    asForwarded,\n    hasThread,\n    forceSenderName,\n    hasComments,\n    hasActionButton,\n    hasReactions,\n    isGeoLiveActive,\n    withVoiceTranscription,\n  }: {\n    hasSubheader?: boolean;\n    isCustomShape?: boolean | number;\n    isLastInGroup?: boolean;\n    asForwarded?: boolean;\n    hasThread?: boolean;\n    forceSenderName?: boolean;\n    hasComments?: boolean;\n    hasActionButton?: boolean;\n    hasReactions?: boolean;\n    isGeoLiveActive?: boolean;\n    withVoiceTranscription?: boolean;\n  } = {},\n) {\n  const {\n    text, photo, video, audio, voice, document, poll, webPage, contact, location, invoice,\n  } = getMessageContent(message);\n\n  const classNames = [MESSAGE_CONTENT_CLASS_NAME];\n  const isMedia = photo || video || location || invoice?.extendedMedia;\n  const hasText = text || location?.type === 'venue' || isGeoLiveActive;\n  const isMediaWithNoText = isMedia && !hasText;\n  const isViaBot = Boolean(message.viaBotId);\n\n  if (!isMedia && message.emojiOnlyCount) {\n    classNames.push('emoji-only');\n    if (message.emojiOnlyCount <= EMOJI_SIZES) {\n      classNames.push(`emoji-only-${message.emojiOnlyCount}`);\n    }\n  } else if (hasText) {\n    classNames.push('text');\n  }\n\n  if (hasActionButton) {\n    classNames.push('has-action-button');\n  }\n\n  if (isCustomShape) {\n    classNames.push('custom-shape');\n    if (video?.isRound) {\n      classNames.push('round');\n    }\n\n    if (hasComments) {\n      classNames.push('has-comments');\n    }\n  }\n  if (isMedia) {\n    classNames.push('media');\n  } else if (audio) {\n    classNames.push('audio');\n  } else if (voice) {\n    classNames.push('voice');\n    if (withVoiceTranscription) {\n      classNames.push('with-voice-transcription');\n    }\n  } else if (document) {\n    classNames.push('document');\n  } else if (contact) {\n    classNames.push('contact');\n  } else if (poll) {\n    classNames.push('poll');\n  } else if (webPage) {\n    classNames.push('web-page');\n\n    if (webPage.photo || webPage.video) {\n      classNames.push('media');\n    }\n  }\n\n  if (invoice && !invoice.extendedMedia) {\n    classNames.push('invoice');\n  }\n\n  if (asForwarded) {\n    classNames.push('is-forwarded');\n  }\n\n  if (hasSubheader) {\n    classNames.push('has-subheader');\n  }\n\n  if (hasThread) {\n    classNames.push('has-replies');\n  }\n\n  if (hasReactions) {\n    classNames.push('has-reactions');\n  }\n\n  if (isViaBot) {\n    classNames.push('is-via-bot');\n  }\n\n  if (forceSenderName) {\n    classNames.push('force-sender-name');\n  }\n\n  if (!isCustomShape) {\n    classNames.push('has-shadow');\n\n    if (isMedia && hasComments) {\n      classNames.push('has-background');\n    }\n\n    if (hasSubheader || asForwarded || isViaBot || !isMediaWithNoText || forceSenderName) {\n      classNames.push('has-solid-background');\n    }\n\n    if (isLastInGroup && (photo || (location && !hasText) || !isMediaWithNoText)) {\n      classNames.push('has-appendix');\n    }\n  }\n\n  return classNames.join(' ');\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './AboutAdsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AboutAdsModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const AboutAdsModal = useModuleLoader(Bundles.Extra, 'AboutAdsModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AboutAdsModal ? <AboutAdsModal {...props} /> : undefined;\n};\n\nexport default memo(AboutAdsModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SponsoredMessageContextMenuContainer';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SponsoredMessageContextMenuContainerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SponsoredMessageContextMenuContainer = useModuleLoader(\n    Bundles.Extra, 'SponsoredMessageContextMenuContainer', !isOpen,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SponsoredMessageContextMenuContainer ? <SponsoredMessageContextMenuContainer {...props} /> : undefined;\n};\n\nexport default memo(SponsoredMessageContextMenuContainerAsync);\n","import type { RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiSponsoredMessage, ApiUser } from '../../../api/types';\n\nimport { IS_ANDROID, IS_TOUCH_ENV } from '../../../util/environment';\nimport { renderTextWithEntities } from '../../common/helpers/renderTextWithEntities';\nimport { selectChat, selectSponsoredMessage, selectUser } from '../../../global/selectors';\nimport { getChatTitle, getUserFullName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { preventMessageInputBlur } from '../helpers/preventMessageInputBlur';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\n\nimport Button from '../../ui/Button';\nimport AboutAdsModal from '../../common/AboutAdsModal.async';\nimport SponsoredMessageContextMenuContainer from './SponsoredMessageContextMenuContainer.async';\n\nimport './SponsoredMessage.scss';\n\ntype OwnProps = {\n  chatId: string;\n  containerRef: RefObject<HTMLDivElement>;\n};\n\ntype StateProps = {\n  message?: ApiSponsoredMessage;\n  bot?: ApiUser;\n  channel?: ApiChat;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst SponsoredMessage: FC<OwnProps & StateProps> = ({\n  chatId,\n  message,\n  containerRef,\n  bot,\n  channel,\n}) => {\n  const {\n    viewSponsoredMessage,\n    openChat,\n    openChatByInvite,\n    startBot,\n    focusMessage,\n  } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const contentRef = useRef<HTMLDivElement>(null);\n  const shouldObserve = Boolean(message);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    threshold: 1,\n  });\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref, IS_TOUCH_ENV, true, IS_ANDROID);\n  const [isAboutAdsModalOpen, openAboutAdsModal, closeAboutAdsModal] = useFlag(false);\n\n  useEffect(() => {\n    return shouldObserve ? observeIntersection(contentRef.current!, (target) => {\n      if (target.isIntersecting) {\n        viewSponsoredMessage({ chatId });\n      }\n    }) : undefined;\n  }, [chatId, shouldObserve, observeIntersection, viewSponsoredMessage]);\n\n  const handleMouseDown = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    preventMessageInputBlur(e);\n    handleBeforeContextMenu(e);\n  };\n\n  const handleClick = useCallback(() => {\n    if (!message) return;\n    if (message.chatInviteHash) {\n      openChatByInvite({ hash: message.chatInviteHash });\n    } else if (message.channelPostId) {\n      focusMessage({ chatId: message.chatId!, messageId: message.channelPostId });\n    } else {\n      openChat({ id: message.chatId });\n\n      if (message.startParam) {\n        startBot({\n          botId: message.chatId!,\n          param: message.startParam,\n        });\n      }\n    }\n  }, [focusMessage, message, openChat, openChatByInvite, startBot]);\n\n  if (!message) {\n    return undefined;\n  }\n\n  return (\n    <div\n      ref={ref}\n      key=\"sponsored-message\"\n      className=\"SponsoredMessage Message open\"\n      onMouseDown={handleMouseDown}\n      onContextMenu={handleContextMenu}\n    >\n      <div className=\"message-content has-shadow has-solid-background\" dir=\"auto\">\n        <div className=\"content-inner\" dir=\"auto\">\n          <div className=\"message-title\" dir=\"ltr\">\n            {bot && renderText(getUserFullName(bot) || '')}\n            {channel && renderText(message.chatInviteTitle || getChatTitle(lang, channel, bot) || '')}\n          </div>\n\n          <div className=\"text-content with-meta\" dir=\"auto\" ref={contentRef}>\n            <span className=\"text-content-inner\" dir=\"auto\">\n              {renderTextWithEntities(message.text.text, message.text.entities)}\n            </span>\n\n            <span className=\"MessageMeta\" dir=\"ltr\">\n              <span className=\"message-signature\">\n                {message.isRecommended ? lang('Message.RecommendedLabel') : lang('SponsoredMessage')}\n              </span>\n            </span>\n          </div>\n\n          <Button color=\"secondary\" size=\"tiny\" ripple onClick={handleClick} className=\"SponsoredMessage__button\">\n            {lang(message.isBot\n              ? 'Conversation.ViewBot'\n              : (message.channelPostId ? 'Conversation.ViewPost' : 'Conversation.ViewChannel'))}\n          </Button>\n        </div>\n      </div>\n      {contextMenuPosition && (\n        <SponsoredMessageContextMenuContainer\n          isOpen={isContextMenuOpen}\n          anchor={contextMenuPosition}\n          message={message!}\n          onAboutAds={openAboutAdsModal}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        />\n      )}\n      <AboutAdsModal\n        isOpen={isAboutAdsModalOpen}\n        onClose={closeAboutAdsModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const message = selectSponsoredMessage(global, chatId);\n    const { chatId: fromChatId, isBot } = message || {};\n\n    return {\n      message,\n      bot: fromChatId && isBot ? selectUser(global, fromChatId) : undefined,\n      channel: !isBot && fromChatId ? selectChat(global, fromChatId) : undefined,\n    };\n  },\n)(SponsoredMessage));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport { SCHEDULED_WHEN_ONLINE } from '../../config';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport buildClassName from '../../util/buildClassName';\nimport { compact } from '../../util/iteratees';\nimport { formatHumanDate } from '../../util/dateFormat';\nimport {\n  getMessageHtmlId, getMessageOriginalId, isActionMessage, isOwnMessage, isServiceNotificationMessage,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport type { MessageDateGroup } from './helpers/groupMessages';\nimport { isAlbum } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport useScrollHooks from './hooks/useScrollHooks';\nimport useMessageObservers from './hooks/useMessageObservers';\n\nimport Message from './message/Message';\nimport SponsoredMessage from './message/SponsoredMessage';\nimport ActionMessage from './ActionMessage';\n\ninterface OwnProps {\n  isCurrentUserPremium?: boolean;\n  chatId: string;\n  threadId: number;\n  messageIds: number[];\n  messageGroups: MessageDateGroup[];\n  isViewportNewest: boolean;\n  isUnread: boolean;\n  withUsers: boolean;\n  isChannelChat: boolean | undefined;\n  isComments?: boolean;\n  noAvatars: boolean;\n  containerRef: RefObject<HTMLDivElement>;\n  anchorIdRef: { current: string | undefined };\n  memoUnreadDividerBeforeIdRef: { current: number | undefined };\n  memoFirstUnreadIdRef: { current: number | undefined };\n  type: MessageListType;\n  isReady: boolean;\n  isScrollingRef: { current: boolean | undefined };\n  isScrollPatchNeededRef: { current: boolean | undefined };\n  threadTopMessageId: number | undefined;\n  hasLinkedChat: boolean | undefined;\n  isSchedule: boolean;\n  noAppearanceAnimation: boolean;\n  onFabToggle: AnyToVoidFunction;\n  onNotchToggle: AnyToVoidFunction;\n}\n\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst MessageListContent: FC<OwnProps> = ({\n  isCurrentUserPremium,\n  chatId,\n  threadId,\n  messageIds,\n  messageGroups,\n  isViewportNewest,\n  isUnread,\n  isComments,\n  withUsers,\n  isChannelChat,\n  noAvatars,\n  containerRef,\n  anchorIdRef,\n  memoUnreadDividerBeforeIdRef,\n  memoFirstUnreadIdRef,\n  type,\n  isReady,\n  isScrollingRef,\n  isScrollPatchNeededRef,\n  threadTopMessageId,\n  hasLinkedChat,\n  isSchedule,\n  noAppearanceAnimation,\n  onFabToggle,\n  onNotchToggle,\n}) => {\n  const { openHistoryCalendar } = getActions();\n\n  const {\n    observeIntersectionForReading,\n    observeIntersectionForLoading,\n    observeIntersectionForPlaying,\n  } = useMessageObservers(type, containerRef, memoFirstUnreadIdRef);\n\n  const {\n    backwardsTriggerRef,\n    forwardsTriggerRef,\n    fabTriggerRef,\n  } = useScrollHooks(\n    type,\n    containerRef,\n    messageIds,\n    isViewportNewest,\n    isUnread,\n    onFabToggle,\n    onNotchToggle,\n    isReady,\n    isScrollingRef,\n    isScrollPatchNeededRef,\n  );\n\n  const lang = useLang();\n\n  const unreadDivider = (\n    <div className={buildClassName(UNREAD_DIVIDER_CLASS, 'local-action-message')} key=\"unread-messages\">\n      <span>{lang('UnreadMessages')}</span>\n    </div>\n  );\n\n  const messageCountToAnimate = noAppearanceAnimation ? 0 : messageGroups.reduce((acc, messageGroup) => {\n    return acc + messageGroup.senderGroups.flat().length;\n  }, 0);\n  let appearanceIndex = 0;\n\n  const dateGroups = messageGroups.map((\n    dateGroup: MessageDateGroup,\n    dateGroupIndex: number,\n    dateGroupsArray: MessageDateGroup[],\n  ) => {\n    const senderGroups = dateGroup.senderGroups.map((\n      senderGroup,\n      senderGroupIndex,\n      senderGroupsArray,\n    ) => {\n      if (\n        senderGroup.length === 1\n        && !isAlbum(senderGroup[0])\n        && isActionMessage(senderGroup[0])\n        && !senderGroup[0].content.action?.phoneCall\n      ) {\n        const message = senderGroup[0]!;\n        const isLastInList = (\n          senderGroupIndex === senderGroupsArray.length - 1\n          && dateGroupIndex === dateGroupsArray.length - 1\n        );\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <ActionMessage\n            key={message.id}\n            message={message}\n            isInsideTopic={Boolean(threadId && threadId !== MAIN_THREAD_ID)}\n            observeIntersectionForReading={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isLastInList={isLastInList}\n          />,\n        ]);\n      }\n\n      let currentDocumentGroupId: string | undefined;\n\n      return senderGroup.map((\n        messageOrAlbum,\n        messageIndex,\n      ) => {\n        const message = isAlbum(messageOrAlbum) ? messageOrAlbum.mainMessage : messageOrAlbum;\n        const album = isAlbum(messageOrAlbum) ? messageOrAlbum : undefined;\n        const isOwn = isOwnMessage(message);\n        const isMessageAlbum = isAlbum(messageOrAlbum);\n        const nextMessage = senderGroup[messageIndex + 1];\n\n        if (message.previousLocalId && anchorIdRef.current === getMessageHtmlId(message.previousLocalId)) {\n          anchorIdRef.current = getMessageHtmlId(message.id);\n        }\n\n        const documentGroupId = !isMessageAlbum && message.groupedId ? message.groupedId : undefined;\n        const nextDocumentGroupId = nextMessage && !isAlbum(nextMessage) ? nextMessage.groupedId : undefined;\n\n        const position = {\n          isFirstInGroup: messageIndex === 0,\n          isLastInGroup: messageIndex === senderGroup.length - 1,\n          isFirstInDocumentGroup: Boolean(documentGroupId && documentGroupId !== currentDocumentGroupId),\n          isLastInDocumentGroup: Boolean(documentGroupId && documentGroupId !== nextDocumentGroupId),\n          isLastInList: (\n            messageIndex === senderGroup.length - 1\n            && senderGroupIndex === senderGroupsArray.length - 1\n            && dateGroupIndex === dateGroupsArray.length - 1\n          ),\n        };\n\n        currentDocumentGroupId = documentGroupId;\n\n        const originalId = getMessageOriginalId(message);\n        // Service notifications saved in cache in previous versions may share the same `previousLocalId`\n        const key = isServiceNotificationMessage(message) ? `${message.date}_${originalId}` : originalId;\n\n        const noComments = hasLinkedChat === false || !isChannelChat;\n\n        const isTopicTopMessage = message.id === threadTopMessageId;\n\n        return compact([\n          message.id === memoUnreadDividerBeforeIdRef.current && unreadDivider,\n          <Message\n            key={key}\n            message={message}\n            observeIntersectionForBottom={observeIntersectionForReading}\n            observeIntersectionForLoading={observeIntersectionForLoading}\n            observeIntersectionForPlaying={observeIntersectionForPlaying}\n            album={album}\n            noAvatars={noAvatars}\n            withAvatar={position.isLastInGroup && withUsers && !isOwn && (!isTopicTopMessage || !isComments)}\n            withSenderName={position.isFirstInGroup && withUsers && !isOwn}\n            threadId={threadId}\n            messageListType={type}\n            noComments={noComments}\n            noReplies={!noComments || threadId !== MAIN_THREAD_ID}\n            appearanceOrder={messageCountToAnimate - ++appearanceIndex}\n            isFirstInGroup={position.isFirstInGroup}\n            isLastInGroup={position.isLastInGroup}\n            isFirstInDocumentGroup={position.isFirstInDocumentGroup}\n            isLastInDocumentGroup={position.isLastInDocumentGroup}\n            isLastInList={position.isLastInList}\n            memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          />,\n          message.id === threadTopMessageId && (\n            <div className=\"local-action-message\" key=\"discussion-started\">\n              <span>{lang('DiscussionStarted')}</span>\n            </div>\n          ),\n        ]);\n      }).flat();\n    });\n\n    return (\n      <div\n        className=\"message-date-group\"\n        key={dateGroup.datetime}\n        onMouseDown={preventMessageInputBlur}\n        teactFastList\n      >\n        <div\n          className={buildClassName('sticky-date', !isSchedule && 'interactive')}\n          key=\"date-header\"\n          onMouseDown={preventMessageInputBlur}\n          onClick={!isSchedule ? () => openHistoryCalendar({ selectedAt: dateGroup.datetime }) : undefined}\n        >\n          <span dir=\"auto\">\n            {isSchedule && dateGroup.originalDate === SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledUntilOnline')\n            )}\n            {isSchedule && dateGroup.originalDate !== SCHEDULED_WHEN_ONLINE && (\n              lang('MessageScheduledOn', formatHumanDate(lang, dateGroup.datetime, undefined, true))\n            )}\n            {!isSchedule && formatHumanDate(lang, dateGroup.datetime)}\n          </span>\n        </div>\n        {senderGroups.flat()}\n      </div>\n    );\n  });\n\n  return (\n    <div className=\"messages-container\" teactFastList>\n      <div ref={backwardsTriggerRef} key=\"backwards-trigger\" className=\"backwards-trigger\" />\n      {dateGroups.flat()}\n      {!isCurrentUserPremium && isViewportNewest && (\n        <SponsoredMessage key={chatId} chatId={chatId} containerRef={containerRef} />\n      )}\n      <div\n        ref={forwardsTriggerRef}\n        key=\"forwards-trigger\"\n        className=\"forwards-trigger\"\n      />\n      <div\n        ref={fabTriggerRef}\n        key=\"fab-trigger\"\n        className=\"fab-trigger\"\n      />\n    </div>\n  );\n};\n\nexport default memo(MessageListContent);\n","import type { RefObject } from 'react';\nimport { getActions } from '../../../global';\nimport { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport { LoadMoreDirection } from '../../../types';\nimport type { MessageListType } from '../../../global/types';\n\nimport { LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../../config';\nimport { IS_SCROLL_PATCH_NEEDED, MESSAGE_LIST_SENSITIVE_AREA } from '../../../util/environment';\nimport { debounce } from '../../../util/schedulers';\nimport { useIntersectionObserver, useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\n\nconst FAB_THRESHOLD = 50;\nconst NOTCH_THRESHOLD = 1; // Notch has zero height so we at least need a 1px margin to intersect\nconst TOOLS_FREEZE_TIMEOUT = 250; // Approximate message sending animation duration\n\nexport default function useScrollHooks(\n  type: MessageListType,\n  containerRef: RefObject<HTMLDivElement>,\n  messageIds: number[],\n  isViewportNewest: boolean,\n  isUnread: boolean,\n  onFabToggle: AnyToVoidFunction,\n  onNotchToggle: AnyToVoidFunction,\n  isReady: boolean,\n  isScrollingRef: { current: boolean | undefined },\n  isScrollPatchNeededRef: { current: boolean | undefined },\n) {\n  const { loadViewportMessages } = getActions();\n\n  const [loadMoreBackwards, loadMoreForwards] = useMemo(\n    () => (type === 'thread' ? [\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Backwards }), 1000, true, false),\n      debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Forwards }), 1000, true, false),\n    ] : []),\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n    [loadViewportMessages, messageIds],\n  );\n\n  // eslint-disable-next-line no-null/no-null\n  const backwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const forwardsTriggerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const fabTriggerRef = useRef<HTMLDivElement>(null);\n\n  function toggleScrollTools() {\n    if (!isReady) return;\n\n    if (!messageIds || !messageIds.length) {\n      onFabToggle(false);\n      onNotchToggle(false);\n      return;\n    }\n\n    if (!isViewportNewest) {\n      onFabToggle(true);\n      onNotchToggle(true);\n      return;\n    }\n\n    if (!containerRef.current) {\n      return;\n    }\n\n    const { offsetHeight, scrollHeight, scrollTop } = containerRef.current;\n    const scrollBottom = Math.round(scrollHeight - scrollTop - offsetHeight);\n    const isNearBottom = scrollBottom <= FAB_THRESHOLD;\n    const isAtBottom = scrollBottom <= NOTCH_THRESHOLD;\n\n    if (scrollHeight === 0) return;\n\n    onFabToggle(isUnread ? !isAtBottom : !isNearBottom);\n    onNotchToggle(!isAtBottom);\n  }\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: MESSAGE_LIST_SENSITIVE_AREA,\n  }, (entries) => {\n    if (!loadMoreForwards || !loadMoreBackwards) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isFirstMessageLocal = messageIds[0] > LOCAL_MESSAGE_MIN_ID;\n    if (isFirstMessageLocal) {\n      return;\n    }\n\n    const triggerEntry = entries.find(({ isIntersecting }) => isIntersecting);\n    if (!triggerEntry) {\n      return;\n    }\n\n    const { target } = triggerEntry;\n\n    if (target.className === 'backwards-trigger') {\n      if (\n        IS_SCROLL_PATCH_NEEDED && isScrollingRef.current && messageIds.length <= MESSAGE_LIST_SLICE\n      ) {\n        isScrollPatchNeededRef.current = true;\n      }\n\n      loadMoreBackwards();\n    } else if (target.className === 'forwards-trigger') {\n      loadMoreForwards();\n    }\n  });\n\n  useOnIntersect(backwardsTriggerRef, observeIntersection);\n  useOnIntersect(forwardsTriggerRef, observeIntersection);\n\n  const {\n    observe: observeIntersectionForFab,\n    freeze: freezeForFab,\n    unfreeze: unfreezeForFab,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: FAB_THRESHOLD * 2,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForFab);\n\n  const {\n    observe: observeIntersectionForNotch,\n    freeze: freezeForNotch,\n    unfreeze: unfreezeForNotch,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    margin: NOTCH_THRESHOLD,\n  }, toggleScrollTools);\n\n  useOnIntersect(fabTriggerRef, observeIntersectionForNotch);\n\n  const toggleScrollToolsRef = useRef<typeof toggleScrollTools>();\n  toggleScrollToolsRef.current = toggleScrollTools;\n  useSyncEffect(() => {\n    if (isReady) {\n      toggleScrollToolsRef.current!();\n    }\n  }, [isReady]);\n\n  // Workaround for FAB and notch flickering with tall incoming message\n  useSyncEffect(() => {\n    freezeForFab();\n    freezeForNotch();\n\n    setTimeout(() => {\n      unfreezeForNotch();\n      unfreezeForFab();\n    }, TOOLS_FREEZE_TIMEOUT);\n  }, [freezeForFab, freezeForNotch, messageIds, unfreezeForFab, unfreezeForNotch]);\n\n  return { backwardsTriggerRef, forwardsTriggerRef, fabTriggerRef };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiUpdateConnectionStateType } from '../../api/types';\n\nimport { selectChat } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport { getUserIdDividend } from '../../global/helpers';\n\nimport StickerButton from '../common/StickerButton';\n\nimport './ContactGreeting.scss';\n\ntype OwnProps = {\n  userId: string;\n};\n\ntype StateProps = {\n  sticker?: ApiSticker;\n  lastUnreadMessageId?: number;\n  connectionState?: ApiUpdateConnectionStateType;\n};\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\n\nconst ContactGreeting: FC<OwnProps & StateProps> = ({\n  sticker,\n  connectionState,\n  lastUnreadMessageId,\n}) => {\n  const {\n    loadGreetingStickers,\n    sendMessage,\n    markMessageListRead,\n  } = getActions();\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n  });\n  useEffect(() => {\n    if (sticker || connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    loadGreetingStickers();\n  }, [connectionState, loadGreetingStickers, sticker]);\n\n  useEffect(() => {\n    if (connectionState === 'connectionStateReady' && lastUnreadMessageId) {\n      markMessageListRead({ maxId: lastUnreadMessageId });\n    }\n  }, [connectionState, markMessageListRead, lastUnreadMessageId]);\n\n  const handleStickerSelect = useCallback((selectedSticker: ApiSticker) => {\n    selectedSticker = {\n      ...selectedSticker,\n      isPreloadedGlobally: true,\n    };\n    sendMessage({ sticker: selectedSticker });\n  }, [sendMessage]);\n\n  return (\n    <div className=\"ContactGreeting\" ref={containerRef}>\n      <div className=\"wrapper\">\n        <p className=\"title\" dir=\"auto\">{lang('Conversation.EmptyPlaceholder')}</p>\n        <p className=\"description\" dir=\"auto\">{lang('Conversation.GreetingText')}</p>\n\n        <div className=\"sticker\">\n          {sticker && (\n            <StickerButton\n              sticker={sticker}\n              onClick={handleStickerSelect}\n              clickArg={sticker}\n              observeIntersection={observeIntersection}\n              size={160}\n              className=\"large\"\n              noContextMenu\n              isCurrentUserPremium\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const { stickers } = global.stickers.greeting;\n    const dividend = getUserIdDividend(userId) + getUserIdDividend(global.currentUserId!);\n    const sticker = stickers?.length ? stickers[dividend % stickers.length] : undefined;\n    const chat = selectChat(global, userId);\n    if (!chat) {\n      return {};\n    }\n\n    return {\n      sticker,\n      lastUnreadMessageId: chat.lastMessage && chat.lastMessage.id !== chat.lastReadInboxMessageId\n        ? chat.lastMessage.id\n        : undefined,\n      connectionState: global.connectionState,\n    };\n  },\n)(ContactGreeting));\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageListType } from '../../global/types';\nimport type { ApiTopic } from '../../api/types';\nimport type { LangFn } from '../../hooks/useLang';\n\nimport { REM } from '../common/helpers/mediaDimensions';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport TopicIcon from '../common/TopicIcon';\n\nimport './NoMessages.scss';\n\nconst ICON_SIZE = 3 * REM;\n\ntype OwnProps = {\n  chatId: string;\n  isChatWithSelf?: boolean;\n  type: MessageListType;\n  isGroupChatJustCreated?: boolean;\n  topic?: ApiTopic;\n};\n\nconst NoMessages: FC<OwnProps> = ({\n  isChatWithSelf,\n  type,\n  isGroupChatJustCreated,\n  topic,\n}) => {\n  const lang = useLang();\n\n  if (type === 'scheduled') {\n    return renderScheduled(lang);\n  }\n\n  if (isChatWithSelf) {\n    return renderSavedMessages(lang);\n  }\n\n  if (isGroupChatJustCreated) {\n    return renderGroup(lang);\n  }\n\n  if (topic) {\n    return renderTopic(lang, topic);\n  }\n\n  return (\n    <div className=\"empty\"><span>{lang('NoMessages')}</span></div>\n  );\n};\n\nfunction renderTopic(lang: LangFn, topic: ApiTopic) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <TopicIcon topic={topic} size={ICON_SIZE} className=\"icon topic-icon\" />\n        <h3 className=\"title\">{lang('Chat.EmptyTopicPlaceholder.Title')}</h3>\n        <p className=\"description topic-description\">{renderText(lang('Chat.EmptyTopicPlaceholder.Text'), ['br'])}</p>\n      </div>\n    </div>\n  );\n}\n\nfunction renderScheduled(lang: LangFn) {\n  return (\n    <div className=\"empty\"><span>{lang('ScheduledMessages.EmptyPlaceholder')}</span></div>\n  );\n}\n\nfunction renderSavedMessages(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\">\n        <i className=\"icon icon-cloud-download\" />\n        <h3 className=\"title\">{lang('Conversation.CloudStorageInfo.Title')}</h3>\n        <ul className=\"description\">\n          <li>{lang('Conversation.ClousStorageInfo.Description1')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description2')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description3')}</li>\n          <li>{lang('Conversation.ClousStorageInfo.Description4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nfunction renderGroup(lang: LangFn) {\n  return (\n    <div className=\"NoMessages\">\n      <div className=\"wrapper\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <h3 className=\"title\">{lang('EmptyGroupInfo.Title')}</h3>\n        <p className=\"description\">{lang('EmptyGroupInfo.Subtitle')}</p>\n        <ul className=\"list-checkmarks\">\n          <li>{lang('EmptyGroupInfo.Line1')}</li>\n          <li>{lang('EmptyGroupInfo.Line2')}</li>\n          <li>{lang('EmptyGroupInfo.Line3')}</li>\n          <li>{lang('EmptyGroupInfo.Line4')}</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(NoMessages);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiBotInfo, ApiMessage, ApiRestrictionReason, ApiTopic,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { MessageListType } from '../../global/types';\nimport type { AnimationLevel } from '../../types';\nimport { LoadMoreDirection } from '../../types';\n\nimport { ANIMATION_END_DELAY, LOCAL_MESSAGE_MIN_ID, MESSAGE_LIST_SLICE } from '../../config';\nimport {\n  selectChatMessages,\n  selectIsViewportNewest,\n  selectFirstUnreadId,\n  selectFocusedMessageId,\n  selectChat,\n  selectIsInSelectMode,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectIsChatBotNotStarted,\n  selectScrollOffset,\n  selectThreadTopMessageId,\n  selectFirstMessageId,\n  selectChatScheduledMessages,\n  selectCurrentMessageIds,\n  selectIsCurrentUserPremium, selectLastScrollOffset, selectThreadInfo,\n} from '../../global/selectors';\nimport {\n  isChatChannel,\n  isUserId,\n  isChatWithRepliesBot,\n  isChatGroup,\n  getBotCoverMediaHash,\n  getDocumentMediaHash,\n  getVideoDimensions,\n  getPhotoFullDimensions,\n} from '../../global/helpers';\nimport { orderBy } from '../../util/iteratees';\nimport { DPR } from '../../util/environment';\nimport { fastRaf, debounce, onTickEnd } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { groupMessages } from './helpers/groupMessages';\nimport { preventMessageInputBlur } from './helpers/preventMessageInputBlur';\nimport resetScroll, { patchChromiumScroll } from '../../util/resetScroll';\nimport fastSmoothScroll, { isAnimatingScroll } from '../../util/fastSmoothScroll';\nimport renderText from '../common/helpers/renderText';\n\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useStickyDates from './hooks/useStickyDates';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useLang from '../../hooks/useLang';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useInterval from '../../hooks/useInterval';\nimport useNativeCopySelectedMessages from '../../hooks/useNativeCopySelectedMessages';\nimport useMedia from '../../hooks/useMedia';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useResizeObserver from '../../hooks/useResizeObserver';\n\nimport Loading from '../ui/Loading';\nimport MessageListContent from './MessageListContent';\nimport ContactGreeting from './ContactGreeting';\nimport NoMessages from './NoMessages';\nimport Skeleton from '../ui/Skeleton';\nimport OptimizedVideo from '../ui/OptimizedVideo';\n\nimport './MessageList.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  type: MessageListType;\n  canPost: boolean;\n  isReady: boolean;\n  onFabToggle: (shouldShow: boolean) => void;\n  onNotchToggle: (shouldShow: boolean) => void;\n  hasTools?: boolean;\n  withBottomShift?: boolean;\n  withDefaultBg: boolean;\n};\n\ntype StateProps = {\n  isCurrentUserPremium?: boolean;\n  isChatLoaded?: boolean;\n  isChannelChat?: boolean;\n  isGroupChat?: boolean;\n  isChatWithSelf?: boolean;\n  isRepliesChat?: boolean;\n  isCreator?: boolean;\n  isBot?: boolean;\n  messageIds?: number[];\n  messagesById?: Record<number, ApiMessage>;\n  firstUnreadId?: number;\n  isComments?: boolean;\n  isViewportNewest?: boolean;\n  isRestricted?: boolean;\n  restrictionReason?: ApiRestrictionReason;\n  focusingId?: number;\n  isSelectModeActive?: boolean;\n  animationLevel?: AnimationLevel;\n  lastMessage?: ApiMessage;\n  isLoadingBotInfo?: boolean;\n  botInfo?: ApiBotInfo;\n  threadTopMessageId?: number;\n  threadFirstMessageId?: number;\n  hasLinkedChat?: boolean;\n  lastSyncTime?: number;\n  topic?: ApiTopic;\n};\n\nconst MESSAGE_REACTIONS_POLLING_INTERVAL = 15 * 1000;\nconst MESSAGE_COMMENTS_POLLING_INTERVAL = 15 * 1000;\nconst BOTTOM_THRESHOLD = 50;\nconst UNREAD_DIVIDER_TOP = 10;\nconst UNREAD_DIVIDER_TOP_WITH_TOOLS = 60;\nconst SCROLL_DEBOUNCE = 200;\nconst MESSAGE_ANIMATION_DURATION = 500;\nconst BOTTOM_FOCUS_MARGIN = 20;\nconst SELECT_MODE_ANIMATION_DURATION = 200;\nconst UNREAD_DIVIDER_CLASS = 'unread-divider';\n\nconst runDebouncedForScroll = debounce((cb) => cb(), SCROLL_DEBOUNCE, false);\n\nconst MessageList: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  type,\n  hasTools,\n  onFabToggle,\n  onNotchToggle,\n  isCurrentUserPremium,\n  isChatLoaded,\n  isChannelChat,\n  isGroupChat,\n  canPost,\n  isReady,\n  isChatWithSelf,\n  isRepliesChat,\n  isCreator,\n  isBot,\n  messageIds,\n  messagesById,\n  firstUnreadId,\n  isComments,\n  isViewportNewest,\n  threadFirstMessageId,\n  isRestricted,\n  restrictionReason,\n  focusingId,\n  isSelectModeActive,\n  lastMessage,\n  isLoadingBotInfo,\n  botInfo,\n  threadTopMessageId,\n  hasLinkedChat,\n  lastSyncTime,\n  withBottomShift,\n  withDefaultBg,\n  topic,\n}) => {\n  const {\n    loadViewportMessages, setScrollOffset, loadSponsoredMessages, loadMessageReactions, copyMessagesByIds,\n    loadMessageViews,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  // We update local cached `scrollOffsetRef` when opening chat.\n  // Then we update global version every second on scrolling.\n  const scrollOffsetRef = useRef<number>((type === 'thread'\n    && selectScrollOffset(getGlobal(), chatId, threadId))\n    || selectLastScrollOffset(getGlobal(), chatId, threadId)\n    || 0);\n\n  const anchorIdRef = useRef<string>();\n  const anchorTopRef = useRef<number>();\n  const listItemElementsRef = useRef<HTMLDivElement[]>();\n  const memoFirstUnreadIdRef = useRef<number>();\n  const memoUnreadDividerBeforeIdRef = useRef<number | undefined>();\n  const memoFocusingIdRef = useRef<number>();\n  const isScrollTopJustUpdatedRef = useRef(false);\n  const shouldAnimateAppearanceRef = useRef(Boolean(lastMessage));\n\n  const [containerHeight, setContainerHeight] = useState<number | undefined>();\n\n  const botInfoPhotoUrl = useMedia(botInfo?.photo ? getBotCoverMediaHash(botInfo.photo) : undefined);\n  const botInfoGifUrl = useMedia(botInfo?.gif ? getDocumentMediaHash(botInfo.gif) : undefined);\n  const botInfoDimensions = botInfo?.photo ? getPhotoFullDimensions(botInfo.photo) : botInfo?.gif\n    ? getVideoDimensions(botInfo.gif) : undefined;\n  const botInfoRealDimensions = botInfoDimensions && {\n    width: botInfoDimensions.width / DPR,\n    height: botInfoDimensions.height / DPR,\n  };\n\n  const areMessagesLoaded = Boolean(messageIds);\n\n  useSyncEffect(() => {\n    // We only need it first time when message list appears\n    if (areMessagesLoaded) {\n      onTickEnd(() => {\n        shouldAnimateAppearanceRef.current = false;\n      });\n    }\n  }, [areMessagesLoaded]);\n\n  // Updated every time (to be used from intersection callback closure)\n  useSyncEffect(() => {\n    memoFirstUnreadIdRef.current = firstUnreadId;\n  }, [firstUnreadId]);\n\n  useEffect(() => {\n    if (!isCurrentUserPremium && isChannelChat && isReady && lastSyncTime) {\n      loadSponsoredMessages({ chatId });\n    }\n  }, [isCurrentUserPremium, chatId, isReady, isChannelChat, lastSyncTime, loadSponsoredMessages]);\n\n  // Updated only once when messages are loaded (as we want the unread divider to keep its position)\n  useSyncEffect(() => {\n    if (areMessagesLoaded) {\n      memoUnreadDividerBeforeIdRef.current = memoFirstUnreadIdRef.current;\n    }\n  }, [areMessagesLoaded]);\n\n  useSyncEffect(() => {\n    memoFocusingIdRef.current = focusingId;\n  }, [focusingId]);\n\n  useNativeCopySelectedMessages(copyMessagesByIds);\n\n  const messageGroups = useMemo(() => {\n    if (!messageIds || !messagesById) {\n      return undefined;\n    }\n\n    const viewportIds = threadTopMessageId && threadFirstMessageId !== threadTopMessageId\n      && (!messageIds[0] || threadFirstMessageId === messageIds[0])\n      ? [threadTopMessageId, ...messageIds]\n      : messageIds;\n\n    if (!viewportIds.length) {\n      return undefined;\n    }\n\n    const listedMessages = viewportIds.map((id) => messagesById[id]).filter(Boolean);\n    return listedMessages.length\n      ? groupMessages(orderBy(listedMessages, 'id'), memoUnreadDividerBeforeIdRef.current)\n      : undefined;\n  }, [messageIds, messagesById, threadFirstMessageId, threadTopMessageId]);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.reactions);\n\n    if (!ids.length) return;\n\n    loadMessageReactions({ chatId, ids });\n  }, MESSAGE_REACTIONS_POLLING_INTERVAL);\n\n  useInterval(() => {\n    if (!messageIds || !messagesById || threadId !== MAIN_THREAD_ID) {\n      return;\n    }\n    const ids = messageIds.filter((id) => messagesById[id]?.repliesThreadInfo?.isComments);\n\n    if (!ids.length) return;\n\n    loadMessageViews({ chatId, ids });\n  }, MESSAGE_COMMENTS_POLLING_INTERVAL);\n\n  const loadMoreAround = useMemo(() => {\n    if (type !== 'thread') {\n      return undefined;\n    }\n\n    return debounce(() => loadViewportMessages({ direction: LoadMoreDirection.Around }), 1000, true, false);\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [loadViewportMessages, messageIds]);\n\n  const { isScrolled, updateStickyDates } = useStickyDates();\n\n  const isScrollingRef = useRef<boolean>();\n  const isScrollPatchNeededRef = useRef<boolean>();\n\n  const handleScroll = useCallback(() => {\n    if (isScrollTopJustUpdatedRef.current) {\n      isScrollTopJustUpdatedRef.current = false;\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    isScrollingRef.current = true;\n\n    if (!memoFocusingIdRef.current) {\n      updateStickyDates(container, hasTools);\n    }\n\n    runDebouncedForScroll(() => {\n      isScrollingRef.current = false;\n\n      fastRaf(() => {\n        if (!container.parentElement) {\n          return;\n        }\n\n        scrollOffsetRef.current = container.scrollHeight - container.scrollTop;\n\n        if (type === 'thread') {\n          setScrollOffset({ chatId, threadId, scrollOffset: scrollOffsetRef.current });\n        }\n      });\n    });\n  }, [updateStickyDates, hasTools, type, setScrollOffset, chatId, threadId]);\n\n  // Container resize observer (caused by Composer reply/webpage panels)\n  const handleResize = useCallback((entry: ResizeObserverEntry) => {\n    setContainerHeight(entry.contentRect.height);\n  }, []);\n  useResizeObserver(containerRef, handleResize);\n\n  // Memorize height for scroll animation\n  const { height: windowHeight } = useWindowSize();\n\n  useEffect(() => {\n    containerRef.current!.dataset.normalHeight = String(containerRef.current!.offsetHeight);\n  }, [windowHeight, canPost]);\n\n  // Initial message loading\n  useEffect(() => {\n    if (!loadMoreAround || !isChatLoaded || isRestricted || focusingId) {\n      return;\n    }\n\n    // Loading history while sending a message can return the same message and cause ambiguity\n    const isLastMessageLocal = messageIds && messageIds[messageIds.length - 1] > LOCAL_MESSAGE_MIN_ID;\n    if (isLastMessageLocal) {\n      return;\n    }\n\n    const container = containerRef.current!;\n\n    if (!messageIds || (\n      messageIds.length < MESSAGE_LIST_SLICE / 2\n      && (container.firstElementChild as HTMLDivElement).clientHeight <= container.offsetHeight\n    )) {\n      loadMoreAround();\n    }\n  }, [isChatLoaded, messageIds, loadMoreAround, focusingId, isRestricted]);\n\n  // Remember scroll position before repositioning it\n  useSyncEffect(() => {\n    if (!messageIds || !listItemElementsRef.current) {\n      return;\n    }\n\n    const preservedItemElements = listItemElementsRef.current\n      .filter((element) => messageIds.includes(Number(element.dataset.messageId)));\n\n    // We avoid the very first item as it may be a partly-loaded album\n    // and also because it may be removed when messages limit is reached\n    const anchor = preservedItemElements[1] || preservedItemElements[0];\n    if (!anchor) {\n      return;\n    }\n\n    anchorIdRef.current = anchor.id;\n    anchorTopRef.current = anchor.getBoundingClientRect().top;\n    // This should match deps for `useLayoutEffectWithPrevDeps` below\n  }, [messageIds, isViewportNewest, containerHeight, hasTools]);\n\n  // Handles updated message list, takes care of scroll repositioning\n  useLayoutEffectWithPrevDeps(([\n    prevMessageIds, prevIsViewportNewest, prevContainerHeight,\n  ]) => {\n    const container = containerRef.current!;\n    listItemElementsRef.current = Array.from(container.querySelectorAll<HTMLDivElement>('.message-list-item'));\n\n    const hasLastMessageChanged = (\n      messageIds && prevMessageIds && messageIds[messageIds.length - 1] !== prevMessageIds[prevMessageIds.length - 1]\n    );\n    const hasViewportShifted = (\n      messageIds?.[0] !== prevMessageIds?.[0] && messageIds?.length === (MESSAGE_LIST_SLICE / 2 + 1)\n    );\n    const wasMessageAdded = hasLastMessageChanged && !hasViewportShifted;\n    const isAlreadyFocusing = messageIds && memoFocusingIdRef.current === messageIds[messageIds.length - 1];\n\n    // Add extra height when few messages to allow smooth scroll animation. Uses assumption that `parentElement`\n    // is a Transition slide and its CSS class can not be reset in a declarative way.\n    const shouldForceScroll = (\n      isViewportNewest\n      && wasMessageAdded\n      && (messageIds && messageIds.length < MESSAGE_LIST_SLICE / 2)\n      && !container.parentElement!.classList.contains('force-messages-scroll')\n      && (container.firstElementChild as HTMLDivElement)!.clientHeight <= container.offsetHeight * 2\n    );\n\n    if (shouldForceScroll) {\n      container.parentElement!.classList.add('force-messages-scroll');\n\n      setTimeout(() => {\n        if (container.parentElement) {\n          container.parentElement.classList.remove('force-messages-scroll');\n        }\n      }, MESSAGE_ANIMATION_DURATION);\n    }\n\n    const { scrollTop, scrollHeight, offsetHeight } = container;\n    const scrollOffset = scrollOffsetRef.current;\n    const lastItemElement = listItemElementsRef.current[listItemElementsRef.current.length - 1];\n\n    let bottomOffset = scrollOffset - (prevContainerHeight || offsetHeight);\n    if (wasMessageAdded) {\n      // If two new messages come at once (e.g. when bot responds) then the first message will update `scrollOffset`\n      // right away (before animation) which creates inconsistency until the animation completes. To work around that,\n      // we calculate `isAtBottom` with a \"buffer\" of the latest message height (this is approximate).\n      const lastItemHeight = lastItemElement ? lastItemElement.offsetHeight : 0;\n      bottomOffset -= lastItemHeight;\n    }\n    const isAtBottom = isViewportNewest && prevIsViewportNewest && bottomOffset <= BOTTOM_THRESHOLD;\n\n    let newScrollTop!: number;\n\n    if (wasMessageAdded && isAtBottom && !isAlreadyFocusing) {\n      if (lastItemElement) {\n        fastRaf(() => {\n          fastSmoothScroll(\n            container,\n            lastItemElement,\n            'end',\n            BOTTOM_FOCUS_MARGIN,\n          );\n        });\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n      scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n      // Scroll still needs to be restored after container resize\n      if (!shouldForceScroll) {\n        return;\n      }\n    }\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.time('scrollTop');\n    }\n\n    const isResized = prevContainerHeight !== undefined && prevContainerHeight !== containerHeight;\n    const anchor = anchorIdRef.current && container.querySelector(`#${anchorIdRef.current}`);\n    const unreadDivider = (\n      !anchor\n      && memoUnreadDividerBeforeIdRef.current\n      && container.querySelector<HTMLDivElement>(`.${UNREAD_DIVIDER_CLASS}`)\n    );\n\n    if (isAtBottom && isResized) {\n      if (isAnimatingScroll()) {\n        return;\n      }\n\n      newScrollTop = scrollHeight - offsetHeight;\n    } else if (anchor) {\n      if (isScrollPatchNeededRef.current) {\n        isScrollPatchNeededRef.current = false;\n        patchChromiumScroll(container);\n      }\n\n      const newAnchorTop = anchor.getBoundingClientRect().top;\n      newScrollTop = scrollTop + (newAnchorTop - (anchorTopRef.current || 0));\n    } else if (unreadDivider) {\n      newScrollTop = Math.min(\n        unreadDivider.offsetTop - (hasTools ? UNREAD_DIVIDER_TOP_WITH_TOOLS : UNREAD_DIVIDER_TOP),\n        scrollHeight - scrollOffset,\n      );\n    } else {\n      newScrollTop = scrollHeight - scrollOffset;\n    }\n\n    resetScroll(container, Math.ceil(newScrollTop));\n\n    if (!memoFocusingIdRef.current) {\n      isScrollTopJustUpdatedRef.current = true;\n      fastRaf(() => {\n        isScrollTopJustUpdatedRef.current = false;\n      });\n    }\n\n    scrollOffsetRef.current = Math.max(Math.ceil(scrollHeight - newScrollTop), offsetHeight);\n\n    if (process.env.APP_ENV === 'perf') {\n      // eslint-disable-next-line no-console\n      console.timeEnd('scrollTop');\n    }\n    // This should match deps for `useSyncEffect` above\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [messageIds, isViewportNewest, containerHeight, hasTools] as const);\n\n  useEffectWithPrevDeps(([prevIsSelectModeActive]) => {\n    if (prevIsSelectModeActive !== undefined) {\n      dispatchHeavyAnimationEvent(SELECT_MODE_ANIMATION_DURATION + ANIMATION_END_DELAY);\n    }\n  }, [isSelectModeActive]);\n\n  const lang = useLang();\n\n  const isPrivate = Boolean(chatId && isUserId(chatId));\n  const withUsers = Boolean((!isPrivate && !isChannelChat) || isChatWithSelf || isRepliesChat);\n  const noAvatars = Boolean(!withUsers || isChannelChat);\n  const shouldRenderGreeting = isUserId(chatId) && !isChatWithSelf && !isBot\n    && (\n      (\n        !messageGroups && !lastMessage && messageIds\n        // Used to avoid flickering when deleting a greeting that has just been sent\n        && (!listItemElementsRef.current || listItemElementsRef.current.length === 0)\n      )\n      || (messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'contactSignUp')\n      || (lastMessage?.content?.action?.type === 'contactSignUp')\n    );\n\n  const isGroupChatJustCreated = isGroupChat && isCreator\n    && messageIds?.length === 1 && messagesById?.[messageIds[0]]?.content.action?.type === 'chatCreate';\n  const isEmptyTopic = messageIds?.length === 1\n    && messagesById?.[messageIds[0]]?.content.action?.type === 'topicCreate';\n\n  const isBotInfoEmpty = botInfo && !botInfo.description && !botInfo.gif && !botInfo.photo;\n\n  const className = buildClassName(\n    'MessageList custom-scroll',\n    noAvatars && 'no-avatars',\n    !canPost && 'no-composer',\n    type === 'pinned' && 'type-pinned',\n    withBottomShift && 'with-bottom-shift',\n    withDefaultBg && 'with-default-bg',\n    isSelectModeActive && 'select-mode-active',\n    isScrolled && 'scrolled',\n    !isReady && 'is-animating',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onScroll={handleScroll}\n      onMouseDown={preventMessageInputBlur}\n    >\n      {isRestricted ? (\n        <div className=\"empty\">\n          <span>\n            {restrictionReason ? restrictionReason.text : `This is a private ${isChannelChat ? 'channel' : 'chat'}`}\n          </span>\n        </div>\n      ) : botInfo ? (\n        <div className=\"empty\">\n          {isLoadingBotInfo && <span>{lang('Loading')}</span>}\n          {isBotInfoEmpty && !isLoadingBotInfo && <span>{lang('NoMessages')}</span>}\n          {botInfo && (\n            <div\n              className=\"bot-info\"\n              style={botInfoRealDimensions && (\n                `width: ${botInfoRealDimensions.width}px`\n              )}\n            >\n              {botInfoPhotoUrl && (\n                <img\n                  src={botInfoPhotoUrl}\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                  alt=\"Bot info\"\n                />\n              )}\n              {botInfoGifUrl && (\n                <OptimizedVideo\n                  canPlay\n                  src={botInfoGifUrl}\n                  loop\n                  disablePictureInPicture\n                  muted\n                  playsInline\n                />\n              )}\n              {botInfoDimensions && !botInfoPhotoUrl && !botInfoGifUrl && (\n                <Skeleton\n                  width={botInfoRealDimensions?.width}\n                  height={botInfoRealDimensions?.height}\n                />\n              )}\n              {botInfo.description && (\n                <div className=\"bot-info-description\">\n                  <p className=\"bot-info-title\">{lang('BotInfoTitle')}</p>\n                  {renderText(botInfo.description, ['br', 'emoji', 'links'])}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      ) : shouldRenderGreeting ? (\n        <ContactGreeting userId={chatId} />\n      ) : messageIds && (!messageGroups || isGroupChatJustCreated || isEmptyTopic) ? (\n        <NoMessages\n          chatId={chatId}\n          topic={topic}\n          type={type}\n          isChatWithSelf={isChatWithSelf}\n          isGroupChatJustCreated={isGroupChatJustCreated}\n        />\n      ) : ((messageIds && messageGroups) || lastMessage) ? (\n        <MessageListContent\n          isCurrentUserPremium={isCurrentUserPremium}\n          chatId={chatId}\n          isComments={isComments}\n          isChannelChat={isChannelChat}\n          messageIds={messageIds || [lastMessage!.id]}\n          messageGroups={messageGroups || groupMessages([lastMessage!])}\n          isViewportNewest={Boolean(isViewportNewest)}\n          isUnread={Boolean(firstUnreadId)}\n          withUsers={withUsers}\n          noAvatars={noAvatars}\n          containerRef={containerRef}\n          anchorIdRef={anchorIdRef}\n          memoUnreadDividerBeforeIdRef={memoUnreadDividerBeforeIdRef}\n          memoFirstUnreadIdRef={memoFirstUnreadIdRef}\n          threadId={threadId}\n          type={type}\n          isReady={isReady}\n          isScrollingRef={isScrollingRef}\n          isScrollPatchNeededRef={isScrollPatchNeededRef}\n          threadTopMessageId={threadTopMessageId}\n          hasLinkedChat={hasLinkedChat}\n          isSchedule={messageGroups ? type === 'scheduled' : false}\n          noAppearanceAnimation={!messageGroups || !shouldAnimateAppearanceRef.current}\n          onFabToggle={onFabToggle}\n          onNotchToggle={onNotchToggle}\n        />\n      ) : (\n        <Loading color=\"white\" backgroundColor=\"dark\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId, type }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const messageIds = selectCurrentMessageIds(global, chatId, threadId, type);\n    const messagesById = type === 'scheduled'\n      ? selectChatScheduledMessages(global, chatId)\n      : selectChatMessages(global, chatId);\n    const threadTopMessageId = selectThreadTopMessageId(global, chatId, threadId);\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n\n    if (\n      threadId !== MAIN_THREAD_ID && !chat?.isForum\n      && !(messagesById && threadTopMessageId && messagesById[threadTopMessageId])\n    ) {\n      return {};\n    }\n\n    const { isRestricted, restrictionReason, lastMessage } = chat;\n    const focusingId = selectFocusedMessageId(global, chatId);\n\n    const withLastMessageWhenPreloading = (\n      threadId === MAIN_THREAD_ID\n      && !messageIds && !chat.unreadCount && !focusingId && lastMessage && !lastMessage.groupedId\n    );\n\n    const chatBot = selectChatBot(global, chatId)!;\n    let isLoadingBotInfo = false;\n    let botInfo;\n    if (selectIsChatBotNotStarted(global, chatId)) {\n      if (chatBot.fullInfo) {\n        botInfo = chatBot.fullInfo.botInfo;\n      } else {\n        isLoadingBotInfo = true;\n      }\n    }\n\n    const topic = chat.topics?.[threadId];\n\n    return {\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isChatLoaded: true,\n      isRestricted,\n      restrictionReason,\n      isChannelChat: isChatChannel(chat),\n      isGroupChat: isChatGroup(chat),\n      isCreator: chat.isCreator,\n      isChatWithSelf: selectIsChatWithSelf(global, chatId),\n      isRepliesChat: isChatWithRepliesBot(chatId),\n      isBot: Boolean(chatBot),\n      messageIds,\n      messagesById,\n      isComments: Boolean(threadInfo?.originChannelId),\n      firstUnreadId: selectFirstUnreadId(global, chatId, threadId),\n      isViewportNewest: type !== 'thread' || selectIsViewportNewest(global, chatId, threadId),\n      threadFirstMessageId: selectFirstMessageId(global, chatId, threadId),\n      focusingId,\n      isSelectModeActive: selectIsInSelectMode(global),\n      isLoadingBotInfo,\n      botInfo,\n      threadTopMessageId,\n      hasLinkedChat: chat.fullInfo && ('linkedChatId' in chat.fullInfo)\n        ? Boolean(chat.fullInfo.linkedChatId)\n        : undefined,\n      lastSyncTime: global.lastSyncTime,\n      topic,\n      ...(withLastMessageWhenPreloading && { lastMessage }),\n    };\n  },\n)(MessageList));\n","import { useCallback } from '../../../lib/teact/teact';\n\nimport { fastRaf } from '../../../util/schedulers';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport useFlag from '../../../hooks/useFlag';\n\nconst DEBOUNCE = 1000;\nconst STICKY_TOP = 10;\nconst STICKY_TOP_WITH_TOOLS = 60;\n\nexport default function useStickyDates() {\n  // For some reason we can not synchronously hide a sticky element (from `useLayoutEffect`) when chat opens\n  // so we will add `position: sticky` only after first scroll. There would be no animation on the first show though.\n  const [isScrolled, markIsScrolled] = useFlag(false);\n\n  const runDebounced = useRunDebounced(DEBOUNCE, true);\n\n  const updateStickyDates = useCallback((container: HTMLDivElement, hasTools?: boolean) => {\n    markIsScrolled();\n\n    if (!document.body.classList.contains('is-scrolling-messages')) {\n      fastRaf(() => {\n        document.body.classList.add('is-scrolling-messages');\n      });\n    }\n\n    runDebounced(() => {\n      fastRaf(() => {\n        const currentStuck = document.querySelector('.stuck');\n        if (currentStuck) {\n          currentStuck.classList.remove('stuck');\n        }\n\n        const stuckDateEl = findStuckDate(container, hasTools);\n        if (stuckDateEl) {\n          stuckDateEl.classList.add('stuck');\n        }\n\n        document.body.classList.remove('is-scrolling-messages');\n      });\n    });\n  }, [markIsScrolled, runDebounced]);\n\n  return {\n    isScrolled,\n    updateStickyDates,\n  };\n}\n\nfunction findStuckDate(container: HTMLElement, hasTools?: boolean) {\n  const allElements = container.querySelectorAll<HTMLDivElement>('.sticky-date');\n  const containerTop = container.scrollTop;\n\n  return Array.from(allElements).find((el) => {\n    const { offsetTop, offsetHeight } = el;\n    const top = offsetTop - containerTop;\n    return -offsetHeight <= top && top <= (hasTools ? STICKY_TOP_WITH_TOOLS : STICKY_TOP);\n  });\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef } from '../../lib/teact/teact';\n\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\nimport buildClassName from '../../util/buildClassName';\n\nimport Menu from '../ui/Menu';\nimport Button from '../ui/Button';\nimport MenuItem from '../ui/MenuItem';\n\nimport styles from './ScrollDownButton.module.scss';\n\ntype OwnProps = {\n  icon: string;\n  ariaLabelLang: string;\n  unreadCount?: number;\n  onClick: VoidFunction;\n  onReadAll?: VoidFunction;\n  className?: string;\n};\n\nconst ScrollDownButton: FC<OwnProps> = ({\n  icon,\n  ariaLabelLang,\n  unreadCount,\n  onClick,\n  onReadAll,\n  className,\n}) => {\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const {\n    isContextMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(ref, !onReadAll);\n\n  return (\n    <div className={buildClassName(styles.root, className)} ref={ref}>\n      <Button\n        color=\"secondary\"\n        round\n        className={styles.button}\n        onClick={onClick}\n        onContextMenu={handleContextMenu}\n        ariaLabel={lang(ariaLabelLang)}\n      >\n        <i className={buildClassName(styles.icon, `icon-${icon}`)} />\n      </Button>\n      {Boolean(unreadCount) && <div className={styles.unreadCount}>{formatIntegerCompact(unreadCount)}</div>}\n      {onReadAll && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          autoClose\n          positionX=\"right\"\n          positionY=\"bottom\"\n        >\n          <MenuItem icon=\"readchats\" onClick={onReadAll}>{lang('MarkAllAsRead')}</MenuItem>\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(ScrollDownButton);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"KboxtoWkfx23zfklH_Zg\",\"button\":\"sgkkv3bmIMAZS9G9BHUz\",\"icon\":\"AafG9_xBi_2eJ_bFNnNg\",\"unread-count\":\"yKN1kQ3YXf4SHHIBcotS\",\"unreadCount\":\"yKN1kQ3YXf4SHHIBcotS\"};","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"quM3aP53TOfurCEOYgOE\",\"hidden\":\"EcdaljLbQ7DJN9gbQpSC\",\"reactions\":\"wHTB_MNtk9J6I3F_4eVE\",\"transform-down\":\"uHEtFnXb6pb14Jf0EsDr\",\"transformDown\":\"uHEtFnXb6pb14Jf0EsDr\",\"unread\":\"Hoi4yrJrfBHTmvB8TPce\",\"revealed\":\"Gutr8PrNAFFTnrIdgK_l\",\"no-composer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"noComposer\":\"r7RXnwv5TF4Cf2V0d5Mf\",\"no-extra-shift\":\"S98OqutuQVCNVHgTrKv4\",\"noExtraShift\":\"S98OqutuQVCNVHgTrKv4\",\"only-reactions\":\"bHOz3QboabL0RvHuj3ku\",\"onlyReactions\":\"bHOz3QboabL0RvHuj3ku\",\"is-symbol-menu-open\":\"yjxHiwr4SKNxYCGaxUua\",\"isSymbolMenuOpen\":\"yjxHiwr4SKNxYCGaxUua\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { selectChat, selectCurrentMessageList } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport fastSmoothScroll from '../../util/fastSmoothScroll';\n\nimport ScrollDownButton from './ScrollDownButton';\n\nimport styles from './FloatingActionButtons.module.scss';\n\ntype OwnProps = {\n  isShown: boolean;\n  canPost?: boolean;\n  withExtraShift?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageListType?: MessageListType;\n  unreadCount?: number;\n  reactionsCount?: number;\n  mentionsCount?: number;\n};\n\nconst FOCUS_MARGIN = 20;\n\nconst FloatingActionButtons: FC<OwnProps & StateProps> = ({\n  isShown,\n  canPost,\n  messageListType,\n  chatId,\n  unreadCount,\n  reactionsCount,\n  mentionsCount,\n  withExtraShift,\n}) => {\n  const {\n    focusNextReply, focusNextReaction, focusNextMention, fetchUnreadReactions,\n    readAllMentions, readAllReactions, fetchUnreadMentions,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const elementRef = useRef<HTMLDivElement>(null);\n\n  const hasUnreadReactions = Boolean(reactionsCount);\n  const hasUnreadMentions = Boolean(mentionsCount);\n\n  useEffect(() => {\n    if (hasUnreadReactions && chatId) {\n      fetchUnreadReactions({ chatId });\n    }\n  }, [chatId, fetchUnreadReactions, hasUnreadReactions]);\n\n  useEffect(() => {\n    if (hasUnreadMentions && chatId) {\n      fetchUnreadMentions({ chatId });\n    }\n  }, [chatId, fetchUnreadMentions, hasUnreadMentions]);\n\n  const handleClick = useCallback(() => {\n    if (!isShown) {\n      return;\n    }\n\n    if (messageListType === 'thread') {\n      focusNextReply();\n    } else {\n      const messagesContainer = elementRef.current!.parentElement!.querySelector<HTMLDivElement>('.MessageList')!;\n      const messageElements = messagesContainer.querySelectorAll<HTMLDivElement>('.message-list-item');\n      const lastMessageElement = messageElements[messageElements.length - 1];\n      if (!lastMessageElement) {\n        return;\n      }\n\n      fastSmoothScroll(messagesContainer, lastMessageElement, 'end', FOCUS_MARGIN);\n    }\n  }, [isShown, messageListType, focusNextReply]);\n\n  const fabClassName = buildClassName(\n    styles.root,\n    (isShown || Boolean(reactionsCount) || Boolean(mentionsCount)) && styles.revealed,\n    (Boolean(reactionsCount) || Boolean(mentionsCount)) && !isShown && styles.onlyReactions,\n    !canPost && styles.noComposer,\n    !withExtraShift && styles.noExtraShift,\n  );\n\n  return (\n    <div ref={elementRef} className={fabClassName}>\n      <ScrollDownButton\n        icon=\"heart-outline\"\n        ariaLabelLang=\"AccDescrReactionMentionDown\"\n        onClick={focusNextReaction}\n        onReadAll={readAllReactions}\n        unreadCount={reactionsCount}\n        className={buildClassName(\n          styles.reactions,\n          !hasUnreadReactions && styles.hidden,\n          !hasUnreadMentions && styles.transformDown,\n        )}\n      />\n\n      <ScrollDownButton\n        icon=\"mention\"\n        ariaLabelLang=\"AccDescrMentionDown\"\n        onClick={focusNextMention}\n        onReadAll={readAllMentions}\n        unreadCount={mentionsCount}\n        className={!hasUnreadMentions && styles.hidden}\n      />\n\n      <ScrollDownButton\n        icon=\"arrow-down\"\n        ariaLabelLang=\"AccDescrPageDown\"\n        onClick={handleClick}\n        unreadCount={unreadCount}\n        className={styles.unread}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    if (!currentMessageList) {\n      return {};\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const chat = selectChat(global, chatId);\n\n    const shouldShowCount = chat && threadId === MAIN_THREAD_ID && messageListType === 'thread';\n\n    return {\n      messageListType,\n      chatId,\n      reactionsCount: shouldShowCount ? chat.unreadReactionsCount : undefined,\n      mentionsCount: shouldShowCount ? chat.unreadMentionsCount : undefined,\n      unreadCount: shouldShowCount ? chat.unreadCount : undefined,\n    };\n  },\n)(FloatingActionButtons));\n","import type { ApiAttachment } from '../../../../api/types';\nimport {\n  GIF_MIME_TYPE,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\nimport { parseAudioMetadata } from '../../../../util/audio';\nimport {\n  preloadImage,\n  preloadVideo,\n  createPosterForVideo,\n} from '../../../../util/files';\nimport { scaleImage } from '../../../../util/imageResize';\n\nconst MAX_QUICK_IMG_SIZE = 1280; // px\nconst MAX_ASPECT_RATIO = 20;\nconst FILE_EXT_REGEX = /\\.[^/.]+$/;\n\nexport default async function buildAttachment(\n  filename: string, blob: Blob, options?: Partial<ApiAttachment>,\n): Promise<ApiAttachment> {\n  const blobUrl = URL.createObjectURL(blob);\n  const { type: mimeType, size } = blob;\n  let quick;\n  let audio;\n  let previewBlobUrl;\n  let shouldSendAsFile;\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(mimeType)) {\n    const img = await preloadImage(blobUrl);\n    const { width, height } = img;\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    const shouldShrink = Math.max(width, height) > MAX_QUICK_IMG_SIZE;\n    const isGif = mimeType === GIF_MIME_TYPE;\n\n    if (!shouldSendAsFile) {\n      if (!options?.compressedBlobUrl && !isGif && (shouldShrink || mimeType !== 'image/jpeg')) {\n        const resizedUrl = await scaleImage(\n          blobUrl, shouldShrink ? MAX_QUICK_IMG_SIZE / Math.max(width, height) : 1, 'image/jpeg',\n        );\n        URL.revokeObjectURL(blobUrl);\n        return buildAttachment(filename, blob, {\n          compressedBlobUrl: resizedUrl,\n        });\n      }\n\n      if (mimeType === 'image/jpeg') {\n        filename = filename.replace(FILE_EXT_REGEX, '.jpg');\n      }\n\n      quick = { width, height };\n    }\n\n    previewBlobUrl = blobUrl;\n  } else if (SUPPORTED_VIDEO_CONTENT_TYPES.has(mimeType)) {\n    const { videoWidth: width, videoHeight: height, duration } = await preloadVideo(blobUrl);\n    shouldSendAsFile = !validateAspectRatio(width, height);\n\n    if (!shouldSendAsFile) {\n      quick = { width, height, duration };\n    }\n\n    previewBlobUrl = await createPosterForVideo(blobUrl);\n  } else if (SUPPORTED_AUDIO_CONTENT_TYPES.has(mimeType)) {\n    const {\n      duration, title, performer, coverUrl,\n    } = await parseAudioMetadata(blobUrl);\n    audio = {\n      duration: duration || 0,\n      title,\n      performer,\n    };\n    previewBlobUrl = coverUrl;\n  }\n\n  return {\n    blobUrl,\n    filename,\n    mimeType,\n    size,\n    quick,\n    audio,\n    previewBlobUrl,\n    shouldSendAsFile: shouldSendAsFile || undefined,\n    uniqueId: `${Date.now()}-${Math.random()}`,\n    ...options,\n  };\n}\n\nexport function prepareAttachmentsToSend(\n  attachments: ApiAttachment[], shouldSendCompressed?: boolean,\n): ApiAttachment[] {\n  return attachments.map((attach) => {\n    if (shouldSendCompressed) {\n      if (attach.compressedBlobUrl) {\n        return {\n          ...attach,\n          blobUrl: attach.compressedBlobUrl,\n        };\n      }\n      return attach;\n    }\n\n    return {\n      ...attach,\n      shouldSendAsFile: !attach.voice ? true : undefined,\n      shouldSendAsSpoiler: undefined,\n    };\n  });\n}\n\nfunction validateAspectRatio(width: number, height: number) {\n  const maxAspectRatio = Math.max(width, height) / Math.min(width, height);\n  return maxAspectRatio <= MAX_ASPECT_RATIO;\n}\n","type AudioMetadata = {\n  title?: string;\n  performer?: string;\n  duration?: number;\n  coverUrl?: string;\n};\n\nexport async function parseAudioMetadata(url: string): Promise<AudioMetadata> {\n  const { fetchFromUrl, selectCover } = await import('../lib/music-metadata-browser');\n  const metadata = await fetchFromUrl(url);\n  const { common: { title, artist, picture }, format: { duration } } = metadata;\n\n  const cover = selectCover(picture);\n  const coverUrl = cover ? `data:${cover.format};base64,${cover.data.toString('base64')}` : undefined;\n\n  return {\n    title,\n    performer: artist,\n    duration,\n    coverUrl,\n  };\n}\n","export default function deleteLastCharacterOutsideSelection(html: string) {\n  const tempInput = document.createElement('div');\n  tempInput.contentEditable = 'true';\n  tempInput.style.position = 'absolute';\n  tempInput.style.left = '-10000px';\n  tempInput.style.top = '-10000px';\n  tempInput.innerHTML = html;\n  document.body.appendChild(tempInput);\n  let element = tempInput.lastChild!;\n\n  if (element.lastChild) {\n    // Selects the last and the deepest child of the element.\n    while (element.lastChild) {\n      element = element.lastChild;\n    }\n  }\n\n  // Gets length of the element's content.\n  const textLength = element.textContent!.length;\n  const range = document.createRange();\n  const selection = window.getSelection()!;\n\n  // Sets selection position to the end of the element.\n  range.setStart(element, textLength);\n  range.setEnd(element, textLength);\n  selection.removeAllRanges();\n  selection.addRange(range);\n  document.execCommand('delete', false);\n\n  const result = tempInput.innerHTML;\n  document.body.removeChild(tempInput);\n\n  return result;\n}\n","import { IS_IOS } from '../../../../util/environment';\n\nlet resetInput: HTMLInputElement;\n\nif (IS_IOS) {\n  resetInput = document.createElement('input');\n  resetInput.classList.add('for-ios-autocapitalization-fix');\n  document.body.appendChild(resetInput);\n}\n\n// https://stackoverflow.com/a/55652503\nexport default function applyIosAutoCapitalizationFix(inputEl: HTMLElement) {\n  resetInput.focus();\n  inputEl.focus();\n}\n","import { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiSticker } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport { EMOJI_IMG_REGEX } from '../../../../config';\nimport { IS_EMOJI_SUPPORTED } from '../../../../util/environment';\nimport parseEmojiOnlyString from '../../../../util/parseEmojiOnlyString';\nimport twemojiRegex from '../../../../lib/twemojiRegex';\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\n\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\n\nconst MAX_LENGTH = 8;\nconst STARTS_ENDS_ON_EMOJI_IMG_REGEX = new RegExp(`^${EMOJI_IMG_REGEX.source}$`, 'g');\n\nexport default function useStickerTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  stickers?: ApiSticker[],\n) {\n  const { loadStickersForEmoji, clearStickersForEmoji } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const getSingleEmoji = useDerivedSignal(() => {\n    const html = getHtml();\n    if (!isEnabled || !html || (IS_EMOJI_SUPPORTED && html.length > MAX_LENGTH)) return undefined;\n\n    const hasEmoji = html.match(IS_EMOJI_SUPPORTED ? twemojiRegex : EMOJI_IMG_REGEX);\n    if (!hasEmoji) return undefined;\n\n    const cleanHtml = prepareForRegExp(html);\n    const isSingleEmoji = cleanHtml && (\n      (IS_EMOJI_SUPPORTED && parseEmojiOnlyString(cleanHtml) === 1)\n      || (!IS_EMOJI_SUPPORTED && Boolean(html.match(STARTS_ENDS_ON_EMOJI_IMG_REGEX)))\n    );\n\n    return isSingleEmoji\n      ? (IS_EMOJI_SUPPORTED ? cleanHtml : cleanHtml.match(/alt=\"(.+)\"/)?.[1]!)\n      : undefined;\n  }, [getHtml, isEnabled]);\n\n  const isActive = useDerivedState(() => Boolean(getSingleEmoji()), [getSingleEmoji]);\n  const hasStickers = Boolean(stickers?.length);\n\n  useEffect(() => {\n    if (!isEnabled) return;\n\n    const singleEmoji = getSingleEmoji();\n    if (singleEmoji) {\n      if (!hasStickers) {\n        loadStickersForEmoji({ emoji: singleEmoji });\n      }\n    } else {\n      clearStickersForEmoji();\n    }\n  }, [isEnabled, getSingleEmoji, hasStickers, loadStickersForEmoji, clearStickersForEmoji]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isStickerTooltipOpen: Boolean(isActive && hasStickers && !isManuallyClosed),\n    closeStickerTooltip: markManuallyClosed,\n  };\n}\n","import type { IOpusRecorder } from 'opus-recorder';\n\nexport type Result = { blob: Blob; duration: number; waveform: number[] };\n\nconst encoderPath = new URL('opus-recorder/dist/encoderWorker.min', import.meta.url).href;\nconst MIN_RECORDING_TIME = 1000;\nconst POLYFILL_OPTIONS = { encoderPath, reuseWorker: true };\nconst BLOB_PARAMS = { type: 'audio/ogg' };\nconst FFT_SIZE = 64;\nconst MIN_VOLUME = 0.1;\n\nlet opusRecorderPromise: Promise<{ default: IOpusRecorder }>;\nlet OpusRecorder: IOpusRecorder;\nlet mediaRecorder: IOpusRecorder;\n\nexport async function init() {\n  if (!opusRecorderPromise) {\n    opusRecorderPromise = import('opus-recorder');\n    OpusRecorder = (await opusRecorderPromise).default;\n    mediaRecorder = new OpusRecorder(POLYFILL_OPTIONS);\n  }\n\n  return opusRecorderPromise;\n}\n\nexport async function start(analyzerCallback: Function) {\n  await startMediaRecorder();\n\n  const startedAt = Date.now();\n  let pausedAt: number;\n  const chunks: Uint8Array[] = [];\n  const waveform: number[] = [];\n\n  mediaRecorder.ondataavailable = (typedArray) => {\n    chunks.push(typedArray);\n  };\n\n  const releaseAnalyzer = subscribeToAnalyzer(mediaRecorder, (volume: number) => {\n    waveform.push(volume * 255);\n    analyzerCallback(volume);\n  });\n\n  return {\n    stop: () => new Promise<Result>((resolve, reject) => {\n      mediaRecorder.onstop = () => {\n        resolve({\n          blob: new Blob(chunks, BLOB_PARAMS),\n          duration: Math.round(((pausedAt || Date.now()) - startedAt) / 1000),\n          waveform,\n        });\n      };\n      mediaRecorder.onerror = reject;\n\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.stop();\n        releaseAnalyzer();\n      }, delayStop);\n    }),\n    pause: () => {\n      const delayStop = Math.max(0, startedAt + MIN_RECORDING_TIME - Date.now());\n      setTimeout(() => {\n        mediaRecorder.pause();\n        pausedAt = Date.now();\n        releaseAnalyzer();\n      }, delayStop);\n    },\n  };\n}\n\nasync function startMediaRecorder() {\n  await init();\n  await mediaRecorder.start();\n}\n\nfunction subscribeToAnalyzer(recorder: IOpusRecorder, cb: Function) {\n  const source = recorder.sourceNode;\n  const analyser = source.context.createAnalyser();\n  analyser.fftSize = FFT_SIZE;\n  source.connect(analyser);\n\n  const dataLength = analyser.frequencyBinCount;\n  const dataArray = new Uint8Array(dataLength);\n  let isDestroyed = false;\n\n  function tick() {\n    if (isDestroyed) {\n      return;\n    }\n\n    analyser.getByteFrequencyData(dataArray);\n\n    const sum = dataArray.reduce((acc, current) => acc + current, 0);\n    const mean = (sum / dataLength);\n    const volume = mean / 255;\n\n    cb(volume < MIN_VOLUME ? 0 : volume);\n\n    requestAnimationFrame(tick);\n  }\n\n  tick();\n\n  return () => {\n    isDestroyed = true;\n  };\n}\n","// Utility for cleaning html code from Google Docs.\n// Original source from DocsSoap:\n// https://www.npmjs.com/package/docs-soap\n\nconst GDOCS_ELEMENT_ID_REGEXP = /id=\"docs-internal-guid/i;\n\nconst GDOCS_STYLES = {\n  BOLD: '700',\n  ITALIC: 'italic',\n  UNDERLINE: 'underline',\n  STRIKETHROUGH: 'line-through',\n  SUPERSCRIPT: 'super',\n  SUBSCRIPT: 'sub',\n};\n\nconst ELEMENTS = {\n  ANCHOR: 'a',\n  BOLD: 'strong',\n  ITALIC: 'em',\n  UNDERLINE: 'u',\n  STRIKETHROUGH: 'del',\n  SUPERSCRIPT: 'sup',\n  SUBSCRIPT: 'sub',\n};\n\nconst headers = [\n  'H1',\n  'H2',\n  'H3',\n  'H4',\n  'H5',\n  'H6',\n];\n\nfunction parseHtml(html: string): HTMLElement {\n  const parser = new DOMParser();\n  const doc = parser.parseFromString(html, 'text/html');\n\n  return doc.body;\n}\n\nfunction wrapNodeAnchor(node: Node, href: string): HTMLAnchorElement {\n  const anchor = document.createElement(ELEMENTS.ANCHOR) as HTMLAnchorElement;\n  anchor.href = href;\n  anchor.appendChild(node.cloneNode(true));\n\n  return anchor;\n}\n\nfunction wrapNodeInline(node: Node, style: string): Node {\n  const el = document.createElement(style);\n  el.appendChild(node.cloneNode(true));\n\n  return el;\n}\n\nfunction wrapNode(inner: HTMLElement, result: Node): Node {\n  let newNode = result.cloneNode(true);\n  if (!inner) {\n    return newNode;\n  }\n  if (inner.style && inner.style.fontWeight === GDOCS_STYLES.BOLD) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.BOLD);\n  }\n  if (inner.style && inner.style.fontStyle === GDOCS_STYLES.ITALIC) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.ITALIC);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.UNDERLINE) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.UNDERLINE);\n  }\n  if (inner.style && inner.style.textDecoration === GDOCS_STYLES.STRIKETHROUGH) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.STRIKETHROUGH);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUPERSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUPERSCRIPT);\n  }\n  if (inner.style && inner.style.verticalAlign === GDOCS_STYLES.SUBSCRIPT) {\n    newNode = wrapNodeInline(newNode, ELEMENTS.SUBSCRIPT);\n  }\n\n  return newNode;\n}\n\nfunction applyBlockStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = document.createTextNode('') as Node;\n  if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n    styledNode = node.childNodes[0];\n  }\n  if (node.childNodes[0] && node.childNodes[0].nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode.cloneNode(true), (node.childNodes[0] as HTMLAnchorElement).href);\n    styledNode = node.childNodes[0].childNodes[0];\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction applyInlineStyles(dirty: Node): Node {\n  const node = dirty.cloneNode(true);\n  let newNode = document.createTextNode(node.textContent || '') as Node;\n  let styledNode = node;\n  if (node.nodeName === 'A') {\n    newNode = wrapNodeAnchor(newNode, (node as HTMLAnchorElement).href);\n    if ('style' in node.childNodes[0] && Boolean(node.childNodes[0].style)) {\n      styledNode = node.childNodes[0];\n    }\n  }\n  newNode = wrapNode(styledNode as HTMLElement, newNode);\n  return newNode;\n}\n\nfunction getCleanNode(node: Node): Node[] {\n  if (node.childNodes && (node.childNodes.length <= 1 || node.nodeName === 'OL' || node.nodeName === 'UL')) {\n    let newWrapper: Node | undefined;\n    let newNode = document.createTextNode(node.textContent || '') as Node;\n    if (node.nodeName === 'UL' || node.nodeName === 'OL' || node.nodeName === 'LI') {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = document.createDocumentFragment();\n      const items = [];\n      for (let i = 0; i < node.childNodes.length; i++) {\n        items.push(...getCleanNode(node.childNodes[i]));\n      }\n      items.map((i: Node): Node => newNode.appendChild(i));\n    } else if (headers.indexOf(node.nodeName) !== -1) {\n      newWrapper = document.createElement(node.nodeName);\n      newNode = applyInlineStyles(node.childNodes[0]);\n    } else if (node.nodeName === 'P') {\n      newWrapper = document.createElement('p');\n      newNode = applyBlockStyles(node);\n    } else if (node.nodeName === 'BR') {\n      newNode = node;\n    } else {\n      newWrapper = document.createElement('span');\n      newNode = applyInlineStyles(node);\n    }\n    if (newWrapper) {\n      newWrapper.appendChild(newNode);\n      return [newWrapper];\n    }\n\n    return [node.cloneNode(true)];\n  }\n\n  if (node.childNodes) {\n    const nodes = [];\n    for (let i = 0; i < node.childNodes.length; i++) {\n      nodes.push(...getCleanNode(node.childNodes[i]));\n    }\n    return nodes;\n  }\n\n  return [node];\n}\n\nfunction filterNode(node: Node): boolean {\n  return node.nodeType !== 8; // Node.COMMENT_NODE = 8\n}\n\nfunction getCleanDocument(dirty: HTMLElement): HTMLElement {\n  const body = document.createElement('body');\n  const nodes = dirty.childNodes;\n  const filteredNodes = Array.from(nodes).filter(filterNode);\n  const cleanNodes = [];\n\n  for (const node of filteredNodes) {\n    cleanNodes.push(...getCleanNode(node));\n  }\n\n  for (let i = 0; i < cleanNodes.length; i++) {\n    body.appendChild(cleanNodes[i].cloneNode(true));\n  }\n\n  return body;\n}\n\nexport default function cleanDocsHtml(clipboardContent: string): string {\n  if (!clipboardContent.match(GDOCS_ELEMENT_ID_REGEXP)) {\n    return parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, '')).innerHTML;\n  }\n\n  return getCleanDocument(parseHtml(clipboardContent.replace(/(\\r\\n|\\n|\\r)/, ''))).innerHTML;\n}\n","import type { StateHookSetter } from '../../../../lib/teact/teact';\nimport { useEffect } from '../../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { DEBUG, EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID } from '../../../../config';\nimport getFilesFromDataTransferItems from '../helpers/getFilesFromDataTransferItems';\nimport parseMessageInput, { ENTITY_CLASS_BY_NODE_NAME } from '../../../../util/parseMessageInput';\nimport cleanDocsHtml from '../../../../lib/cleanDocsHtml';\nimport { containsCustomEmoji, stripCustomEmoji } from '../../../../global/helpers/symbols';\n\nconst MAX_MESSAGE_LENGTH = 4096;\n\nconst STYLE_TAG_REGEX = /<style>(.*?)<\\/style>/gs;\n\nfunction preparePastedHtml(html: string) {\n  let fragment = document.createElement('div');\n  try {\n    html = cleanDocsHtml(html);\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n  fragment.innerHTML = html.replace(/\\u00a0/g, ' ').replace(STYLE_TAG_REGEX, ''); // Strip &nbsp and styles\n\n  const textContents = fragment.querySelectorAll<HTMLDivElement>('.text-content');\n  if (textContents.length) {\n    fragment = textContents[textContents.length - 1]; // Replace with the last copied message\n  }\n\n  Array.from(fragment.getElementsByTagName('*')).forEach((node) => {\n    if (!(node instanceof HTMLElement)) return;\n    node.removeAttribute('style');\n\n    // Fix newlines\n    if (node.tagName === 'BR') node.replaceWith('\\n');\n    if (node.tagName === 'P') node.appendChild(document.createTextNode('\\n'));\n    if (node.tagName === 'IMG' && !node.dataset.entityType) node.replaceWith(node.getAttribute('alt') || '');\n    // We do not intercept copy logic, so we remove some nodes here\n    if (node.dataset.ignoreOnPaste) node.remove();\n\n    if (ENTITY_CLASS_BY_NODE_NAME[node.tagName]) {\n      node.setAttribute('data-entity-type', ENTITY_CLASS_BY_NODE_NAME[node.tagName]);\n    }\n    // Strip non-entity tags\n    if (!node.dataset.entityType && node.textContent === node.innerText) node.replaceWith(node.textContent);\n    // Append entity parameters for parsing\n    if (node.dataset.alt) node.setAttribute('alt', node.dataset.alt);\n    switch (node.dataset.entityType) {\n      case ApiMessageEntityTypes.MentionName:\n        node.replaceWith(node.textContent || '');\n        break;\n      case ApiMessageEntityTypes.CustomEmoji:\n        node.textContent = node.dataset.alt || '';\n        break;\n    }\n  });\n\n  return fragment.innerHTML.trimEnd();\n}\n\nconst useClipboardPaste = (\n  isActive: boolean,\n  insertTextAndUpdateCursor: (text: ApiFormattedText, inputId?: string) => void,\n  setAttachments: StateHookSetter<ApiAttachment[]>,\n  editedMessage: ApiMessage | undefined,\n  shouldStripCustomEmoji?: boolean,\n  onCustomEmojiStripped?: VoidFunction,\n) => {\n  useEffect(() => {\n    if (!isActive) {\n      return undefined;\n    }\n\n    async function handlePaste(e: ClipboardEvent) {\n      if (!e.clipboardData) {\n        return;\n      }\n\n      const input = document.activeElement;\n      if (input && ![EDITABLE_INPUT_ID, EDITABLE_INPUT_MODAL_ID].includes(input.id)) {\n        return;\n      }\n\n      const pastedText = e.clipboardData.getData('text').substring(0, MAX_MESSAGE_LENGTH);\n      const html = e.clipboardData.getData('text/html');\n      let pastedFormattedText = html ? parseMessageInput(\n        preparePastedHtml(html), undefined, true,\n      ) : undefined;\n\n      if (pastedFormattedText && containsCustomEmoji(pastedFormattedText) && shouldStripCustomEmoji) {\n        pastedFormattedText = stripCustomEmoji(pastedFormattedText);\n        onCustomEmojiStripped?.();\n      }\n\n      const { items } = e.clipboardData;\n      let files: File[] | undefined = [];\n\n      e.preventDefault();\n      if (items.length > 0) {\n        files = await getFilesFromDataTransferItems(items);\n      }\n\n      if (!files?.length && !pastedText) {\n        return;\n      }\n\n      if (files?.length && !editedMessage) {\n        const newAttachments = await Promise.all(files.map((file) => {\n          return buildAttachment(file.name, file);\n        }));\n        setAttachments((attachments) => attachments.concat(newAttachments));\n      }\n\n      const textToPaste = pastedFormattedText?.entities?.length ? pastedFormattedText : { text: pastedText };\n\n      if (textToPaste) {\n        insertTextAndUpdateCursor(textToPaste, input?.id);\n      }\n    }\n\n    document.addEventListener('paste', handlePaste, false);\n\n    return () => {\n      document.removeEventListener('paste', handlePaste, false);\n    };\n  }, [\n    insertTextAndUpdateCursor, editedMessage, setAttachments, isActive, shouldStripCustomEmoji, onCustomEmojiStripped,\n  ]);\n};\n\nexport default useClipboardPaste;\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\n\nimport type { InlineBotSettings } from '../../../../types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { getActions } from '../../../../global';\nimport memoized from '../../../../util/memoized';\n\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedState from '../../../../hooks/useDerivedState';\nimport useSyncEffect from '../../../../hooks/useSyncEffect';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst THROTTLE = 300;\nconst INLINE_BOT_QUERY_REGEXP = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+(.*)/i;\nconst HAS_NEW_LINE = /^@([a-z0-9_]{1,32})[\\u00A0\\u0020]+\\n{2,}/i;\nconst MEMO_NO_RESULT = {\n  username: '',\n  query: '',\n  canShowHelp: false,\n  usernameLowered: '',\n};\n\nconst tempEl = document.createElement('div');\n\nexport default function useInlineBotTooltip(\n  isEnabled: boolean,\n  chatId: string,\n  getHtml: Signal<string>,\n  inlineBots?: Record<string, false | InlineBotSettings>,\n) {\n  const { queryInlineBot, resetInlineBot, resetAllInlineBots } = getActions();\n\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const extractBotQueryThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('@') ? parseBotQuery(html) : MEMO_NO_RESULT;\n  }, [getHtml, isEnabled], THROTTLE);\n  const {\n    username, query, canShowHelp, usernameLowered,\n  } = useDerivedState(extractBotQueryThrottled, [extractBotQueryThrottled, getHtml], true);\n\n  useSyncEffect(([prevUsername]) => {\n    if (prevUsername) {\n      resetInlineBot({ username: prevUsername });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [username, resetInlineBot] as const);\n\n  useEffect(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query,\n    });\n  }, [chatId, query, queryInlineBot, usernameLowered]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  const {\n    id: botId,\n    switchPm,\n    offset,\n    results,\n    isGallery,\n    help,\n  } = (usernameLowered && inlineBots?.[usernameLowered]) || {};\n\n  const isOpen = Boolean((results?.length || switchPm) && !isManuallyClosed);\n\n  useEffect(() => {\n    if (!isOpen && !username) {\n      resetAllInlineBots();\n    }\n  }, [isOpen, resetAllInlineBots, username]);\n\n  const loadMore = useCallback(() => {\n    if (!usernameLowered) return;\n\n    queryInlineBot({\n      chatId, username: usernameLowered, query, offset,\n    });\n  }, [chatId, offset, query, queryInlineBot, usernameLowered]);\n\n  return {\n    isOpen,\n    botId,\n    isGallery,\n    switchPm,\n    results,\n    closeTooltip: markManuallyClosed,\n    help: canShowHelp && help ? `@${username} ${help}` : undefined,\n    loadMore,\n  };\n}\n\nconst buildQueryStateMemo = memoized((username: string, query: string, canShowHelp: boolean) => ({\n  username,\n  query,\n  canShowHelp,\n  usernameLowered: username.toLowerCase(),\n}));\n\nfunction parseBotQuery(html: string) {\n  if (!html.startsWith('@')) {\n    return MEMO_NO_RESULT;\n  }\n\n  const text = getPlainText(html);\n  const result = text.match(INLINE_BOT_QUERY_REGEXP);\n  if (!result) {\n    return MEMO_NO_RESULT;\n  }\n\n  return buildQueryStateMemo(result[1], result[2], result[2] === '' && !text.match(HAS_NEW_LINE));\n}\n\nfunction getPlainText(html: string) {\n  tempEl.innerHTML = html.replace(/<br>/g, '\\n');\n\n  tempEl.querySelectorAll<HTMLElement>('[alt]').forEach((el) => {\n    if (!el.innerText) {\n      el.innerText = el.getAttribute('alt')!;\n    }\n  });\n\n  return tempEl.innerText;\n}\n","import { useEffect, useState } from '../../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { prepareForRegExp } from '../helpers/prepareForRegExp';\nimport useFlag from '../../../../hooks/useFlag';\nimport useDerivedSignal from '../../../../hooks/useDerivedSignal';\nimport { useThrottledResolver } from '../../../../hooks/useAsyncResolvers';\n\nconst RE_COMMAND = /^\\/([\\w@]{1,32})?$/i;\n\nconst THROTTLE = 300;\n\nexport default function useBotCommandTooltip(\n  isEnabled: boolean,\n  getHtml: Signal<string>,\n  botCommands?: ApiBotCommand[] | false,\n  chatBotCommands?: ApiBotCommand[],\n) {\n  const [filteredBotCommands, setFilteredBotCommands] = useState<ApiBotCommand[] | undefined>();\n  const [isManuallyClosed, markManuallyClosed, unmarkManuallyClosed] = useFlag(false);\n\n  const detectCommandThrottled = useThrottledResolver(() => {\n    const html = getHtml();\n    return isEnabled && html.startsWith('/') ? prepareForRegExp(html).match(RE_COMMAND)?.[0].trim() : undefined;\n  }, [getHtml, isEnabled], THROTTLE);\n\n  const getCommand = useDerivedSignal(\n    detectCommandThrottled, [detectCommandThrottled, getHtml], true,\n  );\n\n  useEffect(() => {\n    const command = getCommand();\n    const commands = botCommands || chatBotCommands;\n    if (!command || !commands) {\n      setFilteredBotCommands(undefined);\n      return;\n    }\n\n    const filter = command.substring(1);\n    const nextFilteredBotCommands = commands.filter((c) => !filter || c.command.startsWith(filter));\n\n    setFilteredBotCommands(\n      nextFilteredBotCommands?.length ? nextFilteredBotCommands : undefined,\n    );\n  }, [getCommand, botCommands, chatBotCommands]);\n\n  useEffect(unmarkManuallyClosed, [unmarkManuallyClosed, getHtml]);\n\n  return {\n    isOpen: Boolean(filteredBotCommands?.length && !isManuallyClosed),\n    close: markManuallyClosed,\n    filteredBotCommands,\n  };\n}\n","import { useCallback, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiAttachment } from '../../../../api/types';\n\nimport buildAttachment from '../helpers/buildAttachment';\nimport { MEMO_EMPTY_ARRAY } from '../../../../util/memo';\nimport {\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../../config';\n\nexport default function useAttachmentModal({\n  attachments,\n  fileSizeLimit,\n  setHtml,\n  setAttachments,\n  chatId,\n  canSendAudios,\n  canSendVideos,\n  canSendPhotos,\n  canSendDocuments,\n}: {\n  attachments: ApiAttachment[];\n  fileSizeLimit: number;\n  setHtml: (html: string) => void;\n  setAttachments: (attachments: ApiAttachment[]) => void;\n  chatId: string;\n  canSendAudios?: boolean;\n  canSendVideos?: boolean;\n  canSendPhotos?: boolean;\n  canSendDocuments?: boolean;\n}) {\n  const { openLimitReachedModal, showAllowedMessageTypesNotification } = getActions();\n  const [shouldForceAsFile, setShouldForceAsFile] = useState<boolean>(false);\n  const [shouldForceCompression, setShouldForceCompression] = useState<boolean>(false);\n  const [shouldSuggestCompression, setShouldSuggestCompression] = useState<boolean | undefined>(undefined);\n\n  const handleClearAttachments = useCallback(() => {\n    setAttachments(MEMO_EMPTY_ARRAY);\n  }, [setAttachments]);\n\n  const handleSetAttachments = useCallback(\n    (newValue: ApiAttachment[] | ((current: ApiAttachment[]) => ApiAttachment[])) => {\n      const newAttachments = typeof newValue === 'function' ? newValue(attachments) : newValue;\n      if (!newAttachments.length) {\n        handleClearAttachments();\n        return;\n      }\n\n      if (newAttachments.some((attachment) => {\n        const type = getAttachmentType(attachment);\n\n        return (type === 'audio' && !canSendAudios && !canSendDocuments)\n          || (type === 'video' && !canSendVideos && !canSendDocuments)\n          || (type === 'image' && !canSendPhotos && !canSendDocuments)\n          || (type === 'file' && !canSendDocuments);\n      })) {\n        showAllowedMessageTypesNotification({ chatId });\n      } else if (newAttachments.some(({ size }) => size > fileSizeLimit)) {\n        openLimitReachedModal({\n          limit: 'uploadMaxFileparts',\n        });\n      } else {\n        setAttachments(newAttachments);\n        const shouldForce = newAttachments.some((attachment) => {\n          const type = getAttachmentType(attachment);\n\n          return (type === 'audio' && !canSendAudios)\n            || (type === 'video' && !canSendVideos)\n            || (type === 'image' && !canSendPhotos);\n        });\n\n        setShouldForceAsFile(Boolean(shouldForce && canSendDocuments));\n        setShouldForceCompression(!canSendDocuments);\n      }\n    }, [\n      attachments, canSendAudios, canSendDocuments, canSendPhotos, canSendVideos, chatId, fileSizeLimit,\n      handleClearAttachments, openLimitReachedModal, setAttachments, showAllowedMessageTypesNotification,\n    ],\n  );\n\n  const handleAppendFiles = useCallback(async (files: File[], isSpoiler?: boolean) => {\n    handleSetAttachments([\n      ...attachments,\n      ...await Promise.all(files.map((file) => (\n        buildAttachment(file.name, file, { shouldSendAsSpoiler: isSpoiler || undefined })\n      ))),\n    ]);\n  }, [attachments, handleSetAttachments]);\n\n  const handleFileSelect = useCallback(async (files: File[], suggestCompression?: boolean) => {\n    handleSetAttachments(await Promise.all(files.map((file) => buildAttachment(file.name, file))));\n    setShouldSuggestCompression(suggestCompression);\n  }, [handleSetAttachments]);\n\n  return {\n    shouldSuggestCompression,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate: setHtml,\n    handleClearAttachments,\n    handleSetAttachments,\n    shouldForceCompression,\n    shouldForceAsFile,\n  };\n}\n\nfunction getAttachmentType(attachment: ApiAttachment) {\n  if (attachment.shouldSendAsFile) return 'file';\n\n  if (SUPPORTED_IMAGE_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'image';\n  }\n\n  if (SUPPORTED_VIDEO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'video';\n  }\n\n  if (SUPPORTED_AUDIO_CONTENT_TYPES.has(attachment.mimeType)) {\n    return 'audio';\n  }\n\n  return 'file';\n}\n","import { useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiDraft } from '../../../../global/types';\nimport type { ApiMessage } from '../../../../api/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport { ApiMessageEntityTypes } from '../../../../api/types';\nimport { DRAFT_DEBOUNCE, EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport { IS_TOUCH_ENV } from '../../../../util/environment';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\nimport { useStateRef } from '../../../../hooks/useStateRef';\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport useRunDebounced from '../../../../hooks/useRunDebounced';\n\nlet isFrozen = false;\n\nfunction freeze() {\n  isFrozen = true;\n  requestAnimationFrame(() => {\n    isFrozen = false;\n  });\n}\n\nconst useDraft = (\n  draft: ApiDraft | undefined,\n  chatId: string,\n  threadId: number,\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  lastSyncTime?: number,\n) => {\n  const { saveDraft, clearDraft, loadCustomEmojis } = getActions();\n\n  const isEditing = Boolean(editedMessage);\n\n  const updateDraft = useCallback((prevState: { chatId?: string; threadId?: number } = {}, shouldForce = false) => {\n    if (isEditing || !lastSyncTime) return;\n\n    const html = getHtml();\n\n    if (html) {\n      saveDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        draft: parseMessageInput(html),\n        shouldForce,\n      });\n    } else {\n      clearDraft({\n        chatId: prevState.chatId ?? chatId,\n        threadId: prevState.threadId ?? threadId,\n        shouldForce,\n      });\n    }\n  }, [chatId, threadId, isEditing, lastSyncTime, getHtml, saveDraft, clearDraft]);\n\n  const forceUpdateDraft = useCallback(() => {\n    updateDraft(undefined, true);\n  }, [updateDraft]);\n\n  const updateDraftRef = useStateRef(updateDraft);\n  const runDebouncedForSaveDraft = useRunDebounced(DRAFT_DEBOUNCE, true, undefined, [chatId, threadId]);\n\n  // Restore draft on chat change\n  useEffectWithPrevDeps(([prevChatId, prevThreadId, prevDraft]) => {\n    if (chatId === prevChatId && threadId === prevThreadId) {\n      if (!draft && prevDraft) {\n        setHtml('');\n      }\n\n      if (!draft?.shouldForce) {\n        return;\n      }\n    }\n\n    if (editedMessage || !draft) {\n      return;\n    }\n\n    setHtml(getTextWithEntitiesAsHtml(draft));\n\n    const customEmojiIds = draft.entities\n      ?.map((entity) => entity.type === ApiMessageEntityTypes.CustomEmoji && entity.documentId)\n      .filter(Boolean) || [];\n    if (customEmojiIds.length) loadCustomEmojis({ ids: customEmojiIds });\n\n    if (!IS_TOUCH_ENV) {\n      requestAnimationFrame(() => {\n        const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n        if (messageInput) {\n          focusEditableElement(messageInput, true);\n        }\n      });\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [\n    chatId, threadId, draft, setHtml, editedMessage, loadCustomEmojis,\n  ] as const);\n\n  // Save draft on chat change\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      if (!isEditing) {\n        // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n        updateDraftRef.current({ chatId, threadId });\n      }\n\n      freeze();\n    };\n  }, [chatId, threadId, isEditing, updateDraftRef]);\n\n  const chatIdRef = useStateRef(chatId);\n  const threadIdRef = useStateRef(threadId);\n  useEffect(() => {\n    if (isFrozen) {\n      return;\n    }\n\n    if (!getHtml()) {\n      updateDraftRef.current();\n\n      return;\n    }\n\n    const scopedShatId = chatIdRef.current;\n    const scopedThreadId = threadIdRef.current;\n\n    runDebouncedForSaveDraft(() => {\n      if (chatIdRef.current === scopedShatId && threadIdRef.current === scopedThreadId) {\n        updateDraftRef.current();\n      }\n    });\n  }, [chatIdRef, getHtml, runDebouncedForSaveDraft, threadIdRef, updateDraftRef]);\n\n  useBackgroundMode(forceUpdateDraft);\n  useBeforeUnload(forceUpdateDraft);\n};\n\nexport default useDraft;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './DeleteMessageModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteMessageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DeleteMessageModal = useModuleLoader(Bundles.Extra, 'DeleteMessageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteMessageModal ? <DeleteMessageModal {...props} /> : undefined;\n};\n\nexport default memo(DeleteMessageModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vL8HfVVnjTeFmp1ECFj8\",\"compact\":\"N3E1geoPu1vesCKf545F\",\"image\":\"Fb4aIyDYEwOlaqY8oZkV\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\n\nimport type { ISettings } from '../../../types';\nimport type { ApiDocument } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { IS_COMPACT_MENU } from '../../../util/environment';\nimport useMedia from '../../../hooks/useMedia';\nimport { getDocumentMediaHash } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport styles from './AttachBotIcon.module.scss';\n\ntype OwnProps = {\n  icon: ApiDocument;\n  theme: ISettings['theme'];\n};\n\nconst ADDITIONAL_STROKE_WIDTH = '0.5px';\nconst DARK_THEME_COLOR = 'rgb(170, 170, 170)';\nconst LIGHT_THEME_COLOR = 'rgb(112, 117, 121)';\nconst COLOR_REPLACE_PATTERN = /#fff/gi;\n\nconst AttachBotIcon: FC<OwnProps> = ({\n  icon, theme,\n}) => {\n  const mediaData = useMedia(getDocumentMediaHash(icon), false, ApiMediaFormat.Text);\n\n  const iconSvg = useMemo(() => {\n    if (!mediaData) return '';\n    const color = theme === 'dark' ? DARK_THEME_COLOR : LIGHT_THEME_COLOR;\n\n    const mediaDataWithReplacedColors = mediaData.replace(COLOR_REPLACE_PATTERN, color);\n    const doc = new DOMParser().parseFromString(mediaDataWithReplacedColors, 'image/svg+xml');\n    doc.querySelectorAll('path').forEach((path) => {\n      path.style.stroke = color;\n      path.style.strokeWidth = ADDITIONAL_STROKE_WIDTH;\n    });\n\n    return `data:image/svg+xml;utf8,${doc.documentElement.outerHTML}`;\n  }, [mediaData, theme]);\n\n  return (\n    <i className={buildClassName(styles.root, IS_COMPACT_MENU && styles.compact)}>\n      <img src={iconSvg} alt=\"\" className={buildClassName(styles.image, IS_COMPACT_MENU && styles.compact)} />\n    </i>\n  );\n};\n\nexport default memo(AttachBotIcon);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { IAnchorPosition, ISettings } from '../../../types';\nimport type { ApiAttachBot } from '../../../api/types';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\n\nimport Portal from '../../ui/Portal';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotIcon from './AttachBotIcon';\n\ntype OwnProps = {\n  bot: ApiAttachBot;\n  theme: ISettings['theme'];\n  chatId: string;\n  threadId?: number;\n  onMenuOpened: VoidFunction;\n  onMenuClosed: VoidFunction;\n};\n\nconst AttachBotItem: FC<OwnProps> = ({\n  bot,\n  theme,\n  chatId,\n  threadId,\n  onMenuOpened,\n  onMenuClosed,\n}) => {\n  const { callAttachBot, toggleAttachBot } = getActions();\n\n  const lang = useLang();\n\n  const icon = useMemo(() => {\n    return bot.icons.find(({ name }) => name === 'default_static')?.document;\n  }, [bot.icons]);\n\n  const [isMenuOpen, openMenu, closeMenu] = useFlag();\n  const [menuPosition, setMenuPosition] = useState<IAnchorPosition | undefined>(undefined);\n\n  const handleContextMenu = useCallback((e: React.UIEvent) => {\n    e.preventDefault();\n    const rect = e.currentTarget.getBoundingClientRect();\n    setMenuPosition({ x: rect.right, y: rect.bottom });\n    onMenuOpened();\n    openMenu();\n  }, [onMenuOpened, openMenu]);\n\n  const handleCloseMenu = useCallback(() => {\n    closeMenu();\n    onMenuClosed();\n  }, [closeMenu, onMenuClosed]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    setMenuPosition(undefined);\n  }, []);\n\n  const handleRemoveBot = useCallback(() => {\n    toggleAttachBot({\n      botId: bot.id,\n      isEnabled: false,\n    });\n  }, [bot.id, toggleAttachBot]);\n\n  return (\n    <MenuItem\n      key={bot.id}\n      customIcon={icon && <AttachBotIcon icon={icon} theme={theme} />}\n      icon={!icon ? 'bots' : undefined}\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => callAttachBot({\n        bot,\n        chatId,\n        threadId,\n      })}\n      onContextMenu={handleContextMenu}\n    >\n      {bot.shortName}\n      {menuPosition && (\n        <Portal>\n          <Menu\n            isOpen={isMenuOpen}\n            positionX=\"right\"\n            style={`left: ${menuPosition.x}px;top: ${menuPosition.y}px;`}\n            className=\"bot-attach-context-menu\"\n            autoClose\n            onClose={handleCloseMenu}\n            onCloseAnimationEnd={handleCloseAnimationEnd}\n          >\n            <MenuItem icon=\"stop\" destructive onClick={handleRemoveBot}>{lang('WebApp.RemoveBot')}</MenuItem>\n          </Menu>\n        </Portal>\n      )}\n\n    </MenuItem>\n  );\n};\n\nexport default memo(AttachBotItem);\n","import React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../lib/teact/teact';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiAttachMenuPeerType } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW, SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { validateFiles } from '../../../util/files';\n\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport AttachBotItem from './AttachBotItem';\n\nimport './AttachMenu.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isButtonVisible: boolean;\n  canAttachMedia: boolean;\n  canAttachPolls: boolean;\n  canSendPhotos: boolean;\n  canSendVideos: boolean;\n  canSendDocuments: boolean;\n  canSendAudios: boolean;\n  isScheduled?: boolean;\n  attachBots: GlobalState['attachMenu']['bots'];\n  peerType?: ApiAttachMenuPeerType;\n  onFileSelect: (files: File[], shouldSuggestCompression?: boolean) => void;\n  onPollCreate: () => void;\n  theme: ISettings['theme'];\n};\n\nconst AttachMenu: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  isButtonVisible,\n  canAttachMedia,\n  canAttachPolls,\n  canSendPhotos,\n  canSendVideos,\n  canSendDocuments,\n  canSendAudios,\n  attachBots,\n  peerType,\n  isScheduled,\n  onFileSelect,\n  onPollCreate,\n  theme,\n}) => {\n  const [isAttachMenuOpen, openAttachMenu, closeAttachMenu] = useFlag();\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isAttachMenuOpen, closeAttachMenu);\n\n  const canSendVideoAndPhoto = canSendPhotos && canSendVideos;\n  const canSendVideoOrPhoto = canSendPhotos || canSendVideos;\n\n  const [isAttachmentBotMenuOpen, markAttachmentBotMenuOpen, unmarkAttachmentBotMenuOpen] = useFlag();\n  useEffect(() => {\n    if (isAttachMenuOpen) {\n      markMouseInside();\n    }\n  }, [isAttachMenuOpen, markMouseInside]);\n\n  const handleToggleAttachMenu = useCallback(() => {\n    if (isAttachMenuOpen) {\n      closeAttachMenu();\n    } else {\n      openAttachMenu();\n    }\n  }, [isAttachMenuOpen, openAttachMenu, closeAttachMenu]);\n\n  const handleFileSelect = useCallback((e: Event, shouldSuggestCompression?: boolean) => {\n    const { files } = e.target as HTMLInputElement;\n    const validatedFiles = validateFiles(files);\n\n    if (validatedFiles?.length) {\n      onFileSelect(validatedFiles, shouldSuggestCompression);\n    }\n  }, [onFileSelect]);\n\n  const handleQuickSelect = useCallback(() => {\n    openSystemFilesDialog(\n      Array.from(canSendVideoAndPhoto ? CONTENT_TYPES_WITH_PREVIEW : (\n        canSendPhotos ? SUPPORTED_IMAGE_CONTENT_TYPES : SUPPORTED_VIDEO_CONTENT_TYPES\n      )).join(','),\n      (e) => handleFileSelect(e, true),\n    );\n  }, [canSendPhotos, canSendVideoAndPhoto, handleFileSelect]);\n\n  const handleDocumentSelect = useCallback(() => {\n    openSystemFilesDialog(!canSendDocuments && canSendAudios\n      ? Array.from(SUPPORTED_AUDIO_CONTENT_TYPES).join(',') : (\n        '*'\n      ), (e) => handleFileSelect(e, false));\n  }, [canSendAudios, canSendDocuments, handleFileSelect]);\n\n  const bots = useMemo(() => {\n    return Object.values(attachBots).filter((bot) => {\n      if (!peerType) return false;\n      if (peerType === 'bots' && bot.id === chatId && bot.peerTypes.includes('self')) {\n        return true;\n      }\n      return bot.peerTypes.includes(peerType);\n    });\n  }, [attachBots, chatId, peerType]);\n\n  const lang = useLang();\n\n  if (!isButtonVisible) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"AttachMenu\">\n      <ResponsiveHoverButton\n        id=\"attach-menu-button\"\n        className={isAttachMenuOpen ? 'AttachMenu--button activated' : 'AttachMenu--button'}\n        round\n        color=\"translucent\"\n        onActivate={handleToggleAttachMenu}\n        ariaLabel=\"Add an attachment\"\n        ariaControls=\"attach-menu-controls\"\n        hasPopup\n      >\n        <i className=\"icon-attach\" />\n      </ResponsiveHoverButton>\n      <Menu\n        id=\"attach-menu-controls\"\n        isOpen={isAttachMenuOpen || isAttachmentBotMenuOpen}\n        autoClose\n        positionX=\"right\"\n        positionY=\"bottom\"\n        onClose={closeAttachMenu}\n        className=\"AttachMenu--menu fluid\"\n        onCloseAnimationEnd={closeAttachMenu}\n        onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n        onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n        noCloseOnBackdrop={!IS_TOUCH_ENV}\n        ariaLabelledBy=\"attach-menu-button\"\n      >\n        {/*\n       ** Using ternary operator here causes some attributes from first clause\n       ** transferring to the fragment content in the second clause\n       */}\n        {!canAttachMedia && (\n          <MenuItem className=\"media-disabled\" disabled>Posting media content is not allowed in this group.</MenuItem>\n        )}\n        {canAttachMedia && (\n          <>\n            {canSendVideoOrPhoto && (\n              <MenuItem icon=\"photo\" onClick={handleQuickSelect}>\n                {lang(canSendVideoAndPhoto ? 'AttachmentMenu.PhotoOrVideo'\n                  : (canSendPhotos ? 'InputAttach.Popover.Photo' : 'InputAttach.Popover.Video'))}\n              </MenuItem>\n            )}\n            {(canSendDocuments || canSendAudios)\n              && (\n                <MenuItem icon=\"document\" onClick={handleDocumentSelect}>\n                  {lang(!canSendDocuments && canSendAudios ? 'InputAttach.Popover.Music' : 'AttachDocument')}\n                </MenuItem>\n              )}\n          </>\n        )}\n        {canAttachPolls && (\n          <MenuItem icon=\"poll\" onClick={onPollCreate}>{lang('Poll')}</MenuItem>\n        )}\n\n        {canAttachMedia && !isScheduled && bots.map((bot) => (\n          <AttachBotItem\n            bot={bot}\n            chatId={chatId}\n            threadId={threadId}\n            theme={theme}\n            onMenuOpened={markAttachmentBotMenuOpen}\n            onMenuClosed={unmarkAttachmentBotMenuOpen}\n          />\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nexport default memo(AttachMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './InlineBotTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst InlineBotTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const InlineBotTooltip = useModuleLoader(Bundles.Extra, 'InlineBotTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return InlineBotTooltip ? <InlineBotTooltip {...props} /> : undefined;\n};\n\nexport default memo(InlineBotTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './MentionTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst MentionTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MentionTooltip = useModuleLoader(Bundles.Extra, 'MentionTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MentionTooltip ? <MentionTooltip {...props} /> : undefined;\n};\n\nexport default memo(MentionTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './StickerTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst StickerTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const StickerTooltip = useModuleLoader(Bundles.Extra, 'StickerTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerTooltip ? <StickerTooltip {...props} /> : undefined;\n};\n\nexport default memo(StickerTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandTooltip';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandTooltipAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandTooltip = useModuleLoader(Bundles.Extra, 'BotCommandTooltip', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandTooltip ? <BotCommandTooltip {...props} /> : undefined;\n};\n\nexport default memo(BotCommandTooltipAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { selectChatMessage, selectCurrentMessageList } from '../../../global/selectors';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport Button from '../../ui/Button';\n\nimport './BotKeyboardMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  messageId: number;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  message?: ApiMessage;\n};\n\nconst BotKeyboardMenu: FC<OwnProps & StateProps> = ({\n  isOpen, message, onClose,\n}) => {\n  const { clickBotInlineButton } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n  const { isKeyboardSingleUse } = message || {};\n\n  if (!message || !message.keyboardButtons) {\n    return undefined;\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose={isKeyboardSingleUse}\n      positionX=\"right\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotKeyboardMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCompact\n    >\n      <div className=\"content\">\n        {message.keyboardButtons.map((row) => (\n          <div className=\"row\">\n            {row.map((button) => (\n              <Button\n                ripple\n                disabled={button.type === 'unsupported'}\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => clickBotInlineButton({ messageId: message.id, button })}\n              >\n                {button.text}\n              </Button>\n            ))}\n          </div>\n        ))}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { messageId }): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    if (!chatId) {\n      return {};\n    }\n\n    return { message: selectChatMessage(global, chatId, messageId) };\n  },\n)(BotKeyboardMenu));\n","import React, {\n  memo, useCallback, useEffect, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiChat, ApiMessage, ApiUser } from '../../../api/types';\n\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectForwardedSender,\n  selectUser,\n  selectCurrentMessageList,\n  selectReplyingToId,\n  selectEditingId,\n  selectEditingScheduledId,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectIsCurrentUserPremium,\n  selectTabState,\n} from '../../../global/selectors';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport buildClassName from '../../../util/buildClassName';\nimport { isUserId, stripCustomEmoji } from '../../../global/helpers';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useLang from '../../../hooks/useLang';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\n\nimport Button from '../../ui/Button';\nimport EmbeddedMessage from '../../common/EmbeddedMessage';\nimport MenuItem from '../../ui/MenuItem';\nimport Menu from '../../ui/Menu';\nimport MenuSeparator from '../../ui/MenuSeparator';\n\nimport './ComposerEmbeddedMessage.scss';\n\ntype StateProps = {\n  replyingToId?: number;\n  editingId?: number;\n  message?: ApiMessage;\n  sender?: ApiUser | ApiChat;\n  shouldAnimate?: boolean;\n  forwardedMessagesCount?: number;\n  noAuthors?: boolean;\n  noCaptions?: boolean;\n  forwardsHaveCaptions?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\ntype OwnProps = {\n  onClear?: () => void;\n  shouldForceShowEditing?: boolean;\n};\n\nconst FORWARD_RENDERING_DELAY = 300;\n\nconst ComposerEmbeddedMessage: FC<OwnProps & StateProps> = ({\n  replyingToId,\n  editingId,\n  message,\n  sender,\n  shouldAnimate,\n  forwardedMessagesCount,\n  noAuthors,\n  noCaptions,\n  forwardsHaveCaptions,\n  shouldForceShowEditing,\n  isCurrentUserPremium,\n  onClear,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    focusMessage,\n    changeForwardRecipient,\n    setForwardNoAuthors,\n    setForwardNoCaptions,\n    exitForwardMode,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const isForwarding = Boolean(forwardedMessagesCount);\n  const isShown = Boolean(\n    ((replyingToId || editingId) && message)\n    || (sender && forwardedMessagesCount),\n  );\n  const canAnimate = useAsyncRendering(\n    [forwardedMessagesCount],\n    forwardedMessagesCount ? FORWARD_RENDERING_DELAY : undefined,\n  );\n\n  const {\n    shouldRender, transitionClassNames,\n  } = useShowTransition(canAnimate && isShown, undefined, !shouldAnimate, undefined, !shouldAnimate);\n\n  const clearEmbedded = useCallback(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      setReplyingToId({ messageId: undefined });\n    } else if (editingId) {\n      setEditingId({ messageId: undefined });\n    } else if (forwardedMessagesCount) {\n      exitForwardMode();\n    }\n    onClear?.();\n  }, [\n    replyingToId, shouldForceShowEditing, editingId, forwardedMessagesCount, onClear, setReplyingToId, setEditingId,\n    exitForwardMode,\n  ]);\n\n  useEffect(() => (isShown ? captureEscKeyListener(clearEmbedded) : undefined), [isShown, clearEmbedded]);\n\n  const handleMessageClick = useCallback((): void => {\n    if (isForwarding) return;\n    focusMessage({ chatId: message!.chatId, messageId: message!.id, noForumTopicPanel: true });\n  }, [focusMessage, isForwarding, message]);\n\n  const handleClearClick = useCallback((e: React.MouseEvent<HTMLButtonElement, MouseEvent>): void => {\n    e.stopPropagation();\n    clearEmbedded();\n  }, [clearEmbedded]);\n\n  const handleChangeRecipientClick = useCallback(() => {\n    changeForwardRecipient();\n  }, [changeForwardRecipient]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n  const getRootElement = useCallback(() => ref.current!, []);\n  const getMenuElement = useCallback(() => ref.current!.querySelector('.forward-context-menu .bubble'), []);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const className = buildClassName('ComposerEmbeddedMessage', transitionClassNames);\n\n  const leftIcon = useMemo(() => {\n    if (replyingToId && !shouldForceShowEditing) {\n      return 'icon-reply';\n    }\n    if (editingId) {\n      return 'icon-edit';\n    }\n    if (isForwarding) {\n      return 'icon-forward';\n    }\n\n    return undefined;\n  }, [editingId, isForwarding, replyingToId, shouldForceShowEditing]);\n\n  const customText = forwardedMessagesCount && forwardedMessagesCount > 1\n    ? lang('ForwardedMessageCount', forwardedMessagesCount)\n    : undefined;\n\n  const strippedMessage = useMemo(() => {\n    if (!message || !isForwarding || !message.content.text || !noAuthors || isCurrentUserPremium) return message;\n\n    const strippedText = stripCustomEmoji(message.content.text);\n    return {\n      ...message,\n      content: {\n        ...message.content,\n        text: strippedText,\n      },\n    };\n  }, [isCurrentUserPremium, isForwarding, message, noAuthors]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  return (\n    <div className={className} ref={ref} onContextMenu={handleContextMenu} onClick={handleContextMenu}>\n      <div>\n        <div className=\"embedded-left-icon\">\n          <i className={leftIcon} />\n        </div>\n        <EmbeddedMessage\n          className=\"inside-input\"\n          message={strippedMessage}\n          sender={!noAuthors ? sender : undefined}\n          customText={customText}\n          title={editingId ? lang('EditMessage') : noAuthors ? lang('HiddenSendersNameDescription') : undefined}\n          onClick={handleMessageClick}\n          hasContextMenu={isForwarding}\n        />\n        <Button\n          className=\"embedded-cancel\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Cancel')}\n          onClick={handleClearClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        {isForwarding && (\n          <Menu\n            isOpen={isContextMenuOpen}\n            transformOriginX={transformOriginX}\n            transformOriginY={transformOriginY}\n            positionX={positionX}\n            positionY={positionY}\n            style={menuStyle}\n            className=\"forward-context-menu\"\n            onClose={handleContextMenuClose}\n            onCloseAnimationEnd={handleContextMenuHide}\n          >\n            <MenuItem\n              icon={!noAuthors ? 'message-succeeded' : undefined}\n              customIcon={noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: false,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'ShowSenderNames' : 'ShowSendersName')}\n            </MenuItem>\n            <MenuItem\n              icon={noAuthors ? 'message-succeeded' : undefined}\n              customIcon={!noAuthors ? <i className=\"icon-placeholder\" /> : undefined}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => setForwardNoAuthors({\n                noAuthors: true,\n              })}\n            >\n              {lang(forwardedMessagesCount > 1 ? 'HideSenderNames' : 'HideSendersName')}\n            </MenuItem>\n            {forwardsHaveCaptions && (\n              <>\n                <MenuSeparator />\n                <MenuItem\n                  icon={!noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: false,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.ShowCaption' : 'ShowCaption')}\n                </MenuItem>\n                <MenuItem\n                  icon={noCaptions ? 'message-succeeded' : undefined}\n                  customIcon={!noCaptions ? <i className=\"icon-placeholder\" /> : undefined}\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => setForwardNoCaptions({\n                    noCaptions: true,\n                  })}\n                >\n                  {lang(forwardedMessagesCount > 1 ? 'Conversation.ForwardOptions.HideCaption' : 'HideCaption')}\n                </MenuItem>\n              </>\n            )}\n            <MenuSeparator />\n            <MenuItem icon=\"replace\" onClick={handleChangeRecipientClick}>\n              {lang('ChangeRecipient')}\n            </MenuItem>\n          </Menu>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { shouldForceShowEditing }): StateProps => {\n    const { chatId, threadId, type: messageListType } = selectCurrentMessageList(global) || {};\n    if (!chatId || !threadId || !messageListType) {\n      return {};\n    }\n\n    const {\n      forwardMessages: {\n        fromChatId, toChatId, messageIds: forwardMessageIds, noAuthors, noCaptions,\n      },\n    } = selectTabState(global);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const editingId = messageListType === 'scheduled'\n      ? selectEditingScheduledId(global, chatId)\n      : selectEditingId(global, chatId, threadId);\n    const shouldAnimate = global.settings.byKey.animationLevel >= 1;\n    const isForwarding = toChatId === chatId;\n    const forwardedMessages = forwardMessageIds?.map((id) => selectChatMessage(global, fromChatId!, id)!);\n\n    let message: ApiMessage | undefined;\n    if (replyingToId && !shouldForceShowEditing) {\n      message = selectChatMessage(global, chatId, replyingToId);\n    } else if (editingId) {\n      message = selectEditingMessage(global, chatId, threadId, messageListType);\n    } else if (isForwarding && forwardMessageIds!.length === 1) {\n      message = forwardedMessages?.[0];\n    }\n\n    let sender: ApiChat | ApiUser | undefined;\n    if (replyingToId && message && !shouldForceShowEditing) {\n      const { forwardInfo } = message;\n      const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n      if (forwardInfo && (forwardInfo.isChannelPost || isChatWithSelf)) {\n        sender = selectForwardedSender(global, message);\n      }\n\n      if (!sender && !forwardInfo?.hiddenUserName) {\n        sender = selectSender(global, message);\n      }\n    } else if (isForwarding) {\n      if (message) {\n        sender = selectForwardedSender(global, message);\n        if (!sender) {\n          sender = selectSender(global, message);\n        }\n      }\n      if (!sender) {\n        sender = isUserId(fromChatId!) ? selectUser(global, fromChatId!) : selectChat(global, fromChatId!);\n      }\n    }\n\n    const forwardsHaveCaptions = forwardedMessages?.some((forward) => (\n      forward?.content.text && Object.keys(forward.content).length > 1\n    ));\n\n    return {\n      replyingToId,\n      editingId,\n      message,\n      sender,\n      shouldAnimate,\n      forwardedMessagesCount: isForwarding ? forwardMessageIds!.length : undefined,\n      noAuthors,\n      noCaptions,\n      forwardsHaveCaptions,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n    };\n  },\n)(ComposerEmbeddedMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './AttachmentModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst AttachmentModalAsync: FC<OwnProps> = (props) => {\n  const { attachments } = props;\n  const AttachmentModal = useModuleLoader(Bundles.Extra, 'AttachmentModal', !attachments.length);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachmentModal ? <AttachmentModal {...props} /> : undefined;\n};\n\nexport default memo(AttachmentModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './BotCommandMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst BotCommandMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const BotCommandMenu = useModuleLoader(Bundles.Extra, 'BotCommandMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotCommandMenu ? <BotCommandMenu {...props} /> : undefined;\n};\n\nexport default memo(BotCommandMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './PollModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PollModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PollModal = useModuleLoader(Bundles.Extra, 'PollModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PollModal ? <PollModal {...props} /> : undefined;\n};\n\nexport default memo(PollModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './DropArea';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst DropAreaAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const DropArea = useModuleLoader(Bundles.Extra, 'DropArea', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DropArea ? <DropArea {...props} /> : undefined;\n};\n\nexport default memo(DropAreaAsync);\nexport { DropAreaState } from './DropArea';\n","import type { Signal } from '../../../util/signals';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage, ApiMessageEntityTextUrl, ApiWebPage } from '../../../api/types';\nimport { ApiMessageEntityTypes } from '../../../api/types';\nimport type { ISettings } from '../../../types';\n\nimport { RE_LINK_TEMPLATE } from '../../../config';\nimport { selectTabState, selectNoWebPage, selectTheme } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport useDerivedSignal from '../../../hooks/useDerivedSignal';\nimport { useDebouncedResolver } from '../../../hooks/useAsyncResolvers';\n\nimport WebPage from '../message/WebPage';\nimport Button from '../../ui/Button';\n\nimport './WebPagePreview.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  getHtml: Signal<string>;\n  isDisabled?: boolean;\n};\n\ntype StateProps = {\n  webPagePreview?: ApiWebPage;\n  noWebPage?: boolean;\n  theme: ISettings['theme'];\n};\n\nconst DEBOUNCE_MS = 300;\nconst RE_LINK = new RegExp(RE_LINK_TEMPLATE, 'i');\n\nconst WebPagePreview: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  getHtml,\n  isDisabled,\n  webPagePreview,\n  noWebPage,\n  theme,\n}) => {\n  const {\n    loadWebPagePreview,\n    clearWebPagePreview,\n    toggleMessageWebPage,\n  } = getActions();\n\n  const detectLinkDebounced = useDebouncedResolver(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n    const linkEntity = entities?.find((entity): entity is ApiMessageEntityTextUrl => (\n      entity.type === ApiMessageEntityTypes.TextUrl\n    ));\n\n    return linkEntity?.url || text.match(RE_LINK)?.[0];\n  }, [getHtml], DEBOUNCE_MS, true);\n\n  const getLink = useDerivedSignal(detectLinkDebounced, [detectLinkDebounced, getHtml], true);\n\n  useEffect(() => {\n    const link = getLink();\n\n    if (link) {\n      loadWebPagePreview({ text: link });\n    } else {\n      clearWebPagePreview();\n      toggleMessageWebPage({ chatId, threadId });\n    }\n  }, [getLink, chatId, threadId, clearWebPagePreview, loadWebPagePreview, toggleMessageWebPage]);\n\n  useSyncEffect(() => {\n    clearWebPagePreview();\n    toggleMessageWebPage({ chatId, threadId });\n  }, [chatId, clearWebPagePreview, threadId, toggleMessageWebPage]);\n\n  const isShown = useDerivedState(() => {\n    return Boolean(webPagePreview && getHtml() && !noWebPage && !isDisabled);\n  }, [isDisabled, getHtml, noWebPage, webPagePreview]);\n  const { shouldRender, transitionClassNames } = useShowTransition(isShown);\n\n  const renderingWebPage = useCurrentOrPrev(webPagePreview, true);\n\n  const handleClearWebpagePreview = useCallback(() => {\n    toggleMessageWebPage({ chatId, threadId, noWebPage: true });\n  }, [chatId, threadId, toggleMessageWebPage]);\n\n  if (!shouldRender || !renderingWebPage) {\n    return undefined;\n  }\n\n  // TODO Refactor so `WebPage` can be used without message\n  const { photo, ...webPageWithoutPhoto } = renderingWebPage;\n  const messageStub = {\n    content: {\n      webPage: webPageWithoutPhoto,\n    },\n  } as ApiMessage;\n\n  return (\n    <div className={buildClassName('WebPagePreview', transitionClassNames)}>\n      <div>\n        <div className=\"WebPagePreview-left-icon\">\n          <i className=\"icon-link\" />\n        </div>\n        <WebPage message={messageStub} inPreview theme={theme} />\n        <Button\n          className=\"WebPagePreview-clear\"\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel=\"Clear Webpage Preview\"\n          onClick={handleClearWebpagePreview}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, threadId }): StateProps => {\n    const noWebPage = selectNoWebPage(global, chatId, threadId);\n    return {\n      theme: selectTheme(global),\n      webPagePreview: selectTabState(global).webPagePreview,\n      noWebPage,\n    };\n  },\n)(WebPagePreview));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { OwnProps } from './SendAsMenu';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst SendAsMenuAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SendAsMenu = useModuleLoader(Bundles.Extra, 'SendAsMenu', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SendAsMenu ? <SendAsMenu {...props} /> : undefined;\n};\n\nexport default memo(SendAsMenuAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  isOpen?: boolean;\n  onClick: VoidFunction;\n  text: string;\n  isDisabled?: boolean;\n};\n\nconst BotMenuButton: FC<OwnProps> = ({\n  isOpen,\n  onClick,\n  text,\n  isDisabled,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const textRef = useRef<HTMLSpanElement>(null);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return;\n\n    const width = textEl.scrollWidth + 1; // Make width slightly bigger prevent ellipsis in some cases\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n    composerEl.style.setProperty('--bot-menu-text-width', `${width}px`);\n  }, [isOpen, text]);\n\n  useEffect(() => {\n    const textEl = textRef.current;\n    if (!textEl) return undefined;\n\n    const composerEl = textEl.closest('.Composer') as HTMLElement;\n\n    return () => {\n      composerEl.style.removeProperty('--bot-menu-text-width');\n    };\n  }, []);\n\n  return (\n    <Button\n      className={buildClassName('bot-menu', isOpen && 'open')}\n      round\n      color=\"translucent\"\n      disabled={isDisabled}\n      onClick={onClick}\n      ariaLabel=\"Open bot command keyboard\"\n    >\n      <i className={buildClassName('bot-menu-icon', 'icon-webapp', isOpen && 'open')} />\n      <span ref={textRef} className=\"bot-menu-text\">{text}</span>\n    </Button>\n  );\n};\n\nexport default memo(BotMenuButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useMemo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  TabState, MessageListType, GlobalState, ApiDraft,\n} from '../../../global/types';\nimport type {\n  ApiAttachment,\n  ApiBotInlineResult,\n  ApiBotInlineMediaResult,\n  ApiSticker,\n  ApiVideo,\n  ApiNewPoll,\n  ApiMessage,\n  ApiFormattedText,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiBotCommand,\n  ApiBotMenuButton,\n  ApiAttachMenuPeerType,\n} from '../../../api/types';\nimport type { InlineBotSettings, ISettings } from '../../../types';\n\nimport {\n  BASE_EMOJI_KEYWORD_LANG,\n  EDITABLE_INPUT_ID,\n  REPLIES_USER_ID,\n  SEND_MESSAGE_ACTION_INTERVAL,\n  EDITABLE_INPUT_CSS_SELECTOR,\n  MAX_UPLOAD_FILEPART_SIZE, EDITABLE_INPUT_MODAL_ID,\n} from '../../../config';\nimport { IS_VOICE_RECORDING_SUPPORTED, IS_IOS } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport {\n  selectChat,\n  selectIsRightColumnShown,\n  selectIsInSelectMode,\n  selectNewestMessageWithBotKeyboardButtons,\n  selectDraft,\n  selectScheduledIds,\n  selectEditingMessage,\n  selectIsChatWithSelf,\n  selectChatBot,\n  selectChatMessage,\n  selectUser,\n  selectCanScheduleUntilOnline,\n  selectEditingScheduledDraft,\n  selectEditingDraft,\n  selectRequestedDraftText,\n  selectTheme,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectChatType,\n  selectRequestedDraftFiles,\n  selectTabState,\n  selectReplyingToId,\n} from '../../../global/selectors';\nimport {\n  getAllowedAttachmentOptions,\n  getChatSlowModeOptions,\n  isChatAdmin,\n  isChatSuperGroup,\n  isChatChannel,\n  isUserId,\n} from '../../../global/helpers';\nimport { formatMediaDuration, formatVoiceRecordDuration } from '../../../util/dateFormat';\nimport focusEditableElement from '../../../util/focusEditableElement';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport buildAttachment, { prepareAttachmentsToSend } from './helpers/buildAttachment';\nimport renderText from '../../common/helpers/renderText';\nimport { insertHtmlInSelection } from '../../../util/selection';\nimport deleteLastCharacterOutsideSelection from '../../../util/deleteLastCharacterOutsideSelection';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\nimport { isSelectionInsideInput } from './helpers/selection';\nimport applyIosAutoCapitalizationFix from './helpers/applyIosAutoCapitalizationFix';\nimport { getServerTime } from '../../../util/serverTime';\nimport { selectCurrentLimit } from '../../../global/selectors/limits';\nimport { buildCustomEmojiHtml } from './helpers/customEmoji';\nimport { processMessageInputForCustomEmoji } from '../../../util/customEmojiManager';\nimport { getTextWithEntitiesAsHtml } from '../../common/helpers/renderTextWithEntities';\n\nimport useSignal from '../../../hooks/useSignal';\nimport useFlag from '../../../hooks/useFlag';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useStickerTooltip from './hooks/useStickerTooltip';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport useInterval from '../../../hooks/useInterval';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useVoiceRecording from './hooks/useVoiceRecording';\nimport useClipboardPaste from './hooks/useClipboardPaste';\nimport useEditing from './hooks/useEditing';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useInlineBotTooltip from './hooks/useInlineBotTooltip';\nimport useBotCommandTooltip from './hooks/useBotCommandTooltip';\nimport useSchedule from '../../../hooks/useSchedule';\nimport useCustomEmojiTooltip from './hooks/useCustomEmojiTooltip';\nimport useAttachmentModal from './hooks/useAttachmentModal';\nimport useGetSelectionRange from '../../../hooks/useGetSelectionRange';\nimport useDerivedState from '../../../hooks/useDerivedState';\nimport { useStateRef } from '../../../hooks/useStateRef';\nimport useDraft from './hooks/useDraft';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal.async';\nimport Button from '../../ui/Button';\nimport ResponsiveHoverButton from '../../ui/ResponsiveHoverButton';\nimport Spinner from '../../ui/Spinner';\nimport AttachMenu from './AttachMenu';\nimport Avatar from '../../common/Avatar';\nimport InlineBotTooltip from './InlineBotTooltip.async';\nimport MentionTooltip from './MentionTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\nimport StickerTooltip from './StickerTooltip.async';\nimport CustomEmojiTooltip from './CustomEmojiTooltip.async';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport BotCommandTooltip from './BotCommandTooltip.async';\nimport BotKeyboardMenu from './BotKeyboardMenu';\nimport MessageInput from './MessageInput';\nimport ComposerEmbeddedMessage from './ComposerEmbeddedMessage';\nimport AttachmentModal from './AttachmentModal.async';\nimport BotCommandMenu from './BotCommandMenu.async';\nimport PollModal from './PollModal.async';\nimport DropArea, { DropAreaState } from './DropArea.async';\nimport WebPagePreview from './WebPagePreview';\nimport SendAsMenu from './SendAsMenu.async';\nimport BotMenuButton from './BotMenuButton';\nimport SymbolMenuButton from './SymbolMenuButton';\n\nimport './Composer.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId: number;\n  messageListType: MessageListType;\n  dropAreaState: string;\n  isReady: boolean;\n  isMobile?: boolean;\n  onDropHide: NoneToVoidFunction;\n};\n\ntype StateProps =\n  {\n    editingMessage?: ApiMessage;\n    chat?: ApiChat;\n    draft?: ApiDraft;\n    isChatWithBot?: boolean;\n    isChatWithSelf?: boolean;\n    isChannel?: boolean;\n    replyingToId?: number;\n    isForCurrentMessageList: boolean;\n    isRightColumnShown?: boolean;\n    isSelectModeActive?: boolean;\n    isForwarding?: boolean;\n    pollModal: TabState['pollModal'];\n    botKeyboardMessageId?: number;\n    botKeyboardPlaceholder?: string;\n    withScheduledButton?: boolean;\n    shouldSchedule?: boolean;\n    canScheduleUntilOnline?: boolean;\n    stickersForEmoji?: ApiSticker[];\n    customEmojiForEmoji?: ApiSticker[];\n    groupChatMembers?: ApiChatMember[];\n    currentUserId?: string;\n    recentEmojis: string[];\n    lastSyncTime?: number;\n    contentToBeScheduled?: TabState['contentToBeScheduled'];\n    shouldSuggestStickers?: boolean;\n    shouldSuggestCustomEmoji?: boolean;\n    baseEmojiKeywords?: Record<string, string[]>;\n    emojiKeywords?: Record<string, string[]>;\n    topInlineBotIds?: string[];\n    isInlineBotLoading: boolean;\n    inlineBots?: Record<string, false | InlineBotSettings>;\n    botCommands?: ApiBotCommand[] | false;\n    botMenuButton?: ApiBotMenuButton;\n    chatBotCommands?: ApiBotCommand[];\n    sendAsUser?: ApiUser;\n    sendAsChat?: ApiChat;\n    sendAsId?: string;\n    editingDraft?: ApiFormattedText;\n    requestedDraftText?: string;\n    requestedDraftFiles?: File[];\n    attachBots: GlobalState['attachMenu']['bots'];\n    attachMenuPeerType?: ApiAttachMenuPeerType;\n    theme: ISettings['theme'];\n    fileSizeLimit: number;\n    captionLimit: number;\n    isCurrentUserPremium?: boolean;\n    canSendVoiceByPrivacy?: boolean;\n    attachmentSettings: GlobalState['attachmentSettings'];\n  }\n  & Pick<GlobalState, 'connectionState'>;\n\nenum MainButtonState {\n  Send = 'send',\n  Record = 'record',\n  Edit = 'edit',\n  Schedule = 'schedule',\n}\n\ntype ScheduledMessageArgs = TabState['contentToBeScheduled'] | {\n  id: string; queryId: string; isSilent?: boolean;\n};\n\nconst VOICE_RECORDING_FILENAME = 'wonderful-voice-message.ogg';\n// When voice recording is active, composer placeholder will hide to prevent overlapping\nconst SCREEN_WIDTH_TO_HIDE_PLACEHOLDER = 600; // px\n\nconst MOBILE_KEYBOARD_HIDE_DELAY_MS = 100;\nconst SELECT_MODE_TRANSITION_MS = 200;\nconst MESSAGE_MAX_LENGTH = 4096;\nconst SENDING_ANIMATION_DURATION = 350;\n// eslint-disable-next-line max-len\nconst APPENDIX = '<svg width=\"9\" height=\"20\" xmlns=\"http://www.w3.org/2000/svg\"><defs><filter x=\"-50%\" y=\"-14.7%\" width=\"200%\" height=\"141.2%\" filterUnits=\"objectBoundingBox\" id=\"a\"><feOffset dy=\"1\" in=\"SourceAlpha\" result=\"shadowOffsetOuter1\"/><feGaussianBlur stdDeviation=\"1\" in=\"shadowOffsetOuter1\" result=\"shadowBlurOuter1\"/><feColorMatrix values=\"0 0 0 0 0.0621962482 0 0 0 0 0.138574144 0 0 0 0 0.185037364 0 0 0 0.15 0\" in=\"shadowBlurOuter1\"/></filter></defs><g fill=\"none\" fill-rule=\"evenodd\"><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#000\" filter=\"url(#a)\"/><path d=\"M6 17H0V0c.193 2.84.876 5.767 2.05 8.782.904 2.325 2.446 4.485 4.625 6.48A1 1 0 016 17z\" fill=\"#FFF\" class=\"corner\"/></g></svg>';\n\nconst Composer: FC<OwnProps & StateProps> = ({\n  dropAreaState,\n  shouldSchedule,\n  canScheduleUntilOnline,\n  isReady,\n  isMobile,\n  onDropHide,\n  editingMessage,\n  chatId,\n  threadId,\n  messageListType,\n  draft,\n  chat,\n  isForCurrentMessageList,\n  isCurrentUserPremium,\n  canSendVoiceByPrivacy,\n  connectionState,\n  isChatWithBot,\n  isChatWithSelf,\n  isChannel,\n  fileSizeLimit,\n  isRightColumnShown,\n  isSelectModeActive,\n  isForwarding,\n  pollModal,\n  botKeyboardMessageId,\n  botKeyboardPlaceholder,\n  withScheduledButton,\n  stickersForEmoji,\n  customEmojiForEmoji,\n  groupChatMembers,\n  topInlineBotIds,\n  currentUserId,\n  captionLimit,\n  lastSyncTime,\n  contentToBeScheduled,\n  shouldSuggestStickers,\n  shouldSuggestCustomEmoji,\n  baseEmojiKeywords,\n  emojiKeywords,\n  recentEmojis,\n  inlineBots,\n  isInlineBotLoading,\n  botCommands,\n  chatBotCommands,\n  sendAsUser,\n  sendAsChat,\n  sendAsId,\n  editingDraft,\n  replyingToId,\n  requestedDraftText,\n  requestedDraftFiles,\n  botMenuButton,\n  attachBots,\n  attachMenuPeerType,\n  attachmentSettings,\n  theme,\n}) => {\n  const {\n    sendMessage,\n    clearDraft,\n    showDialog,\n    forwardMessages,\n    openPollModal,\n    closePollModal,\n    loadScheduledHistory,\n    openChat,\n    addRecentEmoji,\n    sendInlineBotResult,\n    loadSendAs,\n    resetOpenChatWithDraft,\n    callAttachBot,\n    addRecentCustomEmoji,\n    showNotification,\n    showAllowedMessageTypesNotification,\n  } = getActions();\n\n  const lang = useLang();\n\n  // eslint-disable-next-line no-null/no-null\n  const appendixRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLDivElement>(null);\n\n  const [getHtml, setHtml] = useSignal('');\n  const getSelectionRange = useGetSelectionRange(EDITABLE_INPUT_CSS_SELECTOR);\n  const lastMessageSendTimeSeconds = useRef<number>();\n  const prevDropAreaState = usePrevious(dropAreaState);\n  const { width: windowWidth } = windowSize.get();\n  const sendAsPeerIds = chat?.sendAsPeerIds;\n  const canShowSendAs = sendAsPeerIds\n    && (sendAsPeerIds.length > 1 || !sendAsPeerIds.some((peer) => peer.id === currentUserId!));\n  // Prevent Symbol Menu from closing when calendar is open\n  const [isSymbolMenuForced, forceShowSymbolMenu, cancelForceShowSymbolMenu] = useFlag();\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  useEffect(processMessageInputForCustomEmoji, [getHtml]);\n\n  const customEmojiNotificationNumber = useRef(0);\n\n  const handleScheduleCancel = useCallback(() => {\n    cancelForceShowSymbolMenu();\n  }, [cancelForceShowSymbolMenu]);\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline, handleScheduleCancel);\n\n  useEffect(() => {\n    lastMessageSendTimeSeconds.current = undefined;\n  }, [chatId]);\n\n  useEffect(() => {\n    if (chatId && lastSyncTime && isReady) {\n      loadScheduledHistory({ chatId });\n    }\n  }, [isReady, chatId, loadScheduledHistory, lastSyncTime, threadId]);\n\n  useEffect(() => {\n    if (chatId && chat && lastSyncTime && !sendAsPeerIds && isReady && isChatSuperGroup(chat)) {\n      loadSendAs({ chatId });\n    }\n  }, [chat, chatId, isReady, lastSyncTime, loadSendAs, sendAsPeerIds]);\n\n  const shouldAnimateSendAsButtonRef = useRef(false);\n  useSyncEffect(([prevChatId, prevSendAsPeerIds]) => {\n    // We only animate send-as button if `sendAsPeerIds` was missing when opening the chat\n    shouldAnimateSendAsButtonRef.current = Boolean(chatId === prevChatId && sendAsPeerIds && !prevSendAsPeerIds);\n  }, [chatId, sendAsPeerIds]);\n\n  useLayoutEffect(() => {\n    if (!appendixRef.current) return;\n\n    appendixRef.current.innerHTML = APPENDIX;\n  }, []);\n\n  const [attachments, setAttachments] = useState<ApiAttachment[]>([]);\n  const hasAttachments = Boolean(attachments.length);\n\n  const {\n    canSendStickers, canSendGifs, canAttachMedia, canAttachPolls, canAttachEmbedLinks,\n    canSendVoices, canSendPlainText, canSendAudios, canSendVideos, canSendPhotos, canSendDocuments,\n  } = useMemo(() => getAllowedAttachmentOptions(chat, isChatWithBot), [chat, isChatWithBot]);\n\n  const isComposerBlocked = !canSendPlainText && !editingMessage;\n\n  const {\n    shouldSuggestCompression,\n    shouldForceCompression,\n    shouldForceAsFile,\n    handleAppendFiles,\n    handleFileSelect,\n    onCaptionUpdate,\n    handleClearAttachments,\n    handleSetAttachments,\n  } = useAttachmentModal({\n    attachments,\n    setHtml,\n    setAttachments,\n    fileSizeLimit,\n    chatId,\n    canSendAudios,\n    canSendVideos,\n    canSendPhotos,\n    canSendDocuments,\n  });\n\n  const [isBotKeyboardOpen, openBotKeyboard, closeBotKeyboard] = useFlag();\n  const [isBotCommandMenuOpen, openBotCommandMenu, closeBotCommandMenu] = useFlag();\n  const [isSymbolMenuOpen, openSymbolMenu, closeSymbolMenu] = useFlag();\n  const [isSendAsMenuOpen, openSendAsMenu, closeSendAsMenu] = useFlag();\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isHoverDisabled, disableHover, enableHover] = useFlag();\n\n  const {\n    startRecordingVoice,\n    stopRecordingVoice,\n    pauseRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef: mainButtonRef,\n    startRecordTimeRef,\n  } = useVoiceRecording();\n\n  useInterval(() => {\n    sendMessageAction({ type: 'recordAudio' });\n  }, activeVoiceRecording && SEND_MESSAGE_ACTION_INTERVAL);\n\n  useEffect(() => {\n    if (!activeVoiceRecording) {\n      sendMessageAction({ type: 'cancel' });\n    }\n  }, [activeVoiceRecording, sendMessageAction]);\n\n  const isEditingRef = useStateRef(Boolean(editingMessage));\n  useEffect(() => {\n    if (getHtml() && !isEditingRef.current) {\n      sendMessageAction({ type: 'typing' });\n    }\n  }, [getHtml, isEditingRef, sendMessageAction]);\n\n  const isAdmin = chat && isChatAdmin(chat);\n  const slowMode = getChatSlowModeOptions(chat);\n\n  const {\n    isEmojiTooltipOpen,\n    closeEmojiTooltip,\n    filteredEmojis,\n    filteredCustomEmojis,\n    insertEmoji,\n  } = useEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && !hasAttachments),\n    getHtml,\n    setHtml,\n    undefined,\n    recentEmojis,\n    baseEmojiKeywords,\n    emojiKeywords,\n  );\n\n  const {\n    isCustomEmojiTooltipOpen,\n    closeCustomEmojiTooltip,\n    insertCustomEmoji,\n  } = useCustomEmojiTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestCustomEmoji && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    customEmojiForEmoji,\n  );\n\n  const {\n    isStickerTooltipOpen,\n    closeStickerTooltip,\n  } = useStickerTooltip(\n    Boolean(isReady && isForCurrentMessageList && shouldSuggestStickers && canSendStickers && !hasAttachments),\n    getHtml,\n    stickersForEmoji,\n  );\n\n  const {\n    isMentionTooltipOpen,\n    closeMentionTooltip,\n    insertMention,\n    mentionFilteredUsers,\n  } = useMentionTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments),\n    getHtml,\n    setHtml,\n    getSelectionRange,\n    inputRef,\n    groupChatMembers,\n    topInlineBotIds,\n    currentUserId,\n  );\n\n  const {\n    isOpen: isInlineBotTooltipOpen,\n    botId: inlineBotId,\n    isGallery: isInlineBotTooltipGallery,\n    switchPm: inlineBotSwitchPm,\n    results: inlineBotResults,\n    closeTooltip: closeInlineBotTooltip,\n    help: inlineBotHelp,\n    loadMore: loadMoreForInlineBot,\n  } = useInlineBotTooltip(\n    Boolean(isReady && isForCurrentMessageList && !hasAttachments && lastSyncTime),\n    chatId,\n    getHtml,\n    inlineBots,\n  );\n\n  const {\n    isOpen: isBotCommandTooltipOpen,\n    close: closeBotCommandTooltip,\n    filteredBotCommands: botTooltipCommands,\n  } = useBotCommandTooltip(\n    Boolean(isReady && isForCurrentMessageList && ((botCommands && botCommands?.length) || chatBotCommands?.length)),\n    getHtml,\n    botCommands,\n    chatBotCommands,\n  );\n\n  const insertHtmlAndUpdateCursor = useCallback((newHtml: string, inputId: string = EDITABLE_INPUT_ID) => {\n    if (inputId === EDITABLE_INPUT_ID && isComposerBlocked) return;\n    const selection = window.getSelection()!;\n    let messageInput: HTMLDivElement;\n    if (inputId === EDITABLE_INPUT_ID) {\n      messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR)!;\n    } else {\n      messageInput = document.getElementById(inputId) as HTMLDivElement;\n    }\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        insertHtmlInSelection(newHtml);\n        messageInput.dispatchEvent(new Event('input', { bubbles: true }));\n        return;\n      }\n    }\n\n    setHtml(`${getHtml()}${newHtml}`);\n\n    // If selection is outside of input, set cursor at the end of input\n    requestAnimationFrame(() => {\n      focusEditableElement(messageInput);\n    });\n  }, [isComposerBlocked, getHtml, setHtml]);\n\n  const insertFormattedTextAndUpdateCursor = useCallback((\n    text: ApiFormattedText, inputId: string = EDITABLE_INPUT_ID,\n  ) => {\n    const newHtml = getTextWithEntitiesAsHtml(text);\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  const insertCustomEmojiAndUpdateCursor = useCallback((emoji: ApiSticker, inputId: string = EDITABLE_INPUT_ID) => {\n    insertHtmlAndUpdateCursor(buildCustomEmojiHtml(emoji), inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useDraft(draft, chatId, threadId, getHtml, setHtml, editingMessage, lastSyncTime);\n\n  const resetComposer = useCallback((shouldPreserveInput = false) => {\n    if (!shouldPreserveInput) {\n      setHtml('');\n    }\n\n    setAttachments(MEMO_EMPTY_ARRAY);\n\n    closeEmojiTooltip();\n    closeCustomEmojiTooltip();\n    closeStickerTooltip();\n    closeMentionTooltip();\n\n    if (isMobile) {\n      // @optimization\n      setTimeout(() => closeSymbolMenu(), SENDING_ANIMATION_DURATION);\n    } else {\n      closeSymbolMenu();\n    }\n  }, [\n    setHtml, isMobile, closeStickerTooltip, closeCustomEmojiTooltip, closeMentionTooltip, closeEmojiTooltip,\n    closeSymbolMenu,\n  ]);\n\n  const [handleEditComplete, handleEditCancel, shouldForceShowEditing] = useEditing(\n    getHtml,\n    setHtml,\n    editingMessage,\n    resetComposer,\n    openDeleteModal,\n    chatId,\n    threadId,\n    messageListType,\n    draft,\n    editingDraft,\n    replyingToId,\n  );\n\n  // Handle chat change (should be placed after `useDraft` and `useEditing`)\n  const resetComposerRef = useStateRef(resetComposer);\n  const stopRecordingVoiceRef = useStateRef(stopRecordingVoice);\n  useEffect(() => {\n    return () => {\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      stopRecordingVoiceRef.current();\n      // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n      resetComposerRef.current();\n    };\n  }, [chatId, threadId, resetComposerRef, stopRecordingVoiceRef]);\n\n  const showCustomEmojiPremiumNotification = useCallback(() => {\n    const notificationNumber = customEmojiNotificationNumber.current;\n    if (!notificationNumber) {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint'),\n        action: {\n          action: 'openPremiumModal',\n          payload: { initialSection: 'animated_emoji' },\n        },\n        actionText: lang('PremiumMore'),\n      });\n    } else {\n      showNotification({\n        message: lang('UnlockPremiumEmojiHint2'),\n        action: {\n          action: 'openChat',\n          payload: { id: currentUserId, shouldReplaceHistory: true },\n        },\n        actionText: lang('Open'),\n      });\n    }\n    customEmojiNotificationNumber.current = Number(!notificationNumber);\n  }, [currentUserId, lang, showNotification]);\n\n  const mainButtonState = useDerivedState(() => {\n    if (editingMessage && shouldForceShowEditing) {\n      return MainButtonState.Edit;\n    }\n\n    if (IS_VOICE_RECORDING_SUPPORTED && !activeVoiceRecording && !isForwarding && !(getHtml() && !hasAttachments)) {\n      return MainButtonState.Record;\n    }\n\n    if (shouldSchedule) {\n      return MainButtonState.Schedule;\n    }\n\n    return MainButtonState.Send;\n  }, [\n    activeVoiceRecording, editingMessage, getHtml, hasAttachments, isForwarding, shouldForceShowEditing, shouldSchedule,\n  ]);\n  const canShowCustomSendMenu = !shouldSchedule;\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !(mainButtonState === MainButtonState.Send && canShowCustomSendMenu));\n\n  useClipboardPaste(\n    isForCurrentMessageList,\n    insertFormattedTextAndUpdateCursor,\n    handleSetAttachments,\n    editingMessage,\n    !isCurrentUserPremium && !isChatWithSelf,\n    showCustomEmojiPremiumNotification,\n  );\n\n  const handleEmbeddedClear = useCallback(() => {\n    if (editingMessage) {\n      handleEditCancel();\n    }\n  }, [editingMessage, handleEditCancel]);\n\n  const validateTextLength = useCallback((text: string, isAttachmentModal?: boolean) => {\n    const maxLength = isAttachmentModal ? captionLimit : MESSAGE_MAX_LENGTH;\n    if (text?.length > maxLength) {\n      const extraLength = text.length - maxLength;\n      showDialog({\n        data: {\n          message: 'MESSAGE_TOO_LONG_PLEASE_REMOVE_CHARACTERS',\n          textParams: {\n            '{EXTRA_CHARS_COUNT}': extraLength.toString(),\n            '{PLURAL_S}': extraLength > 1 ? 's' : '',\n          },\n          hasErrorKey: true,\n        },\n      });\n\n      return false;\n    }\n    return true;\n  }, [captionLimit, showDialog]);\n\n  const checkSlowMode = useCallback(() => {\n    if (slowMode && !isAdmin) {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n      const nowSeconds = getServerTime();\n      const secondsSinceLastMessage = lastMessageSendTimeSeconds.current\n        && Math.floor(nowSeconds - lastMessageSendTimeSeconds.current);\n      const nextSendDateNotReached = slowMode.nextSendDate && slowMode.nextSendDate > nowSeconds;\n\n      if (\n        (secondsSinceLastMessage && secondsSinceLastMessage < slowMode.seconds)\n        || nextSendDateNotReached\n      ) {\n        const secondsRemaining = nextSendDateNotReached\n          ? slowMode.nextSendDate! - nowSeconds\n          : slowMode.seconds - secondsSinceLastMessage!;\n        showDialog({\n          data: {\n            message: lang('SlowModeHint', formatMediaDuration(secondsRemaining)),\n            isSlowMode: true,\n            hasErrorKey: false,\n          },\n        });\n\n        messageInput?.blur();\n\n        return false;\n      }\n    }\n    return true;\n  }, [isAdmin, lang, showDialog, slowMode]);\n\n  const sendAttachments = useCallback(({\n    attachments: attachmentsToSend,\n    sendCompressed = attachmentSettings.shouldCompress,\n    sendGrouped = attachmentSettings.shouldSendGrouped,\n    isSilent,\n    scheduledAt,\n  }: {\n    attachments: ApiAttachment[];\n    sendCompressed?: boolean;\n    sendGrouped?: boolean;\n    isSilent?: boolean;\n    scheduledAt?: number;\n  }) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n    if (!text && !attachmentsToSend.length) {\n      return;\n    }\n    if (!validateTextLength(text, true)) return;\n    if (!checkSlowMode()) return;\n\n    sendMessage({\n      text,\n      entities,\n      scheduledAt,\n      isSilent,\n      shouldUpdateStickerSetsOrder: true,\n      attachments: prepareAttachmentsToSend(attachmentsToSend, sendCompressed),\n      shouldGroupMessages: sendGrouped,\n    });\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    attachmentSettings.shouldCompress, attachmentSettings.shouldSendGrouped, connectionState, getHtml,\n    validateTextLength, checkSlowMode, sendMessage, clearDraft, chatId, resetComposer,\n  ]);\n\n  const handleSendAttachments = useCallback((\n    sendCompressed: boolean,\n    sendGrouped: boolean,\n    isSilent?: boolean,\n    scheduledAt?: number,\n  ) => {\n    sendAttachments({\n      attachments,\n      sendCompressed,\n      sendGrouped,\n      isSilent,\n      scheduledAt,\n    });\n  }, [attachments, sendAttachments]);\n\n  const handleSend = useCallback(async (isSilent = false, scheduledAt?: number) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    let currentAttachments = attachments;\n\n    if (activeVoiceRecording) {\n      const record = await stopRecordingVoice();\n      if (record) {\n        const { blob, duration, waveform } = record;\n        currentAttachments = [await buildAttachment(\n          VOICE_RECORDING_FILENAME,\n          blob,\n          { voice: { duration, waveform } },\n        )];\n      }\n    }\n\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (currentAttachments.length) {\n      sendAttachments({\n        attachments: currentAttachments,\n      });\n      return;\n    }\n\n    if (!text && !isForwarding) {\n      return;\n    }\n\n    if (!validateTextLength(text)) return;\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (text) {\n      if (!checkSlowMode()) return;\n\n      sendMessage({\n        text,\n        entities,\n        scheduledAt,\n        isSilent,\n        shouldUpdateStickerSetsOrder: true,\n      });\n    }\n\n    if (isForwarding) {\n      forwardMessages({\n        scheduledAt,\n        isSilent,\n      });\n    }\n\n    lastMessageSendTimeSeconds.current = getServerTime();\n\n    clearDraft({ chatId, localOnly: true });\n\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    // Wait until message animation starts\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    connectionState, attachments, activeVoiceRecording, getHtml, isForwarding, validateTextLength, clearDraft,\n    chatId, stopRecordingVoice, sendAttachments, checkSlowMode, sendMessage, forwardMessages, resetComposer,\n  ]);\n\n  const handleClickBotMenu = useCallback(() => {\n    if (botMenuButton?.type !== 'webApp') {\n      return;\n    }\n\n    callAttachBot({\n      chatId, url: botMenuButton.url, threadId,\n    });\n  }, [botMenuButton, callAttachBot, chatId, threadId]);\n\n  const handleActivateBotCommandMenu = useCallback(() => {\n    closeSymbolMenu();\n    openBotCommandMenu();\n  }, [closeSymbolMenu, openBotCommandMenu]);\n\n  const handleMessageSchedule = useCallback((\n    args: ScheduledMessageArgs, scheduledAt: number,\n  ) => {\n    if (args && 'queryId' in args) {\n      const { id, queryId, isSilent } = args;\n      sendInlineBotResult({\n        id,\n        queryId,\n        scheduledAt,\n        isSilent,\n      });\n      return;\n    }\n\n    const { isSilent, ...restArgs } = args || {};\n\n    if (!args || Object.keys(restArgs).length === 0) {\n      void handleSend(Boolean(isSilent), scheduledAt);\n    } else if (args.sendCompressed !== undefined || args.sendGrouped !== undefined) {\n      const { sendCompressed = false, sendGrouped = false } = args;\n      void handleSendAttachments(sendCompressed, sendGrouped, isSilent, scheduledAt);\n    } else {\n      sendMessage({\n        ...args,\n        scheduledAt,\n      });\n    }\n  }, [handleSendAttachments, handleSend, sendInlineBotResult, sendMessage]);\n\n  useEffect(() => {\n    if (contentToBeScheduled) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule(contentToBeScheduled, scheduledAt);\n      });\n    }\n  }, [contentToBeScheduled, handleMessageSchedule, requestCalendar]);\n\n  useEffect(() => {\n    if (requestedDraftText) {\n      setHtml(requestedDraftText);\n      resetOpenChatWithDraft();\n      requestAnimationFrame(() => {\n        const messageInput = document.getElementById(EDITABLE_INPUT_ID)!;\n        focusEditableElement(messageInput, true);\n      });\n    }\n  }, [requestedDraftText, resetOpenChatWithDraft, setHtml]);\n\n  useEffect(() => {\n    if (requestedDraftFiles?.length) {\n      handleFileSelect(requestedDraftFiles);\n      resetOpenChatWithDraft();\n    }\n  }, [handleFileSelect, requestedDraftFiles, resetOpenChatWithDraft]);\n\n  const handleCustomEmojiSelect = useCallback((emoji: ApiSticker, inputId?: string) => {\n    if (!emoji.isFree && !isCurrentUserPremium && !isChatWithSelf) {\n      showCustomEmojiPremiumNotification();\n      return;\n    }\n\n    insertCustomEmojiAndUpdateCursor(emoji, inputId);\n  }, [insertCustomEmojiAndUpdateCursor, isChatWithSelf, isCurrentUserPremium, showCustomEmojiPremiumNotification]);\n\n  const handleCustomEmojiSelectAttachmentModal = useCallback((emoji: ApiSticker) => {\n    handleCustomEmojiSelect(emoji, EDITABLE_INPUT_MODAL_ID);\n  }, [handleCustomEmojiSelect]);\n\n  const handleGifSelect = useCallback((gif: ApiVideo, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ gif, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(true);\n        });\n      });\n    } else {\n      sendMessage({ gif, isSilent });\n      requestAnimationFrame(() => {\n        resetComposer(true);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleStickerSelect = useCallback((\n    sticker: ApiSticker,\n    isSilent?: boolean,\n    isScheduleRequested?: boolean,\n    shouldPreserveInput = false,\n    shouldUpdateStickerSetsOrder?: boolean,\n  ) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      forceShowSymbolMenu();\n      requestCalendar((scheduledAt) => {\n        cancelForceShowSymbolMenu();\n        handleMessageSchedule({ sticker, isSilent }, scheduledAt);\n        requestAnimationFrame(() => {\n          resetComposer(shouldPreserveInput);\n        });\n      });\n    } else {\n      sendMessage({ sticker, isSilent, shouldUpdateStickerSetsOrder });\n      requestAnimationFrame(() => {\n        resetComposer(shouldPreserveInput);\n      });\n    }\n  }, [\n    shouldSchedule, forceShowSymbolMenu, requestCalendar, cancelForceShowSymbolMenu, handleMessageSchedule,\n    resetComposer, sendMessage,\n  ]);\n\n  const handleInlineBotSelect = useCallback((\n    inlineResult: ApiBotInlineResult | ApiBotInlineMediaResult, isSilent?: boolean, isScheduleRequested?: boolean,\n  ) => {\n    if (connectionState !== 'connectionStateReady') {\n      return;\n    }\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({\n          id: inlineResult.id,\n          queryId: inlineResult.queryId,\n          isSilent,\n        }, scheduledAt);\n      });\n    } else {\n      sendInlineBotResult({\n        id: inlineResult.id,\n        queryId: inlineResult.queryId,\n        isSilent,\n      });\n    }\n\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n    if (IS_IOS && messageInput && messageInput === document.activeElement) {\n      applyIosAutoCapitalizationFix(messageInput);\n    }\n\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [\n    chatId, clearDraft, connectionState, handleMessageSchedule, requestCalendar, resetComposer, sendInlineBotResult,\n    shouldSchedule,\n  ]);\n\n  const handleBotCommandSelect = useCallback(() => {\n    clearDraft({ chatId, localOnly: true });\n    requestAnimationFrame(() => {\n      resetComposer();\n    });\n  }, [chatId, clearDraft, resetComposer]);\n\n  const handlePollSend = useCallback((poll: ApiNewPoll) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ poll }, scheduledAt);\n      });\n      closePollModal();\n    } else {\n      sendMessage({ poll });\n      closePollModal();\n    }\n  }, [closePollModal, handleMessageSchedule, requestCalendar, sendMessage, shouldSchedule]);\n\n  const sendSilent = useCallback((additionalArgs?: ScheduledMessageArgs) => {\n    if (shouldSchedule) {\n      requestCalendar((scheduledAt) => {\n        handleMessageSchedule({ ...additionalArgs, isSilent: true }, scheduledAt);\n      });\n    } else if (additionalArgs && ('sendCompressed' in additionalArgs || 'sendGrouped' in additionalArgs)) {\n      const { sendCompressed = false, sendGrouped = false } = additionalArgs;\n      void handleSendAttachments(sendCompressed, sendGrouped, true);\n    } else {\n      void handleSend(true);\n    }\n  }, [handleMessageSchedule, handleSend, handleSendAttachments, requestCalendar, shouldSchedule]);\n\n  const handleSendAsMenuOpen = useCallback(() => {\n    const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n\n    if (!isMobile || messageInput !== document.activeElement) {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n      return;\n    }\n\n    messageInput?.blur();\n    setTimeout(() => {\n      closeBotCommandMenu();\n      closeSymbolMenu();\n      openSendAsMenu();\n    }, MOBILE_KEYBOARD_HIDE_DELAY_MS);\n  }, [closeBotCommandMenu, closeSymbolMenu, openSendAsMenu, isMobile]);\n\n  const insertTextAndUpdateCursor = useCallback((text: string, inputId: string = EDITABLE_INPUT_ID) => {\n    const newHtml = renderText(text, ['escape_html', 'emoji_html', 'br_html'])\n      .join('')\n      .replace(/\\u200b+/g, '\\u200b');\n    insertHtmlAndUpdateCursor(newHtml, inputId);\n  }, [insertHtmlAndUpdateCursor]);\n\n  useEffect(() => {\n    if (!isComposerBlocked) return;\n\n    setHtml('');\n  }, [isComposerBlocked, setHtml, attachments]);\n\n  const insertTextAndUpdateCursorAttachmentModal = useCallback((text: string) => {\n    insertTextAndUpdateCursor(text, EDITABLE_INPUT_MODAL_ID);\n  }, [insertTextAndUpdateCursor]);\n\n  const removeSymbol = useCallback((inputId = EDITABLE_INPUT_ID) => {\n    const selection = window.getSelection()!;\n\n    if (selection.rangeCount) {\n      const selectionRange = selection.getRangeAt(0);\n      if (isSelectionInsideInput(selectionRange, inputId)) {\n        document.execCommand('delete', false);\n        return;\n      }\n    }\n\n    setHtml(deleteLastCharacterOutsideSelection(getHtml()));\n  }, [getHtml, setHtml]);\n\n  const removeSymbolAttachmentModal = useCallback(() => {\n    removeSymbol(EDITABLE_INPUT_MODAL_ID);\n  }, [removeSymbol]);\n\n  const handleAllScheduledClick = useCallback(() => {\n    openChat({\n      id: chatId, threadId, type: 'scheduled', noForumTopicPanel: true,\n    });\n  }, [openChat, chatId, threadId]);\n\n  useEffect(() => {\n    if (isRightColumnShown && isMobile) {\n      closeSymbolMenu();\n    }\n  }, [isRightColumnShown, closeSymbolMenu, isMobile]);\n\n  useEffect(() => {\n    if (!isReady) return;\n\n    if (isSelectModeActive) {\n      disableHover();\n    } else {\n      setTimeout(() => {\n        enableHover();\n      }, SELECT_MODE_TRANSITION_MS);\n    }\n  }, [isSelectModeActive, enableHover, disableHover, isReady]);\n\n  const areVoiceMessagesNotAllowed = mainButtonState === MainButtonState.Record\n    && (!canAttachMedia || !canSendVoiceByPrivacy || !canSendVoices);\n\n  const mainButtonHandler = useCallback(() => {\n    switch (mainButtonState) {\n      case MainButtonState.Send:\n        handleSend();\n        break;\n      case MainButtonState.Record: {\n        if (areVoiceMessagesNotAllowed) {\n          if (!canSendVoiceByPrivacy) {\n            showNotification({\n              message: lang('VoiceMessagesRestrictedByPrivacy', chat?.title),\n            });\n          } else if (!canSendVoices) {\n            showAllowedMessageTypesNotification({ chatId });\n          }\n        } else {\n          startRecordingVoice();\n        }\n        break;\n      }\n      case MainButtonState.Edit:\n        handleEditComplete();\n        break;\n      case MainButtonState.Schedule:\n        if (activeVoiceRecording) {\n          pauseRecordingVoice();\n        }\n        requestCalendar((scheduledAt) => {\n          handleMessageSchedule({}, scheduledAt);\n        });\n        break;\n      default:\n        break;\n    }\n  }, [\n    mainButtonState, handleSend, handleEditComplete, activeVoiceRecording, requestCalendar, areVoiceMessagesNotAllowed,\n    canSendVoiceByPrivacy, showNotification, lang, chat?.title, startRecordingVoice, pauseRecordingVoice,\n    handleMessageSchedule, chatId, showAllowedMessageTypesNotification, canSendVoices,\n  ]);\n\n  const prevEditedMessage = usePrevious(editingMessage, true);\n  const renderedEditedMessage = editingMessage || prevEditedMessage;\n\n  const scheduledDefaultDate = new Date();\n  scheduledDefaultDate.setSeconds(0);\n  scheduledDefaultDate.setMilliseconds(0);\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  let sendButtonAriaLabel = 'SendMessage';\n  switch (mainButtonState) {\n    case MainButtonState.Edit:\n      sendButtonAriaLabel = 'Save edited message';\n      break;\n    case MainButtonState.Record:\n      sendButtonAriaLabel = !canAttachMedia\n        ? 'Conversation.DefaultRestrictedMedia'\n        : 'AccDescrVoiceMessage';\n  }\n\n  const className = buildClassName(\n    'Composer',\n    !isSelectModeActive && 'shown',\n    isHoverDisabled && 'hover-disabled',\n  );\n\n  const handleSendScheduled = useCallback(() => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({}, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilent = useCallback(() => {\n    sendSilent();\n  }, [sendSilent]);\n\n  const handleSendScheduledAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    requestCalendar((scheduledAt) => {\n      handleMessageSchedule({ sendCompressed, sendGrouped }, scheduledAt);\n    });\n  }, [handleMessageSchedule, requestCalendar]);\n\n  const handleSendSilentAttachments = useCallback((sendCompressed: boolean, sendGrouped: boolean) => {\n    sendSilent({ sendCompressed, sendGrouped });\n  }, [sendSilent]);\n\n  const onSend = mainButtonState === MainButtonState.Edit\n    ? handleEditComplete\n    : mainButtonState === MainButtonState.Schedule ? handleSendScheduled\n      : handleSend;\n\n  const withBotMenuButton = isChatWithBot && botMenuButton?.type === 'webApp' && !editingMessage;\n  const isBotMenuButtonOpen = useDerivedState(() => {\n    return withBotMenuButton && !getHtml() && !activeVoiceRecording;\n  }, [withBotMenuButton, getHtml, activeVoiceRecording]);\n\n  const withBotCommands = isChatWithBot && botMenuButton?.type === 'commands' && !editingMessage\n    && botCommands !== false && !activeVoiceRecording;\n\n  return (\n    <div className={className}>\n      {canAttachMedia && isReady && (\n        <DropArea\n          isOpen={dropAreaState !== DropAreaState.None}\n          withQuick={dropAreaState === DropAreaState.QuickFile || prevDropAreaState === DropAreaState.QuickFile}\n          onHide={onDropHide}\n          onFileSelect={handleFileSelect}\n        />\n      )}\n      <AttachmentModal\n        chatId={chatId}\n        threadId={threadId}\n        canShowCustomSendMenu={canShowCustomSendMenu}\n        attachments={attachments}\n        getHtml={getHtml}\n        isReady={isReady}\n        shouldSuggestCompression={shouldSuggestCompression}\n        shouldForceCompression={shouldForceCompression}\n        shouldForceAsFile={shouldForceAsFile}\n        isForCurrentMessageList={isForCurrentMessageList}\n        onCaptionUpdate={onCaptionUpdate}\n        onSendSilent={handleSendSilentAttachments}\n        onSend={handleSendAttachments}\n        onSendScheduled={handleSendScheduledAttachments}\n        onFileAppend={handleAppendFiles}\n        onClear={handleClearAttachments}\n        onAttachmentsUpdate={handleSetAttachments}\n        onCustomEmojiSelect={handleCustomEmojiSelectAttachmentModal}\n        onRemoveSymbol={removeSymbolAttachmentModal}\n        onEmojiSelect={insertTextAndUpdateCursorAttachmentModal}\n      />\n      <PollModal\n        isOpen={pollModal.isOpen}\n        isQuiz={pollModal.isQuiz}\n        shouldBeAnonymous={isChannel}\n        onClear={closePollModal}\n        onSend={handlePollSend}\n      />\n      {renderedEditedMessage && (\n        <DeleteMessageModal\n          isOpen={isDeleteModalOpen}\n          isSchedule={messageListType === 'scheduled'}\n          onClose={closeDeleteModal}\n          message={renderedEditedMessage}\n        />\n      )}\n      <SendAsMenu\n        isOpen={isSendAsMenuOpen}\n        onClose={closeSendAsMenu}\n        chatId={chatId}\n        selectedSendAsId={sendAsId}\n        sendAsPeerIds={sendAsPeerIds}\n        isCurrentUserPremium={isCurrentUserPremium}\n      />\n      <MentionTooltip\n        isOpen={isMentionTooltipOpen}\n        filteredUsers={mentionFilteredUsers}\n        onInsertUserName={insertMention}\n        onClose={closeMentionTooltip}\n      />\n      <BotCommandTooltip\n        isOpen={isBotCommandTooltipOpen}\n        withUsername={Boolean(chatBotCommands)}\n        botCommands={botTooltipCommands}\n        getHtml={getHtml}\n        onClick={handleBotCommandSelect}\n        onClose={closeBotCommandTooltip}\n      />\n      <div id=\"message-compose\">\n        <div className=\"svg-appendix\" ref={appendixRef} />\n\n        <InlineBotTooltip\n          isOpen={isInlineBotTooltipOpen}\n          botId={inlineBotId}\n          isGallery={isInlineBotTooltipGallery}\n          inlineBotResults={inlineBotResults}\n          switchPm={inlineBotSwitchPm}\n          loadMore={loadMoreForInlineBot}\n          isSavedMessages={isChatWithSelf}\n          canSendGifs={canSendGifs}\n          isCurrentUserPremium={isCurrentUserPremium}\n          onSelectResult={handleInlineBotSelect}\n          onClose={closeInlineBotTooltip}\n        />\n        <ComposerEmbeddedMessage\n          onClear={handleEmbeddedClear}\n          shouldForceShowEditing={Boolean(shouldForceShowEditing && editingMessage)}\n        />\n        <WebPagePreview\n          chatId={chatId}\n          threadId={threadId}\n          getHtml={getHtml}\n          isDisabled={!canAttachEmbedLinks || hasAttachments}\n        />\n        <div className=\"message-input-wrapper\">\n          {withBotMenuButton && (\n            <BotMenuButton\n              isOpen={isBotMenuButtonOpen}\n              text={botMenuButton.text}\n              isDisabled={Boolean(activeVoiceRecording)}\n              onClick={handleClickBotMenu}\n            />\n          )}\n          {withBotCommands && (\n            <ResponsiveHoverButton\n              className={buildClassName('bot-commands', isBotCommandMenuOpen && 'activated')}\n              round\n              disabled={botCommands === undefined}\n              color=\"translucent\"\n              onActivate={handleActivateBotCommandMenu}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-commands-filled\" />\n            </ResponsiveHoverButton>\n          )}\n          {canShowSendAs && (sendAsUser || sendAsChat) && (\n            <Button\n              round\n              color=\"translucent\"\n              onClick={isSendAsMenuOpen ? closeSendAsMenu : handleSendAsMenuOpen}\n              ariaLabel={lang('SendMessageAsTitle')}\n              className={buildClassName('send-as-button', shouldAnimateSendAsButtonRef.current && 'appear-animation')}\n            >\n              <Avatar\n                user={sendAsUser}\n                chat={sendAsChat}\n                size=\"tiny\"\n              />\n            </Button>\n          )}\n          {(!isComposerBlocked || canSendGifs || canSendStickers) && (\n            <SymbolMenuButton\n              chatId={chatId}\n              threadId={threadId}\n              isMobile={isMobile}\n              isReady={isReady}\n              isSymbolMenuOpen={isSymbolMenuOpen}\n              openSymbolMenu={openSymbolMenu}\n              closeSymbolMenu={closeSymbolMenu}\n              canSendStickers={canSendStickers}\n              canSendGifs={canSendGifs}\n              onGifSelect={handleGifSelect}\n              onStickerSelect={handleStickerSelect}\n              onCustomEmojiSelect={handleCustomEmojiSelect}\n              onRemoveSymbol={removeSymbol}\n              onEmojiSelect={insertTextAndUpdateCursor}\n              closeBotCommandMenu={closeBotCommandMenu}\n              closeSendAsMenu={closeSendAsMenu}\n              isSymbolMenuForced={isSymbolMenuForced}\n              canSendPlainText={!isComposerBlocked}\n            />\n          )}\n          <MessageInput\n            ref={inputRef}\n            id=\"message-input-text\"\n            editableInputId={EDITABLE_INPUT_ID}\n            chatId={chatId}\n            canSendPlainText={!isComposerBlocked}\n            threadId={threadId}\n            isActive={!hasAttachments}\n            getHtml={getHtml}\n            placeholder={\n              activeVoiceRecording && windowWidth <= SCREEN_WIDTH_TO_HIDE_PLACEHOLDER\n                ? ''\n                : (!isComposerBlocked\n                  ? (botKeyboardPlaceholder || lang('Message'))\n                  : lang('Chat.PlaceholderTextNotAllowed'))\n            }\n            forcedPlaceholder={inlineBotHelp}\n            canAutoFocus={isReady && isForCurrentMessageList && !hasAttachments}\n            noFocusInterception={hasAttachments}\n            shouldSuppressFocus={isMobile && isSymbolMenuOpen}\n            shouldSuppressTextFormatter={isEmojiTooltipOpen || isMentionTooltipOpen || isInlineBotTooltipOpen}\n            onUpdate={setHtml}\n            onSend={onSend}\n            onSuppressedFocus={closeSymbolMenu}\n          />\n          {isInlineBotLoading && Boolean(inlineBotId) && (\n            <Spinner color=\"gray\" />\n          )}\n          {withScheduledButton && (\n            <Button\n              round\n              faded\n              className=\"scheduled-button\"\n              color=\"translucent\"\n              onClick={handleAllScheduledClick}\n              ariaLabel=\"Open scheduled messages\"\n            >\n              <i className=\"icon-schedule\" />\n            </Button>\n          )}\n          {Boolean(botKeyboardMessageId) && !activeVoiceRecording && !editingMessage && (\n            <ResponsiveHoverButton\n              className={isBotKeyboardOpen ? 'activated' : ''}\n              round\n              color=\"translucent\"\n              onActivate={openBotKeyboard}\n              ariaLabel=\"Open bot command keyboard\"\n            >\n              <i className=\"icon-bot-command\" />\n            </ResponsiveHoverButton>\n          )}\n          {activeVoiceRecording && Boolean(currentRecordTime) && (\n            <span className=\"recording-state\">\n              {formatVoiceRecordDuration(currentRecordTime - startRecordTimeRef.current!)}\n            </span>\n          )}\n          <AttachMenu\n            chatId={chatId}\n            threadId={threadId}\n            isButtonVisible={!activeVoiceRecording && !editingMessage}\n            canAttachMedia={canAttachMedia}\n            canAttachPolls={canAttachPolls}\n            canSendPhotos={canSendPhotos}\n            canSendVideos={canSendVideos}\n            canSendDocuments={canSendDocuments}\n            canSendAudios={canSendAudios}\n            onFileSelect={handleFileSelect}\n            onPollCreate={openPollModal}\n            isScheduled={shouldSchedule}\n            attachBots={attachBots}\n            peerType={attachMenuPeerType}\n            theme={theme}\n          />\n          {Boolean(botKeyboardMessageId) && (\n            <BotKeyboardMenu\n              messageId={botKeyboardMessageId}\n              isOpen={isBotKeyboardOpen}\n              onClose={closeBotKeyboard}\n            />\n          )}\n          {botCommands && (\n            <BotCommandMenu\n              isOpen={isBotCommandMenuOpen}\n              botCommands={botCommands}\n              onClose={closeBotCommandMenu}\n            />\n          )}\n          <CustomEmojiTooltip\n            chatId={chatId}\n            isOpen={isCustomEmojiTooltipOpen}\n            onCustomEmojiSelect={insertCustomEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onClose={closeCustomEmojiTooltip}\n          />\n          <StickerTooltip\n            chatId={chatId}\n            threadId={threadId}\n            isOpen={isStickerTooltipOpen}\n            onStickerSelect={handleStickerSelect}\n            onClose={closeStickerTooltip}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            customEmojis={filteredCustomEmojis}\n            addRecentEmoji={addRecentEmoji}\n            addRecentCustomEmoji={addRecentCustomEmoji}\n            onEmojiSelect={insertEmoji}\n            onCustomEmojiSelect={insertEmoji}\n            onClose={closeEmojiTooltip}\n          />\n        </div>\n      </div>\n      {activeVoiceRecording && (\n        <Button\n          round\n          color=\"danger\"\n          className=\"cancel\"\n          onClick={stopRecordingVoice}\n          ariaLabel=\"Cancel voice recording\"\n        >\n          <i className=\"icon-delete\" />\n        </Button>\n      )}\n      <Button\n        ref={mainButtonRef}\n        round\n        color=\"secondary\"\n        className={buildClassName(mainButtonState, !isReady && 'not-ready', activeVoiceRecording && 'recording')}\n        disabled={areVoiceMessagesNotAllowed}\n        allowDisabledClick\n        ariaLabel={lang(sendButtonAriaLabel)}\n        onClick={mainButtonHandler}\n        onContextMenu={\n          mainButtonState === MainButtonState.Send && canShowCustomSendMenu ? handleContextMenu : undefined\n        }\n      >\n        <i className=\"icon-send\" />\n        <i className=\"icon-schedule\" />\n        <i className=\"icon-microphone-alt\" />\n        <i className=\"icon-check\" />\n      </Button>\n      {canShowCustomSendMenu && (\n        <CustomSendMenu\n          isOpen={isCustomSendMenuOpen}\n          onSendSilent={!isChatWithSelf ? handleSendSilent : undefined}\n          onSendSchedule={!shouldSchedule ? handleSendScheduled : undefined}\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n          isSavedMessages={isChatWithSelf}\n        />\n      )}\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, threadId, messageListType, isMobile,\n  }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n    const isChatWithBot = Boolean(chatBot);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const isChatWithUser = isUserId(chatId);\n    const messageWithActualBotKeyboard = (isChatWithBot || !isChatWithUser)\n      && selectNewestMessageWithBotKeyboardButtons(global, chatId, threadId);\n    const scheduledIds = selectScheduledIds(global, chatId, threadId);\n    const { language, shouldSuggestStickers, shouldSuggestCustomEmoji } = global.settings.byKey;\n    const baseEmojiKeywords = global.emojiKeywords[BASE_EMOJI_KEYWORD_LANG];\n    const emojiKeywords = language !== BASE_EMOJI_KEYWORD_LANG ? global.emojiKeywords[language] : undefined;\n    const botKeyboardMessageId = messageWithActualBotKeyboard ? messageWithActualBotKeyboard.id : undefined;\n    const keyboardMessage = botKeyboardMessageId ? selectChatMessage(global, chatId, botKeyboardMessageId) : undefined;\n    const { currentUserId } = global;\n    const defaultSendAsId = chat?.fullInfo ? chat?.fullInfo?.sendAsId || currentUserId : undefined;\n    const sendAsId = chat?.sendAsPeerIds && defaultSendAsId && (\n      chat.sendAsPeerIds.some((peer) => peer.id === defaultSendAsId)\n        ? defaultSendAsId\n        : (chat?.adminRights?.anonymous ? chat?.id : undefined)\n    );\n    const sendAsUser = sendAsId ? selectUser(global, sendAsId) : undefined;\n    const sendAsChat = !sendAsUser && sendAsId ? selectChat(global, sendAsId) : undefined;\n    const requestedDraftText = selectRequestedDraftText(global, chatId);\n    const requestedDraftFiles = selectRequestedDraftFiles(global, chatId);\n    const currentMessageList = selectCurrentMessageList(global);\n    const isForCurrentMessageList = chatId === currentMessageList?.chatId\n      && threadId === currentMessageList?.threadId\n      && messageListType === currentMessageList?.type;\n    const user = selectUser(global, chatId);\n    const canSendVoiceByPrivacy = (user && !user.fullInfo?.noVoiceMessages) ?? true;\n\n    const editingDraft = messageListType === 'scheduled'\n      ? selectEditingScheduledDraft(global, chatId)\n      : selectEditingDraft(global, chatId, threadId);\n\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n\n    const tabState = selectTabState(global);\n\n    return {\n      editingMessage: selectEditingMessage(global, chatId, threadId, messageListType),\n      connectionState: global.connectionState,\n      replyingToId,\n      draft: selectDraft(global, chatId, threadId),\n      chat,\n      isChatWithBot,\n      isChatWithSelf,\n      isForCurrentMessageList,\n      canScheduleUntilOnline: selectCanScheduleUntilOnline(global, chatId),\n      isChannel: chat ? isChatChannel(chat) : undefined,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isSelectModeActive: selectIsInSelectMode(global),\n      withScheduledButton: (\n        messageListType === 'thread'\n        && Boolean(scheduledIds?.length)\n      ),\n      shouldSchedule: messageListType === 'scheduled',\n      botKeyboardMessageId,\n      botKeyboardPlaceholder: keyboardMessage?.keyboardPlaceholder,\n      isForwarding: chatId === tabState.forwardMessages.toChatId,\n      pollModal: tabState.pollModal,\n      stickersForEmoji: global.stickers.forEmoji.stickers,\n      customEmojiForEmoji: global.customEmojis.forEmoji.stickers,\n      groupChatMembers: chat?.fullInfo?.members,\n      topInlineBotIds: global.topInlineBots?.userIds,\n      currentUserId,\n      lastSyncTime: global.lastSyncTime,\n      contentToBeScheduled: tabState.contentToBeScheduled,\n      shouldSuggestStickers,\n      shouldSuggestCustomEmoji,\n      recentEmojis: global.recentEmojis,\n      baseEmojiKeywords: baseEmojiKeywords?.keywords,\n      emojiKeywords: emojiKeywords?.keywords,\n      inlineBots: tabState.inlineBots.byUsername,\n      isInlineBotLoading: tabState.inlineBots.isLoading,\n      chatBotCommands: chat?.fullInfo && chat.fullInfo.botCommands,\n      botCommands: chatBot?.fullInfo ? (chatBot.fullInfo.botInfo?.commands || false) : undefined,\n      botMenuButton: chatBot?.fullInfo?.botInfo?.menuButton,\n      sendAsUser,\n      sendAsChat,\n      sendAsId,\n      editingDraft,\n      requestedDraftText,\n      requestedDraftFiles,\n      attachBots: global.attachMenu.bots,\n      attachMenuPeerType: selectChatType(global, chatId),\n      theme: selectTheme(global),\n      fileSizeLimit: selectCurrentLimit(global, 'uploadMaxFileparts') * MAX_UPLOAD_FILEPART_SIZE,\n      captionLimit: selectCurrentLimit(global, 'captionLength'),\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      canSendVoiceByPrivacy,\n      attachmentSettings: global.attachmentSettings,\n    };\n  },\n)(Composer));\n","import {\n  useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\n\nimport { IS_SAFARI, IS_VOICE_RECORDING_SUPPORTED } from '../../../../util/environment';\nimport * as voiceRecording from '../../../../util/voiceRecording';\nimport captureEscKeyListener from '../../../../util/captureEscKeyListener';\n\ntype ActiveVoiceRecording = { stop: () => Promise<voiceRecording.Result>; pause: NoneToVoidFunction } | undefined;\n\nconst useVoiceRecording = () => {\n  // eslint-disable-next-line no-null/no-null\n  const recordButtonRef = useRef<HTMLButtonElement>(null);\n  const [activeVoiceRecording, setActiveVoiceRecording] = useState<ActiveVoiceRecording>();\n  const startRecordTimeRef = useRef<number>();\n  const [currentRecordTime, setCurrentRecordTime] = useState<number | undefined>();\n\n  useEffect(() => {\n    // Preloading worker fixes silent first record on iOS\n    if (IS_SAFARI && IS_VOICE_RECORDING_SUPPORTED) {\n      void voiceRecording.init();\n    }\n  }, []);\n\n  const startRecordingVoice = useCallback(async () => {\n    try {\n      const { stop, pause } = await voiceRecording.start((tickVolume: number) => {\n        if (recordButtonRef.current) {\n          if (startRecordTimeRef.current && Date.now() % 4 === 0) {\n            recordButtonRef.current.style.boxShadow = `0 0 0 ${(tickVolume || 0) * 50}px rgba(0,0,0,.15)`;\n          }\n          setCurrentRecordTime(Date.now());\n        }\n      });\n      startRecordTimeRef.current = Date.now();\n      setCurrentRecordTime(Date.now());\n\n      setActiveVoiceRecording({ stop, pause });\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }, []);\n\n  const pauseRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.pause();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  const stopRecordingVoice = useCallback(() => {\n    if (!activeVoiceRecording) {\n      return undefined;\n    }\n\n    setActiveVoiceRecording(undefined);\n    startRecordTimeRef.current = undefined;\n    setCurrentRecordTime(undefined);\n    if (recordButtonRef.current) {\n      recordButtonRef.current.style.boxShadow = 'none';\n    }\n    try {\n      return activeVoiceRecording!.stop();\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n      return undefined;\n    }\n  }, [activeVoiceRecording]);\n\n  useEffect(() => {\n    return activeVoiceRecording ? captureEscKeyListener(stopRecordingVoice) : undefined;\n  }, [activeVoiceRecording, stopRecordingVoice]);\n\n  return {\n    startRecordingVoice,\n    pauseRecordingVoice,\n    stopRecordingVoice,\n    activeVoiceRecording,\n    currentRecordTime,\n    recordButtonRef,\n    startRecordTimeRef,\n  };\n};\n\nexport default useVoiceRecording;\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport { getActions } from '../../../../global';\n\nimport type { ApiFormattedText, ApiMessage } from '../../../../api/types';\nimport type { MessageListType } from '../../../../global/types';\nimport type { Signal } from '../../../../util/signals';\n\nimport useEffectWithPrevDeps from '../../../../hooks/useEffectWithPrevDeps';\nimport { EDITABLE_INPUT_CSS_SELECTOR } from '../../../../config';\nimport parseMessageInput from '../../../../util/parseMessageInput';\nimport focusEditableElement from '../../../../util/focusEditableElement';\nimport { hasMessageMedia } from '../../../../global/helpers';\nimport { getTextWithEntitiesAsHtml } from '../../../common/helpers/renderTextWithEntities';\nimport { fastRaf } from '../../../../util/schedulers';\nimport useBackgroundMode from '../../../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../../../hooks/useBeforeUnload';\n\nconst useEditing = (\n  getHtml: Signal<string>,\n  setHtml: (html: string) => void,\n  editedMessage: ApiMessage | undefined,\n  resetComposer: (shouldPreserveInput?: boolean) => void,\n  openDeleteModal: () => void,\n  chatId: string,\n  threadId: number,\n  type: MessageListType,\n  draft?: ApiFormattedText,\n  editingDraft?: ApiFormattedText,\n  replyingToId?: number,\n): [VoidFunction, VoidFunction, boolean] => {\n  const { editMessage, setEditingDraft } = getActions();\n  const [shouldForceShowEditing, setShouldForceShowEditing] = useState<boolean>();\n\n  useEffectWithPrevDeps(([prevEditedMessage, prevReplyingToId]) => {\n    if (!editedMessage) {\n      return;\n    }\n\n    if (replyingToId && prevReplyingToId !== replyingToId) {\n      setHtml('');\n      setShouldForceShowEditing(false);\n      return;\n    }\n\n    if (prevEditedMessage?.id === editedMessage.id && replyingToId === prevReplyingToId) {\n      return;\n    }\n\n    const text = !prevEditedMessage && editingDraft?.text.length ? editingDraft : editedMessage.content.text;\n    const html = getTextWithEntitiesAsHtml(text);\n\n    setHtml(html);\n    setShouldForceShowEditing(true);\n    // `fastRaf` would execute syncronously in this case\n    requestAnimationFrame(() => {\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        focusEditableElement(messageInput, true);\n      }\n    });\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- `as const` not yet supported by linter\n  }, [editedMessage, replyingToId, setHtml] as const);\n\n  useEffect(() => {\n    if (!editedMessage) return undefined;\n    return () => {\n      const edited = parseMessageInput(getHtml());\n      const update = edited.text.length ? edited : undefined;\n\n      setEditingDraft({\n        chatId, threadId, type, text: update,\n      });\n    };\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  const restoreNewDraftAfterEditing = useCallback(() => {\n    if (!draft) return;\n    // Run 1 frame after editing draft reset\n    fastRaf(() => {\n      setHtml(getTextWithEntitiesAsHtml(draft));\n      const messageInput = document.querySelector<HTMLDivElement>(EDITABLE_INPUT_CSS_SELECTOR);\n      if (messageInput) {\n        requestAnimationFrame(() => {\n          focusEditableElement(messageInput, true);\n        });\n      }\n    });\n  }, [draft, setHtml]);\n\n  const handleEditCancel = useCallback(() => {\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleEditComplete = useCallback(() => {\n    const { text, entities } = parseMessageInput(getHtml());\n\n    if (!editedMessage) {\n      return;\n    }\n\n    if (!text && !hasMessageMedia(editedMessage)) {\n      openDeleteModal();\n      return;\n    }\n\n    editMessage({\n      text,\n      entities,\n    });\n\n    resetComposer();\n    restoreNewDraftAfterEditing();\n  }, [editMessage, editedMessage, getHtml, openDeleteModal, resetComposer, restoreNewDraftAfterEditing]);\n\n  const handleBlur = useCallback(() => {\n    if (!editedMessage) return;\n    const edited = parseMessageInput(getHtml());\n    const update = edited.text.length ? edited : undefined;\n\n    setEditingDraft({\n      chatId, threadId, type, text: update,\n    });\n  }, [chatId, editedMessage, getHtml, setEditingDraft, threadId, type]);\n\n  useBackgroundMode(handleBlur);\n  useBeforeUnload(handleBlur);\n\n  return [handleEditComplete, handleEditCancel, shouldForceShowEditing];\n};\n\nexport default useEditing;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './MobileSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MobileSearchAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MobileSearch = useModuleLoader(Bundles.Extra, 'MobileSearch', !isActive, true);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MobileSearch ? <MobileSearch {...props} /> : undefined;\n};\n\nexport default memo(MobileSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './MessageSelectToolbar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageSelectToolbarAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const MessageSelectToolbar = useModuleLoader(Bundles.Extra, 'MessageSelectToolbar', !isActive);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageSelectToolbar ? <MessageSelectToolbar {...props} /> : undefined;\n};\n\nexport default memo(MessageSelectToolbarAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './UnpinAllMessagesModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UnpinAllMessagesModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const UnpinAllMessagesModal = useModuleLoader(Bundles.Extra, 'UnpinAllMessagesModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UnpinAllMessagesModal ? <UnpinAllMessagesModal {...props} /> : undefined;\n};\n\nexport default memo(UnpinAllMessagesModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './SeenByModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SeenByModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const SeenByModal = useModuleLoader(Bundles.Extra, 'SeenByModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SeenByModal ? <SeenByModal {...props} /> : undefined;\n};\n\nexport default memo(SeenByModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './EmojiInteractionAnimation';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst EmojiInteractionAnimationAsync: FC<OwnProps> = (props) => {\n  const { activeEmojiInteraction } = props;\n  const EmojiInteractionAnimation = useModuleLoader(\n    Bundles.Extra, 'EmojiInteractionAnimation', !activeEmojiInteraction,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EmojiInteractionAnimation ? <EmojiInteractionAnimation {...props} /> : undefined;\n};\n\nexport default memo(EmojiInteractionAnimationAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReactorListModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReactorListModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReactorListModal = useModuleLoader(Bundles.Extra, 'ReactorListModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReactorListModal ? <ReactorListModal {...props} /> : undefined;\n};\n\nexport default memo(ReactorListModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './GiftPremiumModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst GiftPremiumModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const GiftPremiumModal = useModuleLoader(Bundles.Extra, 'GiftPremiumModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GiftPremiumModal ? <GiftPremiumModal {...props} /> : undefined;\n};\n\nexport default memo(GiftPremiumModalAsync);\n","import React, { memo } from '../../lib/teact/teact';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './MessageLanguageModal';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst MessageLanguageModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const MessageLanguageModal = useModuleLoader(Bundles.Extra, 'MessageLanguageModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageLanguageModal ? <MessageLanguageModal {...props} /> : undefined;\n};\n\nexport default memo(MessageLanguageModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  MessageListType,\n  ActiveEmojiInteraction,\n} from '../../global/types';\nimport type { AnimationLevel, ThemeKey } from '../../types';\n\nimport {\n  MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN,\n  MOBILE_SCREEN_MAX_WIDTH,\n  MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN,\n  SAFE_SCREEN_WIDTH_FOR_CHAT_INFO,\n  ANIMATION_LEVEL_MAX,\n  ANIMATION_END_DELAY,\n  DARK_THEME_BG_COLOR,\n  LIGHT_THEME_BG_COLOR,\n  ANIMATION_LEVEL_MIN,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  GENERAL_TOPIC_ID,\n  TMP_CHAT_ID,\n} from '../../config';\nimport { MASK_IMAGE_DISABLED } from '../../util/environment';\nimport { DropAreaState } from './composer/DropArea';\nimport {\n  selectChat,\n  selectChatBot,\n  selectCurrentMessageList,\n  selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatBotNotStarted,\n  selectIsInSelectMode,\n  selectIsRightColumnShown,\n  selectIsUserBlocked,\n  selectPinnedIds,\n  selectReplyingToId,\n  selectTheme,\n  selectThreadInfo,\n  selectChatMessage,\n} from '../../global/selectors';\nimport {\n  getCanPostInChat,\n  getMessageSendingRestrictionReason,\n  getForumComposerPlaceholder,\n  isChatChannel,\n  isChatGroup,\n  isChatSuperGroup,\n  isUserId,\n} from '../../global/helpers';\nimport calculateMiddleFooterTransforms from './helpers/calculateMiddleFooterTransforms';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport buildClassName from '../../util/buildClassName';\nimport useCustomBackground from '../../hooks/useCustomBackground';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport usePrevDuringAnimation from '../../hooks/usePrevDuringAnimation';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport usePrevious from '../../hooks/usePrevious';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport Transition from '../ui/Transition';\nimport MiddleHeader from './MiddleHeader';\nimport MessageList from './MessageList';\nimport FloatingActionButtons from './FloatingActionButtons';\nimport Composer from './composer/Composer';\nimport Button from '../ui/Button';\nimport MobileSearch from './MobileSearch.async';\nimport MessageSelectToolbar from './MessageSelectToolbar.async';\nimport UnpinAllMessagesModal from '../common/UnpinAllMessagesModal.async';\nimport SeenByModal from '../common/SeenByModal.async';\nimport EmojiInteractionAnimation from './EmojiInteractionAnimation.async';\nimport ReactorListModal from './ReactorListModal.async';\nimport GiftPremiumModal from '../main/premium/GiftPremiumModal.async';\nimport MessageLanguageModal from './MessageLanguageModal.async';\n\nimport './MiddleColumn.scss';\nimport styles from './MiddleColumn.module.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageListType?: MessageListType;\n  chat?: ApiChat;\n  replyingToId?: number;\n  isPrivate?: boolean;\n  isPinnedMessageList?: boolean;\n  isScheduledMessageList?: boolean;\n  canPost?: boolean;\n  currentUserBannedRights?: ApiChatBannedRights;\n  defaultBannedRights?: ApiChatBannedRights;\n  hasPinned?: boolean;\n  hasAudioPlayer?: boolean;\n  pinnedMessagesCount?: number;\n  theme: ThemeKey;\n  customBackground?: string;\n  backgroundColor?: string;\n  patternColor?: string;\n  isLeftColumnShown?: boolean;\n  isRightColumnShown?: boolean;\n  isBackgroundBlurred?: boolean;\n  hasCurrentTextSearch?: boolean;\n  isSelectModeActive?: boolean;\n  isSeenByModalOpen: boolean;\n  isReactorListModalOpen: boolean;\n  isGiftPremiumModalOpen?: boolean;\n  isMessageLanguageModalOpen?: boolean;\n  animationLevel: AnimationLevel;\n  shouldSkipHistoryAnimations?: boolean;\n  currentTransitionKey: number;\n  isChannel?: boolean;\n  areChatSettingsLoaded?: boolean;\n  canSubscribe?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  shouldLoadFullChat?: boolean;\n  activeEmojiInteractions?: ActiveEmojiInteraction[];\n  shouldJoinToSend?: boolean;\n  shouldSendJoinRequest?: boolean;\n  lastSyncTime?: number;\n};\n\nfunction isImage(item: DataTransferItem) {\n  return item.kind === 'file' && item.type && SUPPORTED_IMAGE_CONTENT_TYPES.has(item.type);\n}\n\nconst MiddleColumn: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  messageListType,\n  isMobile,\n  chat,\n  replyingToId,\n  isPrivate,\n  isPinnedMessageList,\n  canPost,\n  currentUserBannedRights,\n  defaultBannedRights,\n  hasPinned,\n  hasAudioPlayer,\n  pinnedMessagesCount,\n  customBackground,\n  theme,\n  backgroundColor,\n  patternColor,\n  isLeftColumnShown,\n  isRightColumnShown,\n  isBackgroundBlurred,\n  hasCurrentTextSearch,\n  isSelectModeActive,\n  isSeenByModalOpen,\n  isReactorListModalOpen,\n  isGiftPremiumModalOpen,\n  isMessageLanguageModalOpen,\n  animationLevel,\n  shouldSkipHistoryAnimations,\n  currentTransitionKey,\n  isChannel,\n  areChatSettingsLoaded,\n  canSubscribe,\n  canStartBot,\n  canRestartBot,\n  activeEmojiInteractions,\n  shouldJoinToSend,\n  shouldSendJoinRequest,\n  shouldLoadFullChat,\n  lastSyncTime,\n}) => {\n  const {\n    openChat,\n    openPreviousChat,\n    unpinAllMessages,\n    loadUser,\n    loadChatSettings,\n    closeLocalTextSearch,\n    exitMessageSelectMode,\n    joinChannel,\n    sendBotCommand,\n    restartBot,\n    showNotification,\n    loadFullChat,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const { isTablet } = useAppLayout();\n\n  const lang = useLang();\n  const [dropAreaState, setDropAreaState] = useState(DropAreaState.None);\n  const [isFabShown, setIsFabShown] = useState<boolean | undefined>();\n  const [isNotchShown, setIsNotchShown] = useState<boolean | undefined>();\n  const [isUnpinModalOpen, setIsUnpinModalOpen] = useState(false);\n\n  const isMobileSearchActive = isMobile && hasCurrentTextSearch;\n  const closeAnimationDuration = isMobile ? 450 + ANIMATION_END_DELAY : undefined;\n  const hasTools = hasPinned && (\n    windowWidth < MOBILE_SCREEN_MAX_WIDTH\n    || (\n      isRightColumnShown && windowWidth > MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN\n    ) || (\n      windowWidth >= MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN\n      && windowWidth < SAFE_SCREEN_WIDTH_FOR_CHAT_INFO\n      && hasAudioPlayer\n    )\n  );\n\n  const renderingChatId = usePrevDuringAnimation(chatId, closeAnimationDuration);\n  const renderingThreadId = usePrevDuringAnimation(threadId, closeAnimationDuration);\n  const renderingMessageListType = usePrevDuringAnimation(messageListType, closeAnimationDuration);\n  const renderingCanSubscribe = usePrevDuringAnimation(canSubscribe, closeAnimationDuration);\n  const renderingCanStartBot = usePrevDuringAnimation(canStartBot, closeAnimationDuration);\n  const renderingCanRestartBot = usePrevDuringAnimation(canRestartBot, closeAnimationDuration);\n  const renderingCanPost = usePrevDuringAnimation(canPost, closeAnimationDuration)\n    && !renderingCanRestartBot && !renderingCanStartBot && !renderingCanSubscribe && chatId !== TMP_CHAT_ID;\n  const renderingHasTools = usePrevDuringAnimation(hasTools, closeAnimationDuration);\n  const renderingIsFabShown = usePrevDuringAnimation(isFabShown, closeAnimationDuration) && chatId !== TMP_CHAT_ID;\n  const renderingIsChannel = usePrevDuringAnimation(isChannel, closeAnimationDuration);\n  const renderingShouldJoinToSend = usePrevDuringAnimation(shouldJoinToSend, closeAnimationDuration);\n  const renderingShouldSendJoinRequest = usePrevDuringAnimation(shouldSendJoinRequest, closeAnimationDuration);\n\n  const prevTransitionKey = usePrevious(currentTransitionKey);\n\n  const cleanupExceptionKey = (\n    prevTransitionKey !== undefined && prevTransitionKey < currentTransitionKey ? prevTransitionKey : undefined\n  );\n\n  const { isReady, handleOpenEnd, handleSlideStop } = useIsReady(\n    !shouldSkipHistoryAnimations && animationLevel !== ANIMATION_LEVEL_MIN,\n    currentTransitionKey,\n    prevTransitionKey,\n    chatId,\n    isMobile,\n  );\n\n  useEffect(() => {\n    return chatId\n      ? captureEscKeyListener(() => {\n        openChat({ id: undefined });\n      })\n      : undefined;\n  }, [chatId, openChat]);\n\n  useSyncEffect(() => {\n    setDropAreaState(DropAreaState.None);\n    setIsNotchShown(undefined);\n  }, [chatId]);\n\n  // Fix for mobile virtual keyboard\n  useEffect(() => {\n    const { visualViewport } = window;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const handleResize = () => {\n      if (visualViewport.height !== document.documentElement.clientHeight) {\n        document.body.classList.add('keyboard-visible');\n      } else {\n        document.body.classList.remove('keyboard-visible');\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (isPrivate) {\n      loadUser({ userId: chatId! });\n    }\n  }, [chatId, isPrivate, loadUser]);\n\n  useEffect(() => {\n    if (!areChatSettingsLoaded && lastSyncTime) {\n      loadChatSettings({ chatId: chatId! });\n    }\n  }, [chatId, isPrivate, areChatSettingsLoaded, lastSyncTime, loadChatSettings]);\n\n  useEffect(() => {\n    if (chatId && shouldLoadFullChat && isReady) {\n      loadFullChat({ chatId });\n    }\n  }, [shouldLoadFullChat, chatId, isReady, loadFullChat]);\n\n  const handleDragEnter = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    const { items } = e.dataTransfer || {};\n    const shouldDrawQuick = items && items.length > 0 && Array.from(items)\n      // Filter unnecessary element for drag and drop images in Firefox (https://github.com/Ajaxy/telegram-tt/issues/49)\n      // https://developer.mozilla.org/en-US/docs/Web/API/HTML_Drag_and_Drop_API/Recommended_drag_types#image\n      .filter((item) => item.type !== 'text/uri-list')\n      // As of September 2021, native clients suggest \"send quick, but compressed\" only for images\n      .every(isImage);\n\n    setDropAreaState(shouldDrawQuick ? DropAreaState.QuickFile : DropAreaState.Document);\n  }, []);\n\n  const handleHideDropArea = useCallback(() => {\n    setDropAreaState(DropAreaState.None);\n  }, []);\n\n  const handleOpenUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(true);\n  }, []);\n\n  const closeUnpinModal = useCallback(() => {\n    setIsUnpinModalOpen(false);\n  }, []);\n\n  const handleUnpinAllMessages = useCallback(() => {\n    unpinAllMessages({ chatId: chatId!, threadId: threadId! });\n    closeUnpinModal();\n    openPreviousChat();\n  }, [unpinAllMessages, chatId, threadId, closeUnpinModal, openPreviousChat]);\n\n  const handleTabletFocus = useCallback(() => {\n    openChat({ id: chatId });\n  }, [openChat, chatId]);\n\n  const handleSubscribeClick = useCallback(() => {\n    joinChannel({ chatId: chatId! });\n    if (renderingShouldSendJoinRequest) {\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n    }\n  }, [joinChannel, chatId, renderingShouldSendJoinRequest, showNotification, isChannel, lang]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId: chatId! });\n  }, [chatId, restartBot]);\n\n  const customBackgroundValue = useCustomBackground(theme, customBackground);\n\n  const className = buildClassName(\n    renderingHasTools && 'has-header-tools',\n    MASK_IMAGE_DISABLED ? 'mask-image-disabled' : 'mask-image-enabled',\n  );\n\n  const bgClassName = buildClassName(\n    styles.background,\n    styles.withTransition,\n    customBackground && styles.customBgImage,\n    backgroundColor && styles.customBgColor,\n    customBackground && isBackgroundBlurred && styles.blurred,\n    isRightColumnShown && styles.withRightColumn,\n  );\n\n  const messagingDisabledClassName = buildClassName(\n    'messaging-disabled',\n    !isSelectModeActive && 'shown',\n  );\n\n  const messageSendingRestrictionReason = getMessageSendingRestrictionReason(\n    lang, currentUserBannedRights, defaultBannedRights,\n  );\n  const forumComposerPlaceholder = getForumComposerPlaceholder(lang, chat, threadId, Boolean(replyingToId));\n\n  const composerRestrictionMessage = messageSendingRestrictionReason || forumComposerPlaceholder;\n\n  // CSS Variables calculation doesn't work properly with transforms, so we calculate transform values in JS\n  const {\n    composerHiddenScale, toolbarHiddenScale,\n    composerTranslateX, toolbarTranslateX,\n    unpinHiddenScale, toolbarForUnpinHiddenScale,\n  } = useMemo(\n    () => calculateMiddleFooterTransforms(windowWidth, renderingCanPost),\n    [renderingCanPost, windowWidth],\n  );\n\n  const footerClassName = buildClassName(\n    'middle-column-footer',\n    !renderingCanPost && 'no-composer',\n    renderingCanPost && isNotchShown && !isSelectModeActive && 'with-notch',\n  );\n\n  useHistoryBack({\n    isActive: isSelectModeActive,\n    onBack: exitMessageSelectMode,\n  });\n\n  useHistoryBack({\n    isActive: isMobileSearchActive,\n    onBack: closeLocalTextSearch,\n  });\n\n  const isMessagingDisabled = Boolean(\n    !isPinnedMessageList && !renderingCanPost && !renderingCanRestartBot && !renderingCanStartBot\n    && !renderingCanSubscribe && composerRestrictionMessage,\n  );\n  const withMessageListBottomShift = Boolean(\n    renderingCanRestartBot || renderingCanSubscribe || renderingShouldSendJoinRequest || renderingCanStartBot\n    || isPinnedMessageList,\n  );\n  const withExtraShift = Boolean(isMessagingDisabled || isSelectModeActive || isPinnedMessageList);\n\n  return (\n    <div\n      id=\"MiddleColumn\"\n      className={className}\n      onTransitionEnd={handleOpenEnd}\n      style={`\n        --composer-hidden-scale: ${composerHiddenScale};\n        --toolbar-hidden-scale: ${toolbarHiddenScale};\n        --unpin-hidden-scale: ${unpinHiddenScale};\n        --toolbar-unpin-hidden-scale: ${toolbarForUnpinHiddenScale};\n        --composer-translate-x: ${composerTranslateX}px;\n        --toolbar-translate-x: ${toolbarTranslateX}px;\n        --pattern-color: ${patternColor};\n        --theme-background-color:\n          ${backgroundColor || (theme === 'dark' ? DARK_THEME_BG_COLOR : LIGHT_THEME_BG_COLOR)};\n      `}\n      onClick={(isTablet && isLeftColumnShown) ? handleTabletFocus : undefined}\n    >\n      <div\n        className={bgClassName}\n        style={customBackgroundValue ? `--custom-background: ${customBackgroundValue}` : undefined}\n      />\n      <div id=\"middle-column-portals\" />\n      {renderingChatId && renderingThreadId && (\n        <>\n          <div className=\"messages-layout\" onDragEnter={renderingCanPost ? handleDragEnter : undefined}>\n            <MiddleHeader\n              chatId={renderingChatId}\n              threadId={renderingThreadId}\n              messageListType={renderingMessageListType}\n              isReady={isReady}\n              isMobile={isMobile}\n            />\n            <Transition\n              name={shouldSkipHistoryAnimations ? 'none' : animationLevel === ANIMATION_LEVEL_MAX ? 'slide' : 'fade'}\n              activeKey={currentTransitionKey}\n              shouldCleanup\n              cleanupExceptionKey={cleanupExceptionKey}\n              onStop={handleSlideStop}\n            >\n              <MessageList\n                key={`${renderingChatId}-${renderingThreadId}-${renderingMessageListType}`}\n                chatId={renderingChatId}\n                threadId={renderingThreadId}\n                type={renderingMessageListType}\n                canPost={renderingCanPost}\n                hasTools={renderingHasTools}\n                onFabToggle={setIsFabShown}\n                onNotchToggle={setIsNotchShown}\n                isReady={isReady}\n                withBottomShift={withMessageListBottomShift}\n                withDefaultBg={Boolean(!customBackground && !backgroundColor)}\n              />\n              <div className={footerClassName}>\n                {renderingCanPost && (\n                  <Composer\n                    chatId={renderingChatId}\n                    threadId={renderingThreadId}\n                    messageListType={renderingMessageListType}\n                    dropAreaState={dropAreaState}\n                    onDropHide={handleHideDropArea}\n                    isReady={isReady}\n                    isMobile={isMobile}\n                  />\n                )}\n                {isPinnedMessageList && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      color=\"secondary\"\n                      className=\"unpin-all-button\"\n                      onClick={handleOpenUnpinModal}\n                    >\n                      <i className=\"icon-unpin\" />\n                      <span>{lang('Chat.Pinned.UnpinAll', pinnedMessagesCount, 'i')}</span>\n                    </Button>\n                  </div>\n                )}\n                {isMessagingDisabled && (\n                  <div className={messagingDisabledClassName}>\n                    <div className=\"messaging-disabled-inner\">\n                      <span>\n                        {composerRestrictionMessage}\n                      </span>\n                    </div>\n                  </div>\n                )}\n                {isMobile\n                  && (renderingCanSubscribe || (renderingShouldJoinToSend && !renderingShouldSendJoinRequest)) && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang(renderingIsChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingShouldSendJoinRequest && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleSubscribeClick}\n                    >\n                      {lang('ChannelJoinRequest')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanStartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleStartBot}\n                    >\n                      {lang('BotStart')}\n                    </Button>\n                  </div>\n                )}\n                {isMobile && renderingCanRestartBot && (\n                  <div className=\"middle-column-footer-button-container\" dir={lang.isRtl ? 'rtl' : undefined}>\n                    <Button\n                      size=\"tiny\"\n                      fluid\n                      ripple\n                      className=\"join-subscribe-button\"\n                      onClick={handleRestartBot}\n                    >\n                      {lang('BotRestart')}\n                    </Button>\n                  </div>\n                )}\n                <MessageSelectToolbar\n                  messageListType={renderingMessageListType}\n                  isActive={isSelectModeActive}\n                  canPost={renderingCanPost}\n                />\n                <SeenByModal isOpen={isSeenByModalOpen} />\n                <ReactorListModal isOpen={isReactorListModalOpen} />\n                <MessageLanguageModal isOpen={isMessageLanguageModalOpen} />\n              </div>\n            </Transition>\n\n            <FloatingActionButtons\n              isShown={renderingIsFabShown}\n              canPost={renderingCanPost}\n              withExtraShift={withExtraShift}\n            />\n          </div>\n          {isMobile && <MobileSearch isActive={Boolean(isMobileSearchActive)} />}\n        </>\n      )}\n      {chatId && (\n        <UnpinAllMessagesModal\n          isOpen={isUnpinModalOpen}\n          chatId={chatId}\n          pinnedMessagesCount={pinnedMessagesCount}\n          onClose={closeUnpinModal}\n          onUnpin={handleUnpinAllMessages}\n        />\n      )}\n      <div teactFastList>\n        {activeEmojiInteractions?.map((activeEmojiInteraction, i) => (\n          <EmojiInteractionAnimation\n            teactOrderKey={i}\n            key={activeEmojiInteraction.id}\n            activeEmojiInteraction={activeEmojiInteraction}\n          />\n        ))}\n      </div>\n      <GiftPremiumModal isOpen={isGiftPremiumModalOpen} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const theme = selectTheme(global);\n    const {\n      isBlurred: isBackgroundBlurred, background: customBackground, backgroundColor, patternColor,\n    } = global.settings.themes[theme] || {};\n\n    const {\n      messageLists, isLeftColumnShown, activeEmojiInteractions,\n      seenByModal, giftPremiumModal, reactorModal, audioPlayer, shouldSkipHistoryAnimations,\n      messageLanguageModal,\n    } = selectTabState(global);\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chats: { listIds }, lastSyncTime } = global;\n\n    const state: StateProps = {\n      theme,\n      customBackground,\n      backgroundColor,\n      patternColor,\n      isLeftColumnShown,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isBackgroundBlurred,\n      hasCurrentTextSearch: Boolean(selectCurrentTextSearch(global)),\n      isSelectModeActive: selectIsInSelectMode(global),\n      isSeenByModalOpen: Boolean(seenByModal),\n      isReactorListModalOpen: Boolean(reactorModal),\n      isGiftPremiumModalOpen: giftPremiumModal?.isOpen,\n      isMessageLanguageModalOpen: Boolean(messageLanguageModal),\n      animationLevel: global.settings.byKey.animationLevel,\n      currentTransitionKey: Math.max(0, messageLists.length - 1),\n      activeEmojiInteractions,\n      lastSyncTime,\n    };\n\n    if (!currentMessageList || !listIds.active) {\n      return state;\n    }\n\n    const { chatId, threadId, type: messageListType } = currentMessageList;\n    const isPrivate = isUserId(chatId);\n    const chat = selectChat(global, chatId);\n    const bot = selectChatBot(global, chatId);\n    const pinnedIds = selectPinnedIds(global, chatId, threadId);\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n\n    const threadInfo = selectThreadInfo(global, chatId, threadId);\n    const isComments = Boolean(threadInfo?.originChannelId);\n    const canPost = chat && getCanPostInChat(chat, threadId, isComments);\n    const isBotNotStarted = selectIsChatBotNotStarted(global, chatId);\n    const isPinnedMessageList = messageListType === 'pinned';\n    const isScheduledMessageList = messageListType === 'scheduled';\n    const isMainThread = messageListType === 'thread' && threadId === MAIN_THREAD_ID;\n    const isChannel = Boolean(chat && isChatChannel(chat));\n    const canSubscribe = Boolean(\n      chat && isMainThread && (isChannel || isChatSuperGroup(chat)) && chat.isNotJoined && !chat.joinRequests,\n    );\n    const shouldJoinToSend = Boolean(chat?.isNotJoined && chat.isJoinToSend);\n    const shouldSendJoinRequest = Boolean(chat?.isNotJoined && chat.isJoinRequest);\n    const canRestartBot = Boolean(bot && selectIsUserBlocked(global, bot.id));\n    const canStartBot = !canRestartBot && isBotNotStarted;\n    const shouldLoadFullChat = Boolean(chat && isChatGroup(chat) && !chat.fullInfo && lastSyncTime);\n    const replyingToId = selectReplyingToId(global, chatId, threadId);\n    const shouldBlockSendInForum = chat?.isForum\n      ? threadId === MAIN_THREAD_ID && !replyingToId && (chat.topics?.[GENERAL_TOPIC_ID]?.isClosed)\n      : false;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n\n    return {\n      ...state,\n      chatId,\n      threadId,\n      messageListType,\n      chat,\n      replyingToId,\n      isPrivate,\n      areChatSettingsLoaded: Boolean(chat?.settings),\n      canPost: !isPinnedMessageList\n        && (!chat || canPost)\n        && !isBotNotStarted\n        && !(shouldJoinToSend && chat?.isNotJoined)\n        && !shouldBlockSendInForum,\n      isPinnedMessageList,\n      isScheduledMessageList,\n      currentUserBannedRights: chat?.currentUserBannedRights,\n      defaultBannedRights: chat?.defaultBannedRights,\n      hasPinned: (\n        (threadId !== MAIN_THREAD_ID && !chat?.isForum)\n        || Boolean(!isPinnedMessageList && pinnedIds?.length)\n      ),\n      hasAudioPlayer: Boolean(audioMessage),\n      pinnedMessagesCount: pinnedIds ? pinnedIds.length : 0,\n      shouldSkipHistoryAnimations,\n      isChannel,\n      canSubscribe,\n      canStartBot,\n      canRestartBot,\n      shouldJoinToSend,\n      shouldSendJoinRequest,\n      shouldLoadFullChat,\n    };\n  },\n)(MiddleColumn));\n\nfunction useIsReady(\n  withAnimations?: boolean,\n  currentTransitionKey?: number,\n  prevTransitionKey?: number,\n  chatId?: string,\n  isMobile?: boolean,\n) {\n  const [isReady, setIsReady] = useState(!isMobile);\n  const forceUpdate = useForceUpdate();\n\n  const willSwitchMessageList = prevTransitionKey !== undefined && prevTransitionKey !== currentTransitionKey;\n  if (willSwitchMessageList) {\n    if (withAnimations) {\n      setIsReady(false);\n    } else {\n      forceUpdate();\n    }\n  }\n\n  useSyncEffect(() => {\n    if (!withAnimations) {\n      setIsReady(true);\n    }\n  }, [withAnimations]);\n\n  function handleOpenEnd(e: React.TransitionEvent<HTMLDivElement>) {\n    if (e.propertyName === 'transform' && e.target === e.currentTarget) {\n      setIsReady(Boolean(chatId));\n    }\n  }\n\n  function handleSlideStop() {\n    setIsReady(true);\n  }\n\n  return {\n    isReady: isReady && !willSwitchMessageList,\n    handleOpenEnd: withAnimations ? handleOpenEnd : undefined,\n    handleSlideStop: withAnimations ? handleSlideStop : undefined,\n  };\n}\n","import { useEffect, useState } from '../lib/teact/teact';\n\nimport type { ThemeKey } from '../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../config';\nimport * as cacheApi from '../util/cacheApi';\nimport { preloadImage } from '../util/files';\n\nconst useCustomBackground = (theme: ThemeKey, settingValue?: string) => {\n  const [value, setValue] = useState(settingValue);\n\n  useEffect(() => {\n    if (!settingValue) {\n      return;\n    }\n\n    if (settingValue.startsWith('#')) {\n      setValue(settingValue);\n    } else {\n      cacheApi.fetch(CUSTOM_BG_CACHE_NAME, theme, cacheApi.Type.Blob)\n        .then((blob) => {\n          const url = URL.createObjectURL(blob);\n          preloadImage(url)\n            .then(() => {\n              setValue(`url(${url})`);\n            });\n        });\n    }\n  }, [settingValue, theme]);\n\n  return settingValue ? value : undefined;\n};\n\nexport default useCustomBackground;\n","// extracted by mini-css-extract-plugin\nexport default {\"background\":\"ON5E8MkEVA1mAlkuIxhG\",\"customBgImage\":\"Ik9ZZlj3eKtKXRrUZKVk\",\"customBgColor\":\"avVozLQe3SaWcSkIt6pG\",\"withTransition\":\"OWFg9Wf1uioPWDz_IgS8\",\"blurred\":\"Tipa66fYcSvl6w0587Xz\",\"withRightColumn\":\"vhOr8s3T_LCKSt2BF7fs\"};","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiExportedInvite } from '../../api/types';\nimport { ManagementScreens, ProfileState } from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { debounce } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectChat,\n  selectCurrentGifSearch,\n  selectCurrentStickerSearch, selectTabState,\n  selectCurrentTextSearch,\n  selectIsChatWithSelf,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  getCanAddContact, getCanManageTopic, isChatAdmin, isChatChannel, isUserBot, isUserId,\n} from '../../global/helpers';\nimport { getDayStartAt } from '../../util/dateFormat';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport SearchInput from '../ui/SearchInput';\nimport Button from '../ui/Button';\nimport Transition from '../ui/Transition';\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nimport './RightHeader.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  threadId?: number;\n  isColumnOpen?: boolean;\n  isProfile?: boolean;\n  isSearch?: boolean;\n  isManagement?: boolean;\n  isStatistics?: boolean;\n  isMessageStatistics?: boolean;\n  isStickerSearch?: boolean;\n  isGifSearch?: boolean;\n  isPollResults?: boolean;\n  isCreatingTopic?: boolean;\n  isEditingTopic?: boolean;\n  isAddingChatMembers?: boolean;\n  profileState?: ProfileState;\n  managementScreen?: ManagementScreens;\n  onClose: () => void;\n  onScreenSelect: (screen: ManagementScreens) => void;\n};\n\ntype StateProps = {\n  canAddContact?: boolean;\n  canManage?: boolean;\n  canViewStatistics?: boolean;\n  isChannel?: boolean;\n  userId?: string;\n  messageSearchQuery?: string;\n  stickerSearchQuery?: string;\n  gifSearchQuery?: string;\n  isEditingInvite?: boolean;\n  currentInviteInfo?: ApiExportedInvite;\n  shouldSkipHistoryAnimations?: boolean;\n  isBot?: boolean;\n  isInsideTopic?: boolean;\n  canEditTopic?: boolean;\n};\n\nconst COLUMN_ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nenum HeaderContent {\n  Profile,\n  MemberList,\n  SharedMedia,\n  Search,\n  Statistics,\n  MessageStatistics,\n  Management,\n  ManageInitial,\n  ManageChannelSubscribers,\n  ManageChatAdministrators,\n  ManageChatPrivacyType,\n  ManageDiscussion,\n  ManageGroupPermissions,\n  ManageGroupRemovedUsers,\n  ManageChannelRemovedUsers,\n  ManageGroupUserPermissionsCreate,\n  ManageGroupUserPermissions,\n  ManageGroupRecentActions,\n  ManageGroupAdminRights,\n  ManageGroupNewAdminRights,\n  ManageGroupMembers,\n  ManageGroupAddAdmins,\n  StickerSearch,\n  GifSearch,\n  PollResults,\n  AddingMembers,\n  ManageInvites,\n  ManageEditInvite,\n  ManageReactions,\n  ManageInviteInfo,\n  ManageJoinRequests,\n  CreateTopic,\n  EditTopic,\n}\n\nconst RightHeader: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isColumnOpen,\n  isProfile,\n  isSearch,\n  isManagement,\n  isStatistics,\n  isMessageStatistics,\n  isStickerSearch,\n  isGifSearch,\n  isPollResults,\n  isCreatingTopic,\n  isEditingTopic,\n  isAddingChatMembers,\n  profileState,\n  managementScreen,\n  canAddContact,\n  userId,\n  canManage,\n  isChannel,\n  onClose,\n  onScreenSelect,\n  messageSearchQuery,\n  stickerSearchQuery,\n  gifSearchQuery,\n  isEditingInvite,\n  canViewStatistics,\n  currentInviteInfo,\n  shouldSkipHistoryAnimations,\n  isBot,\n  isInsideTopic,\n  canEditTopic,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    searchTextMessagesLocal,\n    toggleManagement,\n    openHistoryCalendar,\n    openAddContactDialog,\n    toggleStatistics,\n    setEditingExportedInvite,\n    deleteExportedChatInvite,\n    openEditTopicPanel,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const { isMobile } = useAppLayout();\n\n  const handleEditInviteClick = useCallback(() => {\n    setEditingExportedInvite({ chatId: chatId!, invite: currentInviteInfo! });\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [chatId, currentInviteInfo, onScreenSelect, setEditingExportedInvite]);\n\n  const handleDeleteInviteClick = useCallback(() => {\n    deleteExportedChatInvite({ chatId: chatId!, link: currentInviteInfo!.link });\n    onScreenSelect(ManagementScreens.Invites);\n    closeDeleteDialog();\n  }, [chatId, closeDeleteDialog, currentInviteInfo, deleteExportedChatInvite, onScreenSelect]);\n\n  const handleMessageSearchQueryChange = useCallback((query: string) => {\n    setLocalTextSearchQuery({ query });\n\n    if (query.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleStickerSearchQueryChange = useCallback((query: string) => {\n    setStickerSearchQuery({ query });\n  }, [setStickerSearchQuery]);\n\n  const handleGifSearchQueryChange = useCallback((query: string) => {\n    setGifSearchQuery({ query });\n  }, [setGifSearchQuery]);\n\n  const handleAddContact = useCallback(() => {\n    openAddContactDialog({ userId });\n  }, [openAddContactDialog, userId]);\n\n  const toggleEditTopic = useCallback(() => {\n    if (!chatId || !threadId) return;\n    openEditTopicPanel({ chatId, topicId: threadId });\n  }, [chatId, openEditTopicPanel, threadId]);\n\n  const handleToggleManagement = useCallback(() => {\n    toggleManagement();\n  }, [toggleManagement]);\n\n  const handleToggleStatistics = useCallback(() => {\n    toggleStatistics();\n  }, [toggleStatistics]);\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isColumnOpen);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isColumnOpen);\n    }, COLUMN_ANIMATION_DURATION);\n  }, [isColumnOpen]);\n\n  const lang = useLang();\n  const contentKey = isProfile ? (\n    profileState === ProfileState.Profile ? (\n      HeaderContent.Profile\n    ) : profileState === ProfileState.SharedMedia ? (\n      HeaderContent.SharedMedia\n    ) : profileState === ProfileState.MemberList ? (\n      HeaderContent.MemberList\n    ) : -1 // Never reached\n  ) : isSearch ? (\n    HeaderContent.Search\n  ) : isPollResults ? (\n    HeaderContent.PollResults\n  ) : isStickerSearch ? (\n    HeaderContent.StickerSearch\n  ) : isGifSearch ? (\n    HeaderContent.GifSearch\n  ) : isAddingChatMembers ? (\n    HeaderContent.AddingMembers\n  ) : isManagement ? (\n    managementScreen === ManagementScreens.Initial ? (\n      HeaderContent.ManageInitial\n    ) : managementScreen === ManagementScreens.ChatPrivacyType ? (\n      HeaderContent.ManageChatPrivacyType\n    ) : managementScreen === ManagementScreens.Discussion ? (\n      HeaderContent.ManageDiscussion\n    ) : managementScreen === ManagementScreens.ChannelSubscribers ? (\n      HeaderContent.ManageChannelSubscribers\n    ) : managementScreen === ManagementScreens.GroupPermissions ? (\n      HeaderContent.ManageGroupPermissions\n    ) : managementScreen === ManagementScreens.ChatAdministrators ? (\n      HeaderContent.ManageChatAdministrators\n    ) : managementScreen === ManagementScreens.GroupRemovedUsers ? (\n      HeaderContent.ManageGroupRemovedUsers\n    ) : managementScreen === ManagementScreens.ChannelRemovedUsers ? (\n      HeaderContent.ManageChannelRemovedUsers\n    ) : managementScreen === ManagementScreens.GroupUserPermissionsCreate ? (\n      HeaderContent.ManageGroupUserPermissionsCreate\n    ) : managementScreen === ManagementScreens.GroupUserPermissions ? (\n      HeaderContent.ManageGroupUserPermissions\n    ) : managementScreen === ManagementScreens.GroupRecentActions ? (\n      HeaderContent.ManageGroupRecentActions\n    ) : managementScreen === ManagementScreens.ChatAdminRights ? (\n      HeaderContent.ManageGroupAdminRights\n    ) : managementScreen === ManagementScreens.ChatNewAdminRights ? (\n      HeaderContent.ManageGroupNewAdminRights\n    ) : managementScreen === ManagementScreens.GroupMembers ? (\n      HeaderContent.ManageGroupMembers\n    ) : managementScreen === ManagementScreens.Invites ? (\n      HeaderContent.ManageInvites\n    ) : managementScreen === ManagementScreens.EditInvite ? (\n      HeaderContent.ManageEditInvite\n    ) : managementScreen === ManagementScreens.GroupAddAdmins ? (\n      HeaderContent.ManageGroupAddAdmins\n    ) : managementScreen === ManagementScreens.Reactions ? (\n      HeaderContent.ManageReactions\n    ) : managementScreen === ManagementScreens.InviteInfo ? (\n      HeaderContent.ManageInviteInfo\n    ) : managementScreen === ManagementScreens.JoinRequests ? (\n      HeaderContent.ManageJoinRequests\n    ) : undefined // Never reached\n  ) : isStatistics ? (\n    HeaderContent.Statistics\n  ) : isMessageStatistics ? (\n    HeaderContent.MessageStatistics\n  ) : isCreatingTopic ? (\n    HeaderContent.CreateTopic\n  ) : isEditingTopic ? (\n    HeaderContent.EditTopic\n  ) : undefined; // When column is closed\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true) ?? -1;\n\n  function getHeaderTitle() {\n    if (isInsideTopic) {\n      return lang('AccDescrTopic');\n    }\n\n    if (isChannel) {\n      return lang('Channel.TitleInfo');\n    }\n\n    if (userId) {\n      return lang(isBot ? 'lng_info_bot_title' : 'lng_info_user_title');\n    }\n\n    return lang('GroupInfo.Title');\n  }\n\n  function renderHeaderContent() {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case HeaderContent.PollResults:\n        return <h3>{lang('PollResults')}</h3>;\n      case HeaderContent.Search:\n        return (\n          <>\n            <SearchInput\n              parentContainerClassName=\"RightSearch\"\n              value={messageSearchQuery}\n              onChange={handleMessageSearchQueryChange}\n            />\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          </>\n        );\n      case HeaderContent.AddingMembers:\n        return <h3>{lang(isChannel ? 'ChannelAddSubscribers' : 'GroupAddMembers')}</h3>;\n      case HeaderContent.ManageInitial:\n        return <h3>{lang('Edit')}</h3>;\n      case HeaderContent.ManageChatPrivacyType:\n        return <h3>{lang(isChannel ? 'ChannelTypeHeader' : 'GroupTypeHeader')}</h3>;\n      case HeaderContent.ManageDiscussion:\n        return <h3>{lang('Discussion')}</h3>;\n      case HeaderContent.ManageChatAdministrators:\n        return <h3>{lang('ChannelAdministrators')}</h3>;\n      case HeaderContent.ManageGroupRecentActions:\n        return <h3>{lang('Group.Info.AdminLog')}</h3>;\n      case HeaderContent.ManageGroupAdminRights:\n        return <h3>{lang('EditAdminRights')}</h3>;\n      case HeaderContent.ManageGroupNewAdminRights:\n        return <h3>{lang('SetAsAdmin')}</h3>;\n      case HeaderContent.ManageGroupPermissions:\n        return <h3>{lang('ChannelPermissions')}</h3>;\n      case HeaderContent.ManageGroupRemovedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n      case HeaderContent.ManageChannelRemovedUsers:\n        return <h3>{lang('ChannelBlockedUsers')}</h3>;\n      case HeaderContent.ManageGroupUserPermissionsCreate:\n        return <h3>{lang('ChannelAddException')}</h3>;\n      case HeaderContent.ManageGroupUserPermissions:\n        return <h3>{lang('UserRestrictions')}</h3>;\n      case HeaderContent.ManageInvites:\n        return <h3>{lang('lng_group_invite_title')}</h3>;\n      case HeaderContent.ManageEditInvite:\n        return <h3>{isEditingInvite ? lang('EditLink') : lang('NewLink')}</h3>;\n      case HeaderContent.ManageInviteInfo:\n        return (\n          <>\n            <h3>{lang('InviteLink')}</h3>\n            <section className=\"tools\">\n              {currentInviteInfo && !currentInviteInfo.isRevoked && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleEditInviteClick}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {currentInviteInfo && currentInviteInfo.isRevoked && (\n                <>\n                  <Button\n                    round\n                    color=\"danger\"\n                    size=\"smaller\"\n                    ariaLabel={lang('Delete')}\n                    onClick={openDeleteDialog}\n                  >\n                    <i className=\"icon-delete\" />\n                  </Button>\n                  <ConfirmDialog\n                    isOpen={isDeleteDialogOpen}\n                    onClose={closeDeleteDialog}\n                    title={lang('DeleteLink')}\n                    text={lang('DeleteLinkHelp')}\n                    confirmIsDestructive\n                    confirmLabel={lang('Delete')}\n                    confirmHandler={handleDeleteInviteClick}\n                  />\n                </>\n              )}\n            </section>\n          </>\n        );\n      case HeaderContent.ManageJoinRequests:\n        return <h3>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</h3>;\n      case HeaderContent.ManageGroupAddAdmins:\n        return <h3>{lang('Channel.Management.AddModerator')}</h3>;\n      case HeaderContent.StickerSearch:\n        return (\n          <SearchInput\n            value={stickerSearchQuery}\n            placeholder={lang('SearchStickersHint')}\n            autoFocusSearch\n            onChange={handleStickerSearchQueryChange}\n          />\n        );\n      case HeaderContent.GifSearch:\n        return (\n          <SearchInput\n            value={gifSearchQuery}\n            placeholder={lang('SearchGifsTitle')}\n            autoFocusSearch\n            onChange={handleGifSearchQueryChange}\n          />\n        );\n      case HeaderContent.Statistics:\n        return <h3>{lang(isChannel ? 'ChannelStats.Title' : 'GroupStats.Title')}</h3>;\n      case HeaderContent.MessageStatistics:\n        return <h3>{lang('Stats.MessageTitle')}</h3>;\n      case HeaderContent.SharedMedia:\n        return <h3>{lang('SharedMedia')}</h3>;\n      case HeaderContent.ManageChannelSubscribers:\n        return <h3>{lang('ChannelSubscribers')}</h3>;\n      case HeaderContent.MemberList:\n      case HeaderContent.ManageGroupMembers:\n        return <h3>{lang('GroupMembers')}</h3>;\n      case HeaderContent.ManageReactions:\n        return <h3>{lang('Reactions')}</h3>;\n      case HeaderContent.CreateTopic:\n        return <h3>{lang('NewTopic')}</h3>;\n      case HeaderContent.EditTopic:\n        return <h3>{lang('EditTopic')}</h3>;\n      default:\n        return (\n          <>\n            <h3>{getHeaderTitle()}\n            </h3>\n            <section className=\"tools\">\n              {canAddContact && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('AddContact')}\n                  onClick={handleAddContact}\n                >\n                  <i className=\"icon-add-user\" />\n                </Button>\n              )}\n              {canManage && !isInsideTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Edit')}\n                  onClick={handleToggleManagement}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canEditTopic && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('EditTopic')}\n                  onClick={toggleEditTopic}\n                >\n                  <i className=\"icon-edit\" />\n                </Button>\n              )}\n              {canViewStatistics && (\n                <Button\n                  round\n                  color=\"translucent\"\n                  size=\"smaller\"\n                  ariaLabel={lang('Statistics')}\n                  onClick={handleToggleStatistics}\n                >\n                  <i className=\"icon-stats\" />\n                </Button>\n              )}\n            </section>\n          </>\n        );\n    }\n  }\n\n  const isBackButton = (\n    isMobile\n    || contentKey === HeaderContent.SharedMedia\n    || contentKey === HeaderContent.MemberList\n    || contentKey === HeaderContent.AddingMembers\n    || contentKey === HeaderContent.MessageStatistics\n    || isManagement\n  );\n\n  const buttonClassName = buildClassName(\n    'animated-close-icon',\n    isBackButton && 'state-back',\n    (shouldSkipTransition || shouldSkipHistoryAnimations) && 'no-transition',\n  );\n\n  return (\n    <div className=\"RightHeader\">\n      <Button\n        className=\"close-button\"\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        onClick={onClose}\n        ariaLabel={isBackButton ? lang('Common.Back') : lang('Common.Close')}\n      >\n        <div className={buttonClassName} />\n      </Button>\n      <Transition\n        name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'slide-fade'}\n        activeKey={renderingContentKey}\n      >\n        {renderHeaderContent()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, {\n    chatId, isProfile, isManagement, threadId,\n  }): StateProps => {\n    const tabState = selectTabState(global);\n    const { query: messageSearchQuery } = selectCurrentTextSearch(global) || {};\n    const { query: stickerSearchQuery } = selectCurrentStickerSearch(global) || {};\n    const { query: gifSearchQuery } = selectCurrentGifSearch(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const user = isProfile && chatId && isUserId(chatId) ? selectUser(global, chatId) : undefined;\n    const isChannel = chat && isChatChannel(chat);\n    const isInsideTopic = chat?.isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n    const topic = isInsideTopic ? chat.topics?.[threadId!] : undefined;\n    const canEditTopic = isInsideTopic && topic && getCanManageTopic(chat, topic);\n    const isBot = user && isUserBot(user);\n\n    const canAddContact = user && getCanAddContact(user);\n    const canManage = Boolean(\n      !isManagement\n      && isProfile\n      && !canAddContact\n      && chat\n      && !selectIsChatWithSelf(global, chat.id)\n      // chat.isCreator is for Basic Groups\n      && (isUserId(chat.id) || ((isChatAdmin(chat) || chat.isCreator) && !chat.isNotJoined)),\n    );\n    const isEditingInvite = Boolean(chatId && tabState.management.byChatId[chatId]?.editingInvite);\n    const canViewStatistics = !isInsideTopic && chat?.fullInfo?.canViewStatistics;\n    const currentInviteInfo = chatId\n      ? tabState.management.byChatId[chatId]?.inviteInfo?.invite : undefined;\n\n    return {\n      canManage,\n      canAddContact,\n      canViewStatistics,\n      isChannel,\n      isBot,\n      isInsideTopic,\n      canEditTopic,\n      userId: user?.id,\n      messageSearchQuery,\n      stickerSearchQuery,\n      gifSearchQuery,\n      isEditingInvite,\n      currentInviteInfo,\n      shouldSkipHistoryAnimations: tabState.shouldSkipHistoryAnimations,\n    };\n  },\n)(RightHeader));\n","import { useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiChatMember, ApiMessage, ApiUser, ApiUserStatus,\n} from '../../../api/types';\nimport type { ProfileTabType, SharedMediaType } from '../../../types';\n\nimport { MEMBERS_SLICE, MESSAGE_SEARCH_SLICE, SHARED_MEDIA_SLICE } from '../../../config';\nimport { getMessageContentIds, sortChatIds, sortUserIds } from '../../../global/helpers';\nimport useSyncEffect from '../../../hooks/useSyncEffect';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\n\nexport default function useProfileViewportIds(\n  loadMoreMembers: AnyToVoidFunction,\n  loadCommonChats: AnyToVoidFunction,\n  searchMessages: AnyToVoidFunction,\n  tabType: ProfileTabType,\n  mediaSearchType?: SharedMediaType,\n  groupChatMembers?: ApiChatMember[],\n  commonChatIds?: string[],\n  usersById?: Record<string, ApiUser>,\n  userStatusesById?: Record<string, ApiUserStatus>,\n  chatsById?: Record<string, ApiChat>,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  lastSyncTime?: number,\n  topicId?: number,\n) {\n  const resultType = tabType === 'members' || !mediaSearchType ? tabType : mediaSearchType;\n\n  const memberIds = useMemo(() => {\n    if (!groupChatMembers || !usersById || !userStatusesById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      groupChatMembers.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n    );\n  }, [groupChatMembers, usersById, userStatusesById]);\n\n  const chatIds = useMemo(() => {\n    if (!commonChatIds || !chatsById) {\n      return undefined;\n    }\n\n    return sortChatIds(commonChatIds, chatsById, true);\n  }, [chatsById, commonChatIds]);\n\n  const [memberViewportIds, getMoreMembers, noProfileInfoForMembers] = useInfiniteScrollForLoadableItems(\n    resultType, loadMoreMembers, lastSyncTime, memberIds,\n  );\n\n  const [mediaViewportIds, getMoreMedia, noProfileInfoForMedia] = useInfiniteScrollForSharedMedia(\n    'media', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [documentViewportIds, getMoreDocuments, noProfileInfoForDocuments] = useInfiniteScrollForSharedMedia(\n    'documents', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [linkViewportIds, getMoreLinks, noProfileInfoForLinks] = useInfiniteScrollForSharedMedia(\n    'links', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [audioViewportIds, getMoreAudio, noProfileInfoForAudio] = useInfiniteScrollForSharedMedia(\n    'audio', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [voiceViewportIds, getMoreVoices, noProfileInfoForVoices] = useInfiniteScrollForSharedMedia(\n    'voice', resultType, searchMessages, lastSyncTime, chatMessages, foundIds, topicId,\n  );\n\n  const [commonChatViewportIds, getMoreCommonChats, noProfileInfoForCommonChats] = useInfiniteScrollForLoadableItems(\n    resultType, loadCommonChats, lastSyncTime, chatIds,\n  );\n\n  let viewportIds: number[] | string[] | undefined;\n  let getMore: AnyToVoidFunction | undefined;\n  let noProfileInfo = false;\n\n  switch (resultType) {\n    case 'members':\n      viewportIds = memberViewportIds;\n      getMore = getMoreMembers;\n      noProfileInfo = noProfileInfoForMembers;\n      break;\n    case 'commonChats':\n      viewportIds = commonChatViewportIds;\n      getMore = getMoreCommonChats;\n      noProfileInfo = noProfileInfoForCommonChats;\n      break;\n    case 'media':\n      viewportIds = mediaViewportIds;\n      getMore = getMoreMedia;\n      noProfileInfo = noProfileInfoForMedia;\n      break;\n    case 'documents':\n      viewportIds = documentViewportIds;\n      getMore = getMoreDocuments;\n      noProfileInfo = noProfileInfoForDocuments;\n      break;\n    case 'links':\n      viewportIds = linkViewportIds;\n      getMore = getMoreLinks;\n      noProfileInfo = noProfileInfoForLinks;\n      break;\n    case 'audio':\n      viewportIds = audioViewportIds;\n      getMore = getMoreAudio;\n      noProfileInfo = noProfileInfoForAudio;\n      break;\n    case 'voice':\n      viewportIds = voiceViewportIds;\n      getMore = getMoreVoices;\n      noProfileInfo = noProfileInfoForVoices;\n      break;\n  }\n\n  return [resultType, viewportIds, getMore, noProfileInfo] as const;\n}\n\nfunction useInfiniteScrollForLoadableItems(\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  itemIds?: string[],\n) {\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    itemIds,\n    undefined,\n    MEMBERS_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !itemIds || viewportIds[0] === itemIds[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n\nfunction useInfiniteScrollForSharedMedia(\n  forSharedMediaType: SharedMediaType,\n  currentResultType?: ProfileTabType,\n  handleLoadMore?: AnyToVoidFunction,\n  lastSyncTime?: number,\n  chatMessages?: Record<number, ApiMessage>,\n  foundIds?: number[],\n  topicId?: number,\n) {\n  const messageIdsRef = useRef<number[]>();\n\n  useSyncEffect(() => {\n    messageIdsRef.current = undefined;\n  }, [topicId]);\n\n  useSyncEffect(() => {\n    if (currentResultType === forSharedMediaType && chatMessages && foundIds) {\n      messageIdsRef.current = getMessageContentIds(\n        chatMessages,\n        foundIds,\n        forSharedMediaType,\n      );\n    }\n  }, [chatMessages, foundIds, currentResultType, forSharedMediaType]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    lastSyncTime ? handleLoadMore : undefined,\n    messageIdsRef.current,\n    undefined,\n    forSharedMediaType === 'media' ? SHARED_MEDIA_SLICE : MESSAGE_SEARCH_SLICE,\n  );\n\n  const isOnTop = !viewportIds || !messageIdsRef.current || viewportIds[0] === messageIdsRef.current[0];\n\n  return [viewportIds, getMore, !isOnTop] as const;\n}\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nimport { ProfileState } from '../../../types';\n\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport { throttle } from '../../../util/schedulers';\nimport useEffectWithPrevDeps from '../../../hooks/useEffectWithPrevDeps';\n\nconst TRANSITION_DURATION = 300;\nconst PROGRAMMATIC_SCROLL_TIMEOUT_MS = 350;\n\nconst runThrottledForScroll = throttle((cb) => cb(), 250, false);\n\nlet isScrollingProgrammatically = false;\n\nexport default function useProfileState(\n  containerRef: { current: HTMLDivElement | null },\n  tabType: string,\n  profileState: ProfileState,\n  onProfileStateChange: (state: ProfileState) => void,\n) {\n  // Scroll to tabs if needed\n  useEffectWithPrevDeps(([prevTabType]) => {\n    if (prevTabType && prevTabType !== tabType) {\n      const container = containerRef.current!;\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList')!;\n      if (container.scrollTop < tabsEl.offsetTop) {\n        onProfileStateChange(tabType === 'members' ? ProfileState.MemberList : ProfileState.SharedMedia);\n        isScrollingProgrammatically = true;\n        fastSmoothScroll(container, tabsEl, 'start', undefined, undefined, undefined, TRANSITION_DURATION);\n        setTimeout(() => {\n          isScrollingProgrammatically = false;\n        }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n      }\n    }\n  }, [tabType, onProfileStateChange, containerRef]);\n\n  // Scroll to top\n  useEffectWithPrevDeps(([prevProfileState]) => {\n    if (profileState !== ProfileState.Profile || profileState === prevProfileState) {\n      return;\n    }\n\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl || tabListEl.offsetTop > container.scrollTop) {\n      return;\n    }\n\n    isScrollingProgrammatically = true;\n    fastSmoothScroll(\n      container,\n      container.firstElementChild as HTMLElement,\n      'start',\n      undefined,\n      container.offsetHeight * 2,\n    );\n\n    setTimeout(() => {\n      isScrollingProgrammatically = false;\n    }, PROGRAMMATIC_SCROLL_TIMEOUT_MS);\n\n    onProfileStateChange(profileState);\n  }, [profileState, containerRef, onProfileStateChange]);\n\n  const determineProfileState = useCallback(() => {\n    const container = containerRef.current;\n    if (!container) {\n      return;\n    }\n\n    const tabListEl = container.querySelector<HTMLDivElement>('.TabList');\n    if (!tabListEl) {\n      return;\n    }\n\n    let state: ProfileState = ProfileState.Profile;\n    if (container.scrollTop >= tabListEl.offsetTop) {\n      state = tabType === 'members'\n        ? ProfileState.MemberList\n        : ProfileState.SharedMedia;\n    }\n\n    onProfileStateChange(state);\n  }, [containerRef, onProfileStateChange, tabType]);\n\n  // Determine profile state when switching tabs\n  useEffect(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    determineProfileState();\n  }, [determineProfileState, tabType]);\n\n  // Determine profile state when scrolling\n  const handleScroll = useCallback(() => {\n    if (isScrollingProgrammatically) {\n      return;\n    }\n\n    runThrottledForScroll(determineProfileState);\n  }, [determineProfileState]);\n\n  return { handleScroll };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useMemo, useRef, useState, memo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiMessage,\n  ApiChat,\n  ApiChatMember,\n  ApiUser,\n  ApiUserStatus,\n} from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type {\n  ISettings, ProfileState, ProfileTabType, SharedMediaType,\n} from '../../types';\nimport { NewChatMembersProgress, MediaViewerOrigin, AudioOrigin } from '../../types';\n\nimport {\n  MEMBERS_SLICE,\n  PROFILE_SENSITIVE_AREA,\n  SHARED_MEDIA_SLICE,\n  SLIDE_TRANSITION_DURATION,\n} from '../../config';\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  getHasAdminRight, isChatAdmin, isChatChannel, isChatGroup, isUserBot, isUserId, isUserRightBanned,\n} from '../../global/helpers';\nimport {\n  selectChatMessages,\n  selectChat,\n  selectCurrentMediaSearch,\n  selectIsRightColumnShown,\n  selectTheme,\n  selectActiveDownloadIds,\n  selectUser,\n} from '../../global/selectors';\nimport { captureEvents, SwipeDirection } from '../../util/captureEvents';\nimport { getSenderName } from '../left/search/helpers/getSenderName';\nimport useCacheBuster from '../../hooks/useCacheBuster';\nimport useProfileViewportIds from './hooks/useProfileViewportIds';\nimport useProfileState from './hooks/useProfileState';\nimport useTransitionFixes from './hooks/useTransitionFixes';\nimport useAsyncRendering from './hooks/useAsyncRendering';\nimport useLang from '../../hooks/useLang';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\n\nimport Transition from '../ui/Transition';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport TabList from '../ui/TabList';\nimport Spinner from '../ui/Spinner';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\nimport ProfileInfo from '../common/ProfileInfo';\nimport Document from '../common/Document';\nimport Audio from '../common/Audio';\nimport ChatExtra from '../common/ChatExtra';\nimport Media from '../common/Media';\nimport WebLink from '../common/WebLink';\nimport NothingFound from '../common/NothingFound';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport DeleteMemberModal from './DeleteMemberModal';\nimport GroupChatInfo from '../common/GroupChatInfo';\n\nimport './Profile.scss';\n\ntype OwnProps = {\n  chatId: string;\n  topicId?: number;\n  profileState: ProfileState;\n  isMobile?: boolean;\n  onProfileStateChange: (state: ProfileState) => void;\n};\n\ntype StateProps = {\n  theme: ISettings['theme'];\n  isChannel?: boolean;\n  currentUserId?: string;\n  resolvedUserId?: string;\n  messagesById?: Record<number, ApiMessage>;\n  foundIds?: number[];\n  mediaSearchType?: SharedMediaType;\n  hasCommonChatsTab?: boolean;\n  hasMembersTab?: boolean;\n  areMembersHidden?: boolean;\n  canAddMembers?: boolean;\n  canDeleteMembers?: boolean;\n  members?: ApiChatMember[];\n  adminMembersById?: Record<string, ApiChatMember>;\n  commonChatIds?: string[];\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  isRightColumnShown: boolean;\n  isRestricted?: boolean;\n  lastSyncTime?: number;\n  activeDownloadIds: number[];\n  isChatProtected?: boolean;\n};\n\nconst TABS = [\n  { type: 'media', title: 'SharedMediaTab2' },\n  { type: 'documents', title: 'SharedFilesTab2' },\n  { type: 'links', title: 'SharedLinksTab2' },\n  { type: 'audio', title: 'SharedMusicTab2' },\n];\n\nconst HIDDEN_RENDER_DELAY = 1000;\nconst INTERSECTION_THROTTLE = 500;\n\nconst Profile: FC<OwnProps & StateProps> = ({\n  chatId,\n  topicId,\n  profileState,\n  onProfileStateChange,\n  theme,\n  isChannel,\n  resolvedUserId,\n  currentUserId,\n  messagesById,\n  foundIds,\n  mediaSearchType,\n  hasCommonChatsTab,\n  hasMembersTab,\n  areMembersHidden,\n  canAddMembers,\n  canDeleteMembers,\n  commonChatIds,\n  members,\n  adminMembersById,\n  usersById,\n  userStatusesById,\n  chatsById,\n  isRightColumnShown,\n  isRestricted,\n  lastSyncTime,\n  activeDownloadIds,\n  isChatProtected,\n}) => {\n  const {\n    setLocalMediaSearchType,\n    loadMoreMembers,\n    loadCommonChats,\n    openChat,\n    searchMediaMessagesLocal,\n    openMediaViewer,\n    openAudioPlayer,\n    focusMessage,\n    loadProfilePhotos,\n    setNewChatMembersDialogState,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const transitionRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(0);\n  const [deletingUserId, setDeletingUserId] = useState<string | undefined>();\n\n  const tabs = useMemo(() => ([\n    ...(hasMembersTab ? [{\n      type: 'members', title: isChannel ? 'ChannelSubscribers' : 'GroupMembers',\n    }] : []),\n    ...TABS,\n    // TODO The filter for voice messages currently does not work\n    // in forum topics. Return it when it's fixed on the server side.\n    ...(!topicId ? [{ type: 'voice', title: 'SharedVoiceTab2' }] : []),\n    ...(hasCommonChatsTab ? [{ type: 'commonChats', title: 'SharedGroupsTab2' }] : []),\n  ]), [hasCommonChatsTab, hasMembersTab, isChannel, topicId]);\n\n  const renderingActiveTab = activeTab > tabs.length - 1 ? tabs.length - 1 : activeTab;\n  const tabType = tabs[renderingActiveTab].type as ProfileTabType;\n\n  const [resultType, viewportIds, getMore, noProfileInfo] = useProfileViewportIds(\n    loadMoreMembers,\n    loadCommonChats,\n    searchMediaMessagesLocal,\n    tabType,\n    mediaSearchType,\n    members,\n    commonChatIds,\n    usersById,\n    userStatusesById,\n    chatsById,\n    messagesById,\n    foundIds,\n    lastSyncTime,\n    topicId,\n  );\n  const isFirstTab = resultType === 'members' || (!hasMembersTab && resultType === 'media');\n  const activeKey = tabs.findIndex(({ type }) => type === resultType);\n\n  const { handleScroll } = useProfileState(containerRef, resultType, profileState, onProfileStateChange);\n\n  const { applyTransitionFix, releaseTransitionFix } = useTransitionFixes(containerRef);\n\n  const [cacheBuster, resetCacheBuster] = useCacheBuster();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleTransitionStop = useCallback(() => {\n    releaseTransitionFix();\n    resetCacheBuster();\n  }, [releaseTransitionFix, resetCacheBuster]);\n\n  const handleNewMemberDialogOpen = useCallback(() => {\n    setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.InProgress });\n  }, [setNewChatMembersDialogState]);\n\n  // Update search type when switching tabs or forum topics\n  useEffect(() => {\n    setLocalMediaSearchType({ mediaType: tabType as SharedMediaType });\n  }, [setLocalMediaSearchType, tabType, topicId]);\n\n  const profileId = resolvedUserId || chatId;\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [loadProfilePhotos, profileId, lastSyncTime]);\n\n  const handleSelectMedia = useCallback((mediaId: number) => {\n    openMediaViewer({\n      chatId: profileId,\n      threadId: MAIN_THREAD_ID,\n      mediaId,\n      origin: MediaViewerOrigin.SharedMedia,\n    });\n  }, [profileId, openMediaViewer]);\n\n  const handlePlayAudio = useCallback((messageId: number) => {\n    openAudioPlayer({ chatId: profileId, messageId });\n  }, [profileId, openAudioPlayer]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n  }, [openChat]);\n\n  const handleMessageFocus = useCallback((messageId: number) => {\n    focusMessage({ chatId: profileId, messageId });\n  }, [profileId, focusMessage]);\n\n  const handleDeleteMembersModalClose = useCallback(() => {\n    setDeletingUserId(undefined);\n  }, []);\n\n  useEffectWithPrevDeps(([prevHasMemberTabs]) => {\n    if (activeTab === 0 || prevHasMemberTabs === hasMembersTab) {\n      return;\n    }\n\n    const newActiveTab = activeTab + (hasMembersTab ? 1 : -1);\n\n    setActiveTab(Math.min(newActiveTab, tabs.length - 1));\n  }, [hasMembersTab, activeTab, tabs]);\n\n  useEffect(() => {\n    if (!transitionRef.current || !IS_TOUCH_ENV) {\n      return undefined;\n    }\n\n    return captureEvents(transitionRef.current, {\n      selectorToPreventScroll: '.Profile',\n      onSwipe: ((e, direction) => {\n        if (direction === SwipeDirection.Left) {\n          setActiveTab(Math.min(renderingActiveTab + 1, tabs.length - 1));\n          return true;\n        } else if (direction === SwipeDirection.Right) {\n          setActiveTab(Math.max(0, renderingActiveTab - 1));\n          return true;\n        }\n\n        return false;\n      }),\n    });\n  }, [renderingActiveTab, tabs.length]);\n\n  let renderingDelay;\n  // @optimization Used to unparallelize rendering of message list and profile media\n  if (isFirstTab) {\n    renderingDelay = !isRightColumnShown ? HIDDEN_RENDER_DELAY : 0;\n    // @optimization Used to delay first render of secondary tabs while animating\n  } else if (!viewportIds) {\n    renderingDelay = SLIDE_TRANSITION_DURATION;\n  }\n  const canRenderContent = useAsyncRendering([chatId, topicId, resultType, renderingActiveTab], renderingDelay);\n\n  function getMemberContextAction(memberId: string) {\n    return memberId === currentUserId || !canDeleteMembers ? undefined : [{\n      title: lang('lng_context_remove_from_group'),\n      icon: 'stop',\n      handler: () => {\n        setDeletingUserId(memberId);\n      },\n    }];\n  }\n\n  function renderContent() {\n    if (!viewportIds || !canRenderContent || !messagesById) {\n      const noSpinner = isFirstTab && !canRenderContent;\n      const forceRenderHiddenMembers = Boolean(resultType === 'members' && areMembersHidden);\n\n      return (\n        <div className=\"content empty-list\">\n          {!noSpinner && !forceRenderHiddenMembers && <Spinner />}\n          {forceRenderHiddenMembers && <NothingFound text=\"You have no access to group members list.\" />}\n        </div>\n      );\n    }\n\n    if (!viewportIds.length) {\n      let text: string;\n\n      switch (resultType) {\n        case 'members':\n          text = areMembersHidden ? 'You have no access to group members list.' : 'No members found';\n          break;\n        case 'commonChats':\n          text = lang('NoGroupsInCommon');\n          break;\n        case 'documents':\n          text = lang('lng_media_file_empty');\n          break;\n        case 'links':\n          text = lang('lng_media_link_empty');\n          break;\n        case 'audio':\n          text = lang('lng_media_song_empty');\n          break;\n        case 'voice':\n          text = lang('lng_media_audio_empty');\n          break;\n        default:\n          text = lang('SharedMedia.EmptyTitle');\n      }\n\n      return (\n        <div className=\"content empty-list\">\n          <NothingFound text={text} />\n        </div>\n      );\n    }\n\n    return (\n      <div\n        className={`content ${resultType}-list`}\n        dir={lang.isRtl && resultType === 'media' ? 'rtl' : undefined}\n        teactFastList\n      >\n        {resultType === 'media' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Media\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onClick={handleSelectMedia}\n            />\n          ))\n        ) : resultType === 'documents' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Document\n              key={id}\n              message={messagesById[id]}\n              withDate\n              smaller\n              className=\"scroll-item\"\n              isDownloading={activeDownloadIds.includes(id)}\n              observeIntersection={observeIntersectionForMedia}\n              onDateClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'links' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <WebLink\n              key={id}\n              message={messagesById[id]}\n              isProtected={isChatProtected || messagesById[id].isProtected}\n              observeIntersection={observeIntersectionForMedia}\n              onMessageClick={handleMessageFocus}\n            />\n          ))\n        ) : resultType === 'audio' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'voice' ? (\n          (viewportIds as number[])!.map((id) => messagesById[id] && (\n            <Audio\n              key={id}\n              theme={theme}\n              message={messagesById[id]}\n              senderTitle={getSenderName(lang, messagesById[id], chatsById, usersById)}\n              origin={AudioOrigin.SharedMedia}\n              date={messagesById[id].date}\n              lastSyncTime={lastSyncTime}\n              className=\"scroll-item\"\n              onPlay={handlePlayAudio}\n              onDateClick={handleMessageFocus}\n              canDownload={!isChatProtected && !messagesById[id].isProtected}\n              isDownloading={activeDownloadIds.includes(id)}\n            />\n          ))\n        ) : resultType === 'members' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n              contextActions={getMemberContextAction(id)}\n            >\n              <PrivateChatInfo userId={id} adminMember={adminMembersById?.[id]} forceShowSelf />\n            </ListItem>\n          ))\n        ) : resultType === 'commonChats' ? (\n          (viewportIds as string[])!.map((id, i) => (\n            <ListItem\n              key={id}\n              teactOrderKey={i}\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id })}\n            >\n              <GroupChatInfo chatId={id} />\n            </ListItem>\n          ))\n        ) : undefined}\n      </div>\n    );\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"Profile custom-scroll\"\n      itemSelector={buildInfiniteScrollItemSelector(resultType)}\n      items={canRenderContent ? viewportIds : undefined}\n      cacheBuster={cacheBuster}\n      sensitiveArea={PROFILE_SENSITIVE_AREA}\n      preloadBackwards={canRenderContent ? (resultType === 'members' ? MEMBERS_SLICE : SHARED_MEDIA_SLICE) : 0}\n      // To prevent scroll jumps caused by reordering member list\n      noScrollRestoreOnTop\n      noFastList\n      onLoadMore={getMore}\n      onScroll={handleScroll}\n    >\n      {!noProfileInfo && renderProfileInfo(chatId, resolvedUserId, isRightColumnShown && canRenderContent)}\n      {!isRestricted && (\n        <div\n          className=\"shared-media\"\n        >\n          <Transition\n            ref={transitionRef}\n            name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n            activeKey={activeKey}\n            renderCount={tabs.length}\n            shouldRestoreHeight\n            className=\"shared-media-transition\"\n            onStart={applyTransitionFix}\n            onStop={handleTransitionStop}\n          >\n            {renderContent()}\n          </Transition>\n          <TabList big activeTab={renderingActiveTab} tabs={tabs} onSwitchTab={setActiveTab} />\n        </div>\n      )}\n\n      {canAddMembers && (\n        <FloatingActionButton\n          isShown={resultType === 'members'}\n          onClick={handleNewMemberDialogOpen}\n          ariaLabel={lang('lng_channel_add_users')}\n        >\n          <i className=\"icon-add-user-filled\" />\n        </FloatingActionButton>\n      )}\n      {canDeleteMembers && (\n        <DeleteMemberModal\n          isOpen={Boolean(deletingUserId)}\n          userId={deletingUserId}\n          onClose={handleDeleteMembersModalClose}\n        />\n      )}\n    </InfiniteScroll>\n  );\n};\n\nfunction renderProfileInfo(chatId: string, resolvedUserId: string | undefined, isReady: boolean) {\n  return (\n    <div className=\"profile-info\">\n      <ProfileInfo userId={resolvedUserId || chatId} canPlayVideo={isReady} />\n      <ChatExtra chatOrUserId={resolvedUserId || chatId} />\n    </div>\n  );\n}\n\nfunction buildInfiniteScrollItemSelector(resultType: string) {\n  return [\n    // Used on first render\n    `.shared-media-transition > div:only-child > .${resultType}-list > .scroll-item`,\n    // Used after transition\n    `.shared-media-transition > .Transition__slide--active > .${resultType}-list > .scroll-item`,\n  ].join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, topicId, isMobile }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = selectChatMessages(global, chatId);\n    const { currentType: mediaSearchType, resultsByType } = selectCurrentMediaSearch(global) || {};\n    const { foundIds } = (resultsByType && mediaSearchType && resultsByType[mediaSearchType]) || {};\n\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const { byId: chatsById } = global.chats;\n\n    const isGroup = chat && isChatGroup(chat);\n    const isChannel = chat && isChatChannel(chat);\n    const hasMembersTab = !topicId && (isGroup || (isChannel && isChatAdmin(chat!)));\n    const members = chat?.fullInfo?.members;\n    const adminMembersById = chat?.fullInfo?.adminMembersById;\n    const areMembersHidden = hasMembersTab && chat\n      && (chat.isForbidden || (chat.fullInfo && !chat.fullInfo.canViewMembers));\n    const canAddMembers = hasMembersTab && chat\n      && (getHasAdminRight(chat, 'inviteUsers') || !isUserRightBanned(chat, 'inviteUsers') || chat.isCreator);\n    const canDeleteMembers = hasMembersTab && chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n    const activeDownloadIds = selectActiveDownloadIds(global, chatId);\n\n    let hasCommonChatsTab;\n    let resolvedUserId;\n    let user;\n    if (isUserId(chatId)) {\n      resolvedUserId = chatId;\n      user = selectUser(global, resolvedUserId);\n      hasCommonChatsTab = user && !user.isSelf && !isUserBot(user);\n    }\n\n    return {\n      theme: selectTheme(global),\n      isChannel,\n      resolvedUserId,\n      messagesById,\n      foundIds,\n      mediaSearchType,\n      hasCommonChatsTab,\n      hasMembersTab,\n      areMembersHidden,\n      canAddMembers,\n      canDeleteMembers,\n      currentUserId: global.currentUserId,\n      isRightColumnShown: selectIsRightColumnShown(global, isMobile),\n      isRestricted: chat?.isRestricted,\n      lastSyncTime: global.lastSyncTime,\n      activeDownloadIds,\n      usersById,\n      userStatusesById,\n      chatsById,\n      isChatProtected: chat?.isProtected,\n      ...(hasMembersTab && members && { members, adminMembersById }),\n      ...(hasCommonChatsTab && user && { commonChatIds: user.commonChats?.ids }),\n    };\n  },\n)(Profile));\n","import { useCallback, useEffect } from '../../../lib/teact/teact';\n\nexport default function useTransitionFixes(\n  containerRef: { current: HTMLDivElement | null },\n  transitionElSelector = '.Transition.shared-media-transition',\n) {\n  // Set `min-height` for shared media container to prevent jumping when switching tabs\n  useEffect(() => {\n    function setMinHeight() {\n      const container = containerRef.current!;\n      const transitionEl = container.querySelector<HTMLDivElement>(transitionElSelector);\n      const tabsEl = container.querySelector<HTMLDivElement>('.TabList');\n      if (transitionEl && tabsEl) {\n        transitionEl.style.minHeight = `${container.offsetHeight - tabsEl.offsetHeight}px`;\n      }\n    }\n\n    setMinHeight();\n\n    window.addEventListener('resize', setMinHeight, false);\n\n    return () => {\n      window.removeEventListener('resize', setMinHeight, false);\n    };\n  }, [containerRef, transitionElSelector]);\n\n  // Workaround for scrollable content flickering during animation.\n  const applyTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    if (container.style.overflowY !== 'hidden') {\n      const scrollBarWidth = container.offsetWidth - container.clientWidth;\n      container.style.overflowY = 'hidden';\n      container.style.marginRight = `${scrollBarWidth}px`;\n    }\n  }, [containerRef]);\n\n  const releaseTransitionFix = useCallback(() => {\n    const container = containerRef.current!;\n    container.style.overflowY = 'scroll';\n    container.style.marginRight = '0';\n  }, [containerRef]);\n\n  return { applyTransitionFix, releaseTransitionFix };\n}\n","import { useCallback, useState } from '../lib/teact/teact';\n\nconst useCacheBuster = () => {\n  const [cacheBuster, setCacheBuster] = useState(0);\n\n  const updateCacheBuster = useCallback(() => {\n    setCacheBuster((current) => current + 1);\n  }, []);\n\n  return [cacheBuster, updateCacheBuster] as const;\n};\n\nexport default useCacheBuster;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './RightSearch';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst RightSearchAsync: FC<OwnProps> = (props) => {\n  const RightSearch = useModuleLoader(Bundles.Extra, 'RightSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RightSearch ? <RightSearch {...props} /> : <Loading />;\n};\n\nexport default memo(RightSearchAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Management';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nimport Loading from '../../ui/Loading';\n\nconst ManagementAsync: FC<OwnProps> = (props) => {\n  const Management = useModuleLoader(Bundles.Extra, 'Management');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Management ? <Management {...props} /> : <Loading />;\n};\n\nexport default memo(ManagementAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './Statistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst StatisticsAsync: FC<OwnProps> = (props) => {\n  const Statistics = useModuleLoader(Bundles.Extra, 'Statistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Statistics ? <Statistics {...props} /> : <Loading />;\n};\n\nexport default StatisticsAsync;\n","import type { FC } from '../../../lib/teact/teact';\nimport React from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './MessageStatistics';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport Loading from '../../ui/Loading';\n\nconst MessageStatisticsAsync: FC<OwnProps> = (props) => {\n  const MessageStatistics = useModuleLoader(Bundles.Extra, 'MessageStatistics');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return MessageStatistics ? <MessageStatistics {...props} /> : <Loading />;\n};\n\nexport default MessageStatisticsAsync;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst StickerSearchAsync: FC = () => {\n  const StickerSearch = useModuleLoader(Bundles.Extra, 'StickerSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return StickerSearch ? <StickerSearch /> : <Loading />;\n};\n\nexport default memo(StickerSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst GifSearchAsync: FC = () => {\n  const GifSearch = useModuleLoader(Bundles.Extra, 'GifSearch');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GifSearch ? <GifSearch /> : <Loading />;\n};\n\nexport default memo(GifSearchAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst PollResultsAsync: FC = () => {\n  const PollResults = useModuleLoader(Bundles.Extra, 'PollResults');\n\n  return PollResults ? <PollResults /> : <Loading />;\n};\n\nexport default memo(PollResultsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useMemo, memo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiChatMember,\n} from '../../api/types';\nimport { NewChatMembersProgress } from '../../types';\n\nimport { unique } from '../../util/iteratees';\nimport { selectChat, selectTabState } from '../../global/selectors';\nimport {\n  filterUsersByName, isChatChannel, isUserBot, sortChatIds,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Picker from '../common/Picker';\nimport FloatingActionButton from '../ui/FloatingActionButton';\nimport Spinner from '../ui/Spinner';\n\nimport './AddChatMembers.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  onNextStep: (memberIds: string[]) => void;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  isChannel?: boolean;\n  members?: ApiChatMember[];\n  currentUserId?: string;\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isLoading: boolean;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst AddChatMembers: FC<OwnProps & StateProps> = ({\n  isChannel,\n  members,\n  onNextStep,\n  currentUserId,\n  chatsById,\n  localContactIds,\n  isLoading,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n  onClose,\n  isActive,\n}) => {\n  const { setUserSearchQuery } = getActions();\n\n  const lang = useLang();\n  const [selectedMemberIds, setSelectedMemberIds] = useState<string[]>([]);\n  const prevSelectedMemberIds = usePrevious(selectedMemberIds);\n  const noPickerScrollRestore = prevSelectedMemberIds === selectedMemberIds;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    return members ? members.map((member) => member.userId) : [];\n  }, [members]);\n\n  const handleFilterChange = useCallback((query: string) => {\n    setUserSearchQuery({ query });\n  }, [setUserSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const filteredContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...filteredContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((userId) => {\n        const user = usersById[userId];\n\n        // The user can be added to the chat if the following conditions are met:\n        // the user has not yet been added to the current chat\n        // AND it is not the current user,\n        // AND (it is not found (user from global search) OR it is not a bot OR it is a bot,\n        // but the current chat is not a channel AND the appropriate permission is set).\n        return (\n          !memberIds.includes(userId)\n          && userId !== currentUserId\n          && (!user || !isUserBot(user) || (!isChannel && user.canBeInvitedToGroup))\n        );\n      }),\n      chatsById,\n    );\n  }, [\n    localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, currentUserId, memberIds, isChannel,\n  ]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length) {\n      setUserSearchQuery({ query: '' });\n      onNextStep(selectedMemberIds);\n    }\n  }, [selectedMemberIds, setUserSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"AddChatMembers\">\n      <div className=\"AddChatMembers-inner\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('lng_channel_add_users')}\n          searchInputId=\"new-members-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={setSelectedMemberIds}\n          onFilterChange={handleFilterChange}\n          noScrollRestore={noPickerScrollRestore}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length)}\n          disabled={isLoading}\n          ariaLabel={lang('lng_channel_add_users')}\n          onClick={handleNextStep}\n        >\n          {isLoading ? (\n            <Spinner color=\"white\" />\n          ) : (\n            <i className=\"icon-arrow-right\" />\n          )}\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n    const { newChatMembersProgress } = selectTabState(global);\n    const { currentUserId } = global;\n    const isChannel = chat && isChatChannel(chat);\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = selectTabState(global).userSearch;\n\n    return {\n      isChannel,\n      members: chat?.fullInfo?.members,\n      currentUserId,\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      isLoading: newChatMembersProgress === NewChatMembersProgress.Loading,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(AddChatMembers));\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './CreateTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst CreateTopicAsync: FC<OwnProps> = (props) => {\n  const CreateTopic = useModuleLoader(Bundles.Extra, 'CreateTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CreateTopic ? <CreateTopic {...props} /> : <Loading />;\n};\n\nexport default memo(CreateTopicAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './EditTopic';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport Loading from '../ui/Loading';\n\nconst EditTopicAsync: FC<OwnProps> = (props) => {\n  const EditTopic = useModuleLoader(Bundles.Extra, 'EditTopic');\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return EditTopic ? <EditTopic {...props} /> : <Loading />;\n};\n\nexport default memo(EditTopicAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport {\n  ManagementScreens, NewChatMembersProgress, ProfileState, RightColumnContent,\n} from '../../types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { ANIMATION_END_DELAY, MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN } from '../../config';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport {\n  selectAreActiveChatsLoaded,\n  selectChat,\n  selectCurrentMessageList, selectTabState,\n  selectRightColumnContentKey,\n} from '../../global/selectors';\nimport useLayoutEffectWithPrevDeps from '../../hooks/useLayoutEffectWithPrevDeps';\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport RightHeader from './RightHeader';\nimport Profile from './Profile';\nimport Transition from '../ui/Transition';\nimport RightSearch from './RightSearch.async';\nimport Management from './management/Management.async';\nimport Statistics from './statistics/Statistics.async';\nimport MessageStatistics from './statistics/MessageStatistics.async';\nimport StickerSearch from './StickerSearch.async';\nimport GifSearch from './GifSearch.async';\nimport PollResults from './PollResults.async';\nimport AddChatMembers from './AddChatMembers';\nimport CreateTopic from './CreateTopic.async';\nimport EditTopic from './EditTopic.async';\n\nimport './RightColumn.scss';\n\ninterface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  contentKey?: RightColumnContent;\n  chatId?: string;\n  threadId?: number;\n  isInsideTopic?: boolean;\n  isChatSelected: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  nextManagementScreen?: ManagementScreens;\n};\n\nconst ANIMATION_DURATION = 450 + ANIMATION_END_DELAY;\nconst MAIN_SCREENS_COUNT = Object.keys(RightColumnContent).length / 2;\nconst MANAGEMENT_SCREENS_COUNT = Object.keys(ManagementScreens).length / 2;\n\nfunction blurSearchInput() {\n  const searchInput = document.querySelector('.RightHeader .SearchInput input') as HTMLInputElement;\n  if (searchInput) {\n    searchInput.blur();\n  }\n}\n\nconst RightColumn: FC<OwnProps & StateProps> = ({\n  contentKey,\n  chatId,\n  threadId,\n  isMobile,\n  isInsideTopic,\n  isChatSelected,\n  shouldSkipHistoryAnimations,\n  nextManagementScreen,\n}) => {\n  const {\n    toggleChatInfo,\n    toggleManagement,\n    closeLocalTextSearch,\n    setStickerSearchQuery,\n    setGifSearchQuery,\n    closePollResults,\n    addChatMembers,\n    setNewChatMembersDialogState,\n    setEditingExportedInvite,\n    toggleStatistics,\n    toggleMessageStatistics,\n    setOpenedInviteInfo,\n    requestNextManagementScreen,\n    closeCreateTopicPanel,\n    closeEditTopicPanel,\n  } = getActions();\n\n  const { width: windowWidth } = useWindowSize();\n  const [profileState, setProfileState] = useState<ProfileState>(ProfileState.Profile);\n  const [managementScreen, setManagementScreen] = useState<ManagementScreens>(ManagementScreens.Initial);\n  const [selectedChatMemberId, setSelectedChatMemberId] = useState<string | undefined>();\n  const [isPromotedByCurrentUser, setIsPromotedByCurrentUser] = useState<boolean | undefined>();\n  const isScrolledDown = profileState !== ProfileState.Profile;\n\n  const isOpen = contentKey !== undefined;\n  const isProfile = contentKey === RightColumnContent.ChatInfo;\n  const isSearch = contentKey === RightColumnContent.Search;\n  const isManagement = contentKey === RightColumnContent.Management;\n  const isStatistics = contentKey === RightColumnContent.Statistics;\n  const isMessageStatistics = contentKey === RightColumnContent.MessageStatistics;\n  const isStickerSearch = contentKey === RightColumnContent.StickerSearch;\n  const isGifSearch = contentKey === RightColumnContent.GifSearch;\n  const isPollResults = contentKey === RightColumnContent.PollResults;\n  const isAddingChatMembers = contentKey === RightColumnContent.AddingMembers;\n  const isCreatingTopic = contentKey === RightColumnContent.CreateTopic;\n  const isEditingTopic = contentKey === RightColumnContent.EditTopic;\n  const isOverlaying = windowWidth <= MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN;\n\n  const [shouldSkipTransition, setShouldSkipTransition] = useState(!isOpen);\n\n  const renderingContentKey = useCurrentOrPrev(contentKey, true, !isChatSelected) ?? -1;\n\n  const close = useCallback((shouldScrollUp = true) => {\n    switch (contentKey) {\n      case RightColumnContent.AddingMembers:\n        setNewChatMembersDialogState({ newChatMembersProgress: NewChatMembersProgress.Closed });\n        break;\n      case RightColumnContent.ChatInfo:\n        if (isScrolledDown && shouldScrollUp) {\n          setProfileState(ProfileState.Profile);\n          break;\n        }\n        toggleChatInfo({ force: false }, { forceSyncOnIOs: true });\n        break;\n      case RightColumnContent.Management: {\n        switch (managementScreen) {\n          case ManagementScreens.Initial:\n            toggleManagement();\n            break;\n          case ManagementScreens.ChatPrivacyType:\n          case ManagementScreens.Discussion:\n          case ManagementScreens.GroupPermissions:\n          case ManagementScreens.GroupType:\n          case ManagementScreens.ChatAdministrators:\n          case ManagementScreens.ChannelSubscribers:\n          case ManagementScreens.GroupMembers:\n          case ManagementScreens.Invites:\n          case ManagementScreens.Reactions:\n          case ManagementScreens.JoinRequests:\n          case ManagementScreens.ChannelRemovedUsers:\n            setManagementScreen(ManagementScreens.Initial);\n            break;\n          case ManagementScreens.GroupUserPermissionsCreate:\n          case ManagementScreens.GroupRemovedUsers:\n          case ManagementScreens.GroupUserPermissions:\n            setManagementScreen(ManagementScreens.GroupPermissions);\n            setSelectedChatMemberId(undefined);\n            setIsPromotedByCurrentUser(undefined);\n            break;\n          case ManagementScreens.ChatAdminRights:\n          case ManagementScreens.ChatNewAdminRights:\n          case ManagementScreens.GroupAddAdmins:\n          case ManagementScreens.GroupRecentActions:\n            setManagementScreen(ManagementScreens.ChatAdministrators);\n            break;\n          case ManagementScreens.EditInvite:\n          case ManagementScreens.InviteInfo:\n            setManagementScreen(ManagementScreens.Invites);\n            setOpenedInviteInfo({ chatId: chatId!, invite: undefined });\n            setEditingExportedInvite({ chatId: chatId!, invite: undefined });\n            break;\n        }\n\n        break;\n      }\n      case RightColumnContent.MessageStatistics:\n        toggleMessageStatistics();\n        break;\n      case RightColumnContent.Statistics:\n        toggleStatistics();\n        break;\n      case RightColumnContent.Search: {\n        blurSearchInput();\n        closeLocalTextSearch();\n        break;\n      }\n      case RightColumnContent.StickerSearch:\n        blurSearchInput();\n        setStickerSearchQuery({ query: undefined });\n        break;\n      case RightColumnContent.GifSearch: {\n        blurSearchInput();\n        setGifSearchQuery({ query: undefined });\n        break;\n      }\n      case RightColumnContent.PollResults:\n        closePollResults();\n        break;\n      case RightColumnContent.CreateTopic:\n        closeCreateTopicPanel();\n        break;\n      case RightColumnContent.EditTopic:\n        closeEditTopicPanel();\n        break;\n    }\n  }, [\n    contentKey, isScrolledDown, toggleChatInfo, closePollResults, setNewChatMembersDialogState,\n    managementScreen, toggleManagement, closeLocalTextSearch, setStickerSearchQuery, setGifSearchQuery,\n    setEditingExportedInvite, chatId, setOpenedInviteInfo, toggleStatistics, toggleMessageStatistics,\n    closeCreateTopicPanel, closeEditTopicPanel,\n  ]);\n\n  const handleSelectChatMember = useCallback((memberId, isPromoted) => {\n    setSelectedChatMemberId(memberId);\n    setIsPromotedByCurrentUser(isPromoted);\n  }, []);\n\n  const handleAppendingChatMembers = useCallback((memberIds: string[]) => {\n    addChatMembers({ chatId: chatId!, memberIds });\n  }, [addChatMembers, chatId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(close) : undefined), [isOpen, close]);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setShouldSkipTransition(!isOpen);\n    }, ANIMATION_DURATION);\n  }, [isOpen]);\n\n  useEffect(() => {\n    if (nextManagementScreen) {\n      setManagementScreen(nextManagementScreen);\n      requestNextManagementScreen(undefined);\n    }\n  }, [nextManagementScreen, requestNextManagementScreen]);\n\n  // Close Right Column when it transforms into overlayed state on screen resize\n  useEffect(() => {\n    if (isOpen && isOverlaying) {\n      close();\n    }\n    // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps\n  }, [isOverlaying]);\n\n  // We need to clear profile state and management screen state, when changing chats\n  useLayoutEffectWithPrevDeps(([prevChatId]) => {\n    if (prevChatId !== chatId) {\n      setProfileState(ProfileState.Profile);\n      setManagementScreen(ManagementScreens.Initial);\n    }\n  }, [chatId]);\n\n  useHistoryBack({\n    isActive: isChatSelected && (\n      contentKey === RightColumnContent.ChatInfo\n      || contentKey === RightColumnContent.Management\n      || contentKey === RightColumnContent.AddingMembers\n      || contentKey === RightColumnContent.CreateTopic\n      || contentKey === RightColumnContent.EditTopic),\n    onBack: () => close(false),\n  });\n\n  function renderContent(isActive: boolean) {\n    if (renderingContentKey === -1) {\n      return undefined;\n    }\n\n    switch (renderingContentKey) {\n      case RightColumnContent.AddingMembers:\n        return (\n          <AddChatMembers\n            key={chatId!}\n            chatId={chatId!}\n            isActive={isOpen && isActive}\n            onNextStep={handleAppendingChatMembers}\n            onClose={close}\n          />\n        );\n      case RightColumnContent.ChatInfo:\n        return (\n          <Profile\n            key={chatId!}\n            chatId={chatId!}\n            topicId={isInsideTopic ? threadId : undefined}\n            profileState={profileState}\n            isMobile={isMobile}\n            onProfileStateChange={setProfileState}\n          />\n        );\n      case RightColumnContent.Search:\n        return <RightSearch chatId={chatId!} threadId={threadId!} onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.Management:\n        return (\n          <Management\n            key={chatId!}\n            chatId={chatId!}\n            currentScreen={managementScreen}\n            isPromotedByCurrentUser={isPromotedByCurrentUser}\n            selectedChatMemberId={selectedChatMemberId}\n            isActive={isOpen && isActive}\n            onScreenSelect={setManagementScreen}\n            onChatMemberSelect={handleSelectChatMember}\n            onClose={close}\n          />\n        );\n\n      case RightColumnContent.Statistics:\n        return <Statistics chatId={chatId!} />;\n      case RightColumnContent.MessageStatistics:\n        return <MessageStatistics chatId={chatId!} isActive={isOpen && isActive} />;\n      case RightColumnContent.StickerSearch:\n        return <StickerSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.GifSearch:\n        return <GifSearch onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.PollResults:\n        return <PollResults onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.CreateTopic:\n        return <CreateTopic onClose={close} isActive={isOpen && isActive} />;\n      case RightColumnContent.EditTopic:\n        return <EditTopic onClose={close} isActive={isOpen && isActive} />;\n    }\n\n    return undefined; // Unreachable\n  }\n\n  return (\n    <div\n      id=\"RightColumn-wrapper\"\n      className={!isChatSelected ? 'is-hidden' : undefined}\n    >\n      {isOverlaying && (\n        <div className=\"overlay-backdrop\" onClick={close} />\n      )}\n      <div id=\"RightColumn\">\n        <RightHeader\n          chatId={chatId}\n          threadId={threadId}\n          isColumnOpen={isOpen}\n          isProfile={isProfile}\n          isSearch={isSearch}\n          isManagement={isManagement}\n          isStatistics={isStatistics}\n          isMessageStatistics={isMessageStatistics}\n          isStickerSearch={isStickerSearch}\n          isGifSearch={isGifSearch}\n          isPollResults={isPollResults}\n          isCreatingTopic={isCreatingTopic}\n          isEditingTopic={isEditingTopic}\n          isAddingChatMembers={isAddingChatMembers}\n          profileState={profileState}\n          managementScreen={managementScreen}\n          onClose={close}\n          onScreenSelect={setManagementScreen}\n        />\n        <Transition\n          name={(shouldSkipTransition || shouldSkipHistoryAnimations) ? 'none' : 'zoom-fade'}\n          renderCount={MAIN_SCREENS_COUNT + MANAGEMENT_SCREENS_COUNT}\n          activeKey={isManagement ? MAIN_SCREENS_COUNT + managementScreen : renderingContentKey}\n          shouldCleanup\n          cleanupExceptionKey={\n            renderingContentKey === RightColumnContent.MessageStatistics\n              ? RightColumnContent.Statistics : undefined\n          }\n        >\n          {renderContent}\n        </Transition>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const areActiveChatsLoaded = selectAreActiveChatsLoaded(global);\n    const { management, shouldSkipHistoryAnimations } = selectTabState(global);\n    const nextManagementScreen = chatId ? management.byChatId[chatId]?.nextScreen : undefined;\n    const isForum = chatId ? selectChat(global, chatId)?.isForum : undefined;\n    const isInsideTopic = isForum && Boolean(threadId && threadId !== MAIN_THREAD_ID);\n\n    return {\n      contentKey: selectRightColumnContentKey(global, isMobile),\n      chatId,\n      threadId,\n      isInsideTopic,\n      isChatSelected: Boolean(chatId && areActiveChatsLoaded),\n      shouldSkipHistoryAnimations,\n      nextManagementScreen,\n    };\n  },\n)(RightColumn));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport { Bundles } from '../../util/moduleLoader';\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\ninterface OwnProps {\n  isOpen: boolean;\n}\n\nconst MediaViewerAsync: FC<OwnProps> = ({ isOpen }) => {\n  const MediaViewer = useModuleLoader(Bundles.Extra, 'MediaViewer', !isOpen);\n\n  return MediaViewer ? <MediaViewer /> : undefined;\n};\n\nexport default memo(MediaViewerAsync);\n","import { pause } from './schedulers';\n\ntype PendingDownload = {\n  url: string;\n  filename: string;\n};\n\n// Chrome prevents more than 10 downloads per second\nconst LIMIT_PER_BATCH = 10;\nconst BATCH_INTERVAL = 1000;\n\nlet pendingDownloads: PendingDownload[] = [];\nlet planned = false;\n\nexport default function download(url: string, filename: string) {\n  pendingDownloads.push({ url, filename });\n  if (!planned) {\n    planned = true;\n    setTimeout(async () => {\n      await processQueue();\n      planned = false;\n    }, BATCH_INTERVAL);\n  }\n}\n\nasync function processQueue() {\n  let count = 0;\n  for (const pendingDownload of pendingDownloads) {\n    downloadOne(pendingDownload);\n    count++;\n    if (count === LIMIT_PER_BATCH) {\n      await pause(BATCH_INTERVAL);\n      count = 0;\n    }\n  }\n  pendingDownloads = [];\n}\n\nfunction downloadOne({ url, filename }: PendingDownload) {\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  try {\n    link.click();\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err); // Suppress redundant \"Blob loading failed\" error popup on IOS\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { Thread } from '../../global/types';\nimport type { ApiMessage } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { selectTabState } from '../../global/selectors';\nimport { IS_OPFS_SUPPORTED, IS_SERVICE_WORKER_SUPPORTED, MAX_BUFFER_SIZE } from '../../util/environment';\nimport * as mediaLoader from '../../util/mediaLoader';\nimport download from '../../util/download';\nimport {\n  getMessageContentFilename, getMessageMediaFormat, getMessageMediaHash,\n} from '../../global/helpers';\n\nimport useRunDebounced from '../../hooks/useRunDebounced';\n\ntype StateProps = {\n  activeDownloads: Record<string, number[]>;\n  messages: Record<string, {\n    byId: Record<number, ApiMessage>;\n    threadsById: Record<number, Thread>;\n  }>;\n};\n\nconst GLOBAL_UPDATE_DEBOUNCE = 1000;\n\nconst processedMessages = new Set<ApiMessage>();\nconst downloadedMessages = new Set<ApiMessage>();\n\nconst DownloadManager: FC<StateProps> = ({\n  activeDownloads,\n  messages,\n}) => {\n  const { cancelMessagesMediaDownload, showNotification } = getActions();\n\n  const runDebounced = useRunDebounced(GLOBAL_UPDATE_DEBOUNCE, true);\n\n  const handleMessageDownloaded = useCallback((message: ApiMessage) => {\n    downloadedMessages.add(message);\n    runDebounced(() => {\n      if (downloadedMessages.size) {\n        cancelMessagesMediaDownload({ messages: Array.from(downloadedMessages) });\n        downloadedMessages.clear();\n      }\n    });\n  }, [cancelMessagesMediaDownload, runDebounced]);\n\n  useEffect(() => {\n    const activeMessages = Object.entries(activeDownloads).map(([chatId, messageIds]) => (\n      messageIds.map((id) => messages[chatId].byId[id])\n    )).flat();\n\n    if (!activeMessages.length) {\n      processedMessages.clear();\n      return;\n    }\n\n    activeMessages.forEach((message) => {\n      if (processedMessages.has(message)) {\n        return;\n      }\n      processedMessages.add(message);\n      const downloadHash = getMessageMediaHash(message, 'download');\n      if (!downloadHash) {\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaData = mediaLoader.getFromMemory(downloadHash);\n\n      if (mediaData) {\n        download(mediaData, getMessageContentFilename(message));\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const {\n        document, video, audio,\n      } = message.content;\n      const mediaSize = (document || video || audio)?.size || 0;\n      if (mediaSize > MAX_BUFFER_SIZE && !IS_OPFS_SUPPORTED && !IS_SERVICE_WORKER_SUPPORTED) {\n        showNotification({\n          message: 'Downloading files bigger than 2GB is not supported in your browser.',\n        });\n        handleMessageDownloaded(message);\n        return;\n      }\n\n      const mediaFormat = getMessageMediaFormat(message, 'download');\n      mediaLoader.fetch(downloadHash, mediaFormat, true).then((result) => {\n        if (mediaFormat === ApiMediaFormat.DownloadUrl) {\n          const url = new URL(result, window.document.baseURI);\n          const filename = getMessageContentFilename(message);\n          url.searchParams.set('filename', encodeURIComponent(filename));\n          const downloadWindow = window.open(url.toString());\n          downloadWindow?.addEventListener('beforeunload', () => {\n            showNotification({\n              message: 'Download started. Please, do not close the app before it is finished.',\n            });\n          });\n        } else if (result) {\n          download(result, getMessageContentFilename(message));\n        }\n\n        handleMessageDownloaded(message);\n      });\n    });\n  }, [messages, activeDownloads, cancelMessagesMediaDownload, handleMessageDownloaded, showNotification]);\n\n  return undefined;\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const activeDownloads = selectTabState(global).activeDownloads.byChatId;\n    const messages = global.messages.byChatId;\n    return {\n      activeDownloads,\n      messages,\n    };\n  },\n)(DownloadManager));\n","import React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions } from '../../lib/teact/teactn';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { TabState } from '../../global/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\n\nimport { withGlobal } from '../../global';\nimport { selectChat } from '../../global/selectors';\nimport { getCanPostInChat } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useSendMessageAction from '../../hooks/useSendMessageAction';\nimport useInterval from '../../hooks/useInterval';\n\nimport Modal from '../ui/Modal';\n\nimport './GameModal.scss';\n\ntype GameEvents = { eventType: 'share_score' | 'share_game' };\n\nconst PLAY_GAME_ACTION_INTERVAL = 5000;\n\ntype OwnProps = {\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n};\n\ntype StateProps = {\n  canPost?: boolean;\n};\n\nconst GameModal: FC<OwnProps & StateProps> = ({ openedGame, gameTitle, canPost }) => {\n  const { closeGame, openForwardMenu } = getActions();\n  const lang = useLang();\n  const { url, chatId, messageId } = openedGame || {};\n  const isOpen = Boolean(url);\n\n  const sendMessageAction = useSendMessageAction(chatId);\n  useInterval(() => {\n    sendMessageAction({ type: 'playingGame' });\n  }, isOpen && canPost ? PLAY_GAME_ACTION_INTERVAL : undefined);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    try {\n      const data = JSON.parse(event.data) as GameEvents;\n      if (data.eventType === 'share_score') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId], withMyScore: true });\n        closeGame();\n      }\n\n      if (data.eventType === 'share_game') {\n        openForwardMenu({ fromChatId: chatId, messageIds: [messageId] });\n        closeGame();\n      }\n    } catch (e) {\n      // Ignore other messages\n    }\n  }, [chatId, closeGame, messageId, openForwardMenu]);\n\n  const handleLoad = useCallback((event: React.SyntheticEvent<HTMLIFrameElement>) => {\n    event.currentTarget.focus();\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  return (\n    <Modal\n      className=\"GameModal\"\n      isOpen={isOpen}\n      onClose={closeGame}\n      title={gameTitle}\n      hasCloseButton\n    >\n      {isOpen && (\n        <iframe\n          className=\"game-frame\"\n          onLoad={handleLoad}\n          src={url}\n          title={lang('AttachGame')}\n          sandbox=\"allow-scripts allow-same-origin allow-orientation-lock\"\n          allow=\"fullscreen\"\n        />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { openedGame }): StateProps => {\n    const { chatId } = openedGame || {};\n    const chat = chatId && selectChat(global, chatId);\n    const canPost = Boolean(chat) && getCanPostInChat(chat, MAIN_THREAD_ID);\n\n    return {\n      canPost,\n    };\n  },\n)(GameModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NotificationsAsync: FC = ({ isOpen }) => {\n  const Notifications = useModuleLoader(Bundles.Extra, 'Notifications', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Notifications ? <Notifications /> : undefined;\n};\n\nexport default memo(NotificationsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DialogsAsync: FC = ({ isOpen }) => {\n  const Dialogs = useModuleLoader(Bundles.Extra, 'Dialogs', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return Dialogs ? <Dialogs /> : undefined;\n};\n\nexport default memo(DialogsAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './ForwardRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ForwardRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ForwardRecipientPicker = useModuleLoader(Bundles.Extra, 'ForwardRecipientPicker', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ForwardRecipientPicker ? <ForwardRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(ForwardRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './SafeLinkModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst SafeLinkModalAsync: FC<OwnProps> = (props) => {\n  const { url } = props;\n  const SafeLinkModal = useModuleLoader(Bundles.Extra, 'SafeLinkModal', !url);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return SafeLinkModal ? <SafeLinkModal {...props} /> : undefined;\n};\n\nexport default memo(SafeLinkModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './HistoryCalendar';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst HistoryCalendarAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const HistoryCalendar = useModuleLoader(Bundles.Extra, 'HistoryCalendar', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return HistoryCalendar ? <HistoryCalendar {...props} /> : undefined;\n};\n\nexport default memo(HistoryCalendarAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\nimport type { OwnProps } from './GroupCall';\n\nconst GroupCallAsync: FC<OwnProps> = (props) => {\n  const { groupCallId } = props;\n  const GroupCall = useModuleLoader(Bundles.Calls, 'GroupCall', !groupCallId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return GroupCall ? <GroupCall {...props} /> : undefined;\n};\n\nexport default memo(GroupCallAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport useModuleLoader from '../../hooks/useModuleLoader';\nimport { Bundles } from '../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst ActiveCallHeaderAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const ActiveCallHeader = useModuleLoader(Bundles.Calls, 'ActiveCallHeader', !isActive);\n\n  return ActiveCallHeader ? <ActiveCallHeader /> : undefined;\n};\n\nexport default memo(ActiveCallHeaderAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport useModuleLoader from '../../../hooks/useModuleLoader';\nimport { Bundles } from '../../../util/moduleLoader';\n\ntype OwnProps = {\n  isActive?: boolean;\n};\n\nconst PhoneCallAsync: FC<OwnProps> = (props) => {\n  const { isActive } = props;\n  const PhoneCall = useModuleLoader(Bundles.Calls, 'PhoneCall', !isActive);\n\n  return PhoneCall ? <PhoneCall /> : undefined;\n};\n\nexport default memo(PhoneCallAsync);\n","import React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { MessageList as GlobalMessageList } from '../../global/types';\n\nimport { createLocationHash } from '../../util/routing';\nimport { selectTabState } from '../../global/selectors';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\ntype StateProps = {\n  messageLists?: GlobalMessageList[];\n};\n\n// Actual `MessageList` components are unmounted when deep in the history,\n// so we need a separate component just for handling history\nconst MessageListHistoryHandler: FC<StateProps> = ({ messageLists }) => {\n  const { openChat } = getActions();\n\n  const closeChat = () => {\n    openChat({ id: undefined }, { forceSyncOnIOs: true });\n  };\n\n  const MessageHistoryRecord: FC<GlobalMessageList> = ({ chatId, type, threadId }) => {\n    useHistoryBack({\n      isActive: true,\n      hash: createLocationHash(chatId, type, threadId),\n      onBack: closeChat,\n    });\n  };\n\n  return (\n    <div>\n      {messageLists?.map((messageList, i) => (\n        <MessageHistoryRecord\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${messageList.chatId}_${messageList.threadId}_${messageList.type}_${i}`}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...messageList}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    return {\n      messageLists: selectTabState(global).messageLists,\n    };\n  },\n)(MessageListHistoryHandler));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './NewContactModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst NewContactModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const NewContactModal = useModuleLoader(Bundles.Extra, 'NewContactModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return NewContactModal ? <NewContactModal {...props} /> : undefined;\n};\n\nexport default memo(NewContactModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { OwnProps } from './RatePhoneCallModal';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst RatePhoneCallModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const RatePhoneCallModal = useModuleLoader(Bundles.Calls, 'RatePhoneCallModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return RatePhoneCallModal ? <RatePhoneCallModal {...props} /> : undefined;\n};\n\nexport default memo(RatePhoneCallModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './WebAppModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst WebAppModalAsync: FC<OwnProps> = (props) => {\n  const { webApp } = props;\n  const WebAppModal = useModuleLoader(Bundles.Extra, 'WebAppModal', !webApp);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return WebAppModal ? <WebAppModal {...props} /> : undefined;\n};\n\nexport default memo(WebAppModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './BotTrustModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst BotTrustModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const BotTrustModal = useModuleLoader(Bundles.Extra, 'BotTrustModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return BotTrustModal ? <BotTrustModal {...props} /> : undefined;\n};\n\nexport default memo(BotTrustModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './AttachBotInstallModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotInstallModalAsync: FC<OwnProps> = (props) => {\n  const { bot } = props;\n  const AttachBotInstallModal = useModuleLoader(Bundles.Extra, 'AttachBotInstallModal', !bot);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotInstallModal ? <AttachBotInstallModal {...props} /> : undefined;\n};\n\nexport default memo(AttachBotInstallModalAsync);\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"vfd0Bo1X6k19aaxQ577t\"};","import React, { memo, useCallback, useRef } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { TabState } from '../../global/types';\nimport type { FC } from '../../lib/teact/teact';\n\nimport { pick } from '../../util/iteratees';\nimport buildStyle from '../../util/buildStyle';\nimport { selectTabState } from '../../global/selectors';\n\nimport useWindowSize from '../../hooks/useWindowSize';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useAppLayout from '../../hooks/useAppLayout';\n\nimport styles from './ConfettiContainer.module.scss';\n\ntype StateProps = {\n  confetti?: TabState['confetti'];\n};\n\ninterface Confetti {\n  pos: {\n    x: number;\n    y: number;\n  };\n  velocity: {\n    x: number;\n    y: number;\n  };\n  size: number;\n  color: string;\n  flicker: number;\n  flickerFrequency: number;\n  rotation: number;\n  lastDrawnAt: number;\n  frameCount: number;\n}\n\nconst CONFETTI_FADEOUT_TIMEOUT = 10000;\nconst DEFAULT_CONFETTI_SIZE = 10;\nconst CONFETTI_COLORS = ['#E8BC2C', '#D0049E', '#02CBFE', '#5723FD', '#FE8C27', '#6CB859'];\n\nconst ConfettiContainer: FC<StateProps> = ({ confetti }) => {\n  // eslint-disable-next-line no-null/no-null\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const confettiRef = useRef<Confetti[]>([]);\n  const isRafStartedRef = useRef(false);\n  const windowSize = useWindowSize();\n  const forceUpdate = useForceUpdate();\n  const { isMobile } = useAppLayout();\n\n  const defaultConfettiAmount = isMobile ? 50 : 100;\n  const {\n    lastConfettiTime, top, width, left, height,\n  } = confetti || {};\n\n  const generateConfetti = useCallback((w: number, h: number, amount = defaultConfettiAmount) => {\n    for (let i = 0; i < amount; i++) {\n      const leftSide = i % 2;\n      const pos = {\n        x: w * (leftSide ? -0.1 : 1.1),\n        y: h * 0.75,\n      };\n      const randomX = Math.random() * w * 1.5;\n      const randomY = -h / 2 - Math.random() * h;\n      const velocity = {\n        x: leftSide ? randomX : randomX * -1,\n        y: randomY,\n      };\n\n      const randomColor = CONFETTI_COLORS[Math.floor(Math.random() * CONFETTI_COLORS.length)];\n      const size = DEFAULT_CONFETTI_SIZE;\n      confettiRef.current.push({\n        pos,\n        size,\n        color: randomColor,\n        velocity,\n        flicker: size,\n        flickerFrequency: Math.random() * 0.2,\n        rotation: 0,\n        lastDrawnAt: Date.now(),\n        frameCount: 0,\n      });\n    }\n  }, [defaultConfettiAmount]);\n\n  const updateCanvas = useCallback(() => {\n    if (!canvasRef.current || !isRafStartedRef.current) {\n      return;\n    }\n    const canvas = canvasRef.current;\n\n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      return;\n    }\n\n    const { width: canvasWidth, height: canvasHeight } = canvas;\n    ctx.clearRect(0, 0, canvasWidth, canvasHeight);\n\n    const confettiToRemove: Confetti[] = [];\n    confettiRef.current.forEach((c, i) => {\n      const {\n        pos,\n        velocity,\n        size,\n        color,\n        flicker,\n        flickerFrequency,\n        rotation,\n        lastDrawnAt,\n        frameCount,\n      } = c;\n      const diff = (Date.now() - lastDrawnAt) / 1000;\n\n      const newPos = {\n        x: pos.x + velocity.x * diff,\n        y: pos.y + velocity.y * diff,\n      };\n\n      const newVelocity = {\n        x: velocity.x * 0.98, // Air Resistance\n        y: velocity.y += diff * 1000, // Gravity\n      };\n\n      const newFlicker = size * Math.abs(Math.sin(frameCount * flickerFrequency));\n      const newRotation = 5 * frameCount * flickerFrequency * (Math.PI / 180);\n\n      const newFrameCount = frameCount + 1;\n      const newLastDrawnAt = Date.now();\n\n      const shouldRemove = newPos.y > canvasHeight + c.size;\n      if (shouldRemove) {\n        confettiToRemove.push(c);\n        return;\n      }\n\n      const newConfetti = {\n        ...c,\n        pos: newPos,\n        velocity: newVelocity,\n        flicker: newFlicker,\n        rotation: newRotation,\n        lastDrawnAt: newLastDrawnAt,\n        frameCount: newFrameCount,\n      };\n\n      confettiRef.current[i] = newConfetti;\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.ellipse(\n        pos.x,\n        pos.y,\n        size,\n        flicker,\n        rotation,\n        0,\n        2 * Math.PI,\n      );\n      ctx.fill();\n    });\n    confettiRef.current = confettiRef.current.filter((c) => !confettiToRemove.includes(c));\n    if (confettiRef.current.length) {\n      requestAnimationFrame(updateCanvas);\n    } else {\n      isRafStartedRef.current = false;\n    }\n  }, []);\n\n  useSyncEffect(([prevConfettiTime]) => {\n    let hideTimeout: ReturnType<typeof setTimeout>;\n    if (prevConfettiTime !== lastConfettiTime) {\n      generateConfetti(width || windowSize.width, height || windowSize.height);\n      hideTimeout = setTimeout(forceUpdate, CONFETTI_FADEOUT_TIMEOUT);\n      if (!isRafStartedRef.current) {\n        isRafStartedRef.current = true;\n        requestAnimationFrame(updateCanvas);\n      }\n    }\n    return () => {\n      clearTimeout(hideTimeout);\n    };\n  // eslint-disable-next-line react-hooks-static-deps/exhaustive-deps -- Old timeout should be cleared only if new confetti is generated\n  }, [lastConfettiTime, forceUpdate, updateCanvas]);\n\n  if (!lastConfettiTime || Date.now() - lastConfettiTime > CONFETTI_FADEOUT_TIMEOUT) {\n    return undefined;\n  }\n\n  const style = buildStyle(\n    Boolean(top) && `top: ${top}px`,\n    Boolean(left) && `left: ${left}px`,\n    Boolean(width) && `width: ${width}px`,\n    Boolean(height) && `height: ${height}px`,\n  );\n\n  return (\n    <div id=\"Confetti\" className={styles.root} style={style}>\n      <canvas ref={canvasRef} className={styles.canvas} width={windowSize.width} height={windowSize.height} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(selectTabState(global), ['confetti']),\n)(ConfettiContainer));\n","import React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { OwnProps } from './UrlAuthModal';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst UrlAuthModalAsync: FC<OwnProps> = (props) => {\n  const { urlAuth } = props;\n  const UrlAuthModal = useModuleLoader(Bundles.Extra, 'UrlAuthModal', !urlAuth);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return UrlAuthModal ? <UrlAuthModal {...props} /> : undefined;\n};\n\nexport default memo(UrlAuthModalAsync);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { Bundles } from '../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumMainModal';\n\nimport useModuleLoader from '../../../hooks/useModuleLoader';\n\nconst PremiumMainModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PremiumMainModal = useModuleLoader(Bundles.Extra, 'PremiumMainModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumMainModal ? <PremiumMainModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumMainModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './PaymentModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst PaymentModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const PaymentModal = useModuleLoader(Bundles.Extra, 'PaymentModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PaymentModal ? <PaymentModal {...props} /> : undefined;\n};\n\nexport default memo(PaymentModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './ReceiptModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst ReceiptModalAsync: FC<OwnProps> = (props) => {\n  const { isOpen } = props;\n  const ReceiptModal = useModuleLoader(Bundles.Extra, 'ReceiptModal', !isOpen);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return ReceiptModal ? <ReceiptModal {...props} /> : undefined;\n};\n\nexport default memo(ReceiptModalAsync);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\nimport { Bundles } from '../../../../util/moduleLoader';\n\nimport type { OwnProps } from './PremiumLimitReachedModal';\n\nimport useModuleLoader from '../../../../hooks/useModuleLoader';\n\nconst PremiumLimitReachedModalAsync: FC<OwnProps> = (props) => {\n  const { limit } = props;\n  const PremiumLimitReachedModal = useModuleLoader(Bundles.Extra, 'PremiumLimitReachedModal', !limit);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return PremiumLimitReachedModal ? <PremiumLimitReachedModal {...props} /> : undefined;\n};\n\nexport default memo(PremiumLimitReachedModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport type { OwnProps } from './DeleteFolderDialog';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DeleteFolderDialogAsync: FC<OwnProps> = (props) => {\n  const { deleteFolderDialogId } = props;\n  const DeleteFolderDialog = useModuleLoader(Bundles.Extra, 'DeleteFolderDialog', !deleteFolderDialogId);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DeleteFolderDialog ? <DeleteFolderDialog {...props} /> : undefined;\n};\n\nexport default memo(DeleteFolderDialogAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport type { OwnProps } from './CustomEmojiSetsModal';\nimport { Bundles } from '../../util/moduleLoader';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst CustomEmojiSetsModalAsync: FC<OwnProps> = (props) => {\n  const { customEmojiSetIds } = props;\n  const CustomEmojiSetsModal = useModuleLoader(Bundles.Extra, 'CustomEmojiSetsModal', !customEmojiSetIds);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return CustomEmojiSetsModal ? <CustomEmojiSetsModal {...props} /> : undefined;\n};\n\nexport default memo(CustomEmojiSetsModalAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './DraftRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst DraftRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedDraft } = props;\n  const DraftRecipientPicker = useModuleLoader(Bundles.Extra, 'DraftRecipientPicker', !requestedDraft);\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return DraftRecipientPicker ? <DraftRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(DraftRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { Bundles } from '../../util/moduleLoader';\nimport type { OwnProps } from './AttachBotRecipientPicker';\n\nimport useModuleLoader from '../../hooks/useModuleLoader';\n\nconst AttachBotRecipientPickerAsync: FC<OwnProps> = (props) => {\n  const { requestedAttachBotInChat } = props;\n  const AttachBotRecipientPicker = useModuleLoader(\n    Bundles.Extra, 'AttachBotRecipientPicker', !requestedAttachBotInChat,\n  );\n\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return AttachBotRecipientPicker ? <AttachBotRecipientPicker {...props} /> : undefined;\n};\n\nexport default memo(AttachBotRecipientPickerAsync);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useCallback, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { AnimationLevel, LangCode } from '../../types';\nimport type {\n  ApiAttachBot,\n  ApiChat, ApiMessage, ApiUser,\n} from '../../api/types';\nimport type { ApiLimitTypeWithModal, TabState } from '../../global/types';\n\nimport '../../global/actions/all';\nimport {\n  BASE_EMOJI_KEYWORD_LANG, DEBUG, INACTIVE_MARKER,\n} from '../../config';\nimport { IS_ANDROID } from '../../util/environment';\nimport {\n  selectChatMessage,\n  selectTabState,\n  selectCurrentMessageList,\n  selectIsCurrentUserPremium,\n  selectIsForwardModalOpen,\n  selectIsMediaViewerOpen,\n  selectIsRightColumnShown,\n  selectIsServiceChatReady,\n  selectUser,\n} from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { waitForTransitionEnd } from '../../util/cssAnimationEndListeners';\nimport { processDeepLink } from '../../util/deeplink';\nimport { parseInitialLocationHash, parseLocationHash } from '../../util/routing';\nimport { fastRaf } from '../../util/schedulers';\nimport { Bundles, loadBundle } from '../../util/moduleLoader';\nimport updateIcon from '../../util/updateIcon';\n\nimport useEffectWithPrevDeps from '../../hooks/useEffectWithPrevDeps';\nimport useBackgroundMode from '../../hooks/useBackgroundMode';\nimport useBeforeUnload from '../../hooks/useBeforeUnload';\nimport useSyncEffect from '../../hooks/useSyncEffect';\nimport usePreventPinchZoomGesture from '../../hooks/usePreventPinchZoomGesture';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useInterval from '../../hooks/useInterval';\nimport useAppLayout from '../../hooks/useAppLayout';\nimport useTimeout from '../../hooks/useTimeout';\n\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport UnreadCount from '../common/UnreadCounter';\nimport LeftColumn from '../left/LeftColumn';\nimport MiddleColumn from '../middle/MiddleColumn';\nimport RightColumn from '../right/RightColumn';\nimport MediaViewer from '../mediaViewer/MediaViewer.async';\nimport AudioPlayer from '../middle/AudioPlayer';\nimport DownloadManager from './DownloadManager';\nimport GameModal from './GameModal';\nimport Notifications from './Notifications.async';\nimport Dialogs from './Dialogs.async';\nimport ForwardRecipientPicker from './ForwardRecipientPicker.async';\nimport SafeLinkModal from './SafeLinkModal.async';\nimport HistoryCalendar from './HistoryCalendar.async';\nimport GroupCall from '../calls/group/GroupCall.async';\nimport ActiveCallHeader from '../calls/ActiveCallHeader.async';\nimport PhoneCall from '../calls/phone/PhoneCall.async';\nimport MessageListHistoryHandler from '../middle/MessageListHistoryHandler';\nimport NewContactModal from './NewContactModal.async';\nimport RatePhoneCallModal from '../calls/phone/RatePhoneCallModal.async';\nimport WebAppModal from './WebAppModal.async';\nimport BotTrustModal from './BotTrustModal.async';\nimport AttachBotInstallModal from './AttachBotInstallModal.async';\nimport ConfettiContainer from './ConfettiContainer';\nimport UrlAuthModal from './UrlAuthModal.async';\nimport PremiumMainModal from './premium/PremiumMainModal.async';\nimport PaymentModal from '../payment/PaymentModal.async';\nimport ReceiptModal from '../payment/ReceiptModal.async';\nimport PremiumLimitReachedModal from './premium/common/PremiumLimitReachedModal.async';\nimport DeleteFolderDialog from './DeleteFolderDialog.async';\nimport CustomEmojiSetsModal from '../common/CustomEmojiSetsModal.async';\nimport DraftRecipientPicker from './DraftRecipientPicker.async';\nimport AttachBotRecipientPicker from './AttachBotRecipientPicker.async';\n\nimport './Main.scss';\n\nexport interface OwnProps {\n  isMobile?: boolean;\n}\n\ntype StateProps = {\n  isMasterTab?: boolean;\n  chat?: ApiChat;\n  lastSyncTime?: number;\n  isLeftColumnOpen: boolean;\n  isMiddleColumnOpen: boolean;\n  isRightColumnOpen: boolean;\n  isMediaViewerOpen: boolean;\n  isForwardModalOpen: boolean;\n  hasNotifications: boolean;\n  hasDialogs: boolean;\n  audioMessage?: ApiMessage;\n  safeLinkModalUrl?: string;\n  isHistoryCalendarOpen: boolean;\n  shouldSkipHistoryAnimations?: boolean;\n  openedStickerSetShortName?: string;\n  openedCustomEmojiSetIds?: string[];\n  activeGroupCallId?: string;\n  isServiceChatReady?: boolean;\n  animationLevel: AnimationLevel;\n  language?: LangCode;\n  wasTimeFormatSetManually?: boolean;\n  isPhoneCallActive?: boolean;\n  addedSetIds?: string[];\n  addedCustomEmojiIds?: string[];\n  newContactUserId?: string;\n  newContactByPhoneNumber?: boolean;\n  openedGame?: TabState['openedGame'];\n  gameTitle?: string;\n  isRatePhoneCallModalOpen?: boolean;\n  webApp?: TabState['webApp'];\n  isPremiumModalOpen?: boolean;\n  botTrustRequest?: TabState['botTrustRequest'];\n  botTrustRequestBot?: ApiUser;\n  attachBotToInstall?: ApiAttachBot;\n  requestedAttachBotInChat?: TabState['requestedAttachBotInChat'];\n  requestedDraft?: TabState['requestedDraft'];\n  currentUser?: ApiUser;\n  urlAuth?: TabState['urlAuth'];\n  limitReached?: ApiLimitTypeWithModal;\n  deleteFolderDialogId?: number;\n  isPaymentModalOpen?: boolean;\n  isReceiptModalOpen?: boolean;\n  isCurrentUserPremium?: boolean;\n};\n\nconst APP_OUTDATED_TIMEOUT_MS = 5 * 60 * 1000; // 5 min\nconst CALL_BUNDLE_LOADING_DELAY_MS = 5000; // 5 sec\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nlet DEBUG_isLogged = false;\n\nconst Main: FC<OwnProps & StateProps> = ({\n  lastSyncTime,\n  isMobile,\n  isLeftColumnOpen,\n  isMiddleColumnOpen,\n  isRightColumnOpen,\n  isMediaViewerOpen,\n  isForwardModalOpen,\n  hasNotifications,\n  hasDialogs,\n  audioMessage,\n  activeGroupCallId,\n  safeLinkModalUrl,\n  isHistoryCalendarOpen,\n  shouldSkipHistoryAnimations,\n  limitReached,\n  openedStickerSetShortName,\n  openedCustomEmojiSetIds,\n  isServiceChatReady,\n  animationLevel,\n  language,\n  wasTimeFormatSetManually,\n  addedSetIds,\n  addedCustomEmojiIds,\n  isPhoneCallActive,\n  newContactUserId,\n  newContactByPhoneNumber,\n  openedGame,\n  gameTitle,\n  isRatePhoneCallModalOpen,\n  botTrustRequest,\n  botTrustRequestBot,\n  attachBotToInstall,\n  requestedAttachBotInChat,\n  requestedDraft,\n  webApp,\n  currentUser,\n  urlAuth,\n  isPremiumModalOpen,\n  isPaymentModalOpen,\n  isReceiptModalOpen,\n  isCurrentUserPremium,\n  deleteFolderDialogId,\n  isMasterTab,\n}) => {\n  const {\n    loadAnimatedEmojis,\n    loadNotificationSettings,\n    loadNotificationExceptions,\n    updateIsOnline,\n    onTabFocusChange,\n    loadTopInlineBots,\n    loadEmojiKeywords,\n    loadCountryList,\n    loadAvailableReactions,\n    loadStickerSets,\n    loadPremiumGifts,\n    loadDefaultTopicIcons,\n    loadAddedStickers,\n    loadFavoriteStickers,\n    loadDefaultStatusIcons,\n    ensureTimeFormat,\n    closeStickerSetModal,\n    closeCustomEmojiSets,\n    checkVersionNotification,\n    loadConfig,\n    loadAppConfig,\n    loadAttachBots,\n    loadContactList,\n    loadCustomEmojis,\n    loadGenericEmojiEffects,\n    closePaymentModal,\n    clearReceipt,\n    checkAppVersion,\n    openChat,\n    toggleLeftColumn,\n    loadRecentEmojiStatuses,\n    updatePageTitle,\n  } = getActions();\n\n  if (DEBUG && !DEBUG_isLogged) {\n    DEBUG_isLogged = true;\n    // eslint-disable-next-line no-console\n    console.log('>>> RENDER MAIN');\n  }\n\n  // Preload Calls bundle to initialize sounds for iOS\n  useTimeout(() => {\n    void loadBundle(Bundles.Calls);\n  }, CALL_BUNDLE_LOADING_DELAY_MS);\n\n  const { isDesktop } = useAppLayout();\n  useEffect(() => {\n    if (!isLeftColumnOpen && !isMiddleColumnOpen && !isDesktop) {\n      // Always display at least one column\n      toggleLeftColumn();\n    } else if (isLeftColumnOpen && isMiddleColumnOpen && isMobile) {\n      // Can't have two active columns at the same time\n      toggleLeftColumn();\n    }\n  }, [isDesktop, isLeftColumnOpen, isMiddleColumnOpen, isMobile, toggleLeftColumn]);\n\n  useInterval(checkAppVersion, isMasterTab ? APP_OUTDATED_TIMEOUT_MS : undefined, true);\n\n  // Initial API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      updateIsOnline(true);\n      loadConfig();\n      loadAppConfig();\n      loadAvailableReactions();\n      loadAnimatedEmojis();\n      loadGenericEmojiEffects();\n      loadNotificationSettings();\n      loadNotificationExceptions();\n      loadTopInlineBots();\n      loadEmojiKeywords({ language: BASE_EMOJI_KEYWORD_LANG });\n      loadAttachBots();\n      loadContactList();\n      loadPremiumGifts();\n      loadDefaultTopicIcons();\n      loadDefaultStatusIcons();\n      checkAppVersion();\n      if (isCurrentUserPremium) {\n        loadRecentEmojiStatuses();\n      }\n    }\n  }, [\n    lastSyncTime, loadAnimatedEmojis, loadEmojiKeywords, loadNotificationExceptions, loadNotificationSettings,\n    loadTopInlineBots, updateIsOnline, loadAvailableReactions, loadAppConfig, loadAttachBots, loadContactList,\n    loadPremiumGifts, checkAppVersion, loadConfig, loadGenericEmojiEffects, loadDefaultTopicIcons,\n    loadDefaultStatusIcons, loadRecentEmojiStatuses, isCurrentUserPremium, isMasterTab,\n  ]);\n\n  // Language-based API calls\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (language !== BASE_EMOJI_KEYWORD_LANG) {\n        loadEmojiKeywords({ language: language! });\n      }\n\n      loadCountryList({ langCode: language });\n    }\n  }, [language, lastSyncTime, loadCountryList, loadEmojiKeywords, isMasterTab]);\n\n  // Re-fetch cached saved emoji for `localDb`\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    if (!prevLastSyncTime && lastSyncTime && isMasterTab) {\n      loadCustomEmojis({\n        ids: Object.keys(getGlobal().customEmojis.byId),\n        ignoreCache: true,\n      });\n    }\n  }, [lastSyncTime, isMasterTab, loadCustomEmojis]);\n\n  // Sticker sets\n  useEffect(() => {\n    if (lastSyncTime && isMasterTab) {\n      if (!addedSetIds || !addedCustomEmojiIds) {\n        loadStickerSets();\n        loadFavoriteStickers();\n      }\n\n      if (addedSetIds && addedCustomEmojiIds) {\n        loadAddedStickers();\n      }\n    }\n  }, [\n    lastSyncTime, addedSetIds, loadStickerSets, loadFavoriteStickers, loadAddedStickers, addedCustomEmojiIds,\n    isMasterTab,\n  ]);\n\n  // Check version when service chat is ready\n  useEffect(() => {\n    if (lastSyncTime && isServiceChatReady && isMasterTab) {\n      checkVersionNotification();\n    }\n  }, [lastSyncTime, isServiceChatReady, checkVersionNotification, isMasterTab]);\n\n  // Ensure time format\n  useEffect(() => {\n    if (lastSyncTime && !wasTimeFormatSetManually) {\n      ensureTimeFormat();\n    }\n  }, [lastSyncTime, wasTimeFormatSetManually, ensureTimeFormat]);\n\n  // Parse deep link\n  useEffect(() => {\n    const parsedInitialLocationHash = parseInitialLocationHash();\n    if (lastSyncTime && parsedInitialLocationHash?.tgaddr) {\n      processDeepLink(decodeURIComponent(parsedInitialLocationHash.tgaddr));\n    }\n  }, [lastSyncTime]);\n\n  useEffectWithPrevDeps(([prevLastSyncTime]) => {\n    const parsedLocationHash = parseLocationHash();\n    if (!parsedLocationHash) return;\n\n    if (!prevLastSyncTime && lastSyncTime) {\n      openChat({\n        id: parsedLocationHash.chatId,\n        threadId: parsedLocationHash.threadId,\n        type: parsedLocationHash.type,\n      });\n    }\n  }, [lastSyncTime, openChat]);\n\n  const leftColumnTransition = useShowTransition(\n    isLeftColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateLeftColumnRef = useRef(false);\n  const forceUpdate = useForceUpdate();\n\n  // Handle opening middle column\n  useSyncEffect(([prevIsLeftColumnOpen]) => {\n    if (prevIsLeftColumnOpen === undefined || isLeftColumnOpen === prevIsLeftColumnOpen || animationLevel === 0) {\n      return;\n    }\n\n    willAnimateLeftColumnRef.current = true;\n\n    if (IS_ANDROID) {\n      fastRaf(() => {\n        document.body.classList.toggle('android-left-blackout-open', !isLeftColumnOpen);\n      });\n    }\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('MiddleColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateLeftColumnRef.current = false;\n      forceUpdate();\n    });\n  }, [animationLevel, forceUpdate, isLeftColumnOpen]);\n\n  const rightColumnTransition = useShowTransition(\n    isRightColumnOpen, undefined, true, undefined, shouldSkipHistoryAnimations,\n  );\n  const willAnimateRightColumnRef = useRef(false);\n  const [isNarrowMessageList, setIsNarrowMessageList] = useState(isRightColumnOpen);\n\n  // Handle opening right column\n  useSyncEffect(([prevIsRightColumnOpen]) => {\n    if (prevIsRightColumnOpen === undefined || isRightColumnOpen === prevIsRightColumnOpen) {\n      return;\n    }\n\n    if (animationLevel === 0) {\n      setIsNarrowMessageList(isRightColumnOpen);\n      return;\n    }\n\n    willAnimateRightColumnRef.current = true;\n\n    const dispatchHeavyAnimationEnd = dispatchHeavyAnimationEvent();\n\n    waitForTransitionEnd(document.getElementById('RightColumn')!, () => {\n      dispatchHeavyAnimationEnd();\n      willAnimateRightColumnRef.current = false;\n      forceUpdate();\n      setIsNarrowMessageList(isRightColumnOpen);\n    });\n  }, [animationLevel, forceUpdate, isRightColumnOpen]);\n\n  const className = buildClassName(\n    leftColumnTransition.hasShownClass && 'left-column-shown',\n    leftColumnTransition.hasOpenClass && 'left-column-open',\n    willAnimateLeftColumnRef.current && 'left-column-animating',\n    rightColumnTransition.hasShownClass && 'right-column-shown',\n    rightColumnTransition.hasOpenClass && 'right-column-open',\n    willAnimateRightColumnRef.current && 'right-column-animating',\n    isNarrowMessageList && 'narrow-message-list',\n    shouldSkipHistoryAnimations && 'history-animation-disabled',\n  );\n\n  const handleBlur = useCallback(() => {\n    onTabFocusChange({ isBlurred: true });\n  }, [onTabFocusChange]);\n\n  const handleFocus = useCallback(() => {\n    onTabFocusChange({ isBlurred: false });\n\n    if (!document.title.includes(INACTIVE_MARKER)) {\n      updatePageTitle();\n    }\n\n    updateIcon(false);\n  }, [onTabFocusChange, updatePageTitle]);\n\n  const handleStickerSetModalClose = useCallback(() => {\n    closeStickerSetModal();\n  }, [closeStickerSetModal]);\n\n  const handleCustomEmojiSetsModalClose = useCallback(() => {\n    closeCustomEmojiSets();\n  }, [closeCustomEmojiSets]);\n\n  // Online status and browser tab indicators\n  useBackgroundMode(handleBlur, handleFocus);\n  useBeforeUnload(handleBlur);\n  usePreventPinchZoomGesture(isMediaViewerOpen);\n\n  return (\n    <div id=\"Main\" className={className}>\n      <LeftColumn />\n      <MiddleColumn isMobile={isMobile} />\n      <RightColumn isMobile={isMobile} />\n      <MediaViewer isOpen={isMediaViewerOpen} />\n      <ForwardRecipientPicker isOpen={isForwardModalOpen} />\n      <DraftRecipientPicker requestedDraft={requestedDraft} />\n      <Notifications isOpen={hasNotifications} />\n      <Dialogs isOpen={hasDialogs} />\n      {audioMessage && <AudioPlayer key={audioMessage.id} message={audioMessage} noUi />}\n      <SafeLinkModal url={safeLinkModalUrl} />\n      <UrlAuthModal urlAuth={urlAuth} currentUser={currentUser} />\n      <HistoryCalendar isOpen={isHistoryCalendarOpen} />\n      <StickerSetModal\n        isOpen={Boolean(openedStickerSetShortName)}\n        onClose={handleStickerSetModalClose}\n        stickerSetShortName={openedStickerSetShortName}\n      />\n      <CustomEmojiSetsModal\n        customEmojiSetIds={openedCustomEmojiSetIds}\n        onClose={handleCustomEmojiSetsModalClose}\n      />\n      {activeGroupCallId && <GroupCall groupCallId={activeGroupCallId} />}\n      <ActiveCallHeader isActive={Boolean(activeGroupCallId || isPhoneCallActive)} />\n      <NewContactModal\n        isOpen={Boolean(newContactUserId || newContactByPhoneNumber)}\n        userId={newContactUserId}\n        isByPhoneNumber={newContactByPhoneNumber}\n      />\n      <GameModal openedGame={openedGame} gameTitle={gameTitle} />\n      <WebAppModal webApp={webApp} />\n      <DownloadManager />\n      <ConfettiContainer />\n      <PhoneCall isActive={isPhoneCallActive} />\n      <UnreadCount isForAppBadge />\n      <RatePhoneCallModal isOpen={isRatePhoneCallModalOpen} />\n      <BotTrustModal bot={botTrustRequestBot} type={botTrustRequest?.type} />\n      <AttachBotInstallModal bot={attachBotToInstall} />\n      <AttachBotRecipientPicker requestedAttachBotInChat={requestedAttachBotInChat} />\n      <MessageListHistoryHandler />\n      {isPremiumModalOpen && <PremiumMainModal isOpen={isPremiumModalOpen} />}\n      <PremiumLimitReachedModal limit={limitReached} />\n      <PaymentModal isOpen={isPaymentModalOpen} onClose={closePaymentModal} />\n      <ReceiptModal isOpen={isReceiptModalOpen} onClose={clearReceipt} />\n      <DeleteFolderDialog deleteFolderDialogId={deleteFolderDialogId} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isMobile }): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          animationLevel, language, wasTimeFormatSetManually,\n        },\n      },\n      lastSyncTime,\n    } = global;\n\n    const {\n      botTrustRequest,\n      requestedAttachBotInstall,\n      requestedAttachBotInChat,\n      requestedDraft,\n      urlAuth,\n      webApp,\n      safeLinkModalUrl,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      shouldSkipHistoryAnimations,\n      openedGame,\n      audioPlayer,\n      isLeftColumnShown,\n      historyCalendarSelectedAt,\n      notifications,\n      dialogs,\n      newContact,\n      ratingPhoneCall,\n      premiumModal,\n      isMasterTab,\n      payment,\n      limitReachedModal,\n      deleteFolderDialogModal,\n    } = selectTabState(global);\n\n    const { chatId: audioChatId, messageId: audioMessageId } = audioPlayer;\n    const audioMessage = audioChatId && audioMessageId\n      ? selectChatMessage(global, audioChatId, audioMessageId)\n      : undefined;\n    const gameMessage = openedGame && selectChatMessage(global, openedGame.chatId, openedGame.messageId);\n    const gameTitle = gameMessage?.content.game?.title;\n    const currentUser = global.currentUserId ? selectUser(global, global.currentUserId) : undefined;\n    const { chatId } = selectCurrentMessageList(global) || {};\n\n    return {\n      lastSyncTime,\n      isLeftColumnOpen: isLeftColumnShown,\n      isMiddleColumnOpen: Boolean(chatId),\n      isRightColumnOpen: selectIsRightColumnShown(global, isMobile),\n      isMediaViewerOpen: selectIsMediaViewerOpen(global),\n      isForwardModalOpen: selectIsForwardModalOpen(global),\n      hasNotifications: Boolean(notifications.length),\n      hasDialogs: Boolean(dialogs.length),\n      audioMessage,\n      safeLinkModalUrl,\n      isHistoryCalendarOpen: Boolean(historyCalendarSelectedAt),\n      shouldSkipHistoryAnimations,\n      openedStickerSetShortName,\n      openedCustomEmojiSetIds,\n      isServiceChatReady: selectIsServiceChatReady(global),\n      activeGroupCallId: isMasterTab ? global.groupCalls.activeGroupCallId : undefined,\n      animationLevel,\n      language,\n      wasTimeFormatSetManually,\n      isPhoneCallActive: isMasterTab ? Boolean(global.phoneCall) : undefined,\n      addedSetIds: global.stickers.added.setIds,\n      addedCustomEmojiIds: global.customEmojis.added.setIds,\n      newContactUserId: newContact?.userId,\n      newContactByPhoneNumber: newContact?.isByPhoneNumber,\n      openedGame,\n      gameTitle,\n      isRatePhoneCallModalOpen: Boolean(ratingPhoneCall),\n      botTrustRequest,\n      botTrustRequestBot: botTrustRequest && selectUser(global, botTrustRequest.botId),\n      attachBotToInstall: requestedAttachBotInstall?.bot,\n      requestedAttachBotInChat,\n      webApp,\n      currentUser,\n      urlAuth,\n      isCurrentUserPremium: selectIsCurrentUserPremium(global),\n      isPremiumModalOpen: premiumModal?.isOpen,\n      limitReached: limitReachedModal?.limit,\n      isPaymentModalOpen: payment.isPaymentModalOpen,\n      isReceiptModalOpen: Boolean(payment.receipt),\n      deleteFolderDialogId: deleteFolderDialogModal,\n      isMasterTab,\n      requestedDraft,\n    };\n  },\n)(Main));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\n\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport useLang from '../../hooks/useLang';\nimport { decryptSession } from '../../util/passcode';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport AnimatedIconWithPreview from '../common/AnimatedIconWithPreview';\nimport PasswordForm from '../common/PasswordForm';\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Button from '../ui/Button';\nimport Link from '../ui/Link';\n\nimport styles from './LockScreen.module.scss';\nimport lockPreviewUrl from '../../assets/lock.png';\n\nexport type OwnProps = {\n  isLocked?: boolean;\n};\n\ntype StateProps = {\n  passcodeSettings: GlobalState['passcode'];\n};\n\nconst MAX_INVALID_ATTEMPTS = 5;\nconst TIMEOUT_RESET_INVALID_ATTEMPTS_MS = 180000; // 3 minutes\nconst ICON_SIZE = 160;\n\nconst LockScreen: FC<OwnProps & StateProps> = ({\n  isLocked,\n  passcodeSettings,\n}) => {\n  const {\n    unlockScreen,\n    signOut,\n    logInvalidUnlockAttempt,\n    resetInvalidUnlockAttempts,\n  } = getActions();\n\n  const {\n    invalidAttemptsCount,\n    isLoading,\n  } = passcodeSettings;\n\n  const lang = useLang();\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPasscode, setShouldShowPasscode] = useState(false);\n  const [isSignOutDialogOpen, openSignOutConfirmation, closeSignOutConfirmation] = useFlag(false);\n  const { shouldRender } = useShowTransition(isLocked);\n\n  useTimeout(\n    resetInvalidUnlockAttempts,\n    invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS\n      ? TIMEOUT_RESET_INVALID_ATTEMPTS_MS\n      : undefined,\n  );\n\n  const handleClearError = useCallback(() => {\n    setValidationError('');\n  }, []);\n\n  const handleSubmit = useCallback((passcode: string) => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n      return;\n    }\n\n    setValidationError('');\n    decryptSession(passcode).then(unlockScreen, () => {\n      logInvalidUnlockAttempt();\n      setValidationError(lang('lng_passcode_wrong'));\n    });\n  }, [invalidAttemptsCount, lang, logInvalidUnlockAttempt, unlockScreen]);\n\n  useEffect(() => {\n    if (invalidAttemptsCount && invalidAttemptsCount >= MAX_INVALID_ATTEMPTS) {\n      setValidationError(lang('FloodWait'));\n    } else if (invalidAttemptsCount === 0) {\n      setValidationError('');\n    }\n  }, [invalidAttemptsCount, lang]);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut({ forceInitApi: true });\n  }, [closeSignOutConfirmation, signOut]);\n\n  if (!shouldRender) {\n    return undefined;\n  }\n\n  function renderLogoutPrompt() {\n    return (\n      <div className={styles.help}>\n        <p>\n          <Link onClick={openSignOutConfirmation}>Log out</Link>{' '}\n          if you don&apos;t remember your passcode.\n        </p>\n        <p>\n          <Button color=\"translucent\" size=\"tiny\" isText onClick={openSignOutConfirmation}>\n            {lang('AccountSettings.Logout')}\n          </Button>\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className={styles.container}>\n      <div className={styles.wrapper} dir={lang.isRtl ? 'rtl' : undefined}>\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={ICON_SIZE}\n          className={styles.icon}\n        />\n\n        <PasswordForm\n          key=\"password-form\"\n          shouldShowSubmit\n          shouldDisablePasswordManager\n          isLoading={isLoading}\n          error={validationError}\n          placeholder={lang('Passcode.EnterPasscodePlaceholder')}\n          submitLabel={lang('Next')}\n          clearError={handleClearError}\n          isPasswordVisible={shouldShowPasscode}\n          noRipple\n          onChangePasswordVisibility={setShouldShowPasscode}\n          onSubmit={handleSubmit}\n        />\n\n        {renderLogoutPrompt()}\n      </div>\n\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      passcodeSettings: global.passcode,\n    };\n  },\n)(LockScreen));\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"sY59IPNwkaRsrfYPhEJc\",\"wrapper\":\"DlErQEIDwmZ0duQgO_2b\",\"icon\":\"ar9YdQbWJreREHmnZa9m\",\"help\":\"uOmdTQr_cJEvuTkQipx7\"};","import { getActions, getGlobal } from '../global';\n\nimport { IS_MULTITAB_SUPPORTED } from '../util/environment';\nimport { DEBUG } from '../config';\n\n// eslint-disable-next-line import/no-cycle\nexport { default as Main } from '../components/main/Main';\nexport { default as LockScreen } from '../components/main/LockScreen';\n\nif (DEBUG) {\n  // eslint-disable-next-line no-console\n  console.log('>>> FINISH LOAD MAIN BUNDLE');\n}\n\nconst { passcode: { isScreenLocked }, connectionState } = getGlobal();\nif (!connectionState && !isScreenLocked && !IS_MULTITAB_SUPPORTED) {\n  getActions().initApi();\n}\n"],"names":["closeLocalTextSearch","global","tabId","getCurrentTabId","chatId","threadId","selectCurrentMessageList","updateLocalTextSearch","undefined","replaceLocalTextSearchResults","addActionHandler","actions","payload","query","chatThreadKey","buildChatThreadKey","currentQuery","selectTabState","localTextSearch","byChatThreadKey","MEMO_EMPTY_ARRAY","mediaType","updateLocalMediaSearchType","id","MAIN_THREAD_ID","type","shouldReplaceHistory","noForumTopicPanel","currentMessageList","tabState","premiumModal","promo","isOpen","updateTabState","replaceTabThreadParam","activeReactions","exitMessageSelectMode","isStatisticsShown","contentToBeScheduled","forwardMessages","toChatId","selectChat","isForum","openForumPanel","forumPanelChatId","closeForumPanel","updatePageTitle","updateCurrentMessageList","window","open","createMessageHashUrl","isChatInfoShown","lastIsChatInfoShown","setGlobal","openChat","text","files","requestedDraft","chatCreation","newChatMembersProgress","targetIndexDelta","orderedIds","position","indexOf","nextId","folderId","deleteFolderDialogModal","FOCUS_NO_HIGHLIGHT_DURATION","FAST_SMOOTH_MAX_DURATION","ANIMATION_END_DELAY","blurTimeout","copyTextForMessages","messageIds","messageListType","lang","langProvider","chatMessages","selectChatScheduledMessages","selectChatMessages","messages","map","filter","message","selectAllowedMessageActions","canCopy","sort","message1","message2","result","reduce","acc","sender","selectSender","push","getSenderTitle","emoji","getMessageSummaryEmoji","emojiWithSpace","renderMessageText","join","getMessageSummaryDescription","renderMessageSummaryHtml","resultText","getMessageSummaryText","copyHtmlToClipboard","scrollOffset","replaceThreadParam","messageId","paramName","viewportIds","selectViewportIds","lastOwnEditableMessageId","findLast","Boolean","canEdit","replyingToId","selectReplyingToId","selectIsViewportNewest","chatMessageKeys","Object","keys","newIndex","toString","length","Number","lastMessage","selectThreadInfo","lastMessageId","setReplyingToId","focusMessage","origin","volume","playbackRate","isMuted","audioPlayer","lastPlaybackRate","isPlaybackRateActive","isLastPlaybackRateActive","shouldOpenInstantly","selectIsRightColumnShown","getIsMobile","pollResults","voters","setTimeout","getGlobal","noHighlight","replyStack","selectReplyStack","pop","focusLastMessage","hasReached","updateFocusedMessageReached","groupedId","groupedChatId","replyMessageId","isResizingContainer","ids","selectForwardedMessageIdsByGroupId","compact","shouldSwitchChat","clearTimeout","updateFocusedMessage","updateFocusDirection","FocusDirection","includes","direction","loadViewportMessages","fromChatId","withMyScore","groupedMessageIds","selectMessageIdsByGroupId","isModalShown","noAuthors","noCaptions","selectedMessages","openForwardMenu","byChatId","activeDownloads","newByChatId","forEach","find","canDownload","downloadMessageMedia","selectCurrentChat","enterMessageSelectMode","childMessageIds","withShift","toggleMessageSelection","shouldShowContextMenuHint","disableContextMenuHint","showNotification","IS_TOUCH_ENV","isQuiz","pollModal","RELEASE_DATETIME","Date","now","currentVersion","APP_VERSION","slice","serviceNotifications","version","SERVICE_NOTIFICATIONS_USER_ID","date","getServerTime","content","parseMessageInput","isOutgoing","createServiceNotification","serviceChat","maxId","Math","max","fractionalPart","floor","previousLocalId","serviceNotification","isUnread","apiUpdate","reactorModal","seenByModal","activeLanguage","selectRequestedTranslationLanguage","messageLanguageModal","chat","globalSearch","updateGlobalSearch","globalResults","localResults","resultsByType","fetchingStatus","chats","isClosing","recentlyFoundChatIds","newRecentIds","unshift","updateGlobalSearchContent","stickerSearch","resultIds","gifSearch","offset","results","updateUserSearch","globalUserIds","localUserIds","userId","newContact","isByPhoneNumber","closeNewContactDialog","updateIcon","asUnread","document","querySelectorAll","link","href","replace","setPageTitleInstant","nextTitle","title","setPageTitle","debounce","notificationInterval","force","leftColumnWidth","management","isActive","screen","nextScreen","getIsTablet","isLeftColumnShown","messageLists","statistics","currentMessageId","recentEmojis","newEmojis","e","sticker","recent","stickers","hash","newStickers","s","documentId","recentCustomEmojis","order","isCustomEmoji","added","setIds","customEmojis","notification","localId","generateIdFor","newNotifications","notifications","existingNotificationIndex","findIndex","n","splice","canSendPlainText","canSendPhotos","canSendVideos","canSendDocuments","canSendAudios","canSendStickers","canSendRoundVideos","canSendVoices","getAllowedAttachmentOptions","allowedContent","l","lastDelimiter","allowedContentString","data","hasErrorKey","getReadableErrorText","newDialogs","dialogs","existingErrorIndex","err","url","safeLinkModalUrl","selectedAt","historyCalendarSelectedAt","selectChatMessage","botId","viaBotId","senderId","selectIsTrustedBot","botTrustRequest","onConfirm","action","openedGame","top","left","width","height","animationLevel","settings","byKey","confetti","lastConfettiTime","shouldCompress","shouldSendGrouped","attachmentSettings","limit","limitReachedModal","openedStickerSetShortName","openedCustomEmojiSetIds","lastRendered","unique","GLOBAL_STATE_CACHE_CUSTOM_EMOJI_LIMIT","createTopicPanel","topicId","editTopicPanel","archiveSettings","isHidden","isMinimized","APP_VERSION_REGEX","fetch","then","response","trim","test","isUpdateAvailable","catch","DEBUG","console","error","multitabNextAction","reestablishMasterToSelf","isBlurred","updateIsOnline","blurredTabTokens","t","getAllMultitabTokens","clearInterval","setInterval","initialUnreadNotifications","getAllNotificationsCount","canDisplayChatInTitle","currentUserId","INACTIVE_MARKER","PAGE_TITLE","round","newUnread","messageList","currentChat","getChatTitle","topics","status","payment","clearPayment","closeInvoice","mediaId","avatarOwnerId","profilePhotoIndex","mediaViewer","noLockOnUnload","onBeforeUnload","passcode","hasPasscode","byTabId","clearStoredSession","async","updatePasscodeSettings","isLoading","setupPasscode","sessionJson","JSON","stringify","loadStoredSession","globalJson","serializeGlobal","encryptSession","signalPasscodeHash","forceUpdateCache","clearEncryptedSession","clearPasscodeSettings","beforeTabStates","values","session","parse","storeSession","previousGlobal","migrateCache","cloneDeep","INITIAL_GLOBAL_STATE","isScreenLocked","invalidAttemptsCount","isMasterTab","init","initApi","decryptSession","unlockScreen","logInvalidUnlockAttempt","uploadProgressCallbacks","Map","runDebouncedForMarkRead","cb","offsetId","isOutlying","isBudgetPreload","addOffset","LoadMoreDirection","MESSAGE_LIST_SLICE","callApi","users","repliesThreadInfos","localMessages","isDeleted","allMessages","concat","byId","buildCollectionByKey","addChatMessagesById","updateOutlyingIds","updateListedIds","addUsers","addChats","updateThreadInfos","listedIds","selectListedIds","outlyingIds","selectOutlyingIds","areSortedArraysIntersecting","historyIds","newViewportIds","getViewportSlice","safeReplaceViewportIds","sourceIds","index","i","findClosestIndex","indexForDirection","from","to","areSomeLocal","areAllLocal","sendMessage","params","progressCallback","attachment","progress","messageLocalId","has","set","fileUploads","byMessageLocalId","replyingTo","IS_IOS","rafPromise","selectThreadTopMessageId","replyingToTopId","delete","getAttachmentType","shouldSendAsFile","mimeType","SUPPORTED_IMAGE_CONTENT_TYPES","SUPPORTED_VIDEO_CONTENT_TYPES","SUPPORTED_AUDIO_CONTENT_TYPES","voice","isRestricted","onTickEnd","loadWithBudget","selectFocusedMessageId","selectRealLastReadId","replyOriginForId","threadUpdate","MESSAGE_DELETED","updateChatMessage","replyMessage","replyToMessageId","loadMessage","isDeleting","updateThreadUnreadFromForwardedMessage","omit","scheduledAt","replyingToMessage","replyToTopMessageId","noWebPage","selectNoWebPage","sendAs","selectSendAs","clearWebPagePreview","isSingle","attachments","isGrouped","shouldGroupMessages","restParams","entities","commonParams","byType","arr","splitAttachmentsByType","group","groupIndex","groupedAttachments","split","MAX_MEDIA_FILES_FOR_ALBUM","firstAttachment","restAttachments","isFirst","selectEditingMessage","setEditingId","get","getMessageOriginalId","cancelApiProgress","draft","shouldForce","user","selectUser","isDeletedUser","isLocal","updateChat","draftDate","replyToMsgId","localOnly","selectDraft","newDraft","isUnpin","isOneSide","isSilent","topId","shouldDeleteForAll","editingId","selectEditingId","selectEditingScheduledId","activeChat","reason","description","peer","translate","isUserBot","minId","selectFirstUnreadId","unreadCount","readCount","count","countSortedIds","topic","updateThreadInfo","lastReadInboxMessageId","newTopicUnreadCount","updateTopic","webPagePreview","options","poll","option","shouldResetVoters","offsets","nextOffset","toThreadId","isCurrentUserPremium","selectIsCurrentUserPremium","fromChat","toChat","a","b","realMessages","m","isServiceNotificationMessage","replaceScheduledMessages","scheduledPerThread","selectThreadIdFromMessage","scheduledInThread","entries","scheduledIds","selectScheduledMessage","transcriptionId","isTranscriptionError","ignoreCache","newCustomEmojiIds","customEmoji","seenByUserIds","sendAsId","sendAsChat","fullInfo","sendAsPeerIds","updateSponsoredMessage","selectSponsoredMessage","random","randomId","unreadMentions","markMessagesRead","unreadMentionsCount","shouldSkipModal","urlWithProtocol","ensureProtocol","match","RE_TME_LINK","RE_TG_LINK","openTelegramLink","appConfig","parsedUrl","URL","autologinDomains","hostname","searchParams","autologinToken","urlAuthDomains","requestLinkUrlAuth","RE_TELEGRAM_LINK","toggleSafeLinkModal","selectForwardsContainVoiceMessages","accessHash","noVoiceMessages","showDialog","getUserFullName","selectForwardsCanBeSentToChat","closeMediaViewer","showAllowedMessageTypesNotification","toLanguageCode","selectLanguageCode","updateRequestedMessageTranslation","removeRequestedMessageTranslation","updateMessageTranslation","isPending","update","views","forwards","repliesChatId","repliesThreadInfo","messagesCount","searchThrottled","throttle","loadRecentStickers","recentStickers","loadStickers","stickerSetInfo","stickerSet","shortName","packs","currentEmoji","updateStickerSet","forEmoji","rebuildStickersForEmoji","searchGifs","botUsername","username","updateGifSearch","gifs","addedStickers","addedCustomEmojis","Promise","all","updateStickerSets","sets","updateCustomEmojiSets","loadCustomEmojis","addedSetIds","setsById","cached","customEmojiSetIds","setIdsToLoad","pause","favorite","favoriteStickers","premium","premiumSet","greeting","featured","featuredStickers","premiumGifts","fullSet","defaultTopicIconsId","defaultStatusIconsId","cachedSet","selectStickerSet","emojis","effects","replaceAnimatedEmojis","animatedEmojiEffects","genericEmojiEffects","saved","savedGifs","gif","shouldUnsave","selectCurrentLimit","premiumLimit","selectPremiumLimit","isPremium","className","newGifs","current","unfave","stickerSetId","installedDate","isArchived","isInstalled","language","currentEmojiKeywords","emojiKeywords","fromVersion","keywords","searchWords","updateStickerSearch","config","gifSearchUsername","updateStickersForEmoji","updateCustomEmojiForEmoji","featuredIds","flatMap","updateRecentStatusCustomEmojis","emojiStatuses","searchMessagesGlobal","offsetRate","maxDate","minDate","localResultRequest","GLOBAL_SEARCH_SLICE","topicsRequest","GLOBAL_TOPIC_SEARCH_SLICE","localResult","totalCount","nextOffsetId","localTopics","totalTopicsCount","nextRate","currentSearchQuery","selectCurrentGlobalSearchQuery","updateGlobalSearchFetchingStatus","addMessages","updateGlobalSearchResults","updateTopics","sortedTopics","foundTopicIds","searchSharedMedia","SHARED_MEDIA_SLICE","topMessageId","newFoundIds","currentSearch","selectCurrentMediaSearch","updateLocalMediaSearchResults","localChats","localUsers","globalChats","globalUsers","chatIds","userIds","timestampPlusDay","foundIds","selectCurrentTextSearch","MESSAGE_SEARCH_SLICE","updateLocalTextSearchResults","currentType","timestamp","ManagementProgress","updateManagement","isUsernameAvailable","checkedUsername","updateManagementProgress","openLimitReachedModal","ensureIsSuperGroup","invite","editingInvite","inviteInfo","adminId","isRevoked","admin","invites","revokedInvites","expireDate","usageLimit","isRequestNeeded","oldInvite","newInvite","managementState","offsetDate","offsetUserId","offsetUser","importers","currentInviteInfo","isRequested","requesters","joinRequests","isApproved","targetChat","importer","recentRequesterIds","requestsPending","file","isSuggest","loadProfilePhotos","profileId","getUserFirstOrLastName","releaseStatusTimeout","log","isSyncing","loadAllChats","preloadTopChatMessages","listType","shouldReplace","onReplace","areMessagesLoaded","wasReset","draftsByChatId","threadsById","acc2","editingDraft","selectEditingDraft","currentChatId","currentThreadId","activeThreadId","threadInfo","lastReadInboxId","newCurrentChatId","currentChatMessages","topicLastMessages","allMessagesWithTopicLastMessages","otherTabId","tabThreads","originChannelId","otherChatId","otherThreadId","updateChats","updateUsers","loadTopics","loadTopicById","shouldCloseChatOnError","threads","updateThread","audioChatId","audioMessageId","closeAudioPlayer","loadAndReplaceMessages","lastSyncTime","initFolderManager","addCallback","connectionState","authState","getActions","sync","photo","activeSessions","byHash","authorizations","orderedHashes","ttlDays","removedSessions","newSessions","el","currentSessionHash","isCurrent","currentSession","areCallsEnabled","areSecretChatsEnabled","days","webAuthorizations","activeWebSessions","runThrottledForSearch","replaceInlineBotSettings","inlineBotSettings","inlineBots","byUsername","replaceInlineBotsIsLoading","newUser","hasChangedAvatarHash","avatarHash","hasChangedProfilePhoto","profilePhoto","hasChangedFallbackPhoto","fallbackPhoto","hasChangedPersonalPhoto","personalPhoto","photos","userStatusesById","replaceUserStatuses","statusesById","topPeers","lastRequestedAt","contactList","addUserStatuses","getCompareString","lastName","firstName","collator","Intl","Collator","sortedUsers","compare","isSelf","commonChats","isFullyLoaded","updateUser","shouldSharePhoneNumber","updateChatMutedState","isContact","phoneNumber","phone","loadChatSettings","isPrivate","isUserId","userOrChat","userSearch","updateUserSearchFetchingStatus","emojiStatus","expires","SHOULD_PRE_OPEN","IS_ANDROID","PopupManager","constructor","features","onFail","preOpenIfNeeded","this","preOpened","blur","location","focus","popup","cancelPreOpen","close","GAMEE_URL","runDebouncedForSearch","toggleAttachBot","bot","isEnabled","isWriteAllowed","loadAttachBots","attachMenu","bots","handleUrlAuthResult","urlAuth","domain","shouldRequestWriteAccess","request","siteUrl","closeUrlAuthModal","sendBotCommand","command","gameePopups","answerCallbackButton","isGame","openUrl","openGame","alert","isError","buildQueryString","k","getPaymentForm","inputInvoice","form","invoice","setPaymentForm","setPaymentStep","PaymentStep","validateRequestedInfo","requestInfo","shouldSave","shippingOptions","setRequestInfoId","updateShippingOptions","button","openPollModal","receiptMessageId","getReceipt","openInvoice","isSamePeer","switchBotInline","openChatWithInfo","theme","extractCurrentThemeParams","requestSimpleWebView","buttonText","requestWebView","peerId","requestBotUrlAuth","buttonId","selectChatBot","removeBlockedContact","topInlineBots","inlineBotData","inlineBot","switchPm","canLoadMore","cacheTime","shouldReplaceSettings","newInlineBotData","currentIds","Set","newResults","help","isGallery","searchInlineBot","botSender","openChatWithDraft","usernames","queryId","resultId","scheduleDate","resetInlineBot","param","isBlocked","startParam","webViewUrl","webApp","isFromBotMenu","reply","closeWebApp","slug","trustedBotIds","newTrustedBotIds","add","Array","callbackPayload","requestedAttachBotInstall","botUser","actionPayload","supportedFilters","peerTypes","requestedAttachBotInChat","callAttachBot","replaceSettings","hasPassword","updateTwoFaSettings","hint","currentPassword","onSuccess","isSuccess","password","email","waitingEmailCodeLength","code","saveInfo","selectPaymentInputInvoice","setInvoiceInfo","isPaymentModalOpen","isExtendedMedia","setReceipt","receipt","credentials","nativeProvider","publishableKey","selectProviderPublishableKey","cardNumber","expiryMonth","expiryYear","cvv","zip","country","method","headers","Authorization","json","getStripeError","setStripeCardInfo","sendStripeCredentials","publicToken","selectProviderPublicToken","card","number","expiration_month","expiration_year","security_code","DEBUG_PAYMENT_SMART_GLOCAL","Accept","body","setSmartGlocalCardInfo","token","sendSmartGlocalCredentials","shippingOptionId","saveCredentials","savedCredentialId","tipAmount","formId","selectPaymentFormId","requestInfoId","selectPaymentRequestId","temporaryPassword","requestInputInvoice","updatePayment","save","selectStripeCredentials","selectSmartGlocalCredentials","requestedInfoId","value","step","isClosed","initialSection","fromUserId","isGift","monthsAmount","toUserId","loadPremiumStickers","forUserId","month","months","giftPremiumModal","monthlyCurrency","currency","monthlyAmount","amount","field","MAX_TOOLBAR_WIDTH","REM","MAX_MESSAGES_LIST_WIDTH","SIDE_COLUMN_MAX_WIDTH","MIN_LEFT_COLUMN_WIDTH","UNPIN_BUTTON_WIDTH","subtractXForEmojiInteraction","x","windowWidth","windowSize","MIN_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","min","MIN_SCREEN_WIDTH_FOR_STATIC_LEFT_COLUMN","updateUnreadReactions","interactionLocalId","availableReaction","aroundAnimation","mediaLoader","ApiMediaFormat","centerIcon","availableReactions","y","startSize","isReversed","activeEmojiInteraction","animatedEffect","INTERACTION_RANDOM_OFFSET","activeEmojiInteractions","interactions","emoticon","timestamps","reaction","selectDefaultReaction","isMessageLocal","toggleReaction","isInDocumentGroup","isInAlbum","documentGroupFirstMessageId","userReactions","getUserReactions","hasReaction","some","userReaction","isSameReaction","newUserReactions","selectMaxUserReactions","reactions","ANIMATION_LEVEL_MAX","newActiveReactions","currentReactions","isReactionChosen","chosenOrder","existingIndex","r","recentReactions","addMessageReaction","active","newMessageActiveReactions","defaultReaction","loadConfig","reactors","interaction","unreadReactionsCount","unreadReactions","fetchUnreadReactions","fromEntries","unread","isGroup","stats","recentTopMessages","msgId","updateStatistics","dcId","statisticsDcId","publicForwards","publicForwardsData","updateMessageStatistics","name","isPercentage","updateStatisticsGraph","prevIsForum","lastReadOutboxMessageId","newProfilePhoto","noTopChatsRequest","selectIsChatListed","loadTopChats","closeMessageNotifications","chatUpdate","selectChatListType","updateChatListIds","isNotJoined","requestChatUpdate","leaveChat","typingStatus","currentTypingStatus","selectThreadParam","isFromScheduled","hasMention","hasUnreadMention","notifyAboutMessage","messageUpdate","channelId","selectCommonBoxChatId","ARCHIVED_FOLDER_ID","orderedPinnedIds","isPinned","newOrderedPinnedIds","MAX_ACTIVE_PINNED_CHATS","listIds","pinnedId","updateChatListType","folder","chatFoldersById","chatFolders","newChatFoldersById","pick","newOrderedIds","orderedId","folders","recommended","replacedMembers","addedMember","deletedMemberId","shouldUpdate","members","deleteIndex","adminMembers","isOwner","isAdmin","membersCount","adminMembersById","formattedText","loadChatJoinRequests","orderedPinnedTopicIds","ANIMATION_DELAY","updateReactions","areDeepEqual","alreadyHasUnreadReaction","checkIfHasUnreadReactions","newMessage","isReaction","updateWithLocalMedia","isScheduled","currentMessage","video","getMessageContent","blobUrl","thumbnail","isPreloadedGlobally","previewBlobUrl","updateScheduledMessage","updateThreadUnread","selectThreadByMessage","originMessage","updateListedAndViewportIds","firstMessageId","isUnreadChatNotLoaded","addViewportId","firstUnreadId","candidateGlobal","updateChatLastMessage","currentLastMessage","selectTopicFromMessage","findLastMessage","deleteMessages","newLastMessage","clearMessageTranslation","deleteTopic","threadIdsToUpdate","deleteChatMessages","requestThreadInfoUpdate","chatsIdsToUpdate","commonBoxChatId","shouldForceReply","isTopicReply","selectIsMessageInCurrentMessageList","getMessageText","selectScheduledIds","threadScheduledIds","deleteChatScheduledMessages","thread","markMessageListRead","pickTruthy","updatePerThread","currentUpdatedInThread","pinnedIds","selectPinnedIds","newPinnedIds","currentThreadInfo","newThreadInfo","lastReadInboxMessageIdInThread","messagesById","loadFullChat","scheduledMessages","deleteScheduledMessages","pollId","pollUpdate","selectChatMessageByPollId","oldResults","isMin","isChosen","updatedPoll","recentVoterIds","totalVoters","newRecentVoterIds","newTotalVoters","targetOptionIndex","targetOption","updatedOption","votersCount","selectIsServiceChatReady","media","preview","extendedMedia","transcriptions","sendingState","translations","updateMessageTranslations","flushStatusUpdatesThrottled","pendingStatusUpdates","deleteContact","openPremiumModal","loadFullUser","statusUpdate","targetUser","botInfo","menuButton","addBlockedContact","loadFavoriteStickers","loadRecentEmojiStatuses","oldOrder","newOrder","reorderStickerSets","loadStickerSets","loadSavedGifs","privacy","key","rules","setConfirmPaymentUrl","updateNotifySettings","peerType","shouldShowPreviews","addNotifyException","twoFaSettings","call","groupCalls","activeGroupCallId","leaveGroupCall","shouldRemove","removeGroupCall","groupCall","selectGroupCall","isCallNotEmpty","participantsCount","participants","updateGroupCall","groupCallId","participant","updateGroupCallParticipant","ARE_CALLS_SUPPORTED","phoneCall","state","playGroupCallSound","sound","hangUp","needRating","ratingPhoneCall","notifyAboutCall","selectPhoneCallUser","initializeSounds","checkNavigatorUserMediaPermissions","isVideo","isCallPanelVisible","formatCurrency","IS_PRODUCTION_HOST","useBeforeUnload","callback","useEffect","metaViewport","querySelector","defaultViewportContent","getAttribute","allowedZoomViewportContent","preventEvent","preventDefault","memo","props","StickerSetModal","useModuleLoader","Bundles","isForAppBadge","useFolderManagerForUnreadCounters","unreadNotificationsCount","updateAppBadge","formatIntegerCompact","ConnectionStatus","useConnectionStatus","hasMiddleHeader","isDisabled","isOnline","setIsOnline","useState","navigator","onLine","handleChange","addEventListener","removeEventListener","useBrowserOnline","syncing","online","waitingForNetwork","toLowerCase","connectionStatus","connectionStatusPosition","connectionStatusText","onClick","useLang","dir","isRtl","Spinner","color","Transition","activeKey","Button","size","isLottie","stickerHash","getStickerPreviewHash","previewMediaData","useMedia","paths","useMemo","IS_OFFSET_PATH_SUPPORTED","generateRandomDropPath","buildClassName","path","style","CustomEmoji","styles","withSharedAnimation","src","alt","StatusPickerMenu","withGlobal","setEmojiStatus","loadCurrentUser","buttonRef","useRef","shouldShowEffect","markShouldShowEffect","unmarkShouldShowEffect","useFlag","isEffectShown","showEffect","hideEffect","isStatusPickerOpen","openStatusPicker","closeStatusPicker","isMobile","useAppLayout","delay","until","getServerTimeOffset","useTimeout","useEffectWithPrevDeps","prevEmojiStatus","handleEmojiStatusSet","useCallback","handleEmojiStatusClick","ref","ripple","loopLimit","EMOJI_STATUS_LOOP_LIMIT","PremiumIcon","statusButtonRef","onEmojiStatusSelect","onClose","ANIMATION_LEVEL_OPTIONS","searchQuery","chatsById","isConnectionStatusMinimized","globalSearchChatId","searchDate","selectTheme","isMessageListOpen","areChatsLoaded","canInstall","shouldHideSearch","contactsFilter","onSearchQuery","isClosingSearch","onSelectSettings","onSelectContacts","onSelectArchived","onReset","shouldSkipTransition","setGlobalSearchDate","setSettingOption","setGlobalSearchChatId","openChatByUsername","lockScreen","requestNextSettingsScreen","skipLockOnUnload","hasMenu","LeftColumnContent","selectedSearchDate","formatDateToString","archivedUnreadChatsCount","total","isChatArchived","handleLockScreenHotkey","stopPropagation","SettingsScreens","useHotkeys","IS_PWA","withOtherVersions","PRODUCTION_HOSTNAME","IS_TEST","MainButton","onTrigger","ariaLabel","handleSearchFocus","toggleConnectionStatus","handleSelectSaved","handleDarkModeToggle","newTheme","shouldUseSystemTheme","switchTheme","handleAnimationLevelChange","newLevel","_","classList","toggle","handleChangelogClick","BETA_CHANGELOG_URL","handleSwitchToWebK","localStorage","setItem","clearWebsync","handleOpenTipsChat","handleBugReportClick","FEEDBACK_URL","handleLockScreen","isSearchFocused","captureEscKeyListener","searchInputPlaceholder","versionString","IS_BETA","APP_REVISION","shouldDisableDropdownMenuTransitionRef","handleDropdownMenuTransitionEnd","useLeftHeaderButtonRtlForumTransition","menuItems","MenuItem","icon","Switcher","label","checked","noAnimation","getPromptInstall","DropdownMenu","trigger","footer","APP_NAME","positionX","onTransitionEnd","SearchInput","inputId","parentContainerClassName","focused","spinnerColor","spinnerBackgroundColor","placeholder","autoComplete","canClose","onChange","onFocus","onSpinnerClick","PickerSelectedItem","clickArg","chatOrUserId","ShowTransition","isCustom","orderedFolderIds","archived","shouldSkipHistoryAnimations","activeChatFolder","isForumPanelOpen","selectIsForumPanelOpen","hasArchivedChats","maxFolders","foldersDispatch","onSettingsScreenSelect","onLeftColumnContentChange","shouldHideFolderTabs","loadChatFolders","setActiveChatFolder","transitionRef","allChatsFolder","ALL_FOLDER_ID","displayedFolders","allChatsFolderIndex","isInAllChatsFolder","isInFirstFolder","folderCountersById","folderTabs","badgeCount","chatsCount","isBadgeActive","notificationsCount","handleSwitchTab","forceOnHeavyAnimation","captureEvents","selectorToPreventScroll","onSwipe","SwipeDirection","isNotInFirstFolderRef","useHistoryBack","onBack","handleKeyDown","ctrlKey","shiftKey","startsWith","digit","shouldRender","shouldRenderPlaceholder","transitionClassNames","useShowTransition","renderCurrentTab","activeFolder","isFolder","ChatList","folderType","canDisplayArchive","shouldRenderFolders","TabList","tabs","activeTab","onSwitchTab","areFolders","renderCount","LeftSearch","Loading","ContactList","isShown","onNewPrivateChat","onNewChannel","onNewGroup","isMenuOpen","setIsMenuOpen","fabClassName","toggleIsMenuOpen","handleClose","tabIndex","Menu","positionY","autoClose","TRANSITION_RENDER_COUNT","closeTimeout","onContentChange","onTopicSearch","isNewChatButtonShown","setIsNewChatButtonShown","shouldRenderForumPanel","handleForumPanelAnimationEnd","useForumPanelRender","isForumPanelVisible","shouldRenderUpdateButton","updateButtonClassNames","isMouseInside","handleMouseEnter","handleMouseLeave","handleSelectSettings","handleSelectContacts","handleSelectArchived","handleUpdateClick","reload","handleSelectNewChannel","handleSelectNewGroup","autoCloseTimeout","onMouseEnter","onMouseLeave","shouldCleanup","cleanupExceptionKey","fluid","pill","ForumPanel","onCloseAnimationEnd","Settings","NewChat","ArchivedChats","ContentType","RENDER_COUNT","nextSettingsScreen","isFirstChatFolderActive","isChatOpen","setGlobalSearchQuery","setGlobalSearchClosing","resetChatCreation","loadPasswordInfo","clearTwoFaError","setLeftColumnWidth","resetLeftColumnWidth","resizeRef","setContent","settingsScreen","setSettingsScreen","setContactsFilter","foldersState","useFoldersReducer","lastResetTime","setLastResetTime","contentType","Main","Archived","NewChannel","NewGroup","handleReset","forceReturnToChatList","fullReset","pickerSearchInput","getElementById","handleSearchQuery","handleTopicSearch","handleHotkeySearch","handleHotkeySavedMessages","handleArchivedChats","handleHotkeySettings","IS_MAC_OS","useSyncEffect","initResize","resetResize","handleMouseUp","elementRef","onResize","initialWidth","cssPropertyName","markIsActive","unmarkIsActive","initialMouseX","setInitialMouseX","initialElementWidth","setInitialElementWidth","setElementStyle","widthPx","setProperty","remove","useLayoutEffect","handleMouseMove","newWidth","ceil","clientX","stopDrag","cleanup","offsetWidth","useResize","handleSettingsScreenSelect","LAYERS_ANIMATION_NAME","currentScreen","onScreenSelect","isChannel","onMouseDown","onMouseUp","onDoubleClick","drawRect","radius","containerRef","markupParams","reverseIndex","barHeight","getBarHeight","markHeight","getMarkHeight","trackHeight","getTrackHeight","clipPathId","clipPath","d","getClipPath","markTranslateY","getMarkTranslateY","trackTranslateY","getTrackTranslateY","calculateMarkup","firstChild","firstElementChild","currentElement","transform","svg","div","defs","innerHTML","customTitle","onUnpinMessage","onAllPinnedClick","clickBotInlineButton","mediaThumbnail","useThumbnail","mediaBlobUrl","getMessageMediaHash","isSpoiler","getMessageIsSpoiler","isUnpinDialogOpen","openUnpinDialog","closeUnpinDialog","handleUnpinMessage","inlineButton","getMessageSingleInlineButton","handleInlineButtonClick","noHoverColor","markNoHoverColor","unmarkNoHoverColor","ConfirmDialog","confirmLabel","confirmHandler","thumbDataUri","getPictogramDimensions","srcUrl","MediaSpoiler","isVisible","renderPictogram","renderText","MessageSummary","noEmoji","RippleEffect","shouldStopPropagation","LUMA_THRESHOLD","scaleImage","image","ratio","outputType","Blob","createObjectURL","img","Image","resolve","onload","scale","blob","Error","finally","revokeObjectURL","steppedScale","bitmap","createImageBitmap","resizeWidth","resizeHeight","resizeQuality","averageColor","getAverageColor","fillColor","getColorLuma","res","canvas","createElement","ctx2D","getContext","fillStyle","fillRect","ctx","transferFromImageBitmap","drawImage","toBlob","oc","octx","mul","cur","globalCompositeOperation","LOGO_DIMENSIONS","MINIMAL_SIZE","PLAYBACK_RATES","PLAYBACK_RATE_VALUES","noUi","setAudioPlayerVolume","setAudioPlayerPlaybackRate","setAudioPlayerMuted","audio","isVoice","shouldRenderPlaybackButton","duration","PLAYBACK_RATE_FOR_AUDIO_MIN_DURATION","senderName","mediaData","mediaMetadata","fileName","artist","performer","album","audioCoverHash","getAudioHasCover","getChatAvatarHash","thumbnailSizes","preferred","AVATAR_FULL_DIMENSIONS","getCoverSize","useAsync","telegramLogoPath","resizeImage","makeGoodArtwork","buildMediaMetadata","artwork","useMessageMediaMetadata","playPause","stop","isPlaying","requestNextTrack","requestPreviousTrack","isLast","setVolume","toggleMuted","setPlaybackRate","useAudioPlayer","makeTrackId","getMediaDuration","isContextMenuOpen","handleBeforeContextMenu","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","handleClick","clearMediaSession","handleVolumeChange","handleVolumeClick","updatePlaybackRate","newRate","rate","shouldBeActive","handlePlaybackClick","oldRate","newIsActive","PlaybackRateButton","displayRate","onContextMenu","volumeIcon","renderAudio","subtitle","renderVoice","disabled","RangeSlider","bold","forceOpen","onHide","onMouseEnterBackdrop","currentRate","isSelected","customIcon","renderPlaybackRateMenuItem","openAddContactDialog","blockContact","reportSpam","deleteChat","leaveChannel","deleteChatUser","deleteHistory","toggleChatArchived","hideChatReportPanel","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","shouldReportSpam","setShouldReportSpam","shouldDeleteChat","setShouldDeleteChat","isAutoArchived","canReportSpam","canAddContact","canBlockContact","isBasicGroup","isChatBasicGroup","handleAddContact","handleConfirmBlock","contactId","handleCloseReportPanel","handleChatReportSpam","isText","confirmIsDestructive","Checkbox","onCheck","audioMessage","isMainThread","isChatWithBot","selectIsChatWithBot","canRestartBot","selectIsUserBlocked","canStartBot","selectIsChatBotNotStarted","canSubscribe","isChatChannel","isChatSuperGroup","shouldSendJoinRequest","isJoinRequest","focusedMessage","isRightColumnShown","isSelectModeActive","selectIsInSelectMode","isChatWithSelf","selectIsChatWithSelf","currentTransitionKey","hasButtonInHeader","hasReachedFocusedMessage","hasReachedMessage","assign","pinnedMessageId","topMessageSender","selectForwardedSender","pinnedMessageIds","canUnpin","isComments","firstPinnedMessage","isReady","pinMessage","openPreviousChat","setReachedFocusedMessage","loadPinnedMessages","toggleLeftColumn","isBackButtonActive","isWaitingForPinnedMessageFocus","setWaitingForPinnedMessageFocus","isTablet","pinnedMessageIndex","setPinnedMessageIndex","isArray","pinnedMessage","pinnedMessagesCount","chatTitleLength","topMessageTitle","cycleRestrict","useEnsureMessage","useWindowSize","isLeftColumnHideable","shouldShowCloseButton","componentRef","shouldAnimateTools","handleHeaderClick","handlePinnedMessageClick","handleAllPinnedClick","setBackButtonActive","handleBackClick","EDITABLE_INPUT_CSS_SELECTOR","canToolsCollideWithChatInfo","SAFE_SCREEN_WIDTH_FOR_CHAT_INFO","MOBILE_SCREEN_MAX_WIDTH","shouldUseStackedToolsClass","SAFE_SCREEN_WIDTH_FOR_STATIC_RIGHT_COLUMN","hasChatSettings","shouldShowChatReportPanel","chatReportPanelClassNames","renderingChatSettings","useCurrentOrPrev","shouldRenderAudioPlayer","audioPlayerClassNames","renderingAudioMessage","shouldRenderPinnedMessage","pinnedMessageClassNames","renderingPinnedMessage","renderingPinnedMessagesCount","renderingCanUnpin","renderingPinnedMessageTitle","prevTransitionKey","usePrevious","canRevealTools","componentEl","renderBackButton","asClose","withUnreadCounter","isAudioPlayerRendered","isPinnedMessagesFullWidth","MAX_SCREEN_WIDTH_FOR_EXPAND_PINNED_MESSAGES","PrivateChatInfo","withDots","withFullInfo","withMediaViewer","withUpdatingStatus","withVideoAvatar","emojiStatusSize","noRtl","GroupChatInfo","GroupCallTopPane","hasPinnedOffset","getMessageKey","HeaderActions","canExpandActions","isAlbum","messageOrAlbum","groupMessages","currentAlbum","currentSenderGroup","currentDateGroup","originalDate","datetime","getDayStartAt","senderGroups","dateGroups","mainMessage","albumId","nextMessage","nextMessageDayStartsAt","isActionMessage","forwardInfo","senderUserId","hiddenUserName","inlineButtons","dependencies","debugKey","prevDeps","INTERSECTION_THROTTLE_FOR_MEDIA","getMinMediaWidth","hasText","hasCommentButton","calculateMediaDimensions","asForwarded","noAvatars","isOwn","isOwnMessage","getMessagePhoto","getMessageWebPagePhoto","getMessageVideo","isWebPagePhoto","isWebPageVideo","getMessageWebPageVideo","calculateInlineImageDimensions","calculateVideoDimensions","minMediaWidth","stretchFactor","finalWidth","finalHeight","isSmall","accumulate","list","initValue","accumulator","item","calculateContainerSize","layout","dimensions","sides","calculateAlbumLayout","ratios","getRatios","proportions","getProportions","averageRatio","getAverageRatio","albumCount","forceCalc","maxWidth","getAvailableWidth","minWidth","maxHeight","spacing","originalRatios","clamp","cropRatios","attempts","pushAttempt","lineCounts","heights","currentCount","attemptCount","sum","multiHeight","first","second","third","fourth","optimalAttempt","optimalDiff","lineCount","totalHeight","bad1","bad2","line","diff","abs","optimalCounts","optimalHeights","rowCount","row","colCount","lineHeight","col","layoutWithComplexLayouter","AlbumRectPart","layoutTwoTopBottom","layoutTwoLeftRightEqual","minimalWidth","secondWidth","firstWidth","layoutTwoLeftRight","layoutTwo","firstHeight","thirdHeight","secondHeight","rightWidth","leftWidth","layoutThreeLeftAndOther","layoutThreeTopAndOther","layoutThree","w","h0","h","w0","w2","w1","h1","layoutFourTopAndOther","h2","layoutFourLeftAndOther","layoutFour","containerStyle","element","fontFamily","calculateAuthorWidth","getComputedStyle","documentElement","getPropertyValue","font","whiteSpace","opacity","appendChild","textContent","useFocusMessage","isFocused","focusDirection","noFocusHighlight","messagesContainer","closest","fastSmoothScroll","QUICK_REACTION_AREA_WIDTH","QUICK_REACTION_AREA_HEIGHT","GROUP_MESSAGE_HOVER_ATTRIBUTE","useOuterHandlers","selectMessage","isInSelectMode","canReply","isProtected","isContextMenuShown","contentRef","shouldHandleMouseLeave","sendDefaultReaction","isQuickReactionVisible","markQuickReactionVisible","unmarkQuickReactionVisible","isSwiped","markSwiped","unmarkSwiped","doubleTapTimeoutRef","startedAt","excludedClosestSelector","onRelease","handleMouseDown","preventMessageInputBlur","target","contains","handleTap","stopEvent","matches","handleDoubleClick","handleContentDoubleClick","container","clientY","getBoundingClientRect","isVisibleX","isVisibleY","handleSendQuickReaction","lastGroupElement","getLastElementInDocumentGroup","currentTarget","removeAttribute","handleDocumentGroupMouseLeave","handleDocumentGroupMouseEnter","setAttribute","nextElementSibling","worker","initializationDeferred","promise","reject","createConnector","Worker","ContextMenuContainer","openMediaViewer","uploadProfilePhoto","cropModalBlob","setCropModalBlob","isVideoModalOpen","openVideoModal","closeVideoModal","suggestedPhotoUrl","showAvatarNotification","actionText","handleSetSuggestedAvatar","handleCloseCropModal","handleSetVideo","File","videoTs","videoSizes","videoStartTs","role","MediaViewerOrigin","Avatar","showVideoOverwrite","loopIndefinitely","withVideo","CropModal","textParts","usersById","targetUserIds","targetChatId","targetMessageId","targetMessage","selectIsMessageFocused","isChat","senderUser","senderChat","premiumGiftSticker","isEmbedded","appearanceOrder","isLastInList","isInsideTopic","memoFirstUnreadIdRef","observeIntersectionForReading","observeIntersectionForLoading","observeIntersectionForPlaying","requestConfetti","useOnIntersect","noAppearanceAnimation","markShown","isSuggestedAvatar","useIsIntersecting","shouldShowConfettiRef","targetUsers","renderActionMessageText","contextMenuPosition","getMessageHtmlId","AnimatedIconFromSticker","play","noLoop","nonInteractive","anchor","customText","noUserColors","hasContextMenu","isIntersecting","isRoundVideo","getMessageRoundVideo","senderTitle","getUserColorKey","draggable","outgoingStatus","signature","withReactionOffset","noReplies","isTranslated","onTranslationClick","onOpenThread","isActivated","markActivated","createDateTime","formatDateTimeToString","editDateTime","isEdited","editDate","forwardedDateTime","fullClassName","isImported","AnimatedCounter","formatTime","MessageOutgoingStatus","observeIntersection","shouldLoop","shouldPlayEffect","onPlayEffect","onStopEffect","openStickerSet","hasEffect","mediaHash","IS_WEBM_SUPPORTED","canLoad","canPlay","mediaHashEffect","effectBlobUrl","isPlayingEffect","startPlayingEffect","stopPlayingEffect","handleEffectEnded","previousShouldPlayEffect","openModal","isMemojiSticker","getStickerDimensions","StickerView","fullMediaHash","fullMediaClassName","noLoad","noPlay","cacheBuster","AnimatedSticker","tgsUrl","isLowPriority","onEnded","SIZE","useAnimatedEmoji","soundId","preferredSize","interactWithAnimatedEmoji","sendEmojiInteraction","sendWatchingEmojiInteraction","audioRef","soundMediaData","buildStyle","startedInteractions","sendInteractionBunch","Audio","safePlay","once","performance","interactionMessageId","withEffects","selectAnimatedEmoji","effect","selectAnimatedEmojiEffect","selectAnimatedEmojiSound","forceLoadPreview","quality","forcePreview","LIKE_STICKER_ID","customEmojiId","getCustomEmojiSize","isBig","SELECTED_APPENDIX_COLORS","dark","outgoing","incoming","light","getCustomAppendixBg","inSelectMode","crossOrigin","getImageData","getAppendixColorFromImage","useBlurredMediaThumbRef","useCanvasBlur","getMessageMediaThumbDataUri","IS_CANVAS_FILTER_SUPPORTED","canAutoLoad","uploadProgress","shouldAffectAppendix","isDownloading","onCancelUpload","localBlobUrl","isLoadAllowed","setIsLoadAllowed","shouldLoad","loadProgress","useMediaWithLoadProgress","fullMediaData","withThumb","noThumb","thumbRef","thumbClassNames","useMediaTransition","isSpoilerShown","hideSpoiler","downloadProgress","getMessageMediaFormat","isUploading","isTransferring","transferProgress","getMediaTransferState","wasLoadDisabled","shouldRenderSpinner","spinnerClassNames","shouldRenderDownloadButton","downloadButtonClassNames","isAllowed","useLayoutEffectWithPrevDeps","prevShouldAffectAppendix","MESSAGE_CONTENT_SELECTOR","CUSTOM_APPENDIX_ATTRIBUTE","contentEl","appendixBg","dimensionsStyle","ProgressSpinner","withAnimation","canAutoPlay","videoRef","isIntersectingForLoading","isIntersectingForPlaying","wasIntersectedRef","isPlayAllowed","setIsPlayAllowed","isFullMediaPreloaded","isPlayerReady","markPlayerReady","hasThumb","previewMediaHash","isPreviewPreloaded","canLoadPreview","previewClassNames","isInline","playButtonClassNames","playProgress","setPlayProgress","handleTimeUpdate","currentTime","cancelMessageMediaDownload","OptimizedVideo","muted","loop","playsInline","onTimeUpdate","onReady","isGif","formatMediaDuration","contact","countryList","phoneCodes","phoneCodeList","isRegistered","formatPhoneNumberWithCode","getPercentage","toFixed","answer","voteResults","maxVotersCount","correctResults","shouldAnimate","correctAnswer","showIcon","answerPercent","finalPercent","setFinalPercent","lineRef","lineWidth","isAnimationDoesNotStart","lineEl","svgEl","lineStyle","onSendVote","openPollResults","summary","isSubmitting","setIsSubmitting","chosenOptions","setChosenOptions","isSolutionShown","setIsSolutionShown","wasSubmitted","setWasSubmitted","closePeriod","setClosePeriod","closed","closeDate","countdownRef","hasVoted","canVote","canViewResult","isPublic","isMultiple","multipleChoice","answers","isCorrect","hidden","quiz","chosen","countdownEl","circumference","PI","lastElementChild","timerEl","strokeDashOffset","timer","recentVoters","handleRadioChange","handleCheckboxChange","handleVoteClick","handleViewResultsClick","handleSolutionShow","handleSolutionHide","solution","Notification","renderTextWithEntities","solutionEntities","onDismiss","containerId","question","getPollTypeString","CheckboxGroup","loadingOptions","RadioGroup","loadingOption","getReadableVotersCount","inPreview","onMediaClick","onCancelMediaTransfer","webPage","getMessageWebPage","handleMediaClick","siteName","displayUrl","truncatedDescription","trimText","isArticle","isSquarePhoto","isMediaInteractive","SafeLink","getMessageInvoice","isTest","photoUrl","getWebDocumentHash","Skeleton","forceAspectRatio","loadExtendedMedia","refreshExtendedMedia","useInterval","dataUri","VENUE_COLORS","arts_entertainment","building","education","event","food","home","nightlife","parks_outdoors","shops","travel","work","RANDOM_COLORS","MOVE_THRESHOLD","DEFAULT_MAP_CONFIG","zoom","SVG_PIN","__html","forceUpdate","useForceUpdate","getMessageLocation","geo","serverTime","isExpired","isGeoLiveExpired","secondsBeforeEnd","period","point","setPoint","shouldRenderText","buildStaticMapHash","prevMediaBlobUrl","mapBlobUrl","isPeerUser","avatarUser","avatarChat","accuracyRadiusPx","accuracyRadius","lat","cos","getMetersPerPixel","updateCountdown","timeLeft","formatCountdownShort","prevShouldRenderText","long","prepareMapUrl","pinClassName","dangerouslySetInnerHTML","heading","str","prevHash","currVal","charCodeAt","getVenueColor","venueType","iconSrc","getVenueIconUrl","mapPin","renderPin","renderOverlay","address","formatLastUpdated","renderInfo","canAutoLoadMedia","game","photoHash","getGamePreviewPhotoHash","videoHash","getGamePreviewVideoHash","photoBlobUrl","videoBlobUrl","disablePictureInPicture","autoPlay","withSelectControl","WrappedComponent","ownProps","selectIsMessageSelected","handleMessageSelect","newProps","dims","PhotoWithSelect","Photo","VideoWithSelect","Video","activeDownloadIds","selectActiveDownloadIds","uploadsById","hasCustomAppendix","albumLayout","cancelSendingMessage","mediaCount","handleCancelUpload","containerWidth","containerHeight","selectCanAutoLoadMedia","selectCanAutoPlayMedia","stopPrevious","playingProgressRef","playerRef","shouldSpinnerRender","setIsActivated","setProgress","svgCenter","ROUND_VIDEO_DIMENSIONS_PX","playerEl","playingProgressEl","shouldPlay","stopPlaying","fastRaf","capturePlaying","paused","stopCurrentAudio","renderIcon","openComments","recentReplierIds","recentRepliers","hasUnread","commentsText","CENTER_ICON_SIZE","EFFECT_SIZE","genericEffects","stopActiveReaction","centerIconId","useCustomEmoji","assignedEffectId","assignedId","available","effectId","mediaHashCenterIcon","mediaDataCenterIcon","mediaDataEffect","activeReaction","shouldRenderAnimation","animationClassNames","handleEnded","isAnimationLoaded","markAnimationLoaded","unmarkAnimationLoaded","shouldRenderStatic","ReactionStaticEmoji","onLoad","withRecentReactors","recentReactors","recentReaction","isOutside","metaChildren","noRecentReactors","getReactionUniqueKey","requestMasterAndRequestCall","isMissed","isCancelled","handleCall","reasonText","formatTimeDuration","timeFormatted","TOPIC_ICON_SIZE","getTopicColorCssVariable","iconColor","TopicIcon","blankSrc","APPENDIX_OWN","APPENDIX_NOT_OWN","QUICK_REACTION_SIZE","EXTRA_SPACE_FOR_REACTIONS","withSenderName","withAvatar","isLastInDocumentGroup","isFirstInGroup","replyToChatId","isRepliesChat","isChatWithRepliesBot","isChatGroup","chatUsernames","isForwarding","forceSenderName","isAnonymousOwnMessage","canShowSender","originSender","senderAdminMember","threadTopMessageId","isThreadTop","shouldHideReply","replyMessageSender","selectReplySender","isReplyToTopicStart","selectUploadProgress","highlight","singleEmoji","getMessageSingleRegularEmoji","animatedEmoji","animatedCustomEmoji","getMessageSingleCustomEmoji","every","selectIsDownloading","actualRepliesThreadInfo","reactionMessage","hasUnreadReaction","hasTopicChip","messageTopic","GENERAL_TOPIC_ID","isLocation","chatTranslations","selectChatTranslations","requestedTranslationLanguage","selectIsMessageProtected","isChatProtected","selectIsChatProtected","isGroupSelected","selectIsDocumentGroupSelected","isPinnedList","canAutoPlayMedia","autoLoadFileMaxSizeMb","shouldLoopStickers","selectShouldLoopStickers","isTranscribing","transcribedText","areTranslationsEnabled","canTranslate","selectOutgoingStatus","observeIntersectionForBottom","noComments","isLastInGroup","isFirstInDocumentGroup","animateUnreadReaction","bottomMarkerRef","messageHeightRef","isTranscriptionHidden","setTranscriptionHidden","hasActiveStickerEffect","startStickerEffect","stopStickerEffect","hasReply","isReplyMessage","hasThread","isCustomShape","getMessageCustomShape","hasAnimatedEmoji","hasReactions","areReactionsEmpty","isLinkedChannelPost","msg","isInDocumentGroupNotFirst","isInDocumentGroupNotLast","canShowActionButton","canForward","isForwardingAllowed","canFocus","isChannelPost","fromMessageId","hasSubheader","messageSender","withVoiceTranscription","avatarPeer","senderPeer","handleAvatarClick","handleSenderClick","handleViaBotClick","handleReplyClick","handleAudioPlay","handleAlbumMediaClick","handleMetaClick","handleTranslationClick","handleOpenThread","handleReadMedia","handleVoteSend","handleGroupForward","handleForward","handleFocus","handleFocusForwarded","handleDocumentGroupSelectAll","handleTopicChipClick","openAudioPlayer","sendPollVote","focusMessageInComments","openMessageLanguageModal","channelPostId","albumMessageId","selectWithGroupedId","useInnerHandlers","containerClassName","detectedLanguage","threshold","args","detectLanguage","useTextLanguage","isTranslationPending","translatedText","requestedLanguageCode","translateMessages","messageTranslation","byLangCode","useMessageTranslation","previousTranslatedText","currentText","currentTranslatedText","withCommentButton","withQuickReactionButton","contentClassName","hasComments","hasActionButton","isGeoLiveActive","classNames","MESSAGE_CONTENT_CLASS_NAME","isMedia","isMediaWithNoText","isViaBot","emojiOnlyCount","EMOJI_SIZES","isRound","buildContentClassName","withAppendix","hasMessageText","emojiSize","metaPosition","reactionsPosition","shouldFocusOnResize","handleResize","entry","lastHeight","newHeight","clientHeight","isAnimatingScroll","resizeDiff","offsetHeight","scrollHeight","scrollTop","throttledResize","useThrottledCallback","useResizeObserver","bottomMarker","isElementInViewport","calculatedWidth","reactionsMaxWidth","noMediaCorners","extraPadding","previewWidth","previewHeight","calculateDimensionsForMessageMedia","fromOwnMessage","postAuthorTitle","metaSafeAuthorWidth","isForAnimation","MessageText","withTranslucentThumbs","renderReactionsAndMeta","meta","forwardAuthor","chatUsername","c","onMouseMove","isAvatarPeerUser","hiddenName","renderAvatar","textContentClass","senderColor","senderEmojiStatus","senderIsPremium","fakeType","FakeIcon","renderSenderName","AudioOrigin","isSelectable","onPlay","onReadMedia","isTranscribed","onHideTranscription","canTranscribe","Document","DotAnimation","renderContent","AboutAdsModal","SponsoredMessageContextMenuContainer","isBot","channel","viewSponsoredMessage","openChatByInvite","startBot","shouldObserve","observe","useIntersectionObserver","rootRef","debounceMs","isAboutAdsModalOpen","openAboutAdsModal","closeAboutAdsModal","chatInviteHash","chatInviteTitle","isRecommended","onAboutAds","messageGroups","isViewportNewest","withUsers","isChannelChat","anchorIdRef","memoUnreadDividerBeforeIdRef","isScrollingRef","isScrollPatchNeededRef","hasLinkedChat","isSchedule","onFabToggle","onNotchToggle","openHistoryCalendar","markMentionsRead","INTERSECTION_MARGIN_FOR_LOADING","freeze","freezeForReading","unfreeze","unfreezeForReading","throttleMs","mentionIds","reactionIds","dataset","useBackgroundMode","margin","useMessageObservers","backwardsTriggerRef","forwardsTriggerRef","fabTriggerRef","loadMoreBackwards","loadMoreForwards","toggleScrollTools","scrollBottom","isAtBottom","MESSAGE_LIST_SENSITIVE_AREA","LOCAL_MESSAGE_MIN_ID","triggerEntry","IS_SCROLL_PATCH_NEEDED","observeIntersectionForFab","freezeForFab","unfreezeForFab","FAB_THRESHOLD","observeIntersectionForNotch","freezeForNotch","unfreezeForNotch","toggleScrollToolsRef","useScrollHooks","unreadDivider","messageCountToAnimate","messageGroup","flat","appearanceIndex","dateGroup","dateGroupIndex","dateGroupsArray","senderGroup","senderGroupIndex","senderGroupsArray","currentDocumentGroupId","messageIndex","isMessageAlbum","documentGroupId","nextDocumentGroupId","originalId","isTopicTopMessage","teactFastList","SCHEDULED_WHEN_ONLINE","formatHumanDate","dividend","getUserIdDividend","lastUnreadMessageId","loadGreetingStickers","handleStickerSelect","selectedSticker","StickerButton","noContextMenu","ICON_SIZE","isGroupChatJustCreated","renderScheduled","renderSavedMessages","renderGroup","renderTopic","runDebouncedForScroll","selectCurrentMessageIds","restrictionReason","focusingId","withLastMessageWhenPreloading","chatBot","isLoadingBotInfo","isChatLoaded","isGroupChat","isCreator","threadFirstMessageId","selectFirstMessageId","linkedChatId","hasTools","canPost","withBottomShift","withDefaultBg","setScrollOffset","loadSponsoredMessages","loadMessageReactions","copyMessagesByIds","loadMessageViews","scrollOffsetRef","selectScrollOffset","selectLastScrollOffset","anchorTopRef","listItemElementsRef","memoFocusingIdRef","isScrollTopJustUpdatedRef","shouldAnimateAppearanceRef","setContainerHeight","botInfoPhotoUrl","getBotCoverMediaHash","botInfoGifUrl","getDocumentMediaHash","botInfoDimensions","getPhotoFullDimensions","getVideoDimensions","botInfoRealDimensions","DPR","getMessageIdsForSelectedText","useNativeCopySelectedMessages","listedMessages","orderBy","loadMoreAround","isScrolled","updateStickyDates","markIsScrolled","runDebounced","useRunDebounced","currentStuck","stuckDateEl","allElements","containerTop","offsetTop","findStuckDate","useStickyDates","handleScroll","parentElement","contentRect","windowHeight","normalHeight","String","preservedItemElements","prevMessageIds","prevIsViewportNewest","prevContainerHeight","hasLastMessageChanged","hasViewportShifted","wasMessageAdded","isAlreadyFocusing","shouldForceScroll","lastItemElement","bottomOffset","newScrollTop","isResized","patchChromiumScroll","resetScroll","prevIsSelectModeActive","dispatchHeavyAnimationEvent","shouldRenderGreeting","isEmptyTopic","isBotInfoEmpty","onScroll","backgroundColor","ariaLabelLang","onReadAll","shouldShowCount","reactionsCount","mentionsCount","withExtraShift","focusNextReply","focusNextReaction","focusNextMention","readAllMentions","readAllReactions","fetchUnreadMentions","hasUnreadReactions","hasUnreadMentions","messageElements","lastMessageElement","FILE_EXT_REGEX","buildAttachment","filename","quick","preloadImage","validateAspectRatio","shouldShrink","GIF_MIME_TYPE","compressedBlobUrl","resizedUrl","videoWidth","videoHeight","preloadVideo","createPosterForVideo","coverUrl","fetchFromUrl","selectCover","metadata","common","picture","format","cover","parseAudioMetadata","uniqueId","prepareAttachmentsToSend","shouldSendCompressed","attach","shouldSendAsSpoiler","deleteLastCharacterOutsideSelection","html","tempInput","contentEditable","lastChild","textLength","range","createRange","selection","getSelection","setStart","setEnd","removeAllRanges","addRange","execCommand","removeChild","resetInput","applyIosAutoCapitalizationFix","inputEl","STARTS_ENDS_ON_EMOJI_IMG_REGEX","RegExp","EMOJI_IMG_REGEX","POLYFILL_OPTIONS","encoderPath","reuseWorker","BLOB_PARAMS","opusRecorderPromise","OpusRecorder","mediaRecorder","default","start","analyzerCallback","startMediaRecorder","pausedAt","chunks","waveform","ondataavailable","typedArray","releaseAnalyzer","recorder","source","sourceNode","analyser","context","createAnalyser","fftSize","connect","dataLength","frequencyBinCount","dataArray","Uint8Array","isDestroyed","tick","getByteFrequencyData","requestAnimationFrame","subscribeToAnalyzer","onstop","onerror","delayStop","GDOCS_ELEMENT_ID_REGEXP","parseHtml","DOMParser","parseFromString","wrapNodeAnchor","node","cloneNode","wrapNodeInline","wrapNode","inner","newNode","fontWeight","fontStyle","textDecoration","verticalAlign","applyInlineStyles","dirty","createTextNode","styledNode","nodeName","childNodes","getCleanNode","newWrapper","createDocumentFragment","items","applyBlockStyles","nodes","filterNode","nodeType","STYLE_TAG_REGEX","insertTextAndUpdateCursor","setAttachments","editedMessage","shouldStripCustomEmoji","onCustomEmojiStripped","handlePaste","clipboardData","input","activeElement","EDITABLE_INPUT_ID","EDITABLE_INPUT_MODAL_ID","pastedText","getData","substring","pastedFormattedText","fragment","clipboardContent","filteredNodes","cleanNodes","getCleanDocument","textContents","getElementsByTagName","HTMLElement","tagName","replaceWith","entityType","ignoreOnPaste","ENTITY_CLASS_BY_NODE_NAME","innerText","ApiMessageEntityTypes","trimEnd","preparePastedHtml","containsCustomEmoji","stripCustomEmoji","getFilesFromDataTransferItems","newAttachments","textToPaste","INLINE_BOT_QUERY_REGEXP","HAS_NEW_LINE","MEMO_NO_RESULT","canShowHelp","usernameLowered","tempEl","buildQueryStateMemo","memoized","RE_COMMAND","isFrozen","DeleteMessageModal","COLOR_REPLACE_PATTERN","iconSvg","mediaDataWithReplacedColors","doc","stroke","strokeWidth","outerHTML","IS_COMPACT_MENU","onMenuOpened","onMenuClosed","icons","openMenu","closeMenu","menuPosition","setMenuPosition","rect","right","bottom","handleCloseMenu","handleCloseAnimationEnd","handleRemoveBot","Portal","destructive","isButtonVisible","canAttachMedia","canAttachPolls","attachBots","onFileSelect","onPollCreate","isAttachMenuOpen","openAttachMenu","closeAttachMenu","markMouseInside","useMouseInside","canSendVideoAndPhoto","canSendVideoOrPhoto","isAttachmentBotMenuOpen","markAttachmentBotMenuOpen","unmarkAttachmentBotMenuOpen","handleToggleAttachMenu","handleFileSelect","shouldSuggestCompression","validatedFiles","validateFiles","handleQuickSelect","openSystemFilesDialog","CONTENT_TYPES_WITH_PREVIEW","handleDocumentSelect","ResponsiveHoverButton","onActivate","ariaControls","hasPopup","noCloseOnBackdrop","ariaLabelledBy","InlineBotTooltip","MentionTooltip","StickerTooltip","BotCommandTooltip","isKeyboardSingleUse","keyboardButtons","noCompact","shouldForceShowEditing","forwardMessageIds","forwardedMessages","forwardsHaveCaptions","forward","forwardedMessagesCount","onClear","changeForwardRecipient","setForwardNoAuthors","setForwardNoCaptions","exitForwardMode","canAnimate","useAsyncRendering","clearEmbedded","handleMessageClick","handleClearClick","handleChangeRecipientClick","getTriggerElement","getRootElement","getMenuElement","transformOriginX","transformOriginY","menuStyle","useContextMenuPosition","leftIcon","strippedMessage","strippedText","faded","MenuSeparator","AttachmentModal","BotCommandMenu","PollModal","DropArea","RE_LINK","RE_LINK_TEMPLATE","getHtml","loadWebPagePreview","toggleMessageWebPage","detectLinkDebounced","useDebouncedResolver","linkEntity","entity","getLink","useDerivedSignal","useDerivedState","renderingWebPage","handleClearWebpagePreview","webPageWithoutPhoto","messageStub","SendAsMenu","textRef","textEl","scrollWidth","composerEl","removeProperty","MainButtonState","VOICE_RECORDING_FILENAME","REPLIES_USER_ID","isChatWithUser","messageWithActualBotKeyboard","selectNewestMessageWithBotKeyboardButtons","shouldSuggestStickers","shouldSuggestCustomEmoji","baseEmojiKeywords","BASE_EMOJI_KEYWORD_LANG","botKeyboardMessageId","keyboardMessage","defaultSendAsId","adminRights","anonymous","sendAsUser","requestedDraftText","selectRequestedDraftText","requestedDraftFiles","selectRequestedDraftFiles","isForCurrentMessageList","canSendVoiceByPrivacy","selectEditingScheduledDraft","editingMessage","canScheduleUntilOnline","selectCanScheduleUntilOnline","withScheduledButton","shouldSchedule","botKeyboardPlaceholder","keyboardPlaceholder","stickersForEmoji","customEmojiForEmoji","groupChatMembers","topInlineBotIds","isInlineBotLoading","chatBotCommands","botCommands","commands","botMenuButton","attachMenuPeerType","selectChatType","fileSizeLimit","MAX_UPLOAD_FILEPART_SIZE","captionLimit","dropAreaState","onDropHide","clearDraft","closePollModal","loadScheduledHistory","addRecentEmoji","sendInlineBotResult","loadSendAs","resetOpenChatWithDraft","addRecentCustomEmoji","appendixRef","inputRef","setHtml","useSignal","getSelectionRange","useGetSelectionRange","lastMessageSendTimeSeconds","prevDropAreaState","canShowSendAs","isSymbolMenuForced","forceShowSymbolMenu","cancelForceShowSymbolMenu","sendMessageAction","useSendMessageAction","processMessageInputForCustomEmoji","customEmojiNotificationNumber","handleScheduleCancel","requestCalendar","calendar","useSchedule","shouldAnimateSendAsButtonRef","prevChatId","prevSendAsPeerIds","hasAttachments","canSendGifs","canAttachEmbedLinks","isComposerBlocked","shouldForceCompression","shouldForceAsFile","handleAppendFiles","onCaptionUpdate","handleClearAttachments","handleSetAttachments","setShouldForceAsFile","setShouldForceCompression","setShouldSuggestCompression","newValue","suggestCompression","useAttachmentModal","isBotKeyboardOpen","openBotKeyboard","closeBotKeyboard","isBotCommandMenuOpen","openBotCommandMenu","closeBotCommandMenu","isSymbolMenuOpen","openSymbolMenu","closeSymbolMenu","isSendAsMenuOpen","openSendAsMenu","closeSendAsMenu","isDeleteModalOpen","openDeleteModal","closeDeleteModal","isHoverDisabled","disableHover","enableHover","startRecordingVoice","stopRecordingVoice","pauseRecordingVoice","activeVoiceRecording","currentRecordTime","recordButtonRef","mainButtonRef","startRecordTimeRef","setActiveVoiceRecording","setCurrentRecordTime","IS_SAFARI","IS_VOICE_RECORDING_SUPPORTED","voiceRecording","tickVolume","boxShadow","useVoiceRecording","SEND_MESSAGE_ACTION_INTERVAL","isEditingRef","useStateRef","isChatAdmin","slowMode","getChatSlowModeOptions","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","filteredCustomEmojis","insertEmoji","useEmojiTooltip","isCustomEmojiTooltipOpen","closeCustomEmojiTooltip","insertCustomEmoji","useCustomEmojiTooltip","isStickerTooltipOpen","closeStickerTooltip","loadStickersForEmoji","clearStickersForEmoji","isManuallyClosed","markManuallyClosed","unmarkManuallyClosed","getSingleEmoji","IS_EMOJI_SUPPORTED","twemojiRegex","cleanHtml","prepareForRegExp","parseEmojiOnlyString","hasStickers","useStickerTooltip","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","isInlineBotTooltipOpen","inlineBotId","isInlineBotTooltipGallery","inlineBotSwitchPm","inlineBotResults","closeTooltip","closeInlineBotTooltip","inlineBotHelp","loadMore","loadMoreForInlineBot","queryInlineBot","resetAllInlineBots","extractBotQueryThrottled","useThrottledResolver","getPlainText","parseBotQuery","prevUsername","useInlineBotTooltip","isBotCommandTooltipOpen","closeBotCommandTooltip","filteredBotCommands","botTooltipCommands","setFilteredBotCommands","detectCommandThrottled","getCommand","nextFilteredBotCommands","useBotCommandTooltip","insertHtmlAndUpdateCursor","newHtml","messageInput","rangeCount","selectionRange","getRangeAt","isSelectionInsideInput","insertHtmlInSelection","dispatchEvent","Event","bubbles","focusEditableElement","insertFormattedTextAndUpdateCursor","getTextWithEntitiesAsHtml","insertCustomEmojiAndUpdateCursor","buildCustomEmojiHtml","saveDraft","isEditing","updateDraft","prevState","forceUpdateDraft","updateDraftRef","runDebouncedForSaveDraft","DRAFT_DEBOUNCE","prevThreadId","prevDraft","customEmojiIds","chatIdRef","threadIdRef","scopedShatId","scopedThreadId","useDraft","resetComposer","shouldPreserveInput","handleEditComplete","handleEditCancel","editMessage","setEditingDraft","setShouldForceShowEditing","prevEditedMessage","prevReplyingToId","edited","restoreNewDraftAfterEditing","hasMessageMedia","handleBlur","useEditing","resetComposerRef","stopRecordingVoiceRef","showCustomEmojiPremiumNotification","notificationNumber","mainButtonState","Edit","Schedule","Send","Record","canShowCustomSendMenu","isCustomSendMenuOpen","useClipboardPaste","handleEmbeddedClear","validateTextLength","isAttachmentModal","maxLength","extraLength","textParams","checkSlowMode","nowSeconds","secondsSinceLastMessage","nextSendDateNotReached","nextSendDate","seconds","secondsRemaining","isSlowMode","sendAttachments","attachmentsToSend","sendCompressed","sendGrouped","shouldUpdateStickerSetsOrder","handleSendAttachments","handleSend","currentAttachments","record","handleClickBotMenu","handleActivateBotCommandMenu","handleMessageSchedule","restArgs","handleCustomEmojiSelect","isFree","handleCustomEmojiSelectAttachmentModal","handleGifSelect","isScheduleRequested","handleInlineBotSelect","inlineResult","handleBotCommandSelect","handlePollSend","sendSilent","additionalArgs","handleSendAsMenuOpen","insertTextAndUpdateCursorAttachmentModal","removeSymbol","removeSymbolAttachmentModal","handleAllScheduledClick","areVoiceMessagesNotAllowed","mainButtonHandler","renderedEditedMessage","scheduledDefaultDate","setSeconds","setMilliseconds","scheduledMaxDate","setFullYear","getFullYear","sendButtonAriaLabel","handleSendScheduled","handleSendSilent","handleSendScheduledAttachments","handleSendSilentAttachments","onSend","withBotMenuButton","isBotMenuButtonOpen","withBotCommands","DropAreaState","withQuick","onSendSilent","onSendScheduled","onFileAppend","onAttachmentsUpdate","onCustomEmojiSelect","onRemoveSymbol","onEmojiSelect","shouldBeAnonymous","selectedSendAsId","filteredUsers","onInsertUserName","withUsername","isSavedMessages","onSelectResult","SymbolMenuButton","onGifSelect","onStickerSelect","MessageInput","editableInputId","forcedPlaceholder","canAutoFocus","noFocusInterception","shouldSuppressFocus","shouldSuppressTextFormatter","onUpdate","onSuppressedFocus","formatVoiceRecordDuration","allowDisabledClick","onSendSchedule","MobileSearch","MessageSelectToolbar","UnpinAllMessagesModal","SeenByModal","EmojiInteractionAnimation","ReactorListModal","GiftPremiumModal","MessageLanguageModal","isImage","kind","isBackgroundBlurred","background","customBackground","patternColor","themes","hasCurrentTextSearch","isSeenByModalOpen","isReactorListModalOpen","isGiftPremiumModalOpen","isMessageLanguageModalOpen","getCanPostInChat","isBotNotStarted","isPinnedMessageList","isScheduledMessageList","shouldJoinToSend","isJoinToSend","shouldLoadFullChat","shouldBlockSendInForum","areChatSettingsLoaded","currentUserBannedRights","defaultBannedRights","hasPinned","hasAudioPlayer","unpinAllMessages","loadUser","joinChannel","restartBot","setDropAreaState","isFabShown","setIsFabShown","isNotchShown","setIsNotchShown","isUnpinModalOpen","setIsUnpinModalOpen","isMobileSearchActive","closeAnimationDuration","renderingChatId","usePrevDuringAnimation","renderingThreadId","renderingMessageListType","renderingCanSubscribe","renderingCanStartBot","renderingCanRestartBot","renderingCanPost","TMP_CHAT_ID","renderingHasTools","renderingIsFabShown","renderingIsChannel","renderingShouldJoinToSend","renderingShouldSendJoinRequest","handleOpenEnd","handleSlideStop","withAnimations","setIsReady","willSwitchMessageList","propertyName","useIsReady","ANIMATION_LEVEL_MIN","visualViewport","handleDragEnter","dataTransfer","shouldDrawQuick","handleHideDropArea","handleOpenUnpinModal","closeUnpinModal","handleUnpinAllMessages","handleTabletFocus","handleSubscribeClick","handleStartBot","handleRestartBot","customBackgroundValue","settingValue","setValue","cacheApi","CUSTOM_BG_CACHE_NAME","Type","useCustomBackground","MASK_IMAGE_DISABLED","bgClassName","messagingDisabledClassName","messageSendingRestrictionReason","getMessageSendingRestrictionReason","forumComposerPlaceholder","getForumComposerPlaceholder","composerRestrictionMessage","composerHiddenScale","toolbarHiddenScale","composerTranslateX","toolbarTranslateX","unpinHiddenScale","toolbarForUnpinHiddenScale","sidePadding","messageListWidth","rightColumnWidth","getMessageListWidth","sendButtonWidth","composerWidth","toolbarWidth","calculateMiddleFooterTransforms","footerClassName","isMessagingDisabled","withMessageListBottomShift","DARK_THEME_BG_COLOR","LIGHT_THEME_BG_COLOR","onDragEnter","onStop","onUnpin","teactOrderKey","COLUMN_ANIMATION_DURATION","HeaderContent","isProfile","isManagement","messageSearchQuery","stickerSearchQuery","selectCurrentStickerSearch","gifSearchQuery","selectCurrentGifSearch","canEditTopic","getCanManageTopic","getCanAddContact","canManage","isEditingInvite","canViewStatistics","isColumnOpen","isSearch","isStatistics","isMessageStatistics","isStickerSearch","isGifSearch","isPollResults","isCreatingTopic","isEditingTopic","isAddingChatMembers","profileState","managementScreen","setLocalTextSearchQuery","setStickerSearchQuery","setGifSearchQuery","searchTextMessagesLocal","toggleManagement","toggleStatistics","setEditingExportedInvite","deleteExportedChatInvite","openEditTopicPanel","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","handleEditInviteClick","ManagementScreens","handleDeleteInviteClick","handleMessageSearchQueryChange","handleStickerSearchQueryChange","handleGifSearchQueryChange","toggleEditTopic","handleToggleManagement","handleToggleStatistics","setShouldSkipTransition","contentKey","ProfileState","Profile","SharedMedia","MemberList","Search","PollResults","StickerSearch","GifSearch","AddingMembers","ManageInitial","ManageChatPrivacyType","ManageDiscussion","ManageChannelSubscribers","ManageGroupPermissions","ManageChatAdministrators","ManageGroupRemovedUsers","ManageChannelRemovedUsers","ManageGroupUserPermissionsCreate","ManageGroupUserPermissions","ManageGroupRecentActions","ManageGroupAdminRights","ManageGroupNewAdminRights","ManageGroupMembers","ManageInvites","ManageEditInvite","ManageGroupAddAdmins","ManageReactions","ManageInviteInfo","ManageJoinRequests","Statistics","MessageStatistics","CreateTopic","EditTopic","renderingContentKey","isBackButton","buttonClassName","autoFocusSearch","renderHeaderContent","useInfiniteScrollForLoadableItems","currentResultType","handleLoadMore","itemIds","getMore","useInfiniteScroll","MEMBERS_SLICE","useInfiniteScrollForSharedMedia","forSharedMediaType","messageIdsRef","getMessageContentIds","runThrottledForScroll","isScrollingProgrammatically","TABS","buildInfiniteScrollItemSelector","resultType","mediaSearchType","hasMembersTab","areMembersHidden","isForbidden","canViewMembers","canAddMembers","getHasAdminRight","isUserRightBanned","canDeleteMembers","hasCommonChatsTab","resolvedUserId","commonChatIds","onProfileStateChange","setLocalMediaSearchType","loadMoreMembers","loadCommonChats","searchMediaMessagesLocal","setNewChatMembersDialogState","setActiveTab","deletingUserId","setDeletingUserId","renderingActiveTab","tabType","noProfileInfo","searchMessages","memberIds","sortUserIds","sortChatIds","memberViewportIds","getMoreMembers","noProfileInfoForMembers","mediaViewportIds","getMoreMedia","noProfileInfoForMedia","documentViewportIds","getMoreDocuments","noProfileInfoForDocuments","linkViewportIds","getMoreLinks","noProfileInfoForLinks","audioViewportIds","getMoreAudio","noProfileInfoForAudio","voiceViewportIds","getMoreVoices","noProfileInfoForVoices","commonChatViewportIds","getMoreCommonChats","noProfileInfoForCommonChats","useProfileViewportIds","isFirstTab","prevTabType","tabsEl","prevProfileState","tabListEl","determineProfileState","useProfileState","applyTransitionFix","releaseTransitionFix","transitionElSelector","setMinHeight","transitionEl","minHeight","overflowY","scrollBarWidth","clientWidth","marginRight","useTransitionFixes","resetCacheBuster","setCacheBuster","useCacheBuster","observeIntersectionForMedia","handleTransitionStop","handleNewMemberDialogOpen","NewChatMembersProgress","handleSelectMedia","handlePlayAudio","handleMemberClick","handleMessageFocus","handleDeleteMembersModalClose","renderingDelay","prevHasMemberTabs","newActiveTab","SLIDE_TRANSITION_DURATION","canRenderContent","InfiniteScroll","itemSelector","sensitiveArea","PROFILE_SENSITIVE_AREA","preloadBackwards","noScrollRestoreOnTop","noFastList","onLoadMore","ProfileInfo","canPlayVideo","ChatExtra","renderProfileInfo","shouldRestoreHeight","onStart","noSpinner","forceRenderHiddenMembers","NothingFound","Media","withDate","smaller","onDateClick","WebLink","onMessageClick","getSenderName","ListItem","contextActions","memberId","handler","adminMember","forceShowSelf","big","FloatingActionButton","DeleteMemberModal","RightSearch","Management","localContactIds","isSearching","onNextStep","setUserSearchQuery","selectedMemberIds","setSelectedMemberIds","noPickerScrollRestore","member","handleFilterChange","displayedIds","filteredContactIds","filterUsersByName","canBeInvitedToGroup","handleNextStep","Picker","selectedIds","filterValue","filterPlaceholder","searchInputId","onSelectedIdsChange","onFilterChange","noScrollRestore","ANIMATION_DURATION","MAIN_SCREENS_COUNT","RightColumnContent","MANAGEMENT_SCREENS_COUNT","blurSearchInput","searchInput","areActiveChatsLoaded","selectAreActiveChatsLoaded","nextManagementScreen","selectRightColumnContentKey","isChatSelected","toggleChatInfo","closePollResults","addChatMembers","toggleMessageStatistics","setOpenedInviteInfo","requestNextManagementScreen","closeCreateTopicPanel","closeEditTopicPanel","setProfileState","setManagementScreen","selectedChatMemberId","setSelectedChatMemberId","isPromotedByCurrentUser","setIsPromotedByCurrentUser","isScrolledDown","isOverlaying","shouldScrollUp","forceSyncOnIOs","handleSelectChatMember","isPromoted","handleAppendingChatMembers","onChatMemberSelect","MediaViewer","pendingDownloads","planned","download","pendingDownload","downloadOne","processQueue","click","processedMessages","downloadedMessages","cancelMessagesMediaDownload","handleMessageDownloaded","clear","activeMessages","downloadHash","getMessageContentFilename","MAX_BUFFER_SIZE","IS_OPFS_SUPPORTED","IS_SERVICE_WORKER_SUPPORTED","mediaFormat","baseURI","encodeURIComponent","gameTitle","closeGame","handleMessage","eventType","handleLoad","Modal","hasCloseButton","sandbox","allow","Notifications","Dialogs","ForwardRecipientPicker","SafeLinkModal","HistoryCalendar","GroupCall","ActiveCallHeader","PhoneCall","closeChat","MessageHistoryRecord","createLocationHash","NewContactModal","RatePhoneCallModal","WebAppModal","BotTrustModal","AttachBotInstallModal","CONFETTI_COLORS","canvasRef","confettiRef","isRafStartedRef","defaultConfettiAmount","generateConfetti","leftSide","pos","randomX","velocity","randomColor","flicker","flickerFrequency","rotation","lastDrawnAt","frameCount","updateCanvas","canvasWidth","canvasHeight","clearRect","confettiToRemove","newPos","newVelocity","newFlicker","sin","newRotation","newFrameCount","newLastDrawnAt","newConfetti","beginPath","ellipse","fill","hideTimeout","prevConfettiTime","UrlAuthModal","PremiumMainModal","PaymentModal","ReceiptModal","PremiumLimitReachedModal","deleteFolderDialogId","DeleteFolderDialog","CustomEmojiSetsModal","DraftRecipientPicker","AttachBotRecipientPicker","DEBUG_isLogged","wasTimeFormatSetManually","currentUser","isLeftColumnOpen","isMiddleColumnOpen","isRightColumnOpen","isMediaViewerOpen","selectIsMediaViewerOpen","isForwardModalOpen","selectIsForwardModalOpen","hasNotifications","hasDialogs","isHistoryCalendarOpen","isServiceChatReady","isPhoneCallActive","addedCustomEmojiIds","newContactUserId","newContactByPhoneNumber","isRatePhoneCallModalOpen","botTrustRequestBot","attachBotToInstall","isPremiumModalOpen","limitReached","isReceiptModalOpen","loadAnimatedEmojis","loadNotificationSettings","loadNotificationExceptions","onTabFocusChange","loadTopInlineBots","loadEmojiKeywords","loadCountryList","loadAvailableReactions","loadPremiumGifts","loadDefaultTopicIcons","loadAddedStickers","loadDefaultStatusIcons","ensureTimeFormat","closeStickerSetModal","closeCustomEmojiSets","checkVersionNotification","loadAppConfig","loadContactList","loadGenericEmojiEffects","closePaymentModal","clearReceipt","checkAppVersion","loadBundle","isDesktop","langCode","prevLastSyncTime","parsedInitialLocationHash","parseInitialLocationHash","tgaddr","processDeepLink","decodeURIComponent","parsedLocationHash","parseLocationHash","leftColumnTransition","willAnimateLeftColumnRef","prevIsLeftColumnOpen","dispatchHeavyAnimationEnd","waitForTransitionEnd","rightColumnTransition","willAnimateRightColumnRef","isNarrowMessageList","setIsNarrowMessageList","prevIsRightColumnOpen","hasShownClass","hasOpenClass","handleStickerSetModalClose","handleCustomEmojiSetsModalClose","usePreventPinchZoomGesture","stickerSetShortName","passcodeSettings","isLocked","signOut","resetInvalidUnlockAttempts","validationError","setValidationError","shouldShowPasscode","setShouldShowPasscode","isSignOutDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","handleClearError","handleSubmit","handleSignOutMessage","forceInitApi","AnimatedIconWithPreview","LOCAL_TGS_URLS","previewUrl","lockPreviewUrl","PasswordForm","shouldShowSubmit","shouldDisablePasswordManager","submitLabel","clearError","isPasswordVisible","noRipple","onChangePasswordVisibility","onSubmit","Link","IS_MULTITAB_SUPPORTED"],"sourceRoot":""}