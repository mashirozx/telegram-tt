{"version":3,"file":"3779.c596a4602ca433f3bc48.js","mappings":"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","sources":["webpack://telegram-t/./src/components/mediaViewer/helpers/ghostAnimation.ts","webpack://telegram-t/./src/hooks/useBlur.ts","webpack://telegram-t/./src/hooks/useBlurSync.ts","webpack://telegram-t/./src/components/mediaViewer/MediaViewerActions.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerFooter.tsx","webpack://telegram-t/./src/hooks/useFullscreen.ts","webpack://telegram-t/./src/components/mediaViewer/helpers/formatFileSize.ts","webpack://telegram-t/./src/components/mediaViewer/VideoPlayerControls.tsx","webpack://telegram-t/./src/components/mediaViewer/VideoPlayer.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerContent.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewerSlides.tsx","webpack://telegram-t/./src/components/mediaViewer/SenderInfo.tsx","webpack://telegram-t/./src/components/mediaViewer/MediaViewer.tsx","webpack://telegram-t/./src/components/common/ChatOrUserPicker.tsx","webpack://telegram-t/./src/components/main/ForwardPicker.tsx","webpack://telegram-t/./src/components/main/Dialogs.tsx","webpack://telegram-t/./src/components/main/Notifications.tsx","webpack://telegram-t/./src/components/main/SafeLinkModal.tsx","webpack://telegram-t/./src/components/main/UrlAuthModal.module.scss?b72e","webpack://telegram-t/./src/components/main/UrlAuthModal.tsx","webpack://telegram-t/./src/components/common/CalendarModal.tsx","webpack://telegram-t/./src/components/main/HistoryCalendar.tsx","webpack://telegram-t/./src/components/main/NewContactModal.tsx","webpack://telegram-t/./src/components/main/hooks/useWebAppFrame.ts","webpack://telegram-t/./src/components/main/WebAppModal.tsx","webpack://telegram-t/./src/components/main/BotTrustModal.tsx","webpack://telegram-t/./src/components/main/BotAttachModal.tsx","webpack://telegram-t/./src/components/common/DeleteMessageModal.tsx","webpack://telegram-t/./src/components/common/PinMessageModal.tsx","webpack://telegram-t/./src/components/common/UnpinAllMessagesModal.tsx","webpack://telegram-t/./src/components/middle/hooks/useCopySelectedMessages.ts","webpack://telegram-t/./src/components/middle/DeleteSelectedMessageModal.tsx","webpack://telegram-t/./src/components/middle/MessageSelectToolbar.tsx","webpack://telegram-t/./src/components/common/SeenByModal.tsx","webpack://telegram-t/./src/components/middle/ReactorListModal.tsx","webpack://telegram-t/./src/components/middle/EmojiInteractionAnimation.tsx","webpack://telegram-t/./src/hooks/useSelectWithEnter.ts","webpack://telegram-t/./src/components/left/search/LeftSearchResultChat.tsx","webpack://telegram-t/./src/components/left/search/RecentContacts.tsx","webpack://telegram-t/./src/components/left/search/ChatMessage.tsx","webpack://telegram-t/./src/components/left/search/DateSuggest.tsx","webpack://telegram-t/./src/components/left/search/ChatResults.tsx","webpack://telegram-t/./src/components/left/search/ChatMessageResults.tsx","webpack://telegram-t/./src/components/left/search/helpers/createMapStateToProps.ts","webpack://telegram-t/./src/components/left/search/MediaResults.tsx","webpack://telegram-t/./src/components/left/search/LinkResults.tsx","webpack://telegram-t/./src/components/left/search/FileResults.tsx","webpack://telegram-t/./src/components/left/search/AudioResults.tsx","webpack://telegram-t/./src/components/left/search/LeftSearch.tsx","webpack://telegram-t/./src/hooks/reducers/useTwoFaReducer.ts","webpack://telegram-t/./src/components/left/settings/SettingsHeader.tsx","webpack://telegram-t/./src/components/left/settings/SettingsMain.tsx","webpack://telegram-t/./src/components/common/UsernameInput.tsx","webpack://telegram-t/./src/components/left/settings/SettingsEditProfile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsDataStorage.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersMain.tsx","webpack://telegram-t/./src/components/ui/ShowMoreButton.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersEdit.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatsPicker.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFoldersChatFilters.tsx","webpack://telegram-t/./src/components/left/settings/folders/SettingsFolders.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCoverAnimated.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSetCover.tsx","webpack://telegram-t/./src/components/left/settings/SettingsStickerSet.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneral.tsx","webpack://telegram-t/./src/util/colors.ts","webpack://telegram-t/./src/components/left/settings/WallpaperTile.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackground.tsx","webpack://telegram-t/./src/components/left/settings/SettingsGeneralBackgroundColor.tsx","webpack://telegram-t/./src/components/left/settings/SettingsNotifications.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacy.tsx","webpack://telegram-t/./src/components/left/settings/SettingsLanguage.tsx","webpack://telegram-t/./src/components/left/settings/helpers/privacy.ts","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibility.tsx","webpack://telegram-t/./src/components/left/settings/helpers/getSessionIcon.ts","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.module.scss?ead4","webpack://telegram-t/./src/components/left/settings/SettingsActiveSession.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveSessions.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.tsx","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsite.module.scss?99ae","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.module.scss?28f4","webpack://telegram-t/./src/components/left/settings/SettingsActiveWebsites.tsx","webpack://telegram-t/./src/components/left/settings/BlockUserModal.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyBlockedUsers.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEnabled.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPasswordForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaStart.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaSkippableForm.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFaEmailCode.tsx","webpack://telegram-t/./src/components/left/settings/twoFa/SettingsTwoFa.tsx","webpack://telegram-t/./src/components/left/settings/SettingsPrivacyVisibilityExceptionList.tsx","webpack://telegram-t/./src/components/left/settings/SettingsQuickReaction.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeStart.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeEnabled.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscodeCongratulations.tsx","webpack://telegram-t/./src/components/left/settings/passcode/SettingsPasscode.tsx","webpack://telegram-t/./src/components/left/settings/Settings.tsx","webpack://telegram-t/./src/components/left/main/ContactList.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep1.tsx","webpack://telegram-t/./src/components/left/newChat/NewChatStep2.tsx","webpack://telegram-t/./src/components/left/newChat/NewChat.tsx","webpack://telegram-t/./src/components/left/ArchivedChats.tsx","webpack://telegram-t/./src/components/left/ChatFolderModal.tsx","webpack://telegram-t/./src/components/middle/message/helpers/copyOptions.ts","webpack://telegram-t/./src/util/scrollLock.ts","webpack://telegram-t/./src/components/middle/message/ReactionSelectorReaction.tsx","webpack://telegram-t/./src/components/middle/message/ReactionSelector.tsx","webpack://telegram-t/./src/components/middle/message/MessageContextMenu.tsx","webpack://telegram-t/./src/components/middle/message/ContextMenuContainer.tsx","webpack://telegram-t/./src/components/common/StickerSetModal.tsx","webpack://telegram-t/./src/components/middle/HeaderMenuContainer.tsx","webpack://telegram-t/./src/components/middle/MobileSearch.tsx","webpack://telegram-t/./src/util/findInViewport.ts","webpack://telegram-t/./src/util/isFullyVisible.ts","webpack://telegram-t/./src/util/setTooltipItemVisible.ts","webpack://telegram-t/./src/components/middle/composer/hooks/useKeyboardNavigation.ts","webpack://telegram-t/./src/components/middle/composer/MentionTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/AttachmentModal.tsx","webpack://telegram-t/./src/components/middle/composer/PollModal.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiButton.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiCategory.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiPicker.tsx","webpack://telegram-t/./src/components/middle/composer/StickerSet.tsx","webpack://telegram-t/./src/components/middle/composer/StickerPicker.tsx","webpack://telegram-t/./src/components/common/GifButton.tsx","webpack://telegram-t/./src/components/middle/composer/GifPicker.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenuFooter.tsx","webpack://telegram-t/./src/components/middle/composer/SymbolMenu.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommand.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/BotCommandMenu.tsx","webpack://telegram-t/./src/components/middle/composer/StickerTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/CustomSendMenu.tsx","webpack://telegram-t/./src/components/middle/composer/EmojiTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/BaseResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/MediaResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/ArticleResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/GifResult.tsx","webpack://telegram-t/./src/components/middle/composer/inlineResults/StickerResult.tsx","webpack://telegram-t/./src/components/middle/composer/InlineBotTooltip.tsx","webpack://telegram-t/./src/components/middle/composer/SendAsMenu.tsx","webpack://telegram-t/./src/components/right/RightSearch.tsx","webpack://telegram-t/./src/components/right/StickerSetResult.tsx","webpack://telegram-t/./src/components/right/StickerSearch.tsx","webpack://telegram-t/./src/components/right/GifSearch.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsOverview.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsRecentMessage.tsx","webpack://telegram-t/./src/components/right/statistics/Statistics.tsx","webpack://telegram-t/./src/components/right/statistics/StatisticsPublicForward.tsx","webpack://telegram-t/./src/components/right/statistics/MessageStatistics.tsx","webpack://telegram-t/./src/components/right/PollAnswerResults.tsx","webpack://telegram-t/./src/components/right/PollResults.tsx","webpack://telegram-t/./src/components/right/management/ManageUser.tsx","webpack://telegram-t/./src/components/right/management/ManageGroup.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupPermissions.tsx","webpack://telegram-t/./src/components/right/management/RemoveGroupUserModal.tsx","webpack://telegram-t/./src/components/right/management/ManageChatRemovedUsers.tsx","webpack://telegram-t/./src/components/right/management/ManageChannel.tsx","webpack://telegram-t/./src/components/right/management/ManageChatPrivacyType.tsx","webpack://telegram-t/./src/components/right/management/ManageDiscussion.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissions.tsx","webpack://telegram-t/./src/components/right/management/ManageChatAdministrators.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupRecentActions.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupAdminRights.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupMembers.tsx","webpack://telegram-t/./src/components/right/management/ManageGroupUserPermissionsCreate.tsx","webpack://telegram-t/./src/components/right/management/ManageInvites.tsx","webpack://telegram-t/./src/components/right/management/ManageInvite.tsx","webpack://telegram-t/./src/components/right/management/ManageReactions.tsx","webpack://telegram-t/./src/components/right/management/ManageInviteInfo.tsx","webpack://telegram-t/./src/components/right/management/JoinRequest.tsx","webpack://telegram-t/./src/components/right/management/ManageJoinRequests.tsx","webpack://telegram-t/./src/components/right/management/Management.tsx","webpack://telegram-t/./src/components/common/helpers/detectCardType.ts","webpack://telegram-t/./src/hooks/reducers/usePaymentReducer.ts","webpack://telegram-t/./src/hooks/useFocusAfterAnimation.tsx","webpack://telegram-t/./src/components/ui/Select.tsx","webpack://telegram-t/./src/components/payment/ShippingInfo.tsx","webpack://telegram-t/./src/components/payment/Shipping.tsx","webpack://telegram-t/./src/components/payment/Checkout.tsx","webpack://telegram-t/./src/components/payment/ExpiryInput.tsx","webpack://telegram-t/./src/components/middle/helpers/inputFormatters.ts","webpack://telegram-t/./src/components/payment/CardInput.tsx","webpack://telegram-t/./src/components/payment/PaymentInfo.tsx","webpack://telegram-t/./src/components/payment/ConfirmPayment.tsx","webpack://telegram-t/./src/components/payment/PaymentModal.tsx","webpack://telegram-t/./src/components/payment/ReceiptModal.tsx","webpack://telegram-t/./src/components/common/PasswordMonkey.tsx","webpack://telegram-t/./src/components/ui/CropModal.tsx","webpack://telegram-t/./src/components/ui/AvatarEditable.tsx"],"sourcesContent":["import type { ApiMessage, ApiDimensions } from '../../../api/types';\n\nimport { MediaViewerOrigin } from '../../../types';\n\nimport { ANIMATION_END_DELAY } from '../../../config';\nimport {\n  calculateDimensions,\n  getMediaViewerAvailableDimensions,\n  MEDIA_VIEWER_MEDIA_QUERY,\n  REM,\n} from '../../common/helpers/mediaDimensions';\nimport windowSize from '../../../util/windowSize';\nimport stopEvent from '../../../util/stopEvent';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { getMessageHtmlId } from '../../../global/helpers';\nimport { isElementInViewport } from '../../../util/isElementInViewport';\n\nconst ANIMATION_DURATION = 200;\n\nexport function animateOpening(\n  hasFooter: boolean,\n  origin: MediaViewerOrigin,\n  bestImageData: string,\n  dimensions: ApiDimensions,\n  isVideo: boolean,\n  message?: ApiMessage,\n) {\n  const { mediaEl: fromImage } = getNodes(origin, message);\n  if (!fromImage) {\n    return;\n  }\n\n  const { width: windowWidth } = windowSize.get();\n  const {\n    width: availableWidth, height: availableHeight,\n  } = getMediaViewerAvailableDimensions(hasFooter, isVideo);\n  const { width: toWidth, height: toHeight } = calculateDimensions(\n    availableWidth, availableHeight, dimensions.width, dimensions.height,\n  );\n  const toLeft = (windowWidth - toWidth) / 2;\n  const toTop = getTopOffset(hasFooter) + (availableHeight - toHeight) / 2;\n\n  let {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    const uncovered = uncover(toWidth, toHeight, fromTop, fromLeft, fromWidth, fromHeight);\n    fromTop = uncovered.top;\n    fromLeft = uncovered.left;\n    fromWidth = uncovered.width;\n    fromHeight = uncovered.height;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  const fromScaleX = fromWidth / toWidth;\n  const fromScaleY = fromHeight / toHeight;\n\n  const ghost = createGhost(bestImageData || fromImage);\n  applyStyles(ghost, {\n    top: `${toTop}px`,\n    left: `${toLeft}px`,\n    width: `${toWidth}px`,\n    height: `${toHeight}px`,\n    transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n  });\n  applyShape(ghost, origin);\n\n  document.body.classList.add('ghost-animating');\n\n  requestAnimationFrame(() => {\n    document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      ghost.style.transform = '';\n      clearShape(ghost);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nexport function animateClosing(origin: MediaViewerOrigin, bestImageData: string, message?: ApiMessage) {\n  const { container, mediaEl: toImage } = getNodes(origin, message);\n  if (!toImage) {\n    return;\n  }\n\n  const fromImage = document.getElementById('MediaViewer')!.querySelector<HTMLImageElement>(\n    '.MediaViewerSlide--active img, .MediaViewerSlide--active video',\n  );\n  if (!fromImage || !toImage) {\n    return;\n  }\n\n  const {\n    top: fromTop, left: fromLeft, width: fromWidth, height: fromHeight,\n  } = fromImage.getBoundingClientRect();\n  const {\n    top: targetTop, left: toLeft, width: toWidth, height: toHeight,\n  } = toImage.getBoundingClientRect();\n\n  let toTop = targetTop;\n  if (!isElementInViewport(container)) {\n    const { height: windowHeight } = windowSize.get();\n    toTop = targetTop < fromTop ? -toHeight : windowHeight;\n  }\n\n  const fromTranslateX = (fromLeft + fromWidth / 2) - (toLeft + toWidth / 2);\n  const fromTranslateY = (fromTop + fromHeight / 2) - (toTop + toHeight / 2);\n  let fromScaleX = fromWidth / toWidth;\n  let fromScaleY = fromHeight / toHeight;\n\n  const shouldFadeOut = (\n    [MediaViewerOrigin.Inline, MediaViewerOrigin.ScheduledInline].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  ) || (\n    [MediaViewerOrigin.Album, MediaViewerOrigin.ScheduledAlbum].includes(origin)\n    && !isMessageImageFullyVisible(container, toImage)\n  );\n\n  if ([\n    MediaViewerOrigin.SharedMedia,\n    MediaViewerOrigin.Album,\n    MediaViewerOrigin.ScheduledAlbum,\n    MediaViewerOrigin.SearchResult,\n  ].includes(origin)) {\n    if (fromScaleX > fromScaleY) {\n      fromScaleX = fromScaleY;\n    } else if (fromScaleY > fromScaleX) {\n      fromScaleY = fromScaleX;\n    }\n  }\n\n  const existingGhost = document.getElementsByClassName('ghost')[0] as HTMLDivElement;\n\n  const ghost = existingGhost || createGhost(bestImageData || toImage, origin);\n  if (!existingGhost) {\n    applyStyles(ghost, {\n      top: `${toTop}px`,\n      left: `${toLeft}px`,\n      width: `${toWidth}px`,\n      height: `${toHeight}px`,\n      transform: `translate3d(${fromTranslateX}px, ${fromTranslateY}px, 0) scale(${fromScaleX}, ${fromScaleY})`,\n    });\n  }\n\n  requestAnimationFrame(() => {\n    if (existingGhost) {\n      const {\n        top,\n        left,\n        width,\n        height,\n      } = existingGhost.getBoundingClientRect();\n      const scaleX = width / toWidth;\n      const scaleY = height / toHeight;\n\n      applyStyles(ghost, {\n        transition: 'none',\n        top: `${toTop}px`,\n        left: `${toLeft}px`,\n        transformOrigin: 'top left',\n        transform: `translate3d(${left - toLeft}px, ${top - toTop}px, 0) scale(${scaleX}, ${scaleY})`,\n        width: `${toWidth}px`,\n        height: `${toHeight}px`,\n      });\n    }\n    document.body.classList.add('ghost-animating');\n    if (!existingGhost) document.body.appendChild(ghost);\n\n    requestAnimationFrame(() => {\n      if (existingGhost) {\n        existingGhost.style.transition = '';\n      }\n\n      ghost.style.transform = '';\n\n      if (shouldFadeOut) {\n        ghost.style.opacity = '0';\n      }\n\n      applyShape(ghost, origin);\n\n      setTimeout(() => {\n        requestAnimationFrame(() => {\n          if (document.body.contains(ghost)) {\n            document.body.removeChild(ghost);\n          }\n          document.body.classList.remove('ghost-animating');\n        });\n      }, ANIMATION_DURATION + ANIMATION_END_DELAY);\n    });\n  });\n}\n\nfunction createGhost(source: string | HTMLImageElement | HTMLVideoElement, origin?: MediaViewerOrigin) {\n  const ghost = document.createElement('div');\n  ghost.classList.add('ghost');\n\n  const img = new Image();\n  img.draggable = false;\n  img.oncontextmenu = stopEvent;\n\n  if (typeof source === 'string') {\n    img.src = source;\n  } else if (source instanceof HTMLVideoElement) {\n    img.src = source.poster;\n  } else {\n    img.src = source.src;\n  }\n\n  ghost.appendChild(img);\n\n  if (origin === MediaViewerOrigin.ProfileAvatar || origin === MediaViewerOrigin.SettingsAvatar) {\n    ghost.classList.add('ProfileInfo');\n    if (origin === MediaViewerOrigin.SettingsAvatar) {\n      ghost.classList.add('self');\n    }\n    const profileInfo = document.querySelector(\n      origin === MediaViewerOrigin.ProfileAvatar\n        ? '#RightColumn .ProfileInfo .info'\n        : '#Settings .ProfileInfo .info',\n    );\n    if (profileInfo) {\n      ghost.appendChild(profileInfo.cloneNode(true));\n    }\n  }\n\n  return ghost;\n}\n\nfunction uncover(realWidth: number, realHeight: number, top: number, left: number, width: number, height: number) {\n  if (realWidth === realHeight) {\n    const size = Math.max(width, height) * (realWidth / realHeight);\n    left -= (size - width) / 2;\n    top -= (size - height) / 2;\n    width = size;\n    height = size;\n  } else if (realWidth > realHeight) {\n    const srcWidth = width;\n    width = height * (realWidth / realHeight);\n    left -= (width - srcWidth) / 2;\n  } else if (realHeight > realWidth) {\n    const srcHeight = height;\n    height = width * (realHeight / realWidth);\n    top -= (height - srcHeight) / 2;\n  }\n\n  return {\n    top, left, width, height,\n  };\n}\n\nfunction isMessageImageFullyVisible(container: HTMLElement, imageEl: HTMLElement) {\n  const messageListElement = document.querySelector<HTMLDivElement>('.Transition__slide--active > .MessageList')!;\n  let imgOffsetTop = container.offsetTop + imageEl.closest<HTMLDivElement>('.content-inner, .WebPage')!.offsetTop;\n  if (container.id.includes('album-media-')) {\n    imgOffsetTop += container.parentElement!.offsetTop + container.closest<HTMLDivElement>('.Message')!.offsetTop;\n  }\n\n  return imgOffsetTop > messageListElement.scrollTop\n    && imgOffsetTop + imageEl.offsetHeight < messageListElement.scrollTop + messageListElement.offsetHeight;\n}\n\nfunction getTopOffset(hasFooter: boolean) {\n  const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n  let topOffsetRem = 4.125;\n  if (hasFooter && !IS_TOUCH_ENV) {\n    topOffsetRem += mql.matches ? 0.875 : 2.125;\n  }\n\n  return topOffsetRem * REM;\n}\n\nfunction applyStyles(element: HTMLElement, styles: Record<string, string>) {\n  Object.assign(element.style, styles);\n}\n\nfunction getNodes(origin: MediaViewerOrigin, message?: ApiMessage) {\n  let containerSelector;\n  let mediaSelector;\n\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n      containerSelector = `.Transition__slide--active > .MessageList #album-media-${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.full-media';\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n      containerSelector = `#shared-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.SearchResult:\n      containerSelector = `#search-media${getMessageHtmlId(message!.id)}`;\n      mediaSelector = 'img';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      containerSelector = '.MiddleHeader .Transition__slide--active .ChatInfo .Avatar';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.SettingsAvatar:\n      containerSelector = '#Settings .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ProfileAvatar:\n      containerSelector = '#RightColumn .ProfileInfo .Transition__slide--active .ProfilePhoto';\n      mediaSelector = '.avatar-media';\n      break;\n\n    case MediaViewerOrigin.ScheduledInline:\n    case MediaViewerOrigin.Inline:\n    default:\n      containerSelector = `.Transition__slide--active > .MessageList #${getMessageHtmlId(message!.id)}`;\n      mediaSelector = '.message-content .full-media, .message-content .thumbnail';\n  }\n\n  const container = document.querySelector<HTMLElement>(containerSelector)!;\n  const mediaEls = container && container.querySelectorAll<HTMLImageElement | HTMLVideoElement>(mediaSelector);\n\n  return {\n    container,\n    mediaEl: mediaEls?.[mediaEls.length - 1],\n  };\n}\n\nfunction applyShape(ghost: HTMLDivElement, origin: MediaViewerOrigin) {\n  switch (origin) {\n    case MediaViewerOrigin.Album:\n    case MediaViewerOrigin.ScheduledAlbum:\n    case MediaViewerOrigin.Inline:\n    case MediaViewerOrigin.ScheduledInline:\n      ghost.classList.add('rounded-corners');\n      break;\n\n    case MediaViewerOrigin.SharedMedia:\n    case MediaViewerOrigin.SettingsAvatar:\n    case MediaViewerOrigin.ProfileAvatar:\n    case MediaViewerOrigin.SearchResult:\n      (ghost.firstChild as HTMLElement).style.objectFit = 'cover';\n      break;\n\n    case MediaViewerOrigin.MiddleHeaderAvatar:\n      ghost.classList.add('circle');\n      break;\n  }\n}\n\nfunction clearShape(ghost: HTMLDivElement) {\n  (ghost.firstChild as HTMLElement).style.objectFit = 'default';\n  ghost.classList.remove('rounded-corners', 'circle');\n}\n","import { useEffect, useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport { imgToCanvas } from '../util/files';\nimport useForceUpdate from './useForceUpdate';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\nconst MAX_CACHE_SIZE = 1000;\n\nconst cache = new Map<string, string>();\n\nexport default function useBlur(dataUri?: string, isDisabled = false, delay?: number) {\n  const blurredRef = useRef<string | undefined>(dataUri ? cache.get(dataUri) : undefined);\n  const timeoutRef = useRef<number>();\n  const forceUpdate = useForceUpdate();\n\n  if (timeoutRef.current && isDisabled) {\n    clearTimeout(timeoutRef.current);\n    timeoutRef.current = undefined;\n  }\n\n  useEffect(() => {\n    if (!dataUri || blurredRef.current || isDisabled) {\n      return;\n    }\n\n    const img = new Image();\n\n    img.onload = () => {\n      const canvas = imgToCanvas(img);\n      fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n      const blurredDataUri = canvas.toDataURL();\n\n      blurredRef.current = blurredDataUri;\n      forceUpdate();\n\n      if (cache.size >= MAX_CACHE_SIZE) {\n        cache.clear();\n      }\n      cache.set(dataUri, blurredDataUri);\n    };\n\n    if (delay) {\n      timeoutRef.current = window.setTimeout(() => {\n        img.src = dataUri;\n      }, delay);\n    } else {\n      img.src = dataUri;\n    }\n  }, [dataUri, delay, forceUpdate, isDisabled]);\n\n  return blurredRef.current;\n}\n","import { useRef } from '../lib/teact/teact';\n\nimport fastBlur from '../lib/fastBlur';\nimport useOnChange from './useOnChange';\nimport useBlur from './useBlur';\nimport { imgToCanvas } from '../util/files';\n\nconst RADIUS = 2;\nconst ITERATIONS = 2;\n\nexport default function useBlurSync(dataUri: string | false | undefined) {\n  const blurredRef = useRef<string>();\n\n  let isChanged = false;\n\n  useOnChange(() => {\n    isChanged = true;\n\n    blurredRef.current = undefined;\n\n    if (!dataUri) {\n      return;\n    }\n\n    const img = new Image();\n    img.src = dataUri;\n    if (!img.width) {\n      return;\n    }\n\n    const canvas = imgToCanvas(img);\n    fastBlur(canvas.getContext('2d'), 0, 0, canvas.width, canvas.height, RADIUS, ITERATIONS);\n\n    blurredRef.current = canvas.toDataURL();\n  }, [dataUri]);\n\n  // Sometimes `Image` do not manage to load synchronously,\n  // so we fall back the non-blurred variant and prepare the async one at least for the next time\n  const blurredAsync = useBlur(dataUri || undefined, Boolean(blurredRef.current));\n\n  return blurredRef.current || (!isChanged && blurredAsync) || dataUri || undefined;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo,\n  useCallback,\n  useMemo,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getMessageMediaHash } from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport { selectIsDownloading, selectIsMessageProtected } from '../../global/selectors';\n\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './MediaViewerActions.scss';\n\ntype StateProps = {\n  isDownloading: boolean;\n  isProtected?: boolean;\n};\n\ntype OwnProps = {\n  mediaData?: string;\n  isVideo: boolean;\n  zoomLevelChange: number;\n  message?: ApiMessage;\n  fileName?: string;\n  isAvatar?: boolean;\n  canReport?: boolean;\n  onReport: NoneToVoidFunction;\n  onCloseMediaViewer: NoneToVoidFunction;\n  onForward: NoneToVoidFunction;\n  setZoomLevelChange: (change: number) => void;\n};\n\nconst MediaViewerActions: FC<OwnProps & StateProps> = ({\n  mediaData,\n  isVideo,\n  message,\n  fileName,\n  isAvatar,\n  isDownloading,\n  isProtected,\n  canReport,\n  onReport,\n  onCloseMediaViewer,\n  zoomLevelChange,\n  setZoomLevelChange,\n  onForward,\n}) => {\n  const {\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n  } = getActions();\n\n  const { loadProgress: downloadProgress } = useMediaWithLoadProgress(\n    message && getMessageMediaHash(message, 'download'),\n    !isDownloading,\n  );\n\n  const handleDownloadClick = useCallback(() => {\n    if (isDownloading) {\n      cancelMessageMediaDownload({ message: message! });\n    } else {\n      downloadMessageMedia({ message: message! });\n    }\n  }, [cancelMessageMediaDownload, downloadMessageMedia, isDownloading, message]);\n\n  const handleZoomOut = useCallback(() => {\n    const change = zoomLevelChange < 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change - 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const handleZoomIn = useCallback(() => {\n    const change = zoomLevelChange > 0 ? zoomLevelChange : 0;\n    setZoomLevelChange(change + 1);\n  }, [setZoomLevelChange, zoomLevelChange]);\n\n  const lang = useLang();\n\n  const MenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : undefined}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  function renderDownloadButton() {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return isVideo ? (\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n        onClick={handleDownloadClick}\n      >\n        {isDownloading ? (\n          <ProgressSpinner progress={downloadProgress} size=\"s\" onClick={handleDownloadClick} />\n        ) : (\n          <i className=\"icon-download\" />\n        )}\n      </Button>\n    ) : (\n      <Button\n        href={mediaData}\n        download={fileName}\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('AccActionDownload')}\n      >\n        <i className=\"icon-download\" />\n      </Button>\n    );\n  }\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (isProtected) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"MediaViewerActions-mobile\">\n        <DropdownMenu\n          trigger={MenuButton}\n          positionX=\"right\"\n        >\n          {!isAvatar && (\n            <MenuItem\n              icon=\"forward\"\n              onClick={onForward}\n            >\n              {lang('Forward')}\n            </MenuItem>\n          )}\n          {isVideo ? (\n            <MenuItem\n              icon={isDownloading ? 'close' : 'download'}\n              onClick={handleDownloadClick}\n            >\n              {isDownloading ? `${Math.round(downloadProgress * 100)}% Downloading...` : 'Download'}\n            </MenuItem>\n          ) : (\n            <MenuItem\n              icon=\"download\"\n              href={mediaData}\n              download={fileName}\n            >\n              {lang('AccActionDownload')}\n            </MenuItem>\n          )}\n          {canReport && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={onReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n        {isDownloading && <ProgressSpinner progress={downloadProgress} size=\"s\" noCross />}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"MediaViewerActions\">\n      {!isAvatar && !isProtected && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang('Forward')}\n          onClick={onForward}\n        >\n          <i className=\"icon-forward\" />\n        </Button>\n      )}\n      {renderDownloadButton()}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomOut')}\n        onClick={handleZoomOut}\n      >\n        <i className=\"icon-zoom-out\" />\n      </Button>\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('MediaZoomIn')}\n        onClick={handleZoomIn}\n      >\n        <i className=\"icon-zoom-in\" />\n      </Button>\n      {canReport && (\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent-white\"\n          ariaLabel={lang(isVideo ? 'PeerInfo.ReportProfileVideo' : 'PeerInfo.ReportProfilePhoto')}\n          onClick={onReport}\n        >\n          <i className=\"icon-flag\" />\n        </Button>\n      )}\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent-white\"\n        ariaLabel={lang('Close')}\n        onClick={onCloseMediaViewer}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message }): StateProps => {\n    const isDownloading = message ? selectIsDownloading(global, message) : false;\n    const isProtected = selectIsMessageProtected(global, message);\n\n    return {\n      isDownloading,\n      isProtected,\n    };\n  },\n)(MediaViewerActions));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useEffect, useState } from '../../lib/teact/teact';\n\nimport type { TextPart } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { throttle } from '../../util/schedulers';\nimport buildClassName from '../../util/buildClassName';\nimport { REM } from '../common/helpers/mediaDimensions';\n\nimport './MediaViewerFooter.scss';\n\nconst RESIZE_THROTTLE_MS = 500;\n\ntype OwnProps = {\n  text: TextPart | TextPart[];\n  onClick: () => void;\n  isHidden?: boolean;\n  isForVideo: boolean;\n};\n\nconst MediaViewerFooter: FC<OwnProps> = ({\n  text = '', isHidden, isForVideo, onClick,\n}) => {\n  const [isMultiline, setIsMultiline] = useState(false);\n  useEffect(() => {\n    const footerContent = document.querySelector('.MediaViewerFooter .media-text') as HTMLDivElement | null;\n\n    const checkIsMultiline = () => {\n      const height = footerContent ? footerContent.clientHeight : 0;\n\n      setIsMultiline(height > REM * 2);\n    };\n\n    // First run for initial detection of multiline footer text\n    checkIsMultiline();\n\n    const handleResize = throttle(checkIsMultiline, RESIZE_THROTTLE_MS, true);\n\n    window.addEventListener('resize', handleResize, false);\n\n    return () => {\n      window.removeEventListener('resize', handleResize, false);\n    };\n  }, []);\n\n  function stopEvent(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    if (text) {\n      e.stopPropagation();\n    }\n  }\n\n  const classNames = buildClassName(\n    'MediaViewerFooter',\n    isForVideo && 'is-for-video',\n    isHidden && 'is-hidden',\n  );\n\n  return (\n    <div className={classNames} onClick={stopEvent}>\n      {text && (\n        <div className=\"media-viewer-footer-content\" onClick={!IS_SINGLE_COLUMN_LAYOUT ? onClick : undefined}>\n          <p className={`media-text custom-scroll ${isMultiline ? 'multiline' : ''}`} dir=\"auto\">{text}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MediaViewerFooter;\n","import { useLayoutEffect, useState } from '../lib/teact/teact';\nimport { PLATFORM_ENV } from '../util/environment';\n\ntype RefType = {\n  current: HTMLElement | null;\n};\n\ntype ReturnType = [boolean, () => void, () => void] | [false];\ntype CallbackType = (isPlayed: boolean) => void;\n\nconst prop = getBrowserFullscreenElementProp();\n\nexport default function useFullscreenStatus(elRef: RefType, setIsPlayed: CallbackType): ReturnType {\n  const [isFullscreen, setIsFullscreen] = useState(Boolean(prop && document[prop]));\n\n  const setFullscreen = () => {\n    if (!elRef.current || !(prop || PLATFORM_ENV === 'iOS')) {\n      return;\n    }\n\n    if (elRef.current.requestFullscreen) {\n      elRef.current.requestFullscreen();\n    } else if (elRef.current.webkitRequestFullscreen) {\n      elRef.current.webkitRequestFullscreen();\n    } else if (elRef.current.webkitEnterFullscreen) {\n      elRef.current.webkitEnterFullscreen();\n    } else if (elRef.current.mozRequestFullScreen) {\n      elRef.current.mozRequestFullScreen();\n    }\n\n    setIsFullscreen(true);\n  };\n\n  const exitFullscreen = () => {\n    if (!elRef.current) {\n      return;\n    }\n\n    if (document.exitFullscreen) {\n      document.exitFullscreen();\n    } else if (document.mozCancelFullScreen) {\n      document.mozCancelFullScreen();\n    } else if (document.webkitCancelFullScreen) {\n      document.webkitCancelFullScreen();\n    } else if (document.webkitExitFullscreen) {\n      document.webkitExitFullscreen();\n    }\n\n    setIsFullscreen(false);\n  };\n\n  useLayoutEffect(() => {\n    const listener = () => { setIsFullscreen(Boolean(prop && document[prop])); };\n    const listenerEnter = () => { setIsFullscreen(true); };\n    const listenerExit = () => {\n      setIsFullscreen(false);\n      setIsPlayed(false);\n    };\n    const video = elRef.current;\n\n    document.addEventListener('fullscreenchange', listener, false);\n    document.addEventListener('webkitfullscreenchange', listener, false);\n    document.addEventListener('mozfullscreenchange', listener, false);\n\n    if (video) {\n      video.addEventListener('webkitbeginfullscreen', listenerEnter, false);\n      video.addEventListener('webkitendfullscreen', listenerExit, false);\n    }\n\n    return () => {\n      document.removeEventListener('fullscreenchange', listener, false);\n      document.removeEventListener('webkitfullscreenchange', listener, false);\n      document.removeEventListener('mozfullscreenchange', listener, false);\n      if (video) {\n        video.removeEventListener('webkitbeginfullscreen', listenerEnter, false);\n        video.removeEventListener('webkitendfullscreen', listenerExit, false);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n\n  if (!prop && PLATFORM_ENV !== 'iOS') {\n    return [false];\n  }\n\n  return [isFullscreen, setFullscreen, exitFullscreen];\n}\n\nfunction getBrowserFullscreenElementProp() {\n  if (typeof document.fullscreenElement !== 'undefined') {\n    return 'fullscreenElement';\n  } else if (typeof document.mozFullScreenElement !== 'undefined') {\n    return 'mozFullScreenElement';\n  } else if (typeof document.webkitFullscreenElement !== 'undefined') {\n    return 'webkitFullscreenElement';\n  }\n\n  return '';\n}\n","const units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n\nconst formatFileSize = (bytes: number) => {\n  const number = bytes === 0 ? 0 : Math.floor(Math.log(bytes) / Math.log(1024));\n\n  return `${(bytes / 1024 ** Math.floor(number)).toFixed(1)} ${units[number]}`;\n};\n\nexport default formatFileSize;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useRef, useCallback, useMemo,\n} from '../../lib/teact/teact';\nimport buildClassName from '../../util/buildClassName';\n\nimport useFlag from '../../hooks/useFlag';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { formatMediaDuration } from '../../util/dateFormat';\nimport formatFileSize from './helpers/formatFileSize';\nimport useLang from '../../hooks/useLang';\nimport type { BufferedRange } from '../../hooks/useBuffering';\nimport { captureEvents } from '../../util/captureEvents';\n\nimport Button from '../ui/Button';\nimport RangeSlider from '../ui/RangeSlider';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './VideoPlayerControls.scss';\n\ntype OwnProps = {\n  bufferedRanges: BufferedRange[];\n  bufferedProgress: number;\n  currentTime: number;\n  duration: number;\n  fileSize: number;\n  isForceMobileVersion?: boolean;\n  isPlayed: boolean;\n  isFullscreenSupported: boolean;\n  isFullscreen: boolean;\n  isVisible: boolean;\n  isBuffered: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  onChangeFullscreen: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  onVolumeClick: () => void;\n  onVolumeChange: (volume: number) => void;\n  onPlaybackRateChange: (playbackRate: number) => void;\n  onPlayPause: (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n  setVisibility: (isVisible: boolean) => void;\n  onSeek: (position: number) => void;\n};\n\nconst stopEvent = (e: React.MouseEvent<HTMLElement>) => {\n  e.stopPropagation();\n};\n\nconst PLAYBACK_RATES = [\n  0.5,\n  1,\n  1.5,\n  2,\n];\n\nconst HIDE_CONTROLS_TIMEOUT_MS = 1500;\n\nconst VideoPlayerControls: FC<OwnProps> = ({\n  bufferedRanges,\n  bufferedProgress,\n  currentTime,\n  duration,\n  fileSize,\n  isForceMobileVersion,\n  isPlayed,\n  isFullscreenSupported,\n  isFullscreen,\n  isVisible,\n  isBuffered,\n  volume,\n  isMuted,\n  playbackRate,\n  onChangeFullscreen,\n  onVolumeClick,\n  onVolumeChange,\n  onPlaybackRateChange,\n  onPlayPause,\n  setVisibility,\n  onSeek,\n}) => {\n  const [isPlaybackMenuOpen, openPlaybackMenu, closePlaybackMenu] = useFlag();\n  // eslint-disable-next-line no-null/no-null\n  const seekerRef = useRef<HTMLDivElement>(null);\n  const isSeekingRef = useRef<boolean>(false);\n  const isSeeking = isSeekingRef.current;\n\n  useEffect(() => {\n    let timeout: number | undefined;\n    if (!isVisible || !isPlayed || isSeeking || isPlaybackMenuOpen) {\n      if (timeout) window.clearTimeout(timeout);\n      return undefined;\n    }\n    timeout = window.setTimeout(() => {\n      setVisibility(false);\n    }, HIDE_CONTROLS_TIMEOUT_MS);\n    return () => {\n      if (timeout) window.clearTimeout(timeout);\n    };\n  }, [isPlayed, isVisible, isSeeking, setVisibility, isPlaybackMenuOpen]);\n\n  useEffect(() => {\n    if (isVisible) {\n      document.body.classList.add('video-controls-visible');\n    } else {\n      document.body.classList.remove('video-controls-visible');\n    }\n    return () => {\n      document.body.classList.remove('video-controls-visible');\n    };\n  }, [isVisible]);\n\n  useEffect(() => {\n    if (!isVisible) {\n      closePlaybackMenu();\n    }\n  }, [closePlaybackMenu, isVisible]);\n\n  const lang = useLang();\n\n  const handleSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    if (isSeekingRef.current && seekerRef.current) {\n      const {\n        width,\n        left,\n      } = seekerRef.current.getBoundingClientRect();\n      const clientX = e instanceof MouseEvent ? e.clientX : e.targetTouches[0].clientX;\n      onSeek(Math.max(Math.min(duration * ((clientX - left) / width), duration), 0));\n    }\n  }, [duration, onSeek]);\n\n  const handleStartSeek = useCallback((e: MouseEvent | TouchEvent) => {\n    isSeekingRef.current = true;\n    handleSeek(e);\n  }, [handleSeek]);\n\n  const handleStopSeek = useCallback(() => {\n    isSeekingRef.current = false;\n  }, []);\n\n  useEffect(() => {\n    if (!seekerRef.current || !isVisible) return undefined;\n    return captureEvents(seekerRef.current, {\n      onCapture: handleStartSeek,\n      onRelease: handleStopSeek,\n      onClick: handleStopSeek,\n      onDrag: handleSeek,\n    });\n  }, [isVisible, handleStartSeek, handleSeek, handleStopSeek]);\n\n  const volumeIcon = useMemo(() => {\n    if (volume === 0 || isMuted) return 'icon-muted';\n    if (volume < 0.3) return 'icon-volume-1';\n    if (volume < 0.6) return 'icon-volume-2';\n    return 'icon-volume-3';\n  }, [volume, isMuted]);\n\n  return (\n    <div\n      className={buildClassName('VideoPlayerControls', isForceMobileVersion && 'mobile', isVisible && 'active')}\n      onClick={stopEvent}\n    >\n      {renderSeekLine(currentTime, duration, bufferedRanges, seekerRef)}\n      <div className=\"buttons\">\n        <Button\n          ariaLabel={lang('AccActionPlay')}\n          size=\"tiny\"\n          ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          color=\"translucent-white\"\n          className=\"play\"\n          round\n          onClick={onPlayPause}\n        >\n          <i className={isPlayed ? 'icon-pause' : 'icon-play'} />\n        </Button>\n        <Button\n          ariaLabel=\"Volume\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"volume\"\n          round\n          onClick={onVolumeClick}\n        >\n          <i className={volumeIcon} />\n        </Button>\n        {!IS_IOS && (\n          <RangeSlider bold className=\"volume-slider\" value={isMuted ? 0 : volume * 100} onChange={onVolumeChange} />\n        )}\n        {renderTime(currentTime, duration)}\n        {!isBuffered && renderFileSize(bufferedProgress, fileSize)}\n        <div className=\"spacer\" />\n        <Button\n          ariaLabel=\"Playback rate\"\n          size=\"tiny\"\n          color=\"translucent-white\"\n          className=\"playback-rate\"\n          round\n          onClick={openPlaybackMenu}\n        >\n          {`${playbackRate}x`}\n        </Button>\n        {isFullscreenSupported && (\n          <Button\n            ariaLabel=\"Fullscreen\"\n            size=\"tiny\"\n            color=\"translucent-white\"\n            className=\"fullscreen\"\n            round\n            onClick={onChangeFullscreen}\n          >\n            <i className={isFullscreen ? 'icon-smallscreen' : 'icon-fullscreen'} />\n          </Button>\n        )}\n      </div>\n      <Menu\n        isOpen={isPlaybackMenuOpen}\n        className=\"playback-rate-menu\"\n        positionX=\"right\"\n        positionY=\"bottom\"\n        autoClose\n        onClose={closePlaybackMenu}\n      >\n        {PLAYBACK_RATES.map((rate) => (\n          // eslint-disable-next-line react/jsx-no-bind\n          <MenuItem disabled={playbackRate === rate} onClick={() => onPlaybackRateChange(rate)}>\n            {`${rate}x`}\n          </MenuItem>\n        ))}\n      </Menu>\n    </div>\n  );\n};\n\nfunction renderTime(currentTime: number, duration: number) {\n  return (\n    <div className=\"player-time\">\n      {`${formatMediaDuration(currentTime)} / ${formatMediaDuration(duration)}`}\n    </div>\n  );\n}\n\nfunction renderFileSize(loadedPercent: number, totalSize: number) {\n  return (\n    <div className=\"player-file-size\">\n      {`${formatFileSize(totalSize * loadedPercent)} / ${formatFileSize(totalSize)}`}\n    </div>\n  );\n}\n\nfunction renderSeekLine(\n  currentTime: number, duration: number, bufferedRanges: BufferedRange[], seekerRef: React.RefObject<HTMLDivElement>,\n) {\n  const percentagePlayed = (currentTime / duration) * 100;\n\n  return (\n    <div className=\"player-seekline\" ref={seekerRef}>\n      <div className=\"player-seekline-track\">\n        {bufferedRanges.map(({ start, end }) => (\n          <div\n            className=\"player-seekline-buffered\"\n            style={`left: ${start * 100}%; right: ${100 - end * 100}%`}\n          />\n        ))}\n        <div\n          className=\"player-seekline-played\"\n          style={`width: ${percentagePlayed || 0}%`}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default VideoPlayerControls;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiDimensions } from '../../api/types';\n\nimport useBuffering from '../../hooks/useBuffering';\nimport useFullscreenStatus from '../../hooks/useFullscreen';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport { IS_IOS, IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport safePlay from '../../util/safePlay';\n\nimport Button from '../ui/Button';\nimport ProgressSpinner from '../ui/ProgressSpinner';\n\nimport './VideoPlayer.scss';\n\nimport VideoPlayerControls from './VideoPlayerControls';\n\ntype OwnProps = {\n  url?: string;\n  isGif?: boolean;\n  posterData?: string;\n  posterSize?: ApiDimensions;\n  loadProgress?: number;\n  fileSize: number;\n  isMediaViewerOpen?: boolean;\n  noPlay?: boolean;\n  areControlsVisible: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n  toggleControls: (isVisible: boolean) => void;\n  onClose: (e: React.MouseEvent<HTMLElement, MouseEvent>) => void;\n};\n\nconst MOBILE_VERSION_CONTROL_WIDTH = 400;\n\nconst VideoPlayer: FC<OwnProps> = ({\n  url,\n  isGif,\n  posterData,\n  posterSize,\n  loadProgress,\n  fileSize,\n  isMediaViewerOpen,\n  noPlay,\n  volume,\n  isMuted,\n  playbackRate,\n  onClose,\n  toggleControls,\n  areControlsVisible,\n}) => {\n  const {\n    setMediaViewerVolume,\n    setMediaViewerMuted,\n    setMediaViewerPlaybackRate,\n  } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n  const [isPlayed, setIsPlayed] = useState(!IS_TOUCH_ENV || !IS_IOS);\n  const [currentTime, setCurrentTime] = useState(0);\n\n  const [isFullscreen, setFullscreen, exitFullscreen] = useFullscreenStatus(videoRef, setIsPlayed);\n\n  const {\n    isBuffered, bufferedRanges, bufferingHandlers, bufferedProgress,\n  } = useBuffering();\n  const {\n    shouldRender: shouldRenderSpinner,\n    transitionClassNames: spinnerClassNames,\n  } = useShowTransition(!isBuffered, undefined, undefined, 'slow');\n  const {\n    shouldRender: shouldRenderPlayButton,\n    transitionClassNames: playButtonClassNames,\n  } = useShowTransition(IS_IOS && !isPlayed && !shouldRenderSpinner, undefined, undefined, 'slow');\n\n  useEffect(() => {\n    if (noPlay || !isMediaViewerOpen) {\n      videoRef.current!.pause();\n    } else if (url && !IS_TOUCH_ENV) {\n      // Chrome does not automatically start playing when `url` becomes available (even with `autoPlay`),\n      // so we force it here. Contrary, iOS does not allow to call `play` without mouse event,\n      // so we need to use `autoPlay` instead to allow pre-buffering.\n      safePlay(videoRef.current!);\n    }\n  }, [noPlay, isMediaViewerOpen, url]);\n\n  useEffect(() => {\n    if (videoRef.current!.currentTime === videoRef.current!.duration) {\n      setCurrentTime(0);\n      setIsPlayed(false);\n    } else {\n      setCurrentTime(videoRef.current!.currentTime);\n    }\n  }, [currentTime]);\n\n  useEffect(() => {\n    videoRef.current!.volume = volume;\n  }, [volume]);\n\n  useEffect(() => {\n    videoRef.current!.playbackRate = playbackRate;\n  }, [playbackRate]);\n\n  const togglePlayState = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent> | KeyboardEvent) => {\n    e.stopPropagation();\n    if (isPlayed) {\n      videoRef.current!.pause();\n      setIsPlayed(false);\n    } else {\n      safePlay(videoRef.current!);\n      setIsPlayed(true);\n    }\n  }, [isPlayed]);\n\n  useVideoCleanup(videoRef, []);\n\n  const handleMouseMove = useCallback(() => {\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleMouseOut = useCallback((e: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    if (e.target === videoRef.current) {\n      toggleControls(false);\n    }\n  }, [toggleControls]);\n\n  const handleTimeUpdate = useCallback((e: React.SyntheticEvent<HTMLVideoElement>) => {\n    setCurrentTime(e.currentTarget.currentTime);\n  }, []);\n\n  const handleEnded = useCallback(() => {\n    setCurrentTime(0);\n    setIsPlayed(false);\n    toggleControls(true);\n  }, [toggleControls]);\n\n  const handleFullscreenChange = useCallback(() => {\n    if (isFullscreen && exitFullscreen) {\n      exitFullscreen();\n    } else if (!isFullscreen && setFullscreen) {\n      setFullscreen();\n    }\n  }, [exitFullscreen, isFullscreen, setFullscreen]);\n\n  const handleSeek = useCallback((position: number) => {\n    videoRef.current!.currentTime = position;\n  }, []);\n\n  const handleVolumeChange = useCallback((newVolume: number) => {\n    setMediaViewerVolume({ volume: newVolume / 100 });\n  }, [setMediaViewerVolume]);\n\n  const handleVolumeMuted = useCallback(() => {\n    setMediaViewerMuted({ isMuted: !isMuted });\n  }, [isMuted, setMediaViewerMuted]);\n\n  const handlePlaybackRateChange = useCallback((newPlaybackRate: number) => {\n    setMediaViewerPlaybackRate({ playbackRate: newPlaybackRate });\n  }, [setMediaViewerPlaybackRate]);\n\n  useEffect(() => {\n    if (!isMediaViewerOpen) return undefined;\n    const togglePayingStateBySpace = (e: KeyboardEvent) => {\n      if (e.key === 'Enter' || e.key === ' ') {\n        e.preventDefault();\n        togglePlayState(e);\n      }\n    };\n\n    document.addEventListener('keydown', togglePayingStateBySpace, false);\n\n    return () => {\n      document.removeEventListener('keydown', togglePayingStateBySpace, false);\n    };\n  }, [togglePlayState, isMediaViewerOpen]);\n\n  const wrapperStyle = posterSize && `width: ${posterSize.width}px; height: ${posterSize.height}px`;\n  const videoStyle = `background-image: url(${posterData})`;\n\n  return (\n    <div\n      className=\"VideoPlayer\"\n      onMouseMove={!isGif && !IS_TOUCH_ENV ? handleMouseMove : undefined}\n      onMouseOut={!isGif && !IS_TOUCH_ENV ? handleMouseOut : undefined}\n    >\n      <div\n        style={wrapperStyle}\n      >\n        {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n        <video\n          ref={videoRef}\n          autoPlay={IS_TOUCH_ENV}\n          playsInline\n          loop={isGif}\n          // This is to force auto playing on mobiles\n          muted={isGif || isMuted}\n          id=\"media-viewer-video\"\n          style={videoStyle}\n          onPlay={IS_IOS ? () => setIsPlayed(true) : undefined}\n          onEnded={handleEnded}\n          onClick={!IS_SINGLE_COLUMN_LAYOUT ? togglePlayState : undefined}\n          onDoubleClick={!IS_TOUCH_ENV ? handleFullscreenChange : undefined}\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n          onTimeUpdate={handleTimeUpdate}\n        >\n          {url && <source src={url} />}\n        </video>\n      </div>\n      {shouldRenderPlayButton && (\n        <Button round className={`play-button ${playButtonClassNames}`} onClick={togglePlayState}>\n          <i className=\"icon-play\" />\n        </Button>\n      )}\n      {shouldRenderSpinner && (\n        <div className={['spinner-container', spinnerClassNames].join(' ')}>\n          {!isBuffered && <div className=\"buffering\">Buffering...</div>}\n          <ProgressSpinner\n            size=\"xl\"\n            progress={isBuffered ? 1 : loadProgress}\n            square\n            onClick={onClose}\n          />\n        </div>\n      )}\n      {!isGif && !shouldRenderSpinner && (\n        <VideoPlayerControls\n          isPlayed={isPlayed}\n          bufferedRanges={bufferedRanges}\n          bufferedProgress={bufferedProgress}\n          isBuffered={isBuffered}\n          currentTime={currentTime}\n          isFullscreenSupported={Boolean(setFullscreen)}\n          isFullscreen={isFullscreen}\n          fileSize={fileSize}\n          duration={videoRef.current ? videoRef.current.duration || 0 : 0}\n          isVisible={areControlsVisible}\n          setVisibility={toggleControls}\n          isForceMobileVersion={posterSize && posterSize.width < MOBILE_VERSION_CONTROL_WIDTH}\n          onSeek={handleSeek}\n          onChangeFullscreen={handleFullscreenChange}\n          onPlayPause={togglePlayState}\n          volume={volume}\n          playbackRate={playbackRate}\n          isMuted={isMuted}\n          onVolumeClick={handleVolumeMuted}\n          onVolumeChange={handleVolumeChange}\n          onPlaybackRateChange={handlePlaybackRateChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(VideoPlayer);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../util/environment';\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport {\n  getChatAvatarHash,\n  getMessageDocument,\n  getMessageFileSize,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat, selectChatMessage, selectIsMessageProtected, selectScheduledMessage, selectUser,\n} from '../../global/selectors';\nimport { AVATAR_FULL_DIMENSIONS, calculateMediaViewerDimensions } from '../common/helpers/mediaDimensions';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\nimport stopEvent from '../../util/stopEvent';\n\nimport Spinner from '../ui/Spinner';\nimport MediaViewerFooter from './MediaViewerFooter';\nimport VideoPlayer from './VideoPlayer';\n\nimport './MediaViewerContent.scss';\n\ntype OwnProps = {\n  messageId?: number;\n  chatId?: string;\n  threadId?: number;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  isActive?: boolean;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  onFooterClick: () => void;\n  setIsFooterHidden?: (isHidden: boolean) => void;\n  isFooterHidden?: boolean;\n};\n\ntype StateProps = {\n  chatId?: string;\n  messageId?: number;\n  senderId?: string;\n  threadId?: number;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  origin?: MediaViewerOrigin;\n  isProtected?: boolean;\n  volume: number;\n  isMuted: boolean;\n  playbackRate: number;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewerContent: FC<OwnProps & StateProps> = (props) => {\n  const {\n    messageId,\n    isActive,\n    avatarOwner,\n    chatId,\n    message,\n    profilePhotoIndex,\n    origin,\n    animationLevel,\n    isFooterHidden,\n    isProtected,\n    volume,\n    playbackRate,\n    isMuted,\n    onClose,\n    onFooterClick,\n    setIsFooterHidden,\n  } = props;\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const { isGif } = video || webPageVideo || {};\n\n  const isOpen = Boolean(avatarOwner || messageId);\n  const isAvatar = Boolean(avatarOwner);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const {\n    mediaData: fullMediaBlobUrl,\n    loadProgress,\n  } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n\n  const toggleControls = useCallback((isVisible) => {\n    setIsFooterHidden?.(!isVisible);\n  }, [setIsFooterHidden]);\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const videoSize = message ? getMessageFileSize(message) : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  if (isAvatar) {\n    return (\n      <div key={chatId} className=\"MediaViewerContent\">\n        {renderPhoto(\n          fullMediaBlobUrl || previewBlobUrl,\n          calculateMediaViewerDimensions(AVATAR_FULL_DIMENSIONS, false),\n          !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n        )}\n      </div>\n    );\n  }\n\n  if (!message) return undefined;\n  const textParts = renderMessageText(message);\n  const hasFooter = Boolean(textParts);\n\n  return (\n    <div\n      className={`MediaViewerContent ${hasFooter ? 'has-footer' : ''}`}\n    >\n      {isProtected && <div onContextMenu={stopEvent} className=\"protector\" />}\n      {isPhoto && renderPhoto(\n        localBlobUrl || fullMediaBlobUrl || previewBlobUrl || pictogramBlobUrl,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      )}\n      {isVideo && ((!isActive && IS_TOUCH_ENV) ? renderVideoPreview(\n        bestImageData,\n        message && calculateMediaViewerDimensions(dimensions!, hasFooter, true),\n        !IS_SINGLE_COLUMN_LAYOUT && !isProtected,\n      ) : (\n        <VideoPlayer\n          key={messageId}\n          url={localBlobUrl || fullMediaBlobUrl}\n          isGif={isGif}\n          posterData={bestImageData}\n          posterSize={message && calculateMediaViewerDimensions(dimensions!, hasFooter, true)}\n          loadProgress={loadProgress}\n          fileSize={videoSize!}\n          isMediaViewerOpen={isOpen && isActive}\n          areControlsVisible={!isFooterHidden}\n          toggleControls={toggleControls}\n          noPlay={!isActive}\n          onClose={onClose}\n          isMuted={isMuted}\n          volume={volume}\n          playbackRate={playbackRate}\n        />\n      ))}\n      {textParts && (\n        <MediaViewerFooter\n          text={textParts}\n          onClick={onFooterClick}\n          isHidden={isFooterHidden}\n          isForVideo={isVideo && !isGif}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, ownProps): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = ownProps;\n\n    const {\n      volume,\n      isMuted,\n      playbackRate,\n    } = global.mediaViewer;\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { volume, isMuted, playbackRate };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        origin,\n        message,\n        isProtected: selectIsMessageProtected(global, message),\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        origin,\n        volume,\n        isMuted,\n        playbackRate,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { volume, isMuted, playbackRate };\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      origin,\n      message,\n      isProtected: selectIsMessageProtected(global, message),\n      volume,\n      isMuted,\n      playbackRate,\n    };\n  },\n)(MediaViewerContent));\n\nfunction renderPhoto(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  return blobUrl\n    ? (\n      <img\n        src={blobUrl}\n        alt=\"\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n        draggable={Boolean(canDrag)}\n      />\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n\nfunction renderVideoPreview(blobUrl?: string, imageSize?: ApiDimensions, canDrag?: boolean) {\n  const wrapperStyle = imageSize && `width: ${imageSize.width}px; height: ${imageSize.height}px`;\n  const videoStyle = `background-image: url(${blobUrl})`;\n  return blobUrl\n    ? (\n      <div\n        className=\"VideoPlayer\"\n      >\n        <div\n          style={wrapperStyle}\n        >\n          {/* eslint-disable-next-line jsx-a11y/media-has-caption */}\n          <video\n            style={videoStyle}\n            draggable={Boolean(canDrag)}\n          />\n        </div>\n      </div>\n    )\n    : (\n      <div\n        className=\"spinner-wrapper\"\n        style={imageSize ? `width: ${imageSize.width}px` : ''}\n      >\n        <Spinner color=\"white\" />\n      </div>\n    );\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type { MediaViewerOrigin } from '../../types';\nimport type { RealTouchEvent } from '../../util/captureEvents';\n\nimport { animateNumber, timingFunctions } from '../../util/animation';\nimport arePropsShallowEqual from '../../util/arePropsShallowEqual';\nimport buildClassName from '../../util/buildClassName';\nimport { captureEvents, IOS_SCREEN_EDGE_THRESHOLD } from '../../util/captureEvents';\nimport { IS_IOS, IS_TOUCH_ENV } from '../../util/environment';\nimport { clamp, isBetween, round } from '../../util/math';\nimport { debounce } from '../../util/schedulers';\n\nimport useDebouncedCallback from '../../hooks/useDebouncedCallback';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useTimeout from '../../hooks/useTimeout';\nimport useWindowSize from '../../hooks/useWindowSize';\n\nimport MediaViewerContent from './MediaViewerContent';\n\nimport './MediaViewerSlides.scss';\n\nconst { easeOutCubic, easeOutQuart } = timingFunctions;\n\ntype OwnProps = {\n  messageId?: number;\n  getMessageId: (fromId?: number, direction?: number) => number | undefined;\n  isVideo?: boolean;\n  isGif?: boolean;\n  isPhoto?: boolean;\n  isOpen?: boolean;\n  selectMessage: (id?: number) => void;\n  chatId?: string;\n  threadId?: number;\n  isActive?: boolean;\n  avatarOwnerId?: string;\n  profilePhotoIndex?: number;\n  origin?: MediaViewerOrigin;\n  animationLevel: 0 | 1 | 2;\n  onClose: () => void;\n  hasFooter?: boolean;\n  onFooterClick: () => void;\n  zoomLevelChange: number;\n};\n\nconst SWIPE_X_THRESHOLD = 50;\nconst SWIPE_Y_THRESHOLD = 50;\nconst SLIDES_GAP = IS_TOUCH_ENV ? 40 : 0;\nconst ANIMATION_DURATION = 350;\nconst DEBOUNCE_MESSAGE = 350;\nconst DEBOUNCE_SWIPE = 500;\nconst DEBOUNCE_ACTIVE = 800;\nconst DOUBLE_TAP_ZOOM = 3;\nconst CLICK_Y_THRESHOLD = 80;\nconst HEADER_HEIGHT = 60;\nconst MAX_ZOOM = 4;\nconst MIN_ZOOM = 1;\nlet cancelAnimation: Function | undefined;\nlet cancelZoomAnimation: Function | undefined;\n\ntype Transform = {\n  x: number;\n  y: number;\n  scale: number;\n};\n\nenum SwipeDirection {\n  Horizontal,\n  Vertical,\n}\n\nconst MediaViewerSlides: FC<OwnProps> = ({\n  messageId,\n  getMessageId,\n  selectMessage,\n  isVideo,\n  isGif,\n  isPhoto,\n  isOpen,\n  isActive,\n  hasFooter,\n  zoomLevelChange,\n  animationLevel,\n  ...rest\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const activeSlideRef = useRef<HTMLDivElement>(null);\n  const transformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const lastTransformRef = useRef<Transform>({ x: 0, y: 0, scale: 1 });\n  const swipeDirectionRef = useRef<SwipeDirection | undefined>(undefined);\n  const isActiveRef = useRef(true);\n  const [activeMessageId, setActiveMessageId] = useState<number | undefined>(messageId);\n  const prevZoomLevelChange = usePrevious(zoomLevelChange);\n  const hasZoomChanged = prevZoomLevelChange !== undefined && prevZoomLevelChange !== zoomLevelChange;\n  const forceUpdate = useForceUpdate();\n  const [isFooterHidden, setIsFooterHidden] = useState(true);\n  const [isMouseDown, setIsMouseDown] = useState(false);\n  const { height: windowHeight, width: windowWidth, isResizing } = useWindowSize();\n  const { onClose } = rest;\n\n  const lang = useLang();\n\n  const setTransform = useCallback((value: Transform) => {\n    transformRef.current = value;\n    forceUpdate();\n  }, [forceUpdate]);\n\n  const selectMessageDebounced = useDebouncedCallback(selectMessage, [], DEBOUNCE_MESSAGE, true);\n  const clearSwipeDirectionDebounced = useDebouncedCallback(() => {\n    swipeDirectionRef.current = undefined;\n  }, [], DEBOUNCE_SWIPE, true);\n  const setIsActiveDebounced = useDebouncedCallback((value: boolean) => {\n    isActiveRef.current = value;\n    forceUpdate();\n  }, [forceUpdate], DEBOUNCE_ACTIVE, true);\n\n  const shouldCloseOnVideo = isGif && !IS_IOS;\n  const clickXThreshold = IS_TOUCH_ENV ? 40 : windowWidth / 10;\n\n  const handleToggleFooterVisibility = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (!IS_TOUCH_ENV) return;\n    const isFooter = windowHeight - e.pageY < CLICK_Y_THRESHOLD;\n    if (!isFooter && e.pageX < clickXThreshold) return;\n    if (!isFooter && e.pageX > windowWidth - clickXThreshold) return;\n    setIsFooterHidden(!isFooterHidden);\n  }, [clickXThreshold, isFooterHidden, windowHeight, windowWidth]);\n\n  useTimeout(() => setIsFooterHidden(false), ANIMATION_DURATION - 150);\n\n  useEffect(() => {\n    if (!containerRef.current || !activeMessageId) {\n      return undefined;\n    }\n    let lastTransform = lastTransformRef.current;\n    const lastDragOffset = {\n      x: 0,\n      y: 0,\n    };\n    const lastZoomCenter = {\n      x: 0,\n      y: 0,\n    };\n    const panDelta = {\n      x: 0,\n      y: 0,\n    };\n    let lastGestureTime = Date.now();\n    let initialContentRect: DOMRect;\n    let content: HTMLElement | null;\n    const setLastGestureTime = debounce(() => {\n      lastGestureTime = Date.now();\n    }, 500, false, true);\n\n    const changeSlide = (direction: number) => {\n      const mId = getMessageId(activeMessageId, direction);\n      if (mId) {\n        const offset = (windowWidth + SLIDES_GAP) * direction;\n        transformRef.current.x += offset;\n        isActiveRef.current = false;\n        setActiveMessageId(mId);\n        selectMessageDebounced(mId);\n        setIsActiveDebounced(true);\n        lastTransform = { x: 0, y: 0, scale: 1 };\n        if (animationLevel === 0) {\n          setTransform(lastTransform);\n          return true;\n        }\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: 1,\n          }),\n        });\n        return true;\n      }\n      return false;\n    };\n\n    const changeSlideOnClick = (e: MouseEvent): [boolean, boolean] => {\n      if (transformRef.current.scale !== 1) return [false, false];\n      let direction = 0;\n      if (windowHeight - e.pageY < CLICK_Y_THRESHOLD) {\n        return [false, false];\n      }\n      if (e.pageX < clickXThreshold) {\n        direction = -1;\n      } else if (e.pageX > windowWidth - clickXThreshold) {\n        direction = 1;\n      }\n      const hasNextSlide = changeSlide(direction);\n      const isInThreshold = direction !== 0;\n      return [isInThreshold, hasNextSlide];\n    };\n\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (transformRef.current.scale !== 1) return;\n      switch (e.key) {\n        case 'Left': // IE/Edge specific value\n        case 'ArrowLeft':\n          changeSlide(-1);\n          break;\n\n        case 'Right': // IE/Edge specific value\n        case 'ArrowRight':\n          changeSlide(1);\n          break;\n      }\n    };\n\n    const calculateOffsetBoundaries = (\n      { x, y, scale }: Transform,\n      offsetTop = 0,\n    ):[Transform, boolean, boolean] => {\n      if (!initialContentRect) return [{ x, y, scale }, true, true];\n      // Get current content boundaries\n      let inBoundsX = true;\n      let inBoundsY = true;\n\n      const centerX = (windowWidth - windowWidth * scale) / 2;\n      const centerY = (windowHeight - windowHeight * scale) / 2;\n\n      // If content is outside window we calculate offset boundaries\n      // based on initial content rect and current scale\n      const minOffsetX = Math.max(-initialContentRect.left * scale, centerX);\n      const maxOffsetX = windowWidth - initialContentRect.right * scale;\n      inBoundsX = isBetween(x, maxOffsetX, minOffsetX);\n      x = clamp(x, maxOffsetX, minOffsetX);\n\n      const minOffsetY = Math.max(-initialContentRect.top * scale + offsetTop, centerY);\n      const maxOffsetY = windowHeight - initialContentRect.bottom * scale;\n      inBoundsY = isBetween(y, maxOffsetY, minOffsetY);\n      y = clamp(y, maxOffsetY, minOffsetY);\n\n      return [{ x, y, scale }, inBoundsX, inBoundsY];\n    };\n\n    const cleanup = captureEvents(containerRef.current, {\n      isNotPassive: true,\n      withNativeDrag: true,\n      excludedClosestSelector: '.MediaViewerFooter, .ZoomControls',\n      minZoom: MIN_ZOOM,\n      maxZoom: MAX_ZOOM,\n      doubleTapZoom: DOUBLE_TAP_ZOOM,\n      onCapture: (e) => {\n        if (checkIfControlTarget(e)) return;\n        if (e.type === 'mousedown') {\n          setIsMouseDown(true);\n          if (transformRef.current.scale !== 1) {\n            e.preventDefault();\n            return;\n          }\n        }\n        lastGestureTime = Date.now();\n        if (arePropsShallowEqual(transformRef.current, { x: 0, y: 0, scale: 1 })) {\n          if (!activeSlideRef.current) return;\n          content = activeSlideRef.current.querySelector('img, video');\n          if (!content) return;\n          // Store initial content rect, without transformations\n          initialContentRect = content.getBoundingClientRect();\n        }\n      },\n      onDrag: (event, captureEvent, {\n        dragOffsetX,\n        dragOffsetY,\n      }, cancelDrag) => {\n        if (checkIfControlTarget(event)) return;\n        // Avoid conflicts with swipe-to-back gestures\n        if (IS_IOS && captureEvent.type === 'touchstart') {\n          const { pageX } = (captureEvent as RealTouchEvent).touches[0];\n          if (pageX <= IOS_SCREEN_EDGE_THRESHOLD || pageX >= windowWidth - IOS_SCREEN_EDGE_THRESHOLD) {\n            return;\n          }\n        }\n        if (cancelAnimation) {\n          cancelAnimation();\n          cancelAnimation = undefined;\n        }\n        panDelta.x = lastDragOffset.x - dragOffsetX;\n        panDelta.y = lastDragOffset.y - dragOffsetY;\n        lastDragOffset.x = dragOffsetX;\n        lastDragOffset.y = dragOffsetY;\n        const absOffsetX = Math.abs(dragOffsetX);\n        const absOffsetY = Math.abs(dragOffsetY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        const h = 10;\n\n        // If user is inactive but is still touching the screen\n        // we reset last gesture time\n        setLastGestureTime();\n\n        // If image is scaled we just need to pan it\n        if (scale !== 1) {\n          const x1 = lastTransform.x + dragOffsetX;\n          const y1 = lastTransform.y + dragOffsetY;\n          if (['wheel', 'mousemove'].includes(event.type)) {\n            const [transform, inBoundsX, inBoundsY] = calculateOffsetBoundaries({ x: x1, y: y1, scale }, HEADER_HEIGHT);\n            if (cancelDrag) cancelDrag(!inBoundsX, !inBoundsY);\n            setTransform(transform);\n            return;\n          }\n          if ('touches' in event && event.touches.length === 1) {\n            setTransform({\n              x: x1,\n              y: y1,\n              scale,\n            });\n          }\n          return;\n        }\n        if (['wheel', 'mousemove'].includes(event.type)) return;\n        if (swipeDirectionRef.current !== SwipeDirection.Vertical) {\n          // If user is swiping horizontally or horizontal shift is dominant\n          // we change only horizontal position\n          if (swipeDirectionRef.current === SwipeDirection.Horizontal\n            || Math.abs(x) > h || (absOffsetX > h && absOffsetY < h)) {\n            swipeDirectionRef.current = SwipeDirection.Horizontal;\n            isActiveRef.current = false;\n            const limit = windowWidth + SLIDES_GAP;\n            setTransform({\n              x: clamp(dragOffsetX, -limit, limit),\n              y: 0,\n              scale,\n            });\n            return;\n          }\n        }\n        // If vertical shift is dominant we change only vertical position\n        if (swipeDirectionRef.current === SwipeDirection.Vertical\n          || Math.abs(y) > h || (absOffsetY > h && absOffsetX < h)) {\n          swipeDirectionRef.current = SwipeDirection.Vertical;\n          const limit = windowHeight;\n          setTransform({\n            x: 0,\n            y: clamp(dragOffsetY, -limit, limit),\n            scale,\n          });\n        }\n      },\n      onZoom: (e, {\n        zoom,\n        zoomFactor,\n        initialCenterX,\n        initialCenterY,\n        dragOffsetX,\n        dragOffsetY,\n        currentCenterX,\n        currentCenterY,\n      }) => {\n        if (cancelAnimation) cancelAnimation();\n        initialCenterX = initialCenterX || windowWidth / 2;\n        initialCenterY = initialCenterY || windowHeight / 2;\n        currentCenterX = currentCenterX || windowWidth / 2;\n        currentCenterY = currentCenterY || windowHeight / 2;\n\n        // Calculate current scale based on zoom factor and limits, add zoom margin for bounce back effect\n        const scale = zoom ?? clamp(lastTransform.scale * zoomFactor!, MIN_ZOOM * 0.5, MAX_ZOOM * 3);\n        const scaleFactor = scale / lastTransform.scale;\n        const offsetX = Math.abs(Math.min(lastTransform.x, 0));\n        const offsetY = Math.abs(Math.min(lastTransform.y, 0));\n\n        // Save last zoom center for bounce back effect\n        lastZoomCenter.x = currentCenterX;\n        lastZoomCenter.y = currentCenterY;\n\n        // Calculate new center relative to the shifted image\n        const scaledCenterX = offsetX + initialCenterX;\n        const scaledCenterY = offsetY + initialCenterY;\n\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (scaledCenterX - scaleFactor * scaledCenterX);\n        const scaleOffsetY = (scaledCenterY - scaleFactor * scaledCenterY);\n\n        const [transform] = calculateOffsetBoundaries({\n          x: lastTransform.x + scaleOffsetX + dragOffsetX,\n          y: lastTransform.y + scaleOffsetY + dragOffsetY,\n          scale,\n        });\n\n        setTransform(transform);\n      },\n      onClick(e) {\n        const [isInThreshold, hasNextSlide] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (IS_TOUCH_ENV) return;\n          if (!hasNextSlide) onClose();\n          return;\n        }\n        if (lastTransform.scale !== 1 || IS_TOUCH_ENV) return;\n        if (shouldCloseOnVideo || !checkIfInsideSelector(e.target as HTMLElement, '.VideoPlayer')) {\n          onClose();\n        }\n      },\n      onDoubleClick(e, {\n        centerX,\n        centerY,\n      }) {\n        const [isInThreshold] = changeSlideOnClick(e as MouseEvent);\n        if (isInThreshold) {\n          e.preventDefault();\n          e.stopPropagation();\n          return;\n        }\n        if (!IS_TOUCH_ENV && e.type !== 'wheel') return;\n        // Calculate how much we need to shift the image to keep the zoom center at the same position\n        const scaleOffsetX = (centerX - DOUBLE_TAP_ZOOM * centerX);\n        const scaleOffsetY = (centerY - DOUBLE_TAP_ZOOM * centerY);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n        if (scale === 1) {\n          if (x !== 0 || y !== 0) return;\n          lastTransform = calculateOffsetBoundaries({\n            x: scaleOffsetX,\n            y: scaleOffsetY,\n            scale: DOUBLE_TAP_ZOOM,\n          })[0];\n        } else {\n          lastTransform = {\n            x: 0,\n            y: 0,\n            scale: 1,\n          };\n        }\n        cancelAnimation = animateNumber({\n          from: [x, y, scale],\n          to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => {\n            const transform = {\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            };\n            setTransform(transform);\n          },\n        });\n      },\n      onRelease: (e) => {\n        if (e.type === 'mouseup') {\n          setIsMouseDown(false);\n        }\n        const absX = Math.abs(transformRef.current.x);\n        const absY = Math.abs(transformRef.current.y);\n        const {\n          scale,\n          x,\n          y,\n        } = transformRef.current;\n\n        clearSwipeDirectionDebounced();\n        setIsActiveDebounced(true);\n\n        // If scale is less than 1 we need to bounce back\n        if (scale < 1) {\n          lastTransform = { x: 0, y: 0, scale: 1 };\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [0, 0, 1],\n            duration: ANIMATION_DURATION,\n            timing: easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        if (scale > 1) {\n          // Get current content boundaries\n          const s1 = Math.min(scale, MAX_ZOOM);\n          const scaleFactor = s1 / scale;\n\n          // Calculate new position based on the last zoom center to keep the zoom center\n          // at the same position when bouncing back from max zoom\n          let x1 = x * scaleFactor + (lastZoomCenter.x - scaleFactor * lastZoomCenter.x);\n          let y1 = y * scaleFactor + (lastZoomCenter.y - scaleFactor * lastZoomCenter.y);\n\n          // Arbitrary pan velocity coefficient\n          const k = 0.15;\n\n          // If scale didn't change, we need to add inertia to pan gesture\n          if (e.type !== 'wheel' && lastTransform.scale === scale) {\n            // Calculate user gesture velocity\n            const Vx = Math.abs(lastDragOffset.x) / (Date.now() - lastGestureTime);\n            const Vy = Math.abs(lastDragOffset.y) / (Date.now() - lastGestureTime);\n\n            // Add extra distance based on gesture velocity and last pan delta\n            x1 -= Math.abs(lastDragOffset.x) * Vx * k * panDelta.x;\n            y1 -= Math.abs(lastDragOffset.y) * Vy * k * panDelta.y;\n          }\n\n          [lastTransform] = calculateOffsetBoundaries({ x: x1, y: y1, scale: s1 }, HEADER_HEIGHT);\n          cancelAnimation = animateNumber({\n            from: [x, y, scale],\n            to: [lastTransform.x, lastTransform.y, lastTransform.scale],\n            duration: ANIMATION_DURATION,\n            timing: easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: value[0],\n              y: value[1],\n              scale: value[2],\n            }),\n          });\n          return undefined;\n        }\n        lastTransform = {\n          x,\n          y,\n          scale,\n        };\n        if (e.type !== 'wheel' && absY >= SWIPE_Y_THRESHOLD) return onClose();\n        // Bounce back if vertical swipe is below threshold\n        if (absY > 0) {\n          cancelAnimation = animateNumber({\n            from: y,\n            to: 0,\n            duration: ANIMATION_DURATION,\n            timing: easeOutCubic,\n            onUpdate: (value) => setTransform({\n              x: 0,\n              y: value,\n              scale,\n            }),\n          });\n          return undefined;\n        }\n        // Get horizontal swipe direction\n        const direction = x < 0 ? 1 : -1;\n        const mId = getMessageId(activeMessageId, x < 0 ? 1 : -1);\n        // Get the direction of the last pan gesture.\n        // Could be different from the total horizontal swipe direction\n        // if user starts a swipe in one direction and then changes the direction\n        // we need to cancel slide transition\n        const dirX = panDelta.x < 0 ? -1 : 1;\n        if (mId && absX >= SWIPE_X_THRESHOLD && direction === dirX) {\n          const offset = (windowWidth + SLIDES_GAP) * direction;\n          // If image is shifted by more than SWIPE_X_THRESHOLD,\n          // We shift everything by one screen width and then set new active message id\n          transformRef.current.x += offset;\n          setActiveMessageId(mId);\n          selectMessageDebounced(mId);\n        }\n        // Then we always return to the original position\n        cancelAnimation = animateNumber({\n          from: transformRef.current.x,\n          to: 0,\n          duration: ANIMATION_DURATION,\n          timing: easeOutCubic,\n          onUpdate: (value) => setTransform({\n            y: 0,\n            x: value,\n            scale: transformRef.current.scale,\n          }),\n        });\n        return undefined;\n      },\n    });\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => {\n      cleanup();\n      document.removeEventListener('keydown', handleKeyDown, false);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [\n    onClose,\n    setTransform,\n    getMessageId,\n    activeMessageId,\n    windowWidth,\n    windowHeight,\n    clickXThreshold,\n    shouldCloseOnVideo,\n    selectMessageDebounced,\n    setIsActiveDebounced,\n    clearSwipeDirectionDebounced,\n    animationLevel,\n    setIsMouseDown,\n  ]);\n\n  useEffect(() => {\n    if (!containerRef.current || !hasZoomChanged) return;\n    const { scale } = transformRef.current;\n    const dir = zoomLevelChange > 0 ? -1 : +1;\n    const minZoom = MIN_ZOOM * 0.5;\n    const maxZoom = MAX_ZOOM * 3;\n    const steps = 100;\n    let prevValue = 0;\n    if (scale <= minZoom && dir > 0) return;\n    if (scale >= maxZoom && dir < 0) return;\n    if (cancelZoomAnimation) cancelZoomAnimation();\n    cancelZoomAnimation = animateNumber({\n      from: dir,\n      to: dir * steps,\n      duration: ANIMATION_DURATION,\n      timing: easeOutQuart,\n      onUpdate: (value) => {\n        if (!containerRef.current) return;\n        const delta = round(value - prevValue, 2);\n        prevValue = value;\n        // To reuse existing logic we trigger wheel event for zoom buttons\n        const wheelEvent = new WheelEvent('wheel', {\n          deltaY: delta,\n          ctrlKey: true,\n        });\n        containerRef.current.dispatchEvent(wheelEvent);\n      },\n    });\n  }, [zoomLevelChange, hasZoomChanged]);\n\n  if (!activeMessageId) return undefined;\n\n  const nextMessageId = getMessageId(activeMessageId, 1);\n  const previousMessageId = getMessageId(activeMessageId, -1);\n  const offsetX = transformRef.current.x;\n  const offsetY = transformRef.current.y;\n  const { scale } = transformRef.current;\n\n  return (\n    <div className=\"MediaViewerSlides\" ref={containerRef}>\n      {previousMessageId && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(-windowWidth + offsetX - SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isFooterHidden={isFooterHidden}\n            messageId={previousMessageId}\n          />\n        </div>\n      )}\n      {activeMessageId && (\n        <div\n          className={buildClassName(\n            'MediaViewerSlide',\n            isActive && 'MediaViewerSlide--active',\n            isMouseDown && scale > 1 && 'MediaViewerSlide--moving',\n          )}\n          onClick={handleToggleFooterVisibility}\n          ref={activeSlideRef}\n          style={getAnimationStyle(offsetX, offsetY, scale)}\n        >\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            messageId={activeMessageId}\n            animationLevel={animationLevel}\n            isActive={isActive && isActiveRef.current}\n            setIsFooterHidden={setIsFooterHidden}\n            isFooterHidden={isFooterHidden || scale !== 1}\n          />\n        </div>\n      )}\n      {nextMessageId && scale === 1 && !isResizing && (\n        <div className=\"MediaViewerSlide\" style={getAnimationStyle(windowWidth + offsetX + SLIDES_GAP)}>\n          <MediaViewerContent\n            /* eslint-disable-next-line react/jsx-props-no-spreading */\n            {...rest}\n            animationLevel={animationLevel}\n            isFooterHidden={isFooterHidden}\n            messageId={nextMessageId}\n          />\n        </div>\n      )}\n      {previousMessageId && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation prev ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('AccDescrPrevious')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n      {nextMessageId && scale === 1 && !IS_TOUCH_ENV && (\n        <button\n          type=\"button\"\n          className={`navigation next ${isVideo && !isGif && 'inline'}`}\n          aria-label={lang('Next')}\n          dir={lang.isRtl ? 'rtl' : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(MediaViewerSlides);\n\nfunction getAnimationStyle(x = 0, y = 0, scale = 1) {\n  return `transform: translate3d(${x.toFixed(3)}px, ${y.toFixed(3)}px, 0px) scale(${scale.toFixed(3)});`;\n}\n\nfunction checkIfInsideSelector(element: HTMLElement, selector: string) {\n  if (!element) return false;\n  if (element.matches(selector)) return true;\n  return Boolean(element.closest(selector));\n}\n\nfunction checkIfControlTarget(e: TouchEvent | MouseEvent) {\n  const target = e.target as HTMLElement;\n  if (checkIfInsideSelector(target, '.VideoPlayerControls')) {\n    if (checkIfInsideSelector(\n      target,\n      '.play, .fullscreen, .volume, .volume-slider, .playback-rate, .playback-rate-menu',\n    )) {\n      return true;\n    }\n    e.preventDefault();\n    return true;\n  }\n  return false;\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiMessage, ApiUser } from '../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { getSenderTitle, isUserId } from '../../global/helpers';\nimport { formatMediaDateTime } from '../../util/dateFormat';\nimport renderText from '../common/helpers/renderText';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectSender,\n  selectUser,\n} from '../../global/selectors';\nimport useLang from '../../hooks/useLang';\n\nimport Avatar from '../common/Avatar';\n\nimport './SenderInfo.scss';\n\ntype OwnProps = {\n  chatId?: string;\n  messageId?: number;\n  isAvatar?: boolean;\n};\n\ntype StateProps = {\n  sender?: ApiUser | ApiChat;\n  message?: ApiMessage;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst SenderInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  messageId,\n  sender,\n  isAvatar,\n  message,\n}) => {\n  const {\n    closeMediaViewer,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const handleFocusMessage = useCallback(() => {\n    closeMediaViewer();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, messageId });\n    }\n  }, [chatId, focusMessage, toggleChatInfo, messageId, closeMediaViewer]);\n\n  const lang = useLang();\n\n  if (!sender || (!message && !isAvatar)) {\n    return undefined;\n  }\n\n  const senderTitle = getSenderTitle(lang, sender);\n\n  return (\n    <div className=\"SenderInfo\" onClick={handleFocusMessage}>\n      {isUserId(sender.id) ? (\n        <Avatar key={sender.id} size=\"medium\" user={sender as ApiUser} />\n      ) : (\n        <Avatar key={sender.id} size=\"medium\" chat={sender as ApiChat} />\n      )}\n      <div className=\"meta\">\n        <div className=\"title\" dir=\"auto\">\n          {senderTitle && renderText(senderTitle)}\n        </div>\n        <div className=\"date\" dir=\"auto\">\n          {isAvatar\n            ? lang('lng_mediaview_profile_photo')\n            : formatMediaDateTime(lang, message!.date * 1000, true)}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default withGlobal<OwnProps>(\n  (global, { chatId, messageId, isAvatar }): StateProps => {\n    if (isAvatar && chatId) {\n      return {\n        sender: isUserId(chatId) ? selectUser(global, chatId) : selectChat(global, chatId),\n      };\n    }\n\n    if (!messageId || !chatId) {\n      return {};\n    }\n\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      message,\n      sender: message && selectSender(global, message),\n    };\n  },\n)(SenderInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\n\nimport type {\n  ApiChat, ApiDimensions, ApiMessage, ApiUser,\n} from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\nimport { MediaViewerOrigin } from '../../types';\n\nimport { getActions, withGlobal } from '../../global';\nimport {\n  getChatAvatarHash,\n  getChatMediaMessageIds,\n  getMessageDocument,\n  getMessageFileName,\n  getMessageMediaFormat,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessagePhoto,\n  getMessageVideo,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  getPhotoFullDimensions,\n  getVideoDimensions,\n  isMessageDocumentPhoto,\n  isMessageDocumentVideo,\n} from '../../global/helpers';\nimport {\n  selectChat,\n  selectChatMessage,\n  selectChatMessages,\n  selectCurrentMediaSearch,\n  selectIsChatWithSelf,\n  selectListedIds,\n  selectOutlyingIds,\n  selectScheduledMessage,\n  selectScheduledMessages,\n  selectUser,\n} from '../../global/selectors';\nimport { stopCurrentAudio } from '../../util/audioPlayer';\nimport captureEscKeyListener from '../../util/captureEscKeyListener';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { ANIMATION_END_DELAY } from '../../config';\nimport { AVATAR_FULL_DIMENSIONS, MEDIA_VIEWER_MEDIA_QUERY } from '../common/helpers/mediaDimensions';\nimport windowSize from '../../util/windowSize';\nimport { animateClosing, animateOpening } from './helpers/ghostAnimation';\nimport { renderMessageText } from '../common/helpers/renderMessageText';\n\nimport useBlurSync from '../../hooks/useBlurSync';\nimport useFlag from '../../hooks/useFlag';\nimport useForceUpdate from '../../hooks/useForceUpdate';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useLang from '../../hooks/useLang';\nimport useMedia from '../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../hooks/useMediaWithLoadProgress';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ReportModal from '../common/ReportModal';\nimport Button from '../ui/Button';\nimport ShowTransition from '../ui/ShowTransition';\nimport Transition from '../ui/Transition';\nimport MediaViewerActions from './MediaViewerActions';\nimport MediaViewerSlides from './MediaViewerSlides';\nimport SenderInfo from './SenderInfo';\n\nimport './MediaViewer.scss';\n\ntype StateProps = {\n  chatId?: string;\n  threadId?: number;\n  messageId?: number;\n  senderId?: string;\n  isChatWithSelf?: boolean;\n  origin?: MediaViewerOrigin;\n  avatarOwner?: ApiChat | ApiUser;\n  profilePhotoIndex?: number;\n  message?: ApiMessage;\n  chatMessages?: Record<number, ApiMessage>;\n  collectionIds?: number[];\n  animationLevel: 0 | 1 | 2;\n};\n\nconst ANIMATION_DURATION = 350;\n\nconst MediaViewer: FC<StateProps> = ({\n  chatId,\n  threadId,\n  messageId,\n  senderId,\n  isChatWithSelf,\n  origin,\n  avatarOwner,\n  profilePhotoIndex,\n  message,\n  chatMessages,\n  collectionIds,\n  animationLevel,\n}) => {\n  const {\n    openMediaViewer,\n    closeMediaViewer,\n    openForwardMenu,\n    focusMessage,\n    toggleChatInfo,\n  } = getActions();\n\n  const isOpen = Boolean(avatarOwner || messageId);\n\n  const isFromSharedMedia = origin === MediaViewerOrigin.SharedMedia;\n  const isFromSearch = origin === MediaViewerOrigin.SearchResult;\n\n  /* Content */\n  const photo = message ? getMessagePhoto(message) : undefined;\n  const video = message ? getMessageVideo(message) : undefined;\n  const webPagePhoto = message ? getMessageWebPagePhoto(message) : undefined;\n  const webPageVideo = message ? getMessageWebPageVideo(message) : undefined;\n  const isDocumentPhoto = message ? isMessageDocumentPhoto(message) : false;\n  const isDocumentVideo = message ? isMessageDocumentVideo(message) : false;\n  const isVideo = Boolean(video || webPageVideo || isDocumentVideo);\n  const { isGif } = video || webPageVideo || {};\n  const isPhoto = Boolean(!isVideo && (photo || webPagePhoto || isDocumentPhoto));\n  const isAvatar = Boolean(avatarOwner);\n\n  /* Navigation */\n  const singleMessageId = webPagePhoto || webPageVideo ? messageId : undefined;\n\n  const messageIds = useMemo(() => {\n    return singleMessageId\n      ? [singleMessageId]\n      : getChatMediaMessageIds(chatMessages || {}, collectionIds || [], isFromSharedMedia);\n  }, [singleMessageId, chatMessages, collectionIds, isFromSharedMedia]);\n\n  const selectedMediaMessageIndex = messageId ? messageIds.indexOf(messageId) : -1;\n\n  /* Animation */\n  const animationKey = useRef<number>();\n  const prevSenderId = usePrevious<string | undefined>(senderId);\n  if (isOpen && (!prevSenderId || prevSenderId !== senderId || !animationKey.current)) {\n    animationKey.current = selectedMediaMessageIndex;\n  }\n  const headerAnimation = animationLevel === 2 ? 'slide-fade' : 'none';\n  const isGhostAnimation = animationLevel === 2;\n\n  /* Controls */\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n  const [zoomLevelChange, setZoomLevelChange] = useState<number>(1);\n\n  /* Media data */\n  function getMediaHash(isFull?: boolean) {\n    if (isAvatar && profilePhotoIndex !== undefined) {\n      const { photos } = avatarOwner!;\n      return photos && photos[profilePhotoIndex]\n        ? `photo${photos[profilePhotoIndex].id}?size=c`\n        : getChatAvatarHash(avatarOwner!, isFull ? 'big' : 'normal');\n    }\n\n    return message && getMessageMediaHash(message, isFull ? 'viewerFull' : 'viewerPreview');\n  }\n\n  const pictogramBlobUrl = useMedia(\n    message && (isFromSharedMedia || isFromSearch) && getMessageMediaHash(message, 'pictogram'),\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const previewMediaHash = getMediaHash();\n  const previewBlobUrl = useMedia(\n    previewMediaHash,\n    undefined,\n    ApiMediaFormat.BlobUrl,\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const { mediaData: fullMediaBlobUrl } = useMediaWithLoadProgress(\n    getMediaHash(true),\n    undefined,\n    message && getMessageMediaFormat(message, 'viewerFull'),\n    undefined,\n    isGhostAnimation && ANIMATION_DURATION,\n  );\n  const avatarPhoto = avatarOwner?.photos?.[profilePhotoIndex!];\n  const canReport = !!avatarPhoto && profilePhotoIndex! > 0 && !isChatWithSelf;\n\n  const localBlobUrl = (photo || video) ? (photo || video)!.blobUrl : undefined;\n  let bestImageData = (!isVideo && (localBlobUrl || fullMediaBlobUrl)) || previewBlobUrl || pictogramBlobUrl;\n  const thumbDataUri = useBlurSync(!bestImageData && message && getMessageMediaThumbDataUri(message));\n  if (!bestImageData && origin !== MediaViewerOrigin.SearchResult) {\n    bestImageData = thumbDataUri;\n  }\n\n  const fileName = message\n    ? getMessageFileName(message)\n    : isAvatar\n      ? `avatar${avatarOwner!.id}-${profilePhotoIndex}.jpg`\n      : undefined;\n\n  let dimensions!: ApiDimensions;\n  if (message) {\n    if (isDocumentPhoto || isDocumentVideo) {\n      dimensions = getMessageDocument(message)!.mediaSize!;\n    } else if (photo || webPagePhoto) {\n      dimensions = getPhotoFullDimensions((photo || webPagePhoto)!)!;\n    } else if (video || webPageVideo) {\n      dimensions = getVideoDimensions((video || webPageVideo)!)!;\n    }\n  } else {\n    dimensions = AVATAR_FULL_DIMENSIONS;\n  }\n\n  useEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return;\n    }\n\n    document.body.classList.toggle('is-media-viewer-open', isOpen);\n  }, [isOpen]);\n\n  const forceUpdate = useForceUpdate();\n  useEffect(() => {\n    const mql = window.matchMedia(MEDIA_VIEWER_MEDIA_QUERY);\n    if (typeof mql.addEventListener === 'function') {\n      mql.addEventListener('change', forceUpdate);\n    } else if (typeof mql.addListener === 'function') {\n      mql.addListener(forceUpdate);\n    }\n\n    return () => {\n      if (typeof mql.removeEventListener === 'function') {\n        mql.removeEventListener('change', forceUpdate);\n      } else if (typeof mql.removeListener === 'function') {\n        mql.removeListener(forceUpdate);\n      }\n    };\n  }, [forceUpdate]);\n\n  const prevMessage = usePrevious<ApiMessage | undefined>(message);\n  const prevOrigin = usePrevious(origin);\n  const prevAvatarOwner = usePrevious<ApiChat | ApiUser | undefined>(avatarOwner);\n  const prevBestImageData = usePrevious(bestImageData);\n  const textParts = message ? renderMessageText(message) : undefined;\n  const hasFooter = Boolean(textParts);\n\n  useEffect(() => {\n    if (isGhostAnimation && isOpen && !prevMessage && !prevAvatarOwner) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateOpening(hasFooter, origin!, bestImageData!, dimensions, isVideo, message);\n    }\n\n    if (isGhostAnimation && !isOpen && (prevMessage || prevAvatarOwner)) {\n      dispatchHeavyAnimationEvent(ANIMATION_DURATION + ANIMATION_END_DELAY);\n      animateClosing(prevOrigin!, prevBestImageData!, prevMessage || undefined);\n    }\n  }, [\n    isGhostAnimation, isOpen, origin, prevOrigin, message, prevMessage, prevAvatarOwner,\n    bestImageData, prevBestImageData, dimensions, isVideo, hasFooter,\n  ]);\n\n  const close = useCallback(() => {\n    closeMediaViewer();\n  }, [closeMediaViewer]);\n\n  const handleFooterClick = useCallback(() => {\n    close();\n\n    if (IS_SINGLE_COLUMN_LAYOUT) {\n      setTimeout(() => {\n        toggleChatInfo(false, { forceSyncOnIOs: true });\n        focusMessage({ chatId, threadId, messageId });\n      }, ANIMATION_DURATION);\n    } else {\n      focusMessage({ chatId, threadId, messageId });\n    }\n  }, [close, chatId, threadId, focusMessage, toggleChatInfo, messageId]);\n\n  const handleForward = useCallback(() => {\n    openForwardMenu({\n      fromChatId: chatId,\n      messageIds: [messageId],\n    });\n  }, [openForwardMenu, chatId, messageId]);\n\n  const selectMessage = useCallback((id?: number) => openMediaViewer({\n    chatId,\n    threadId,\n    messageId: id,\n    origin,\n  }, {\n    forceOnHeavyAnimation: true,\n  }), [chatId, openMediaViewer, origin, threadId]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(() => {\n    close();\n  }) : undefined), [close, isOpen]);\n\n  useEffect(() => {\n    if (isVideo && !isGif) {\n      stopCurrentAudio();\n    }\n  }, [isGif, isVideo]);\n\n  // Prevent refresh when rotating device to watch a video\n  useEffect(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const getMessageId = useCallback((fromId?: number, direction?: number): number | undefined => {\n    if (!fromId) return undefined;\n    const index = messageIds.indexOf(fromId);\n    if ((direction === -1 && index > 0) || (direction === 1 && index < messageIds.length - 1)) {\n      return messageIds[index + direction];\n    }\n    return undefined;\n  }, [messageIds]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive: isOpen,\n    onBack: closeMediaViewer,\n  });\n\n  function renderSenderInfo() {\n    return isAvatar ? (\n      <SenderInfo\n        key={avatarOwner!.id}\n        chatId={avatarOwner!.id}\n        isAvatar\n      />\n    ) : (\n      <SenderInfo\n        key={messageId}\n        chatId={chatId}\n        messageId={messageId}\n      />\n    );\n  }\n\n  return (\n    <ShowTransition id=\"MediaViewer\" isOpen={isOpen}>\n      <div className=\"media-viewer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {IS_SINGLE_COLUMN_LAYOUT && (\n          <Button\n            className=\"media-viewer-close\"\n            round\n            size=\"smaller\"\n            color=\"translucent-white\"\n            ariaLabel={lang('Close')}\n            onClick={close}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n        <Transition activeKey={animationKey.current!} name={headerAnimation}>\n          {renderSenderInfo()}\n        </Transition>\n        <MediaViewerActions\n          mediaData={fullMediaBlobUrl || previewBlobUrl}\n          isVideo={isVideo}\n          message={message}\n          fileName={fileName}\n          canReport={canReport}\n          onReport={openReportModal}\n          onCloseMediaViewer={close}\n          onForward={handleForward}\n          zoomLevelChange={zoomLevelChange}\n          setZoomLevelChange={setZoomLevelChange}\n          isAvatar={isAvatar}\n        />\n        <ReportModal\n          isOpen={isReportModalOpen}\n          onClose={closeReportModal}\n          subject=\"media\"\n          photo={avatarPhoto}\n          chatId={avatarOwner?.id}\n        />\n      </div>\n      <MediaViewerSlides\n        messageId={messageId}\n        getMessageId={getMessageId}\n        chatId={chatId}\n        isPhoto={isPhoto}\n        isGif={isGif}\n        threadId={threadId}\n        avatarOwnerId={avatarOwner && avatarOwner.id}\n        profilePhotoIndex={profilePhotoIndex}\n        origin={origin}\n        isOpen={isOpen}\n        hasFooter={hasFooter}\n        zoomLevelChange={zoomLevelChange}\n        isActive\n        isVideo={isVideo}\n        animationLevel={animationLevel}\n        onClose={close}\n        selectMessage={selectMessage}\n        onFooterClick={handleFooterClick}\n      />\n    </ShowTransition>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      chatId,\n      threadId,\n      messageId,\n      avatarOwnerId,\n      profilePhotoIndex,\n      origin,\n    } = global.mediaViewer;\n    const {\n      animationLevel,\n    } = global.settings.byKey;\n\n    let isChatWithSelf = !!chatId && selectIsChatWithSelf(global, chatId);\n\n    if (origin === MediaViewerOrigin.SearchResult) {\n      if (!(chatId && messageId)) {\n        return { animationLevel };\n      }\n\n      const message = selectChatMessage(global, chatId, messageId);\n      if (!message) {\n        return { animationLevel };\n      }\n\n      return {\n        chatId,\n        messageId,\n        senderId: message.senderId,\n        isChatWithSelf,\n        origin,\n        message,\n        animationLevel,\n      };\n    }\n\n    if (avatarOwnerId) {\n      const sender = selectUser(global, avatarOwnerId) || selectChat(global, avatarOwnerId);\n      isChatWithSelf = selectIsChatWithSelf(global, avatarOwnerId);\n\n      return {\n        messageId: -1,\n        senderId: avatarOwnerId,\n        avatarOwner: sender,\n        isChatWithSelf,\n        profilePhotoIndex: profilePhotoIndex || 0,\n        animationLevel,\n        origin,\n      };\n    }\n\n    if (!(chatId && threadId && messageId)) {\n      return { animationLevel };\n    }\n\n    let message: ApiMessage | undefined;\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      message = selectScheduledMessage(global, chatId, messageId);\n    } else {\n      message = selectChatMessage(global, chatId, messageId);\n    }\n\n    if (!message) {\n      return { animationLevel };\n    }\n\n    let chatMessages: Record<number, ApiMessage> | undefined;\n\n    if (origin && [MediaViewerOrigin.ScheduledAlbum, MediaViewerOrigin.ScheduledInline].includes(origin)) {\n      chatMessages = selectScheduledMessages(global, chatId);\n    } else {\n      chatMessages = selectChatMessages(global, chatId);\n    }\n    let collectionIds: number[] | undefined;\n\n    if (origin === MediaViewerOrigin.Inline || origin === MediaViewerOrigin.Album) {\n      collectionIds = selectOutlyingIds(global, chatId, threadId) || selectListedIds(global, chatId, threadId);\n    } else if (origin === MediaViewerOrigin.SharedMedia) {\n      const currentSearch = selectCurrentMediaSearch(global);\n      const { foundIds } = (currentSearch && currentSearch.resultsByType && currentSearch.resultsByType.media) || {};\n      collectionIds = foundIds;\n    }\n\n    return {\n      chatId,\n      threadId,\n      messageId,\n      senderId: message.senderId,\n      isChatWithSelf,\n      origin,\n      message,\n      chatMessages,\n      collectionIds,\n      animationLevel,\n    };\n  },\n)(MediaViewer));\n","import type { RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\n\nimport { CHAT_HEIGHT_PX } from '../../config';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useInputFocusOnOpen from '../../hooks/useInputFocusOnOpen';\nimport { isUserId } from '../../global/helpers';\n\nimport Loading from '../ui/Loading';\nimport Modal from '../ui/Modal';\nimport InputText from '../ui/InputText';\nimport Button from '../ui/Button';\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport GroupChatInfo from './GroupChatInfo';\nimport PrivateChatInfo from './PrivateChatInfo';\n\nimport './ChatOrUserPicker.scss';\n\nexport type OwnProps = {\n  currentUserId?: string;\n  chatOrUserIds: string[];\n  isOpen: boolean;\n  filterRef: RefObject<HTMLInputElement>;\n  filterPlaceholder: string;\n  filter: string;\n  loadMore?: NoneToVoidFunction;\n  onFilterChange: (filter: string) => void;\n  onSelectChatOrUser: (chatOrUserId: string) => void;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst ChatOrUserPicker: FC<OwnProps> = ({\n  isOpen,\n  currentUserId,\n  chatOrUserIds,\n  filterRef,\n  filter,\n  filterPlaceholder,\n  loadMore,\n  onFilterChange,\n  onSelectChatOrUser,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const lang = useLang();\n  const [viewportIds, getMore] = useInfiniteScroll(loadMore, chatOrUserIds, Boolean(filter));\n\n  const resetFilter = useCallback(() => {\n    onFilterChange('');\n  }, [onFilterChange]);\n  useInputFocusOnOpen(filterRef, isOpen, resetFilter);\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    onFilterChange(e.currentTarget.value);\n  }, [onFilterChange]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isOpen, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      onSelectChatOrUser(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  const modalHeader = (\n    <div className=\"modal-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <Button\n        round\n        color=\"translucent\"\n        size=\"smaller\"\n        ariaLabel={lang('Close')}\n        onClick={onClose}\n      >\n        <i className=\"icon-close\" />\n      </Button>\n      <InputText\n        ref={filterRef}\n        value={filter}\n        onChange={handleFilterChange}\n        onKeyDown={handleKeyDown}\n        placeholder={filterPlaceholder}\n      />\n    </div>\n  );\n\n  const viewportOffset = chatOrUserIds!.indexOf(viewportIds![0]);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      className=\"ChatOrUserPicker\"\n      header={modalHeader}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {viewportIds?.length ? (\n        <InfiniteScroll\n          ref={containerRef}\n          className=\"picker-list custom-scroll\"\n          items={viewportIds}\n          onLoadMore={getMore}\n          withAbsolutePositioning\n          maxHeight={chatOrUserIds!.length * CHAT_HEIGHT_PX}\n          onKeyDown={handleKeyDown}\n        >\n          {viewportIds.map((id, i) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable force-rounded-corners\"\n              style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onSelectChatOrUser(id)}\n            >\n              {isUserId(id) ? (\n                <PrivateChatInfo status={id === currentUserId ? lang('SavedMessagesInfo') : undefined} userId={id} />\n              ) : (\n                <GroupChatInfo chatId={id} />\n              )}\n            </ListItem>\n          ))}\n        </InfiniteScroll>\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\">{lang('lng_blocked_list_not_found')}</p>\n      ) : (\n        <Loading />\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(ChatOrUserPicker);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport { MAIN_THREAD_ID } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport {\n  filterChatsByName,\n  filterUsersByName,\n  getCanPostInChat,\n  sortChatIds,\n} from '../../global/helpers';\nimport { unique } from '../../util/iteratees';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\nimport useFlag from '../../hooks/useFlag';\n\nimport ChatOrUserPicker from '../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  activeListIds?: string[];\n  archivedListIds?: string[];\n  pinnedIds?: string[];\n  contactIds?: string[];\n  currentUserId?: string;\n  switchBotInline?: GlobalState['switchBotInline'];\n};\n\nconst ForwardPicker: FC<OwnProps & StateProps> = ({\n  chatsById,\n  activeListIds,\n  archivedListIds,\n  pinnedIds,\n  contactIds,\n  currentUserId,\n  isOpen,\n  switchBotInline,\n}) => {\n  const {\n    setForwardChatId,\n    exitForwardMode,\n    openChatWithText,\n    resetSwitchBotInline,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n    }\n  }, [isOpen, markIsShown]);\n\n  const chatAndContactIds = useMemo(() => {\n    if (!isOpen) {\n      return undefined;\n    }\n\n    let priorityIds = pinnedIds || [];\n    if (currentUserId) {\n      priorityIds = unique([currentUserId, ...priorityIds]);\n    }\n\n    const chatIds = [\n      ...(activeListIds || []),\n      ...(archivedListIds || []),\n    ].filter((id) => {\n      const chat = chatsById[id];\n\n      return chat && getCanPostInChat(chat, MAIN_THREAD_ID);\n    });\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return sortChatIds(unique([\n      ...filterChatsByName(lang, chatIds, chatsById, filter, currentUserId),\n      ...(contactIds ? filterUsersByName(contactIds, usersById, filter) : []),\n    ]), chatsById, undefined, priorityIds);\n  }, [activeListIds, archivedListIds, chatsById, contactIds, currentUserId, filter, isOpen, lang, pinnedIds]);\n\n  const handleSelectUser = useCallback((userId: string) => {\n    if (switchBotInline) {\n      const text = `@${switchBotInline.botUsername} ${switchBotInline.query}`;\n      openChatWithText({ chatId: userId, text });\n      resetSwitchBotInline();\n    } else {\n      setForwardChatId({ id: userId });\n    }\n  }, [openChatWithText, resetSwitchBotInline, setForwardChatId, switchBotInline]);\n\n  const handleClose = useCallback(() => {\n    exitForwardMode();\n    resetSwitchBotInline();\n  }, [exitForwardMode, resetSwitchBotInline]);\n\n  const renderingChatAndContactIds = useCurrentOrPrev(chatAndContactIds, true)!;\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  return (\n    <ChatOrUserPicker\n      currentUserId={currentUserId}\n      isOpen={isOpen}\n      chatOrUserIds={renderingChatAndContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ForwardTo')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleSelectUser}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsById,\n        listIds,\n        orderedPinnedIds,\n      },\n      currentUserId,\n      switchBotInline,\n    } = global;\n\n    return {\n      chatsById,\n      activeListIds: listIds.active,\n      archivedListIds: listIds.archived,\n      pinnedIds: orderedPinnedIds.active,\n      contactIds: global.contactList?.userIds,\n      currentUserId,\n      switchBotInline,\n    };\n  },\n)(ForwardPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiContact, ApiError, ApiInviteInfo, ApiPhoto,\n} from '../../api/types';\n\nimport getReadableErrorText from '../../util/getReadableErrorText';\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\n\nimport './Dialogs.scss';\n\ntype StateProps = {\n  dialogs: (ApiError | ApiInviteInfo)[];\n};\n\nconst Dialogs: FC<StateProps> = ({ dialogs }) => {\n  const {\n    dismissDialog,\n    acceptInviteConfirmation,\n    sendMessage,\n    showNotification,\n  } = getActions();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const lang = useLang();\n\n  useEffect(() => {\n    if (dialogs.length > 0) {\n      openModal();\n    }\n  }, [dialogs, openModal]);\n\n  if (!dialogs.length) {\n    return undefined;\n  }\n\n  function renderInviteHeader(title: string, photo?: ApiPhoto) {\n    return (\n      <div className=\"modal-header\">\n        {photo && <Avatar size=\"small\" photo={photo} />}\n        <div className=\"modal-title\">\n          {renderText(title)}\n        </div>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={closeModal}>\n          <i className=\"icon-close\" />\n        </Button>\n      </div>\n    );\n  }\n\n  const renderInvite = (invite: ApiInviteInfo) => {\n    const {\n      hash, title, about, participantsCount, isChannel, photo, isRequestNeeded,\n    } = invite;\n\n    const handleJoinClick = () => {\n      acceptInviteConfirmation({\n        hash,\n      });\n      showNotification({\n        message: isChannel ? lang('RequestToJoinChannelSentDescription') : lang('RequestToJoinGroupSentDescription'),\n      });\n      closeModal();\n    };\n\n    const participantsText = isChannel\n      ? lang('Subscribers', participantsCount, 'i')\n      : lang('Members', participantsCount, 'i');\n\n    const joinText = isChannel ? lang('ChannelJoin') : lang('JoinGroup');\n    const requestToJoinText = isChannel\n      ? lang('MemberRequests.RequestToJoinChannel') : lang('MemberRequests.RequestToJoinGroup');\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"error\"\n        header={renderInviteHeader(title, photo)}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {participantsCount !== undefined && <p className=\"modal-help\">{participantsText}</p>}\n        {about && <p className=\"modal-about\">{renderText(about, ['br'])}</p>}\n        {isRequestNeeded && (\n          <p className=\"modal-help\">\n            {isChannel\n              ? lang('MemberRequests.RequestToJoinDescriptionChannel')\n              : lang('MemberRequests.RequestToJoinDescriptionGroup')}\n          </p>\n        )}\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleJoinClick}\n        >\n          {isRequestNeeded ? requestToJoinText : joinText}\n        </Button>\n        <Button isText className=\"confirm-dialog-button\" onClick={closeModal}>{lang('Cancel')}</Button>\n      </Modal>\n    );\n  };\n\n  const renderContactRequest = (contactRequest: ApiContact) => {\n    const handleConfirm = () => {\n      sendMessage({\n        contact: pick(contactRequest, ['firstName', 'lastName', 'phoneNumber']),\n      });\n      closeModal();\n    };\n\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        className=\"confirm\"\n        title={lang('ShareYouPhoneNumberTitle')}\n        onCloseAnimationEnd={dismissDialog}\n      >\n        {lang('AreYouSureShareMyContactInfoBot')}\n        <div>\n          <Button\n            className=\"confirm-dialog-button\"\n            isText\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={handleConfirm}\n          >\n            {lang('OK')}\n          </Button>\n          <Button className=\"confirm-dialog-button\" isText onClick={closeModal}>{lang('Cancel')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderError = (error: ApiError) => {\n    return (\n      <Modal\n        isOpen={isModalOpen}\n        onClose={closeModal}\n        onCloseAnimationEnd={dismissDialog}\n        className=\"error\"\n        title={getErrorHeader(error)}\n      >\n        {error.hasErrorKey ? getReadableErrorText(error) : renderText(error.message!, ['emoji', 'br'])}\n        <div>\n          <Button isText onClick={closeModal}>{lang('OK')}</Button>\n        </div>\n      </Modal>\n    );\n  };\n\n  const renderDialog = (dialog: ApiError | ApiInviteInfo | ApiContact) => {\n    if ('hash' in dialog) {\n      return renderInvite(dialog);\n    }\n\n    if ('phoneNumber' in dialog) {\n      return renderContactRequest(dialog);\n    }\n\n    return renderError(dialog);\n  };\n\n  return (\n    <div id=\"Dialogs\">\n      {Boolean(dialogs.length) && renderDialog(dialogs[dialogs.length - 1])}\n    </div>\n  );\n};\n\nfunction getErrorHeader(error: ApiError) {\n  if (error.isSlowMode) {\n    return 'Slowmode enabled';\n  }\n\n  if (!error.hasErrorKey) {\n    return 'Telegram';\n  }\n\n  return 'Something went wrong';\n}\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['dialogs']),\n)(Dialogs));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiNotification } from '../../api/types';\n\nimport { pick } from '../../util/iteratees';\nimport renderText from '../common/helpers/renderText';\n\nimport Notification from '../ui/Notification';\n\ntype StateProps = {\n  notifications: ApiNotification[];\n};\n\nconst Notifications: FC<StateProps> = ({ notifications }) => {\n  const { dismissNotification } = getActions();\n\n  if (!notifications.length) {\n    return undefined;\n  }\n\n  return (\n    <div id=\"Notifications\">\n      {notifications.map(({ message, localId }) => (\n        <Notification\n          message={renderText(message, ['emoji', 'br', 'links', 'simple_markdown'])}\n          // eslint-disable-next-line react/jsx-no-bind\n          onDismiss={() => dismissNotification({ localId })}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => pick(global, ['notifications']),\n)(Notifications));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  url?: string;\n};\n\nconst SafeLinkModal: FC<OwnProps> = ({ url }) => {\n  const { toggleSafeLinkModal } = getActions();\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    window.open(ensureProtocol(url), '_blank', 'noopener');\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal, url]);\n\n  const handleDismiss = useCallback(() => {\n    toggleSafeLinkModal({ url: undefined });\n  }, [toggleSafeLinkModal]);\n\n  const renderingUrl = useCurrentOrPrev(url);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      textParts={renderText(lang('OpenUrlAlert2', renderingUrl), ['links'])}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    />\n  );\n};\n\nexport default memo(SafeLinkModal);\n","// extracted by mini-css-extract-plugin\nexport default {\"checkbox\":\"src-components-main-UrlAuthModal-module__checkbox\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal } from '../../global';\n\nimport type { FC } from '../../lib/teact/teact';\nimport type { ApiUser } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\n\nimport { ensureProtocol } from '../../util/ensureProtocol';\nimport renderText from '../common/helpers/renderText';\nimport { getUserFullName } from '../../global/helpers';\n\nimport useLang from '../../hooks/useLang';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\nimport Checkbox from '../ui/Checkbox';\n\nimport styles from './UrlAuthModal.module.scss';\n\nexport type OwnProps = {\n  urlAuth?: GlobalState['urlAuth'];\n  currentUser?: ApiUser;\n};\n\nconst UrlAuthModal: FC<OwnProps> = ({\n  urlAuth, currentUser,\n}) => {\n  const { closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth } = getActions();\n  const [isLoginChecked, setLoginChecked] = useState(true);\n  const [isWriteAccessChecked, setWriteAccessChecked] = useState(true);\n  const currentAuth = useCurrentOrPrev(urlAuth, false);\n  const { domain, botId, shouldRequestWriteAccess } = currentAuth?.request || {};\n  const bot = botId ? getGlobal().users.byId[botId] : undefined;\n\n  const lang = useLang();\n\n  const handleOpen = useCallback(() => {\n    if (urlAuth?.url && isLoginChecked) {\n      const acceptAction = urlAuth.button ? acceptBotUrlAuth : acceptLinkUrlAuth;\n      acceptAction({\n        isWriteAllowed: isWriteAccessChecked,\n      });\n    } else {\n      window.open(ensureProtocol(currentAuth?.url), '_blank', 'noopener');\n    }\n    closeUrlAuthModal();\n  }, [\n    urlAuth, isLoginChecked, closeUrlAuthModal, acceptBotUrlAuth, acceptLinkUrlAuth, isWriteAccessChecked, currentAuth,\n  ]);\n\n  const handleDismiss = useCallback(() => {\n    closeUrlAuthModal();\n  }, [closeUrlAuthModal]);\n\n  const handleLoginChecked = useCallback((value: boolean) => {\n    setLoginChecked(value);\n    setWriteAccessChecked(value);\n  }, [setLoginChecked]);\n\n  // Reset on re-open\n  useEffect(() => {\n    if (domain) {\n      setLoginChecked(true);\n      setWriteAccessChecked(Boolean(shouldRequestWriteAccess));\n    }\n  }, [shouldRequestWriteAccess, domain]);\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(urlAuth?.url)}\n      onClose={handleDismiss}\n      title={lang('OpenUrlTitle')}\n      confirmLabel={lang('OpenUrlTitle')}\n      confirmHandler={handleOpen}\n    >\n      {renderText(lang('OpenUrlAlert2', currentAuth?.url), ['links'])}\n      {domain && (\n        <Checkbox\n          checked={isLoginChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkLogin', [domain, getUserFullName(currentUser)]),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={handleLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n      {shouldRequestWriteAccess && (\n        <Checkbox\n          checked={isWriteAccessChecked}\n          label={(\n            <>\n              {renderText(\n                lang('Conversation.OpenBotLinkAllowMessages', getUserFullName(bot)),\n                ['simple_markdown'],\n              )}\n            </>\n          )}\n          onCheck={setWriteAccessChecked}\n          disabled={!isLoginChecked}\n          className={styles.checkbox}\n        />\n      )}\n    </ConfirmDialog>\n  );\n};\n\nexport default memo(UrlAuthModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useMemo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\nimport { formatTime, formatDateToString, getDayStart } from '../../util/dateFormat';\nimport type { LangFn } from '../../hooks/useLang';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\nimport useFlag from '../../hooks/useFlag';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './CalendarModal.scss';\n\nconst MAX_SAFE_DATE = 2147483647 * 1000; // API has int for dates\nconst MIN_SAFE_DATE = 0;\n\nexport type OwnProps = {\n  selectedAt?: number;\n  minAt?: number;\n  maxAt?: number;\n  isFutureMode?: boolean;\n  isPastMode?: boolean;\n  isOpen: boolean;\n  withTimePicker?: boolean;\n  submitButtonLabel?: string;\n  secondButtonLabel?: string;\n  onClose: () => void;\n  onSubmit: (date: Date) => void;\n  onSecondButtonClick?: NoneToVoidFunction;\n};\n\nconst WEEKDAY_LETTERS = [\n  'lng_weekday1',\n  'lng_weekday2',\n  'lng_weekday3',\n  'lng_weekday4',\n  'lng_weekday5',\n  'lng_weekday6',\n  'lng_weekday7',\n];\n\nconst CalendarModal: FC<OwnProps> = ({\n  selectedAt,\n  minAt,\n  maxAt,\n  isFutureMode,\n  isPastMode,\n  isOpen,\n  withTimePicker,\n  submitButtonLabel,\n  secondButtonLabel,\n  onClose,\n  onSubmit,\n  onSecondButtonClick,\n}) => {\n  const lang = useLang();\n  const now = new Date();\n\n  const minDate = useMemo(() => {\n    if (isFutureMode && !minAt) return new Date();\n    return new Date(Math.max(minAt || MIN_SAFE_DATE, MIN_SAFE_DATE));\n  }, [isFutureMode, minAt]);\n  const maxDate = useMemo(() => {\n    if (isPastMode && !maxAt) return new Date();\n    return new Date(Math.min(maxAt || MAX_SAFE_DATE, MAX_SAFE_DATE));\n  }, [isPastMode, maxAt]);\n\n  const passedSelectedDate = useMemo(() => (selectedAt ? new Date(selectedAt) : new Date()), [selectedAt]);\n  const prevIsOpen = usePrevious(isOpen);\n  const [isTimeInputFocused, markTimeInputAsFocused, unmarkTimeInputAsFocused] = useFlag(false);\n\n  const [selectedDate, setSelectedDate] = useState<Date>(passedSelectedDate);\n  const [currentMonthAndYear, setCurrentMonthAndYear] = useState<Date>(\n    new Date(selectedDate.getFullYear(), selectedDate.getMonth(), 1),\n  );\n  const [selectedHours, setSelectedHours] = useState<string>(\n    formatInputTime(passedSelectedDate.getHours()),\n  );\n  const [selectedMinutes, setSelectedMinutes] = useState<string>(\n    formatInputTime(passedSelectedDate.getMinutes()),\n  );\n\n  const selectedDay = formatDay(selectedDate.getFullYear(), selectedDate.getMonth(), selectedDate.getDate());\n  const currentYear = currentMonthAndYear.getFullYear();\n  const currentMonth = currentMonthAndYear.getMonth();\n\n  useEffect(() => {\n    if (!prevIsOpen && isOpen) {\n      setSelectedDate(passedSelectedDate);\n      setCurrentMonthAndYear(new Date(passedSelectedDate.getFullYear(), passedSelectedDate.getMonth(), 1));\n      if (withTimePicker) {\n        setSelectedHours(formatInputTime(passedSelectedDate.getHours()));\n        setSelectedMinutes(formatInputTime(passedSelectedDate.getMinutes()));\n      }\n    }\n  }, [passedSelectedDate, isOpen, prevIsOpen, withTimePicker]);\n\n  useEffect(() => {\n    if (isFutureMode && !isTimeInputFocused && selectedDate.getTime() < minDate.getTime()) {\n      setSelectedDate(minDate);\n      setSelectedHours(formatInputTime(minDate.getHours()));\n      setSelectedMinutes(formatInputTime(minDate.getMinutes()));\n    }\n  }, [isFutureMode, isTimeInputFocused, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (isPastMode && !isTimeInputFocused && selectedDate.getTime() > maxDate.getTime()) {\n      setSelectedDate(maxDate);\n      setSelectedHours(formatInputTime(maxDate.getHours()));\n      setSelectedMinutes(formatInputTime(maxDate.getMinutes()));\n    }\n  }, [isFutureMode, isPastMode, isTimeInputFocused, maxDate, minDate, selectedDate]);\n\n  useEffect(() => {\n    if (selectedAt) {\n      const newSelectedDate = new Date(selectedAt);\n      setSelectedDate(newSelectedDate);\n      setSelectedHours(formatInputTime(newSelectedDate.getHours()));\n      setSelectedMinutes(formatInputTime(newSelectedDate.getMinutes()));\n    }\n  }, [selectedAt]);\n\n  const shouldDisableNextMonth = (isPastMode && currentYear >= now.getFullYear() && currentMonth >= now.getMonth())\n    || (maxDate && currentYear >= maxDate.getFullYear() && currentMonth >= maxDate.getMonth());\n  const shouldDisablePrevMonth = isFutureMode && currentYear <= now.getFullYear() && currentMonth <= now.getMonth();\n\n  const { prevMonthGrid, currentMonthGrid, nextMonthGrid } = useMemo(() => (\n    buildCalendarGrid(currentYear, currentMonth)\n  ), [currentMonth, currentYear]);\n\n  const submitLabel = useMemo(() => {\n    return submitButtonLabel || formatSubmitLabel(lang, selectedDate);\n  }, [lang, selectedDate, submitButtonLabel]);\n\n  function handlePrevMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() - 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleNextMonth() {\n    setCurrentMonthAndYear((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setMonth(dateCopy.getMonth() + 1);\n\n      return dateCopy;\n    });\n  }\n\n  function handleDateSelect(date: number) {\n    setSelectedDate((d) => {\n      const dateCopy = new Date(d);\n      dateCopy.setDate(date);\n      dateCopy.setMonth(currentMonth);\n      dateCopy.setFullYear(currentYear);\n\n      return dateCopy;\n    });\n  }\n\n  const handleSubmit = useCallback(() => {\n    onSubmit(selectedDate);\n  }, [onSubmit, selectedDate]);\n\n  const handleChangeHours = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedHours('');\n      e.target.value = '';\n      return;\n    }\n\n    const hours = Math.max(0, Math.min(Number(value), 23));\n\n    const date = new Date(selectedDate.getTime());\n    date.setHours(hours);\n    setSelectedDate(date);\n\n    const hoursStr = formatInputTime(hours);\n    setSelectedHours(hoursStr);\n    e.target.value = hoursStr;\n  }, [selectedDate]);\n\n  const handleChangeMinutes = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value.replace(/[^\\d]+/g, '');\n    if (!value.length) {\n      setSelectedMinutes('');\n      e.target.value = '';\n      return;\n    }\n\n    const minutes = Math.max(0, Math.min(Number(value), 59));\n\n    const date = new Date(selectedDate.getTime());\n    date.setMinutes(minutes);\n    setSelectedDate(date);\n\n    const minutesStr = formatInputTime(minutes);\n    setSelectedMinutes(minutesStr);\n    e.target.value = minutesStr;\n  }, [selectedDate]);\n\n  function renderTimePicker() {\n    return (\n      <div className=\"timepicker\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedHours}\n          onChange={handleChangeHours}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n        :\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          inputMode=\"decimal\"\n          value={selectedMinutes}\n          onChange={handleChangeMinutes}\n          onFocus={markTimeInputAsFocused}\n          onBlur={unmarkTimeInputAsFocused}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"CalendarModal\"\n    >\n      <div className=\"container\">\n        <div className=\"month-selector\">\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            onClick={onClose}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n\n          <h4>\n            {lang(`lng_month${currentMonth + 1}`)}\n            {' '}\n            {currentYear}\n          </h4>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisablePrevMonth}\n            onClick={!shouldDisablePrevMonth ? handlePrevMonth : undefined}\n          >\n            <i className=\"icon-previous\" />\n          </Button>\n\n          <Button\n            round\n            size=\"smaller\"\n            color=\"translucent\"\n            disabled={shouldDisableNextMonth}\n            onClick={!shouldDisableNextMonth ? handleNextMonth : undefined}\n          >\n            <i className=\"icon-next\" />\n          </Button>\n        </div>\n      </div>\n\n      <div className=\"calendar-wrapper\">\n        <div className=\"calendar-grid\">\n          {WEEKDAY_LETTERS.map((day) => (\n            <div className=\"day-button faded weekday\">\n              <span>{lang(day)}</span>\n            </div>\n          ))}\n          {prevMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n          {currentMonthGrid.map((gridDate) => (\n            <div\n              role=\"button\"\n              tabIndex={0}\n              onClick={() => handleDateSelect(gridDate)}\n              className={buildClassName(\n                'day-button',\n                isDisabledDay(\n                  currentYear, currentMonth, gridDate, minDate, maxDate,\n                )\n                  ? 'disabled'\n                  : `${gridDate ? 'clickable' : ''}`,\n                selectedDay === formatDay(currentYear, currentMonth, gridDate) && 'selected',\n              )}\n            >\n              {Boolean(gridDate) && (\n                <span>{gridDate}</span>\n              )}\n            </div>\n          ))}\n          {nextMonthGrid.map((gridDate) => (\n            <div className=\"day-button disabled\"><span>{gridDate}</span></div>\n          ))}\n        </div>\n      </div>\n\n      {withTimePicker && renderTimePicker()}\n\n      <div className=\"footer\">\n        <Button onClick={handleSubmit}>\n          {submitLabel}\n        </Button>\n        {secondButtonLabel && (\n          <Button onClick={onSecondButtonClick} isText>\n            {secondButtonLabel}\n          </Button>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nfunction buildCalendarGrid(year: number, month: number) {\n  const prevMonthGrid: number[] = [];\n  const currentMonthGrid: number[] = [];\n  const nextMonthGrid: number[] = [];\n\n  const date = new Date();\n  date.setDate(1);\n  date.setMonth(month);\n  date.setFullYear(year);\n  const firstDay = date.getDay() || 7;\n  const totalDaysInPrevMonth = new Date(year, month, 0).getDate();\n\n  for (let i = 1; i < firstDay; i++) {\n    prevMonthGrid.push(totalDaysInPrevMonth - firstDay + i + 1);\n  }\n\n  while (date.getMonth() === month) {\n    const gridDate = date.getDate();\n    currentMonthGrid.push(gridDate);\n    date.setDate(gridDate + 1);\n  }\n\n  const lastRowDaysCount = (currentMonthGrid.length + prevMonthGrid.length) % 7;\n  if (lastRowDaysCount > 0) {\n    for (let i = 1; i <= 7 - lastRowDaysCount; i++) {\n      nextMonthGrid.push(i);\n    }\n  }\n\n  return { prevMonthGrid, currentMonthGrid, nextMonthGrid };\n}\n\nfunction isDisabledDay(year: number, month: number, day: number, minDate?: Date, maxDate?: Date) {\n  const selectedDay = new Date(year, month, day);\n  const fixedMinDate = minDate && getDayStart(minDate);\n  const fixedMaxDate = maxDate && getDayStart(maxDate);\n\n  if (fixedMaxDate && selectedDay > fixedMaxDate) {\n    return true;\n  } else if (fixedMinDate && selectedDay < fixedMinDate) {\n    return true;\n  }\n\n  return false;\n}\n\nfunction formatInputTime(value: string | number) {\n  return String(value).padStart(2, '0');\n}\n\nfunction formatDay(year: number, month: number, day: number) {\n  return `${year}-${month + 1}-${day}`;\n}\n\nfunction formatSubmitLabel(lang: LangFn, date: Date) {\n  const day = formatDateToString(date, lang.code);\n  const today = formatDateToString(new Date(), lang.code);\n\n  if (day === today) {\n    return lang('Conversation.ScheduleMessage.SendToday', formatTime(lang, date));\n  }\n\n  return lang('Conversation.ScheduleMessage.SendOn', [day, formatTime(lang, date)]);\n}\n\nexport default memo(CalendarModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\n\nimport CalendarModal from '../common/CalendarModal';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\ntype StateProps = {\n  selectedAt?: number;\n};\n\nconst HistoryCalendar: FC<OwnProps & StateProps> = ({\n  isOpen, selectedAt,\n}) => {\n  const { searchMessagesByDate, closeHistoryCalendar } = getActions();\n\n  const handleJumpToDate = useCallback((date: Date) => {\n    searchMessagesByDate({ timestamp: date.valueOf() / 1000 });\n    closeHistoryCalendar();\n  }, [closeHistoryCalendar, searchMessagesByDate]);\n\n  const lang = useLang();\n\n  return (\n    <CalendarModal\n      isOpen={isOpen}\n      selectedAt={selectedAt}\n      isPastMode\n      submitButtonLabel={lang('JumpToDate')}\n      onClose={closeHistoryCalendar}\n      onSubmit={handleJumpToDate}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return { selectedAt: global.historyCalendarSelectedAt };\n  },\n)(HistoryCalendar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiCountryCode, ApiUser, ApiUserStatus } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport { getUserStatus } from '../../global/helpers';\nimport { selectUser, selectUserStatus } from '../../global/selectors';\nimport renderText from '../common/helpers/renderText';\nimport { formatPhoneNumberWithCode } from '../../util/phoneNumber';\nimport useLang from '../../hooks/useLang';\nimport useFlag from '../../hooks/useFlag';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Avatar from '../common/Avatar';\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Button from '../ui/Button';\n\nimport './NewContactModal.scss';\n\nconst ANIMATION_DURATION = 200;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  userId?: string;\n  isByPhoneNumber?: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  userStatus?: ApiUserStatus;\n  phoneCodeList: ApiCountryCode[];\n  serverTimeOffset?: number;\n};\n\nconst NewContactModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  userId,\n  isByPhoneNumber,\n  user,\n  userStatus,\n  phoneCodeList,\n  serverTimeOffset,\n}) => {\n  const { updateContact, importContact, closeNewContactDialog } = getActions();\n\n  const lang = useLang();\n  const renderingUser = useCurrentOrPrev(user);\n  const renderingIsByPhoneNumber = useCurrentOrPrev(isByPhoneNumber);\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isShown, markIsShown, unmarkIsShown] = useFlag();\n  const [firstName, setFirstName] = useState<string>(renderingUser?.firstName ?? '');\n  const [lastName, setLastName] = useState<string>(renderingUser?.lastName ?? '');\n  const [phone, setPhone] = useState<string>(renderingUser?.phoneNumber ?? '');\n  const [shouldSharePhoneNumber, setShouldSharePhoneNumber] = useState<boolean>(true);\n  const canBeSubmitted = Boolean(firstName && (!isByPhoneNumber || phone));\n\n  useEffect(() => {\n    if (isOpen) {\n      markIsShown();\n      setFirstName(renderingUser?.firstName ?? '');\n      setLastName(renderingUser?.lastName ?? '');\n      setPhone(renderingUser?.phoneNumber ?? '');\n      setShouldSharePhoneNumber(true);\n    }\n  }, [isOpen, markIsShown, renderingUser?.firstName, renderingUser?.lastName, renderingUser?.phoneNumber]);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV && isShown) {\n      setTimeout(() => { inputRef.current?.focus(); }, ANIMATION_DURATION);\n    }\n  }, [isShown]);\n\n  const handleFirstNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n  }, []);\n\n  const handlePhoneChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setPhone(formatPhoneNumberWithCode(phoneCodeList, e.target.value));\n  }, [phoneCodeList]);\n\n  const handleLastNameChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n  }, []);\n\n  const handleClose = useCallback(() => {\n    closeNewContactDialog();\n    setFirstName('');\n    setLastName('');\n    setPhone('');\n  }, [closeNewContactDialog]);\n\n  const handleSubmit = useCallback(() => {\n    if (isByPhoneNumber || !userId) {\n      importContact({\n        firstName,\n        lastName,\n        phoneNumber: phone,\n      });\n    } else {\n      updateContact({\n        userId,\n        firstName,\n        lastName,\n        shouldSharePhoneNumber,\n      });\n    }\n  }, [firstName, importContact, isByPhoneNumber, lastName, phone, shouldSharePhoneNumber, updateContact, userId]);\n\n  if (!isOpen && !isShown) {\n    return undefined;\n  }\n\n  function renderAddContact() {\n    return (\n      <>\n        <div className=\"NewContactModal__profile\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Avatar size=\"jumbo\" user={renderingUser} text={`${firstName} ${lastName}`} />\n          <div className=\"NewContactModal__profile-info\">\n            <p className=\"NewContactModal__phone-number\">\n              {renderingUser?.phoneNumber\n                ? formatPhoneNumberWithCode(phoneCodeList, renderingUser.phoneNumber)\n                : lang('MobileHidden')}\n            </p>\n            <span className=\"NewContactModal__user-status\" dir=\"auto\">\n              {getUserStatus(lang, renderingUser!, userStatus, serverTimeOffset!)}\n            </span>\n          </div>\n        </div>\n        <InputText\n          ref={inputRef}\n          value={firstName}\n          label={lang('FirstName')}\n          tabIndex={0}\n          onChange={handleFirstNameChange}\n        />\n        <InputText\n          value={lastName}\n          label={lang('LastName')}\n          tabIndex={0}\n          onChange={handleLastNameChange}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(\n            lang('NewContact.Phone.Hidden.Text', renderingUser?.firstName || ''),\n            ['emoji', 'simple_markdown'],\n          )}\n        </p>\n        <Checkbox\n          checked={shouldSharePhoneNumber}\n          tabIndex={0}\n          onCheck={setShouldSharePhoneNumber}\n          label={lang('lng_new_contact_share')}\n        />\n        <p className=\"NewContactModal__help-text\">\n          {renderText(lang('AddContact.SharedContactExceptionInfo', renderingUser?.firstName))}\n        </p>\n      </>\n    );\n  }\n\n  function renderCreateContact() {\n    return (\n      <div className=\"NewContactModal__new-contact\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Avatar size=\"jumbo\" text={`${firstName} ${lastName}`} />\n        <div className=\"NewContactModal__new-contact-fieldset\">\n          <InputText\n            ref={inputRef}\n            value={phone}\n            inputMode=\"tel\"\n            label={lang('lng_contact_phone')}\n            tabIndex={0}\n            onChange={handlePhoneChange}\n          />\n          <InputText\n            value={firstName}\n            label={lang('FirstName')}\n            tabIndex={0}\n            onChange={handleFirstNameChange}\n          />\n          <InputText\n            value={lastName}\n            label={lang('LastName')}\n            tabIndex={0}\n            onChange={handleLastNameChange}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"NewContactModal\"\n      title={lang('NewContact')}\n      isOpen={isOpen}\n      onClose={handleClose}\n      onCloseAnimationEnd={unmarkIsShown}\n    >\n      {renderingUser && renderAddContact()}\n      {renderingIsByPhoneNumber && renderCreateContact()}\n      <div className=\"dialog-buttons\">\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          onClick={handleClose}\n        >\n          {lang('Cancel')}\n        </Button>\n        <Button\n          isText\n          className=\"confirm-dialog-button\"\n          disabled={!canBeSubmitted}\n          onClick={handleSubmit}\n        >\n          {lang('Done')}\n        </Button>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    return {\n      user: userId ? selectUser(global, userId) : undefined,\n      userStatus: userId ? selectUserStatus(global, userId) : undefined,\n      serverTimeOffset: global.serverTimeOffset,\n      phoneCodeList: global.countryList.phoneCodes,\n    };\n  },\n)(NewContactModal));\n","import useWindowSize from '../../../hooks/useWindowSize';\nimport { useCallback, useEffect, useRef } from '../../../lib/teact/teact';\nimport { extractCurrentThemeParams } from '../../../util/themeStyle';\n\nexport type WebAppInboundEvent = {\n  eventType: 'web_app_data_send';\n  eventData: {\n    data: string;\n  };\n} | {\n  eventType: 'web_app_setup_main_button';\n  eventData: {\n    is_visible: boolean;\n    is_active: boolean;\n    text: string;\n    color: string;\n    text_color: string;\n    is_progress_visible: boolean;\n  };\n} | {\n  eventType: 'web_app_open_tg_link';\n  eventData: {\n    path_full: string;\n  };\n} | {\n  eventType: 'web_app_request_viewport' | 'web_app_request_theme' | 'web_app_ready' | 'web_app_expand'\n  | 'web_app_close' | 'iframe_ready';\n};\n\ntype WebAppOutboundEvent = {\n  eventType: 'viewport_changed';\n  eventData: {\n    height: number;\n    width?: number;\n    is_expanded?: boolean;\n  };\n} | {\n  eventType: 'theme_changed';\n  eventData: {\n    theme_params: {\n      bg_color: string;\n      text_color: string;\n      hint_color: string;\n      link_color: string;\n      button_color: string;\n      button_text_color: string;\n    };\n  };\n} | {\n  eventType: 'set_custom_style';\n  eventData: string;\n} | {\n  eventType: 'main_button_pressed';\n};\n\nconst SCROLLBAR_STYLE = `* {\n  scrollbar-width: thin;\n  scrollbar-color: %SCROLLBAR_COLOR% transparent;\n}\n\n*::-webkit-scrollbar {\n  width: 6px;\n  height: 6px;\n  background-color: transparent;\n}\n\n*::-webkit-scrollbar-thumb {\n  border-radius: 6px;\n  background-color: %SCROLLBAR_COLOR%;\n}\n\n*::-webkit-scrollbar-corner {\n  background-color: transparent;\n}`;\n\nconst useWebAppFrame = (isOpen: boolean, isSimpleView: boolean, onEvent: (event: WebAppInboundEvent) => void) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLIFrameElement>(null);\n  const ignoreEventsRef = useRef<boolean>(false);\n  const windowSize = useWindowSize();\n\n  const reloadFrame = useCallback((url: string) => {\n    if (!ref.current) return;\n    const frame = ref.current;\n    frame.src = 'about:blank';\n    frame.addEventListener('load', () => {\n      frame.src = url;\n    }, { once: true });\n  }, []);\n\n  const sendEvent = useCallback((event: WebAppOutboundEvent) => {\n    if (!ref.current?.contentWindow) return;\n    ref.current.contentWindow.postMessage(JSON.stringify(event), '*');\n  }, []);\n\n  const sendViewport = useCallback(() => {\n    if (!ref.current) {\n      return;\n    }\n    const { width, height } = ref.current.getBoundingClientRect();\n    sendEvent({\n      eventType: 'viewport_changed',\n      eventData: {\n        width,\n        height,\n        is_expanded: true,\n      },\n    });\n  }, [sendEvent]);\n\n  const sendTheme = useCallback(() => {\n    sendEvent({\n      eventType: 'theme_changed',\n      eventData: {\n        theme_params: extractCurrentThemeParams(),\n      },\n    });\n  }, [sendEvent]);\n\n  const sendCustomStyle = useCallback((style: string) => {\n    sendEvent({\n      eventType: 'set_custom_style',\n      eventData: style,\n    });\n  }, [sendEvent]);\n\n  const handleMessage = useCallback((event: MessageEvent<string>) => {\n    if (ignoreEventsRef.current) {\n      return;\n    }\n\n    try {\n      const data = JSON.parse(event.data) as WebAppInboundEvent;\n      // Handle some app requests here to simplify hook usage\n      if (data.eventType === 'web_app_request_viewport') {\n        sendViewport();\n      }\n\n      if (data.eventType === 'web_app_request_theme') {\n        sendTheme();\n      }\n\n      if (data.eventType === 'iframe_ready') {\n        const scrollbarColor = getComputedStyle(document.body).getPropertyValue('--color-scrollbar');\n        sendCustomStyle(SCROLLBAR_STYLE.replace(/%SCROLLBAR_COLOR%/g, scrollbarColor));\n      }\n\n      if (data.eventType === 'web_app_data_send') {\n        if (!isSimpleView) return; // Allowed only in simple view\n        ignoreEventsRef.current = true;\n      }\n      onEvent(data);\n    } catch (err) {\n      // Ignore other messages\n    }\n  }, [isSimpleView, onEvent, sendCustomStyle, sendTheme, sendViewport]);\n\n  useEffect(() => {\n    if (windowSize) {\n      sendViewport();\n    }\n  }, [sendViewport, windowSize]);\n\n  useEffect(() => {\n    window.addEventListener('message', handleMessage);\n    return () => window.removeEventListener('message', handleMessage);\n  }, [handleMessage]);\n\n  useEffect(() => {\n    if (isOpen && ref.current?.contentWindow) {\n      sendViewport();\n      ignoreEventsRef.current = false;\n    }\n  }, [isOpen, sendViewport]);\n\n  return {\n    ref, sendEvent, reloadFrame, sendViewport, sendTheme,\n  };\n};\n\nexport default useWebAppFrame;\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\nimport type { GlobalState } from '../../global/types';\nimport type { ThemeKey } from '../../types';\n\nimport windowSize from '../../util/windowSize';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { selectCurrentChat, selectTheme } from '../../global/selectors';\nimport buildClassName from '../../util/buildClassName';\nimport { extractCurrentThemeParams, validateHexColor } from '../../util/themeStyle';\n\nimport useInterval from '../../hooks/useInterval';\nimport useLang from '../../hooks/useLang';\nimport useOnChange from '../../hooks/useOnChange';\nimport type { WebAppInboundEvent } from './hooks/useWebAppFrame';\nimport useWebAppFrame from './hooks/useWebAppFrame';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport DropdownMenu from '../ui/DropdownMenu';\nimport MenuItem from '../ui/MenuItem';\nimport Spinner from '../ui/Spinner';\n\nimport './WebAppModal.scss';\n\ntype WebAppButton = {\n  isVisible: boolean;\n  isActive: boolean;\n  text: string;\n  color: string;\n  textColor: string;\n  isProgressVisible: boolean;\n};\n\nexport type OwnProps = {\n  webApp?: GlobalState['webApp'];\n};\n\ntype StateProps = {\n  isInstalled?: boolean;\n  chat?: ApiChat;\n  theme?: ThemeKey;\n};\n\nconst MAIN_BUTTON_ANIMATION_TIME = 250;\nconst PROLONG_INTERVAL = 45000; // 45s\nconst ANIMATION_WAIT = 400;\nconst LINK_PREFIX = 'https://t.me/';\n\nconst WebAppModal: FC<OwnProps & StateProps> = ({\n  webApp,\n  chat,\n  isInstalled,\n  theme,\n}) => {\n  const {\n    closeWebApp, sendWebViewData, prolongWebView, toggleBotInAttachMenu, openTelegramLink, openChat,\n  } = getActions();\n  const [mainButton, setMainButton] = useState<WebAppButton | undefined>();\n  const lang = useLang();\n  const {\n    url, bot, buttonText, queryId,\n  } = webApp || {};\n  const isOpen = Boolean(url);\n  const isSimple = !queryId;\n\n  const handleEvent = useCallback((event: WebAppInboundEvent) => {\n    const { eventType } = event;\n    if (eventType === 'web_app_close') {\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_open_tg_link') {\n      const linkUrl = LINK_PREFIX + event.eventData.path_full;\n      openTelegramLink({ url: linkUrl });\n      closeWebApp();\n    }\n\n    if (eventType === 'web_app_data_send') {\n      const { eventData } = event;\n      closeWebApp();\n      sendWebViewData({\n        bot: bot!,\n        buttonText: buttonText!,\n        data: eventData.data,\n      });\n    }\n\n    if (eventType === 'web_app_setup_main_button') {\n      const { eventData } = event;\n      const themeParams = extractCurrentThemeParams();\n      // Validate colors if they are present\n      const color = !eventData.color || validateHexColor(eventData.color) ? eventData.color\n        : themeParams.button_color;\n      const textColor = !eventData.text_color || validateHexColor(eventData.text_color) ? eventData.text_color\n        : themeParams.text_color;\n      setMainButton({\n        isVisible: eventData.is_visible && Boolean(eventData.text?.trim().length),\n        isActive: eventData.is_active,\n        text: eventData.text || '',\n        color,\n        textColor,\n        isProgressVisible: eventData.is_progress_visible,\n      });\n    }\n  }, [bot, buttonText, closeWebApp, openTelegramLink, sendWebViewData]);\n\n  const {\n    ref, reloadFrame, sendEvent, sendViewport, sendTheme,\n  } = useWebAppFrame(isOpen, isSimple, handleEvent);\n\n  const shouldShowMainButton = mainButton?.isVisible && mainButton.text.trim().length > 0;\n\n  useInterval(() => {\n    prolongWebView({\n      bot: bot!,\n      queryId: queryId!,\n      peer: chat!,\n    });\n  }, queryId ? PROLONG_INTERVAL : undefined, true);\n\n  const handleMainButtonClick = useCallback(() => {\n    sendEvent({\n      eventType: 'main_button_pressed',\n    });\n  }, [sendEvent]);\n\n  const handleRefreshClick = useCallback(() => {\n    reloadFrame(webApp!.url);\n  }, [reloadFrame, webApp]);\n\n  // Notify view that height changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendViewport();\n    }, ANIMATION_WAIT);\n  }, [mainButton?.isVisible, sendViewport]);\n\n  // Notify view that theme changed\n  useOnChange(() => {\n    setTimeout(() => {\n      sendTheme();\n    }, ANIMATION_WAIT);\n  }, [theme, sendTheme]);\n\n  // Prevent refresh when rotating device\n  useEffect(() => {\n    if (!isOpen) return undefined;\n    windowSize.disableRefresh();\n\n    return () => {\n      windowSize.enableRefresh();\n    };\n  }, [isOpen]);\n\n  const handleToggleClick = useCallback(() => {\n    toggleBotInAttachMenu({\n      botId: bot!.id,\n      isEnabled: !isInstalled,\n    });\n  }, [bot, isInstalled, toggleBotInAttachMenu]);\n\n  const handleCloseClick = useCallback(() => {\n    closeWebApp();\n  }, [closeWebApp]);\n\n  const openBotChat = useCallback(() => {\n    openChat({\n      id: bot!.id,\n    });\n    closeWebApp();\n  }, [bot, closeWebApp, openChat]);\n\n  const MoreMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen: isMenuOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isMenuOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const header = useMemo(() => {\n    return (\n      <div className=\"modal-header\">\n        <Button\n          round\n          color=\"translucent\"\n          size=\"smaller\"\n          ariaLabel={lang('Close')}\n          onClick={handleCloseClick}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{bot?.firstName}</div>\n        <DropdownMenu\n          className=\"web-app-more-menu\"\n          trigger={MoreMenuButton}\n          positionX=\"right\"\n        >\n          {chat && bot && chat.id !== bot.id && (\n            <MenuItem icon=\"bots\" onClick={openBotChat}>{lang('BotWebViewOpenBot')}</MenuItem>\n          )}\n          <MenuItem icon=\"reload\" onClick={handleRefreshClick}>{lang('WebApp.ReloadPage')}</MenuItem>\n          {bot?.isAttachMenuBot && (\n            <MenuItem icon={isInstalled ? 'stop' : 'install'} onClick={handleToggleClick} destructive={isInstalled}>\n              {lang(isInstalled ? 'WebApp.RemoveBot' : 'WebApp.AddToAttachmentAdd')}\n            </MenuItem>\n          )}\n        </DropdownMenu>\n      </div>\n    );\n  }, [\n    lang, handleCloseClick, bot, MoreMenuButton, chat, openBotChat, handleRefreshClick, isInstalled, handleToggleClick,\n  ]);\n\n  const prevMainButtonColor = usePrevious(mainButton?.color, true);\n  const prevMainButtonTextColor = usePrevious(mainButton?.textColor, true);\n  const prevMainButtonIsActive = usePrevious(mainButton && Boolean(mainButton.isActive), true);\n  const prevMainButtonText = usePrevious(mainButton?.text, true);\n\n  const mainButtonCurrentColor = mainButton?.color || prevMainButtonColor;\n  const mainButtonCurrentTextColor = mainButton?.textColor || prevMainButtonTextColor;\n  const mainButtonCurrentIsActive = mainButton?.isActive !== undefined ? mainButton.isActive : prevMainButtonIsActive;\n  const mainButtonCurrentText = mainButton?.text || prevMainButtonText;\n\n  useEffect(() => {\n    if (!isOpen) setMainButton(undefined);\n  }, [isOpen]);\n\n  const [shouldDecreaseWebFrameSize, setShouldDecreaseWebFrameSize] = useState(false);\n  const [shouldHideButton, setShouldHideButton] = useState(true);\n\n  const buttonChangeTimeout = useRef<ReturnType<typeof setTimeout>>();\n\n  useEffect(() => {\n    if (buttonChangeTimeout.current) clearTimeout(buttonChangeTimeout.current);\n    if (!shouldShowMainButton) {\n      setShouldDecreaseWebFrameSize(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldHideButton(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    } else {\n      setShouldHideButton(false);\n      buttonChangeTimeout.current = setTimeout(() => {\n        setShouldDecreaseWebFrameSize(true);\n      }, MAIN_BUTTON_ANIMATION_TIME);\n    }\n  }, [setShouldDecreaseWebFrameSize, shouldShowMainButton]);\n\n  return (\n    <Modal\n      className=\"WebAppModal\"\n      isOpen={isOpen}\n      onClose={closeWebApp}\n      header={header}\n      hasCloseButton\n    >\n      {isOpen && (\n        <>\n          <iframe\n            ref={ref}\n            className={buildClassName('web-app-frame', shouldDecreaseWebFrameSize && 'with-button')}\n            src={url}\n            title={`${bot?.firstName} Web App`}\n            sandbox=\"allow-scripts allow-same-origin allow-popups allow-forms\"\n            allow=\"camera; microphone; geolocation;\"\n            allowFullScreen\n          />\n          <Button\n            className={buildClassName(\n              'web-app-button',\n              shouldShowMainButton && 'visible',\n              shouldHideButton && 'hidden',\n            )}\n            style={`background-color: ${mainButtonCurrentColor}; color: ${mainButtonCurrentTextColor}`}\n            disabled={!mainButtonCurrentIsActive}\n            onClick={handleMainButtonClick}\n          >\n            {mainButtonCurrentText}\n            {mainButton?.isProgressVisible && <Spinner color=\"white\" />}\n          </Button>\n        </>\n      )}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { webApp }): StateProps => {\n    const { bot } = webApp || {};\n    const isInstalled = Boolean(bot && global.attachMenu.bots[bot.id]);\n    const chat = selectCurrentChat(global);\n    const theme = selectTheme(global);\n\n    return {\n      isInstalled,\n      chat,\n      theme,\n    };\n  },\n)(WebAppModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\n\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n  type?: 'game' | 'webApp';\n};\n\nconst BotTrustModal: FC<OwnProps> = ({ bot, type }) => {\n  const { cancelBotTrustRequest, markBotTrusted } = getActions();\n  const lang = useLang();\n  // Keep props a little bit longer, to show correct text on closing animation\n  const previousBot = usePrevious(bot, false);\n  const previousType = usePrevious(type, false);\n  const currentBot = bot || previousBot;\n  const currentType = type || previousType;\n\n  const handleBotTrustAccept = useCallback(() => {\n    markBotTrusted({ botId: bot!.id });\n  }, [markBotTrusted, bot]);\n\n  const title = currentType === 'game' ? lang('AppName') : lang('BotOpenPageTitle');\n  const text = currentType === 'game' ? lang('BotPermissionGameAlert', getUserFullName(currentBot))\n    : lang('BotOpenPageMessage', getUserFullName(currentBot));\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={cancelBotTrustRequest}\n      confirmHandler={handleBotTrustAccept}\n      title={title}\n      textParts={renderText(text, ['br', 'simple_markdown'])}\n    />\n  );\n};\n\nexport default memo(BotTrustModal);\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\nimport { getActions } from '../../global';\n\nimport type { ApiUser } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport ConfirmDialog from '../ui/ConfirmDialog';\n\nexport type OwnProps = {\n  bot?: ApiUser;\n};\n\nconst BotAttachModal: FC<OwnProps> = ({\n  bot,\n}) => {\n  const { closeBotAttachRequestModal, confirmBotAttachRequest } = getActions();\n\n  const lang = useLang();\n\n  const name = bot?.firstName;\n\n  return (\n    <ConfirmDialog\n      isOpen={Boolean(bot)}\n      onClose={closeBotAttachRequestModal}\n      confirmHandler={confirmBotAttachRequest}\n      title={name}\n      textParts={lang('WebApp.AddToAttachmentText', name)}\n    />\n  );\n};\n\nexport default BotAttachModal;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport type { IAlbum } from '../../types';\n\nimport {\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectUser,\n} from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from './helpers/renderText';\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  message: ApiMessage;\n  album?: IAlbum;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  message,\n  album,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n  } = getActions();\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    deleteMessages({ messageIds, shouldDeleteForAll: true });\n    onClose();\n  }, [deleteMessages, message.id, onClose, album]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    const messageIds = album?.messages\n      ? album.messages.map(({ id }) => id)\n      : [message.id];\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds });\n    } else {\n      deleteMessages({\n        messageIds,\n        shouldDeleteForAll: false,\n      });\n    }\n    onClose();\n  }, [album, message.id, isSchedule, onClose, deleteScheduledMessages, deleteMessages]);\n\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={isOpen && !canDeleteForAll ? handleDeleteMessageForSelf : undefined}\n      className=\"delete\"\n      title={lang('DeleteSingleMessagesTitle')}\n    >\n      <p>{lang('AreYouSureDeleteSingleMessage')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>{lang('lng_delete_for_me_chat_hint', 1, 'i')}</p>\n      )}\n      {willDeleteForAll && (\n        <p>{lang('lng_delete_for_everyone_hint', 1, 'i')}</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName && renderText(lang('Conversation.DeleteMessagesFor', contactName))}\n          {!contactName && lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, isSchedule }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const { canDeleteForAll } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const chat = selectChat(global, message.chatId);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectChat, selectIsChatWithSelf, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  messageId: number;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  isChannel: boolean;\n  isPrivateChat: boolean;\n  isChatWithSelf: boolean;\n  isGroup: boolean;\n  isSuperGroup: boolean;\n  canPinForAll: boolean;\n  contactName?: string;\n};\n\nconst PinMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  messageId,\n  chatId,\n  isChannel,\n  isGroup,\n  isSuperGroup,\n  canPinForAll,\n  contactName,\n  onClose,\n}) => {\n  const { pinMessage } = getActions();\n\n  const handlePinMessageForAll = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false,\n    });\n    onClose();\n  }, [pinMessage, chatId, messageId, onClose]);\n\n  const handlePinMessage = useCallback(() => {\n    pinMessage({\n      chatId, messageId, isUnpin: false, isOneSide: true, isSilent: true,\n    });\n    onClose();\n  }, [chatId, messageId, onClose, pinMessage]);\n\n  const lang = useLang();\n\n  function renderMessage() {\n    if (isChannel) {\n      return lang('PinMessageAlertChannel');\n    }\n\n    if (isGroup || isSuperGroup) {\n      return lang('PinMessageAlert');\n    }\n\n    return lang('PinMessageAlertChat');\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"pin\"\n      title={lang('PinMessageAlertTitle')}\n    >\n      <p>{renderMessage()}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessage}>\n        {lang('DialogPin')}\n      </Button>\n      {canPinForAll && (\n        <Button className=\"confirm-dialog-button\" isText onClick={handlePinMessageForAll}>\n          {contactName\n            ? renderText(lang('Conversation.PinMessagesFor', contactName))\n            : lang('Conversation.PinMessageAlert.PinAndNotifyMembers')}\n        </Button>\n      )}\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const isPrivateChat = isUserId(chatId);\n    const isChatWithSelf = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n    const isChannel = Boolean(chat) && isChatChannel(chat);\n    const isGroup = Boolean(chat) && isChatBasicGroup(chat);\n    const isSuperGroup = Boolean(chat) && isChatSuperGroup(chat);\n    const canPinForAll = (isPrivateChat && !isChatWithSelf) || isSuperGroup || isGroup;\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    return {\n      isPrivateChat,\n      isChatWithSelf,\n      isChannel,\n      isGroup,\n      isSuperGroup,\n      canPinForAll,\n      contactName,\n    };\n  },\n)(PinMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId?: string;\n  pinnedMessagesCount?: number;\n  onClose: () => void;\n  onUnpin: () => void;\n};\n\nconst UnpinAllMessagesModal: FC<OwnProps> = ({\n  isOpen,\n  pinnedMessagesCount = 0,\n  onClose,\n  onUnpin,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      className=\"unpin-all\"\n      title={lang('Chat.PanelUnpinAllMessages')}\n    >\n      <p>{lang('Chat.UnpinAllMessagesConfirmation', pinnedMessagesCount, 'i')}</p>\n      <Button className=\"confirm-dialog-button\" isText onClick={onUnpin}>\n        {lang('DialogUnpin')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(UnpinAllMessagesModal);\n","import { useHotkeys } from '../../../hooks/useHotkeys';\n\nconst useCopySelectedMessages = (isActive: boolean, copySelectedMessages: NoneToVoidFunction) => {\n  function handleCopy(e: KeyboardEvent) {\n    if (!isActive) {\n      return;\n    }\n\n    e.preventDefault();\n    copySelectedMessages();\n  }\n\n  useHotkeys({ 'Meta+C': handleCopy });\n};\n\nexport default useCopySelectedMessages;\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { selectCanDeleteSelectedMessages, selectCurrentChat, selectUser } from '../../global/selectors';\nimport {\n  isUserId,\n  getUserFirstOrLastName,\n  getPrivateChatUserId,\n  isChatBasicGroup,\n  isChatSuperGroup,\n} from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport usePrevious from '../../hooks/usePrevious';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isSchedule: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  selectedMessageIds?: number[];\n  canDeleteForAll?: boolean;\n  contactName?: string;\n  willDeleteForCurrentUserOnly?: boolean;\n  willDeleteForAll?: boolean;\n};\n\nconst DeleteSelectedMessageModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  isSchedule,\n  selectedMessageIds,\n  canDeleteForAll,\n  contactName,\n  willDeleteForCurrentUserOnly,\n  willDeleteForAll,\n  onClose,\n}) => {\n  const {\n    deleteMessages,\n    deleteScheduledMessages,\n    exitMessageSelectMode,\n  } = getActions();\n\n  const prevIsOpen = usePrevious(isOpen);\n\n  const handleDeleteMessageForAll = useCallback(() => {\n    onClose();\n    deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: true });\n  }, [deleteMessages, selectedMessageIds, onClose]);\n\n  const handleDeleteMessageForSelf = useCallback(() => {\n    if (isSchedule) {\n      deleteScheduledMessages({ messageIds: selectedMessageIds });\n    } else {\n      deleteMessages({ messageIds: selectedMessageIds, shouldDeleteForAll: false });\n    }\n\n    onClose();\n  }, [isSchedule, onClose, deleteScheduledMessages, selectedMessageIds, deleteMessages]);\n\n  const lang = useLang();\n\n  // Returning `undefined` from FC instead of `<Modal>` doesn't trigger useHistoryBack\n  useEffect(() => {\n    if (!isOpen && prevIsOpen) {\n      exitMessageSelectMode();\n    }\n  }, [exitMessageSelectMode, isOpen, prevIsOpen]);\n\n  if (!selectedMessageIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onEnter={canDeleteForAll ? undefined : handleDeleteMessageForSelf}\n      className=\"delete\"\n      title={lang('Conversation.DeleteManyMessages')}\n    >\n      <p>{lang('AreYouSureDeleteFewMessages')}</p>\n      {willDeleteForCurrentUserOnly && (\n        <p>This will delete them just for you, not for other participants in the chat.</p>\n      )}\n      {willDeleteForAll && (\n        <p>This will delete them for everyone in this chat.</p>\n      )}\n      {canDeleteForAll && (\n        <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForAll}>\n          {contactName\n            ? renderText(lang('ChatList.DeleteForEveryone', contactName))\n            : lang('Conversation.DeleteMessagesForEveryone')}\n        </Button>\n      )}\n      <Button color=\"danger\" className=\"confirm-dialog-button\" isText onClick={handleDeleteMessageForSelf}>\n        {lang(canDeleteForAll ? 'ChatList.DeleteForCurrentUser' : 'Delete')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { isSchedule }): StateProps => {\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const { canDeleteForAll } = selectCanDeleteSelectedMessages(global);\n    const chat = selectCurrentChat(global);\n    const contactName = chat && isUserId(chat.id)\n      ? getUserFirstOrLastName(selectUser(global, getPrivateChatUserId(chat)!))\n      : undefined;\n\n    const willDeleteForCurrentUserOnly = chat && isChatBasicGroup(chat) && !canDeleteForAll;\n    const willDeleteForAll = chat && isChatSuperGroup(chat);\n\n    return {\n      selectedMessageIds,\n      canDeleteForAll: !isSchedule && canDeleteForAll,\n      contactName,\n      willDeleteForCurrentUserOnly,\n      willDeleteForAll,\n    };\n  },\n)(DeleteSelectedMessageModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { MessageListType } from '../../global/types';\n\nimport {\n  selectCanDeleteSelectedMessages,\n  selectCanDownloadSelectedMessages,\n  selectCanReportSelectedMessages,\n  selectCurrentMessageList,\n  selectHasProtectedMessage,\n  selectSelectedMessagesCount,\n} from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport captureKeyboardListeners from '../../util/captureKeyboardListeners';\nimport buildClassName from '../../util/buildClassName';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\nimport useCopySelectedMessages from './hooks/useCopySelectedMessages';\n\nimport Button from '../ui/Button';\n\nimport DeleteSelectedMessageModal from './DeleteSelectedMessageModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './MessageSelectToolbar.scss';\n\nexport type OwnProps = {\n  isActive?: boolean;\n  canPost?: boolean;\n  messageListType?: MessageListType;\n};\n\ntype StateProps = {\n  isSchedule: boolean;\n  selectedMessagesCount?: number;\n  canDeleteMessages?: boolean;\n  canReportMessages?: boolean;\n  canDownloadMessages?: boolean;\n  hasProtectedMessage?: boolean;\n  selectedMessageIds?: number[];\n};\n\nconst MessageSelectToolbar: FC<OwnProps & StateProps> = ({\n  canPost,\n  isActive,\n  messageListType,\n  isSchedule,\n  selectedMessagesCount,\n  canDeleteMessages,\n  canReportMessages,\n  canDownloadMessages,\n  hasProtectedMessage,\n  selectedMessageIds,\n}) => {\n  const {\n    exitMessageSelectMode,\n    openForwardMenuForSelectedMessages,\n    downloadSelectedMessages,\n    copySelectedMessages,\n    showNotification,\n  } = getActions();\n  const lang = useLang();\n\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isReportModalOpen, openReportModal, closeReportModal] = useFlag();\n\n  useCopySelectedMessages(Boolean(isActive), copySelectedMessages);\n  useEffect(() => {\n    return isActive && !isDeleteModalOpen && !isReportModalOpen\n      ? captureKeyboardListeners({\n        onBackspace: openDeleteModal,\n        onDelete: openDeleteModal,\n        onEsc: exitMessageSelectMode,\n      })\n      : undefined;\n  }, [isActive, isDeleteModalOpen, isReportModalOpen, openDeleteModal, exitMessageSelectMode]);\n\n  const handleCopy = useCallback(() => {\n    copySelectedMessages();\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    exitMessageSelectMode();\n  }, [copySelectedMessages, exitMessageSelectMode, lang, showNotification]);\n\n  const handleDownload = useCallback(() => {\n    downloadSelectedMessages();\n    exitMessageSelectMode();\n  }, [downloadSelectedMessages, exitMessageSelectMode]);\n\n  const prevSelectedMessagesCount = usePrevious(selectedMessagesCount || undefined, true);\n  const renderingSelectedMessagesCount = isActive ? selectedMessagesCount : prevSelectedMessagesCount;\n\n  const formattedMessagesCount = lang('VoiceOver.Chat.MessagesSelected', renderingSelectedMessagesCount, 'i');\n\n  const className = buildClassName(\n    'MessageSelectToolbar',\n    canPost && 'with-composer',\n    isActive && 'shown',\n  );\n\n  const renderButton = (\n    icon: string, label: string, onClick: AnyToVoidFunction, disabled?: boolean, destructive?: boolean,\n  ) => {\n    return (\n      <div\n        role=\"button\"\n        tabIndex={0}\n        className={buildClassName(\n          'item',\n          disabled && 'disabled',\n          destructive && 'destructive',\n        )}\n        onClick={!disabled ? onClick : undefined}\n        title={label}\n      >\n        <i className={`icon-${icon}`} />\n      </div>\n    );\n  };\n\n  return (\n    <div className={className}>\n      <div className=\"MessageSelectToolbar-inner\">\n        <Button\n          color=\"translucent\"\n          round\n          onClick={exitMessageSelectMode}\n          ariaLabel=\"Exit select mode\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <span className=\"MessageSelectToolbar-count\" title={formattedMessagesCount}>\n          {formattedMessagesCount}\n        </span>\n\n        {Boolean(selectedMessagesCount) && (\n          <div className=\"MessageSelectToolbar-actions\">\n            {messageListType !== 'scheduled' && (\n              renderButton(\n                'forward', lang('Chat.ForwardActionHeader'), openForwardMenuForSelectedMessages, hasProtectedMessage,\n              )\n            )}\n            {canReportMessages && (\n              renderButton('flag', lang('Conversation.ReportMessages'), openReportModal)\n            )}\n            {canDownloadMessages && (\n              renderButton('download', lang('lng_media_download'), handleDownload, hasProtectedMessage)\n            )}\n            {renderButton('copy', lang('lng_context_copy_selected_items'), handleCopy, hasProtectedMessage)}\n            {renderButton('delete', lang('EditAdminGroupDeleteMessages'), openDeleteModal, !canDeleteMessages, true)}\n          </div>\n        )}\n      </div>\n      <DeleteSelectedMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={isSchedule}\n        onClose={closeDeleteModal}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={selectedMessageIds}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { type: messageListType, chatId } = selectCurrentMessageList(global) || {};\n    const { canDelete } = selectCanDeleteSelectedMessages(global);\n    const canReport = selectCanReportSelectedMessages(global);\n    const canDownload = selectCanDownloadSelectedMessages(global);\n    const { messageIds: selectedMessageIds } = global.selectedMessages || {};\n    const hasProtectedMessage = chatId ? selectHasProtectedMessage(global, chatId, selectedMessageIds) : false;\n\n    return {\n      isSchedule: messageListType === 'scheduled',\n      selectedMessagesCount: selectSelectedMessagesCount(global),\n      canDeleteMessages: canDelete,\n      canReportMessages: canReport,\n      canDownloadMessages: canDownload,\n      selectedMessageIds,\n      hasProtectedMessage,\n    };\n  },\n)(MessageSelectToolbar));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useCurrentOrPrev from '../../hooks/useCurrentOrPrev';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport PrivateChatInfo from './PrivateChatInfo';\nimport ListItem from '../ui/ListItem';\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = {\n  memberIds?: string[];\n};\n\nconst CLOSE_ANIMATION_DURATION = 100;\n\nconst SeenByModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  memberIds,\n}) => {\n  const {\n    openChat,\n    closeSeenByModal,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleClick = useCallback((userId: string) => {\n    closeSeenByModal();\n\n    setTimeout(() => {\n      openChat({ id: userId });\n    }, CLOSE_ANIMATION_DURATION);\n  }, [closeSeenByModal, openChat]);\n\n  const renderingMemberIds = useCurrentOrPrev(memberIds, true);\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={closeSeenByModal}\n      className=\"narrow\"\n      title={`Seen by ${memberIds?.length} users`}\n    >\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {renderingMemberIds && renderingMemberIds.map((userId) => (\n          <ListItem\n            key={userId}\n            className=\"chat-item-clickable scroll-item small-icon\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(userId)}\n          >\n            <PrivateChatInfo userId={userId} noStatusOrTyping />\n          </ListItem>\n        ))}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeSeenByModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.seenByModal || {};\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    return {\n      memberIds: selectChatMessage(global, chatId, messageId)?.seenByUserIds,\n    };\n  },\n)(SeenByModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect, useState, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage } from '../../api/types';\nimport { LoadMoreDirection } from '../../types';\n\nimport useLang from '../../hooks/useLang';\nimport { selectChatMessage } from '../../global/selectors';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { getUserFullName } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useFlag from '../../hooks/useFlag';\nimport buildClassName from '../../util/buildClassName';\nimport { formatIntegerCompact } from '../../util/textFormat';\nimport { unique } from '../../util/iteratees';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Avatar from '../common/Avatar';\nimport ListItem from '../ui/ListItem';\nimport ReactionStaticEmoji from '../common/ReactionStaticEmoji';\nimport Loading from '../ui/Loading';\n\nimport './ReactorListModal.scss';\n\nconst MIN_REACTIONS_COUNT_FOR_FILTERS = 10;\n\nexport type OwnProps = {\n  isOpen: boolean;\n};\n\nexport type StateProps = Pick<ApiMessage, 'reactors' | 'reactions' | 'seenByUserIds'> & {\n  chatId?: string;\n  messageId?: number;\n};\n\nconst ReactorListModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  reactors,\n  reactions,\n  chatId,\n  messageId,\n  seenByUserIds,\n}) => {\n  const {\n    loadReactors,\n    closeReactorListModal,\n    openChat,\n  } = getActions();\n\n  // No need for expensive global updates on users, so we avoid them\n  const usersById = getGlobal().users.byId;\n\n  const lang = useLang();\n  const [isClosing, startClosing, stopClosing] = useFlag(false);\n  const [chosenTab, setChosenTab] = useState<string | undefined>(undefined);\n  const canShowFilters = reactors && reactions && reactors.count >= MIN_REACTIONS_COUNT_FOR_FILTERS\n    && reactions.results.length > 1;\n  const chatIdRef = useRef<string>();\n\n  useEffect(() => {\n    if (isClosing && !isOpen) {\n      stopClosing();\n      setChosenTab(undefined);\n    }\n  }, [isClosing, isOpen, stopClosing]);\n\n  const handleCloseAnimationEnd = useCallback(() => {\n    if (chatIdRef.current) {\n      openChat({ id: chatIdRef.current });\n    }\n    closeReactorListModal();\n  }, [closeReactorListModal, openChat]);\n\n  const handleClose = useCallback(() => {\n    startClosing();\n  }, [startClosing]);\n\n  const handleClick = useCallback((userId: string) => {\n    chatIdRef.current = userId;\n    handleClose();\n  }, [handleClose]);\n\n  const handleLoadMore = useCallback(() => {\n    loadReactors({\n      chatId,\n      messageId,\n    });\n  }, [chatId, loadReactors, messageId]);\n\n  const allReactions = useMemo(() => {\n    return reactors?.reactions ? unique(reactors.reactions.map((l) => l.reaction)) : [];\n  }, [reactors?.reactions]);\n\n  const userIds = useMemo(() => {\n    if (chosenTab) {\n      return reactors?.reactions.filter((l) => l.reaction === chosenTab).map((l) => l.userId);\n    }\n    return unique(reactors?.reactions.map((l) => l.userId).concat(seenByUserIds || []) || []);\n  }, [chosenTab, reactors?.reactions, seenByUserIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(\n    handleLoadMore, userIds, reactors && reactors.nextOffset === undefined,\n  );\n\n  useEffect(() => {\n    getMore?.({ direction: LoadMoreDirection.Backwards });\n  }, [getMore]);\n\n  return (\n    <Modal\n      isOpen={isOpen && !isClosing}\n      onClose={handleClose}\n      className=\"ReactorListModal narrow\"\n      title={lang('Reactions')}\n      onCloseAnimationEnd={handleCloseAnimationEnd}\n    >\n      {canShowFilters && (\n        <div className=\"Reactions\">\n          <Button\n            className={buildClassName(!chosenTab && 'chosen')}\n            size=\"tiny\"\n            ripple\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => setChosenTab(undefined)}\n          >\n            <i className=\"icon-heart\" />\n            {reactors?.count && formatIntegerCompact(reactors.count)}\n          </Button>\n          {allReactions.map((reaction) => {\n            const count = reactions?.results.find((l) => l.reaction === reaction)?.count;\n            return (\n              <Button\n                className={buildClassName(chosenTab === reaction && 'chosen')}\n                size=\"tiny\"\n                ripple\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => setChosenTab(reaction)}\n              >\n                <ReactionStaticEmoji reaction={reaction} className=\"reaction-filter-emoji\" />\n                {count && formatIntegerCompact(count)}\n              </Button>\n            );\n          })}\n        </div>\n      )}\n\n      <div dir={lang.isRtl ? 'rtl' : undefined}>\n        {viewportIds?.length ? (\n          <InfiniteScroll\n            className=\"reactor-list custom-scroll\"\n            items={viewportIds}\n            onLoadMore={getMore}\n          >\n            {viewportIds?.map(\n              (userId) => {\n                const user = usersById[userId];\n                const fullName = getUserFullName(user);\n                const reaction = reactors?.reactions.find((l) => l.userId === userId)?.reaction;\n                return (\n                  <ListItem\n                    key={userId}\n                    className=\"chat-item-clickable reactors-list-item\"\n                    // eslint-disable-next-line react/jsx-no-bind\n                    onClick={() => handleClick(userId)}\n                  >\n                    <Avatar user={user} size=\"medium\" />\n                    <div className=\"title\">\n                      <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n                    </div>\n                    {reaction && <ReactionStaticEmoji className=\"reactors-list-emoji\" reaction={reaction} />}\n                  </ListItem>\n                );\n              },\n            )}\n          </InfiniteScroll>\n        ) : <Loading />}\n      </div>\n      <Button\n        className=\"confirm-dialog-button\"\n        isText\n        onClick={closeReactorListModal}\n      >\n        {lang('Close')}\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId, messageId } = global.reactorModal || {};\n    const message = chatId && messageId ? selectChatMessage(global, chatId, messageId) : undefined;\n\n    return {\n      chatId,\n      messageId,\n      reactions: message?.reactions,\n      reactors: message?.reactors,\n      seenByUserIds: message?.seenByUserIds,\n    };\n  },\n)(ReactorListModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ActiveEmojiInteraction } from '../../global/types';\n\nimport { IS_ANDROID } from '../../util/environment';\nimport useFlag from '../../hooks/useFlag';\nimport useMedia from '../../hooks/useMedia';\nimport buildClassName from '../../util/buildClassName';\nimport {\n  selectAnimatedEmojiEffect,\n} from '../../global/selectors';\nimport { LOCAL_TGS_URLS } from '../common/helpers/animatedAssets';\nimport { dispatchHeavyAnimationEvent } from '../../hooks/useHeavyAnimationCheck';\n\nimport AnimatedSticker from '../common/AnimatedSticker';\n\nimport './EmojiInteractionAnimation.scss';\n\nexport type OwnProps = {\n  activeEmojiInteraction: ActiveEmojiInteraction;\n};\n\ntype StateProps = {\n  effectAnimationId?: string;\n  localEffectAnimation?: string;\n};\n\nconst HIDE_ANIMATION_DURATION = 250;\nconst PLAYING_DURATION = 3000;\nconst EFFECT_SIZE = 240;\n\nconst EmojiInteractionAnimation: FC<OwnProps & StateProps> = ({\n  effectAnimationId,\n  localEffectAnimation,\n  activeEmojiInteraction,\n}) => {\n  const { stopActiveEmojiInteraction } = getActions();\n\n  const [isHiding, startHiding] = useFlag(false);\n  const [isPlaying, startPlaying] = useFlag(false);\n  const timeoutRef = useRef<NodeJS.Timeout>();\n\n  const stop = useCallback(() => {\n    startHiding();\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    setTimeout(() => {\n      stopActiveEmojiInteraction({ id: activeEmojiInteraction.id });\n    }, HIDE_ANIMATION_DURATION);\n  }, [activeEmojiInteraction.id, startHiding, stopActiveEmojiInteraction]);\n\n  const handleCancelAnimation = useCallback((e: UIEvent) => {\n    if (!(e.target as HTMLElement)?.closest('.AnimatedEmoji')) {\n      stop();\n    }\n  }, [stop]);\n\n  useEffect(() => {\n    document.addEventListener('touchstart', handleCancelAnimation);\n    document.addEventListener('touchmove', handleCancelAnimation);\n    document.addEventListener('mousedown', handleCancelAnimation);\n    document.addEventListener('wheel', handleCancelAnimation);\n\n    return () => {\n      document.removeEventListener('touchstart', handleCancelAnimation);\n      document.removeEventListener('touchmove', handleCancelAnimation);\n      document.removeEventListener('mousedown', handleCancelAnimation);\n      document.removeEventListener('wheel', handleCancelAnimation);\n    };\n  }, [handleCancelAnimation]);\n\n  useLayoutEffect(() => {\n    const dispatchHeavyAnimationStop = dispatchHeavyAnimationEvent();\n\n    timeoutRef.current = setTimeout(() => {\n      stop();\n      dispatchHeavyAnimationStop();\n    }, PLAYING_DURATION);\n  }, [stop]);\n\n  const effectTgsUrl = useMedia(`sticker${effectAnimationId}`, !effectAnimationId);\n\n  if (!activeEmojiInteraction.startSize) {\n    return undefined;\n  }\n\n  const scale = (activeEmojiInteraction.startSize || 0) / EFFECT_SIZE;\n  const tgsUrl = localEffectAnimation && (localEffectAnimation in LOCAL_TGS_URLS)\n    ? LOCAL_TGS_URLS[localEffectAnimation as keyof typeof LOCAL_TGS_URLS]\n    : effectTgsUrl;\n\n  return (\n    <div\n      className={buildClassName(\n        'EmojiInteractionAnimation',\n        isHiding && 'hiding',\n        isPlaying && 'playing',\n        activeEmojiInteraction.isReversed && 'reversed',\n      )}\n      style={`--scale: ${scale}; --start-x: ${activeEmojiInteraction.x}px; --start-y: ${activeEmojiInteraction.y}px;`}\n    >\n      <AnimatedSticker\n        key={`effect_${effectAnimationId}`}\n        size={EFFECT_SIZE}\n        tgsUrl={tgsUrl}\n        play={isPlaying}\n        quality={IS_ANDROID ? 0.5 : undefined}\n        forceOnHeavyAnimation\n        noLoop\n        onLoad={startPlaying}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { activeEmojiInteraction }): StateProps => {\n    const animatedEffect = activeEmojiInteraction.animatedEffect !== undefined\n      && selectAnimatedEmojiEffect(global, activeEmojiInteraction.animatedEffect);\n    return {\n      effectAnimationId: animatedEffect ? animatedEffect.id : undefined,\n      localEffectAnimation: !animatedEffect && activeEmojiInteraction.animatedEffect\n      && Object.keys(LOCAL_TGS_URLS).includes(activeEmojiInteraction.animatedEffect)\n        ? activeEmojiInteraction.animatedEffect : undefined,\n    };\n  },\n)(EmojiInteractionAnimation));\n","import { useCallback, useEffect, useRef } from '../lib/teact/teact';\n\nconst useSendWithEnter = (\n  onSelect: NoneToVoidFunction,\n) => {\n  // eslint-disable-next-line no-null/no-null\n  const buttonRef = useRef<HTMLDivElement>(null);\n\n  const handleKeyDown = useCallback((e: KeyboardEvent) => {\n    if (e.key !== 'Enter') return;\n    const isFocused = buttonRef.current === document.activeElement;\n\n    if (isFocused) {\n      onSelect();\n    }\n  }, [onSelect]);\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown, false);\n\n    return () => window.removeEventListener('keydown', handleKeyDown, false);\n  }, [handleKeyDown]);\n\n  return buttonRef;\n};\n\nexport default useSendWithEnter;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\n\nimport useChatContextActions from '../../../hooks/useChatContextActions';\nimport useFlag from '../../../hooks/useFlag';\nimport { isUserId, getPrivateChatUserId, selectIsChatMuted } from '../../../global/helpers';\nimport {\n  selectChat, selectUser, selectIsChatPinned, selectNotifySettings, selectNotifyExceptions,\n} from '../../../global/selectors';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport DeleteChatModal from '../../common/DeleteChatModal';\nimport ListItem from '../../ui/ListItem';\nimport ChatFolderModal from '../ChatFolderModal.async';\n\ntype OwnProps = {\n  chatId: string;\n  withUsername?: boolean;\n  onClick: (id: string) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  user?: ApiUser;\n  isPinned?: boolean;\n  isMuted?: boolean;\n  canChangeFolder?: boolean;\n};\n\nconst LeftSearchResultChat: FC<OwnProps & StateProps> = ({\n  chatId,\n  withUsername,\n  onClick,\n  chat,\n  user,\n  isPinned,\n  isMuted,\n  canChangeFolder,\n}) => {\n  const [isDeleteModalOpen, openDeleteModal, closeDeleteModal] = useFlag();\n  const [isChatFolderModalOpen, openChatFolderModal, closeChatFolderModal] = useFlag();\n\n  const contextActions = useChatContextActions({\n    chat,\n    user,\n    isPinned,\n    isMuted,\n    canChangeFolder,\n    handleDelete: openDeleteModal,\n    handleChatFolderChange: openChatFolderModal,\n  }, true);\n\n  const handleClick = useCallback(() => {\n    onClick(chatId);\n  }, [chatId, onClick]);\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"chat-item-clickable search-result\"\n      onClick={handleClick}\n      contextActions={contextActions}\n      buttonRef={buttonRef}\n    >\n      {isUserId(chatId) ? (\n        <PrivateChatInfo userId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      ) : (\n        <GroupChatInfo chatId={chatId} withUsername={withUsername} avatarSize=\"large\" />\n      )}\n      <DeleteChatModal\n        isOpen={isDeleteModalOpen}\n        onClose={closeDeleteModal}\n        chat={chat}\n      />\n      <ChatFolderModal\n        isOpen={isChatFolderModalOpen}\n        onClose={closeChatFolderModal}\n        chatId={chatId}\n      />\n    </ListItem>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const privateChatUserId = chat && getPrivateChatUserId(chat);\n    const user = privateChatUserId ? selectUser(global, privateChatUserId) : undefined;\n    const isPinned = selectIsChatPinned(global, chatId);\n    const isMuted = chat\n      ? selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global))\n      : undefined;\n\n    return {\n      chat,\n      user,\n      isPinned,\n      isMuted,\n      canChangeFolder: Boolean(global.chatFolders.orderedIds?.length),\n    };\n  },\n)(LeftSearchResultChat));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, useCallback, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { getUserFirstOrLastName } from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport { throttle } from '../../../util/schedulers';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\nimport LeftSearchResultChat from './LeftSearchResultChat';\n\nimport './RecentContacts.scss';\n\ntype OwnProps = {\n  onReset: () => void;\n};\n\ntype StateProps = {\n  topUserIds?: string[];\n  usersById: Record<string, ApiUser>;\n  recentlyFoundChatIds?: string[];\n};\n\nconst SEARCH_CLOSE_TIMEOUT_MS = 250;\nconst NBSP = '\\u00A0';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst RecentContacts: FC<OwnProps & StateProps> = ({\n  topUserIds, usersById, recentlyFoundChatIds,\n  onReset,\n}) => {\n  const {\n    loadTopUsers, openChat,\n    addRecentlyFoundChatId, clearRecentlyFoundChats,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const topUsersRef = useRef<HTMLDivElement>(null);\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadTopUsers();\n    });\n  }, [loadTopUsers]);\n\n  useHorizontalScroll(topUsersRef.current, !topUserIds);\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n    onReset();\n    setTimeout(() => {\n      addRecentlyFoundChatId({ id });\n    }, SEARCH_CLOSE_TIMEOUT_MS);\n  }, [openChat, addRecentlyFoundChatId, onReset]);\n\n  const lang = useLang();\n\n  return (\n    <div className=\"RecentContacts custom-scroll\">\n      {topUserIds && (\n        <div className=\"top-peers-section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <div ref={topUsersRef} className=\"top-peers no-selection\">\n            {topUserIds.map((userId) => (\n              <div className=\"top-peer-item\" onClick={() => handleClick(userId)} dir={lang.isRtl ? 'rtl' : undefined}>\n                <Avatar user={usersById[userId]} />\n                <div className=\"top-peer-name\">{renderText(getUserFirstOrLastName(usersById[userId]) || NBSP)}</div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )}\n      {recentlyFoundChatIds && (\n        <div className=\"search-section pt-1\">\n          <h3 className=\"section-heading mt-0 recent-chats-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('Recent')}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              ariaLabel=\"Clear recent chats\"\n              onClick={clearRecentlyFoundChats}\n              isRtl={lang.isRtl}\n            >\n              <i className=\"icon-close\" />\n            </Button>\n          </h3>\n          {recentlyFoundChatIds.map((id) => (\n            <LeftSearchResultChat\n              chatId={id}\n              onClick={handleClick}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: topUserIds } = global.topPeers;\n    const usersById = global.users.byId;\n    const { recentlyFoundChatIds } = global.globalSearch;\n\n    return {\n      topUserIds,\n      usersById,\n      recentlyFoundChatIds,\n    };\n  },\n)(RecentContacts));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type {\n  ApiChat, ApiUser, ApiMessage, ApiMessageOutgoingStatus,\n} from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport {\n  getChatTitle,\n  getPrivateChatUserId,\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { selectChat, selectUser } from '../../../global/selectors';\nimport buildClassName from '../../../util/buildClassName';\nimport renderText from '../../common/helpers/renderText';\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport useMedia from '../../../hooks/useMedia';\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport useSelectWithEnter from '../../../hooks/useSelectWithEnter';\n\nimport Avatar from '../../common/Avatar';\nimport VerifiedIcon from '../../common/VerifiedIcon';\nimport ListItem from '../../ui/ListItem';\nimport Link from '../../ui/Link';\nimport FakeIcon from '../../common/FakeIcon';\n\nimport './ChatMessage.scss';\n\ntype OwnProps = {\n  searchQuery?: string;\n  message: ApiMessage;\n  chatId: string;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  privateChatUser?: ApiUser;\n  lastMessageOutgoingStatus?: ApiMessageOutgoingStatus;\n  lastSyncTime?: number;\n};\n\nconst ChatMessage: FC<OwnProps & StateProps> = ({\n  message,\n  searchQuery,\n  chatId,\n  chat,\n  privateChatUser,\n  lastSyncTime,\n}) => {\n  const { focusMessage } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    focusMessage({ chatId, messageId: message.id, shouldReplaceHistory: true });\n  }, [chatId, focusMessage, message.id]);\n\n  const lang = useLang();\n\n  const buttonRef = useSelectWithEnter(handleClick);\n\n  if (!chat) {\n    return undefined;\n  }\n\n  return (\n    <ListItem\n      className=\"ChatMessage chat-item-clickable\"\n      ripple={!IS_SINGLE_COLUMN_LAYOUT}\n      onClick={handleClick}\n      buttonRef={buttonRef}\n    >\n      <Avatar\n        chat={chat}\n        user={privateChatUser}\n        isSavedMessages={privateChatUser?.isSelf}\n        lastSyncTime={lastSyncTime}\n      />\n      <div className=\"info\">\n        <div className=\"info-row\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{renderText(getChatTitle(lang, chat, privateChatUser))}</h3>\n            {chat.isVerified && <VerifiedIcon />}\n            {chat.fakeType && <FakeIcon fakeType={chat.fakeType} />}\n          </div>\n          <div className=\"message-date\">\n            <Link className=\"date\">\n              {formatPastTimeShort(lang, message.date * 1000)}\n            </Link>\n          </div>\n\n        </div>\n        <div className=\"subtitle\">\n          <div className=\"message\" dir=\"auto\">\n            {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, searchQuery, isRoundVideo)}\n          </div>\n        </div>\n      </div>\n    </ListItem>\n  );\n};\n\nfunction renderSummary(\n  lang: LangFn, message: ApiMessage, blobUrl?: string, searchQuery?: string, isRoundVideo?: boolean,\n) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message, undefined, searchQuery);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview--image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true, searchQuery)}\n    </span>\n  );\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat) {\n      return {};\n    }\n\n    const privateChatUserId = getPrivateChatUserId(chat);\n\n    return {\n      chat,\n      lastSyncTime: global.lastSyncTime,\n      ...(privateChatUserId && { privateChatUser: selectUser(global, privateChatUserId) }),\n    };\n  },\n)(ChatMessage));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../../lib/teact/teact';\nimport { formatDateToString } from '../../../util/dateFormat';\n\nimport './DateSuggest.scss';\n\nconst SUGGESTION_COUNT = 8;\n\nexport type OwnProps = {\n  searchDate: string;\n  onSelect: (value: Date) => void;\n};\n\nconst DateSuggest: FC<OwnProps> = ({\n  searchDate, onSelect,\n}) => {\n  const suggestions = useMemo(() => getSuggestionsFromDate(searchDate), [searchDate]);\n  return (\n    <section className=\"DateSuggest custom-scroll custom-scroll-x\">\n      {suggestions.map(({ date, text }) => {\n        return (\n          <div\n            onClick={() => onSelect(date)}\n            className=\"date-item\"\n            key={text}\n          >\n            <i className=\"icon-calendar\" />\n            <span>{text}</span>\n          </div>\n        );\n      })}\n    </section>\n  );\n};\n\nfunction getSuggestionsFromDate(searchDate: string) {\n  const hasYear = searchDate.match(/^\\d{2,4}-\\d{2}-\\d{2}$/g);\n  if (hasYear) {\n    const date = new Date(searchDate);\n    return [{ date, text: formatDateToString(date) }];\n  }\n\n  const suggestion = [];\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n  const latestYear = currentDate.getTime() > (new Date(`${currentYear}-${searchDate}`)).getTime()\n    ? currentYear\n    : currentYear - 1;\n\n  for (let i = 0; i < SUGGESTION_COUNT; i++) {\n    const date = new Date(`${latestYear - i}-${searchDate}`);\n    suggestion.push({ date, text: formatDateToString(date) });\n  }\n\n  return suggestion;\n}\n\nexport default memo(DateSuggest);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { unique } from '../../../util/iteratees';\nimport {\n  sortChatIds,\n  filterUsersByName,\n} from '../../../global/helpers';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport LeftSearchResultChat from './LeftSearchResultChat';\nimport RecentContacts from './RecentContacts';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\nimport Link from '../../ui/Link';\nimport NothingFound from '../../common/NothingFound';\nimport PickerSelectedItem from '../../common/PickerSelectedItem';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  searchDate?: number;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  localContactIds?: string[];\n  localChatIds?: string[];\n  localUserIds?: string[];\n  globalChatIds?: string[];\n  globalUserIds?: string[];\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH = 4;\nconst LESS_LIST_ITEMS_AMOUNT = 5;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatResults: FC<OwnProps & StateProps> = ({\n  searchQuery, searchDate, dateSearchQuery, currentUserId,\n  localContactIds, localChatIds, localUserIds, globalChatIds, globalUserIds,\n  foundIds, globalMessagesByChatId, chatsById, fetchingStatus, lastSyncTime,\n  onReset, onSearchDateSelect,\n}) => {\n  const {\n    openChat, addRecentlyFoundChatId, searchMessagesGlobal, setGlobalSearchChatId,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [shouldShowMoreLocal, setShouldShowMoreLocal] = useState<boolean>(false);\n  const [shouldShowMoreGlobal, setShouldShowMoreGlobal] = useState<boolean>(false);\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const handleChatClick = useCallback(\n    (id: string) => {\n      openChat({ id, shouldReplaceHistory: true });\n\n      if (id !== currentUserId) {\n        addRecentlyFoundChatId({ id });\n      }\n\n      if (!IS_SINGLE_COLUMN_LAYOUT) {\n        onReset();\n      }\n    },\n    [currentUserId, openChat, addRecentlyFoundChatId, onReset],\n  );\n\n  const handlePickerItemClick = useCallback((id: string) => {\n    setGlobalSearchChatId({ id });\n  }, [setGlobalSearchChatId]);\n\n  const localResults = useMemo(() => {\n    if (!searchQuery || (searchQuery.startsWith('@') && searchQuery.length < 2)) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const contactIdsWithMe = [\n      ...(currentUserId ? [currentUserId] : []),\n      ...(localContactIds || []),\n    ];\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = filterUsersByName(\n      contactIdsWithMe, usersById, searchQuery, currentUserId, lang('SavedMessages'),\n    );\n\n    return [\n      ...sortChatIds(unique([\n        ...(foundContactIds || []),\n        ...(localChatIds || []),\n        ...(localUserIds || []),\n      ]), chatsById, undefined, currentUserId ? [currentUserId] : undefined),\n    ];\n  }, [searchQuery, currentUserId, localContactIds, lang, localChatIds, localUserIds, chatsById]);\n\n  const globalResults = useMemo(() => {\n    if (!searchQuery || searchQuery.length < MIN_QUERY_LENGTH_FOR_GLOBAL_SEARCH || !globalChatIds || !globalUserIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return sortChatIds(\n      unique([...globalChatIds, ...globalUserIds]),\n      chatsById,\n      true,\n    );\n  }, [chatsById, globalChatIds, globalUserIds, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if ((!searchQuery && !searchDate) || !foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId, searchQuery, searchDate]);\n\n  const handleClickShowMoreLocal = useCallback(() => {\n    setShouldShowMoreLocal(!shouldShowMoreLocal);\n  }, [shouldShowMoreLocal]);\n\n  const handleClickShowMoreGlobal = useCallback(() => {\n    setShouldShowMoreGlobal(!shouldShowMoreGlobal);\n  }, [shouldShowMoreGlobal]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages\n    && !localResults.length && !globalResults.length && !foundMessages.length;\n\n  if (!searchQuery && !searchDate) {\n    return <RecentContacts onReset={onReset} />;\n  }\n\n  return (\n    <InfiniteScroll\n      className=\"LeftSearch custom-scroll\"\n      items={foundMessages}\n      onLoadMore={handleLoadMore}\n      // To prevent scroll jumps caused by delayed local results rendering\n      noScrollRestoreOnTop\n      noFastList\n    >\n      {dateSearchQuery && (\n        <div className=\"chat-selection no-selection no-scrollbar\">\n          <DateSuggest\n            searchDate={dateSearchQuery}\n            onSelect={onSearchDateSelect}\n          />\n        </div>\n      )}\n      {nothingFound && (\n        <NothingFound\n          text={lang('ChatList.Search.NoResults')}\n          description={lang('ChatList.Search.NoResultsDescription')}\n        />\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"chat-selection no-selection no-scrollbar\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {localResults.map((id) => (\n            <PickerSelectedItem\n              chatOrUserId={id}\n              onClick={handlePickerItemClick}\n              clickArg={id}\n            />\n          ))}\n        </div>\n      )}\n      {Boolean(localResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {localResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreLocal}>\n                {lang(shouldShowMoreLocal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionDialogs')}\n          </h3>\n          {localResults.map((id, index) => {\n            if (!shouldShowMoreLocal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(globalResults.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>\n            {globalResults.length > LESS_LIST_ITEMS_AMOUNT && (\n              <Link onClick={handleClickShowMoreGlobal}>\n                {lang(shouldShowMoreGlobal ? 'ChatList.Search.ShowLess' : 'ChatList.Search.ShowMore')}\n              </Link>\n            )}\n            {lang('DialogList.SearchSectionGlobal')}\n          </h3>\n          {globalResults.map((id, index) => {\n            if (!shouldShowMoreGlobal && index >= LESS_LIST_ITEMS_AMOUNT) {\n              return undefined;\n            }\n\n            return (\n              <LeftSearchResultChat\n                chatId={id}\n                withUsername\n                onClick={handleChatClick}\n              />\n            );\n          })}\n        </div>\n      )}\n      {Boolean(foundMessages.length) && (\n        <div className=\"search-section\">\n          <h3 className=\"section-heading\" dir={lang.isRtl ? 'auto' : undefined}>{lang('SearchMessages')}</h3>\n          {foundMessages.map(renderFoundMessage)}\n        </div>\n      )}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n\n    const { userIds: localContactIds } = global.contactList || {};\n\n    if (!localContactIds) {\n      return {\n        chatsById,\n      };\n    }\n\n    const {\n      currentUserId, messages, lastSyncTime,\n    } = global;\n    const {\n      fetchingStatus, globalResults, localResults, resultsByType,\n    } = global.globalSearch;\n    const { chatIds: globalChatIds, userIds: globalUserIds } = globalResults || {};\n    const { chatIds: localChatIds, userIds: localUserIds } = localResults || {};\n    const { byChatId: globalMessagesByChatId } = messages;\n    const foundIds = resultsByType?.text?.foundIds;\n\n    return {\n      currentUserId,\n      localContactIds,\n      localChatIds,\n      localUserIds,\n      globalChatIds,\n      globalUserIds,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport ChatMessage from './ChatMessage';\nimport DateSuggest from './DateSuggest';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  dateSearchQuery?: string;\n  onReset: () => void;\n  onSearchDateSelect: (value: Date) => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  foundIds?: string[];\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  chatsById: Record<string, ApiChat>;\n  fetchingStatus?: { chats?: boolean; messages?: boolean };\n  lastSyncTime?: number;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst ChatMessageResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  currentUserId,\n  dateSearchQuery,\n  foundIds,\n  globalMessagesByChatId,\n  chatsById,\n  fetchingStatus,\n  lastSyncTime,\n  onSearchDateSelect,\n}) => {\n  const { searchMessagesGlobal } = getActions();\n\n  const lang = useLang();\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: 'text',\n          query: searchQuery,\n          chatId: currentUserId,\n        });\n      });\n    }\n  }, [currentUserId, lastSyncTime, searchMessagesGlobal, searchQuery]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || foundIds.length === 0) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds\n      .map((id) => {\n        const [chatId, messageId] = id.split('_');\n\n        return globalMessagesByChatId?.[chatId]?.byId[Number(messageId)];\n      })\n      .filter<ApiMessage>(Boolean as any)\n      .sort((a, b) => b.date - a.date);\n  }, [foundIds, globalMessagesByChatId]);\n\n  function renderFoundMessage(message: ApiMessage) {\n    const text = renderMessageSummary(lang, message);\n    const chat = chatsById[message.chatId];\n\n    if (!text || !chat) {\n      return undefined;\n    }\n\n    return (\n      <ChatMessage\n        chatId={message.chatId}\n        message={message}\n        searchQuery={searchQuery}\n      />\n    );\n  }\n\n  const nothingFound = fetchingStatus && !fetchingStatus.chats && !fetchingStatus.messages && !foundMessages.length;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content custom-scroll chat-list\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {dateSearchQuery && (\n          <div className=\"chat-selection no-selection no-scrollbar\">\n            <DateSuggest\n              searchDate={dateSearchQuery}\n              onSelect={onSearchDateSelect}\n            />\n          </div>\n        )}\n        {nothingFound && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {foundMessages.map(renderFoundMessage)}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: chatsById } = global.chats;\n    const { currentUserId, messages: { byChatId: globalMessagesByChatId }, lastSyncTime } = global;\n    const { fetchingStatus, resultsByType } = global.globalSearch;\n\n    const { foundIds } = (resultsByType?.text) || {};\n\n    return {\n      currentUserId,\n      foundIds,\n      globalMessagesByChatId,\n      chatsById,\n      fetchingStatus,\n      lastSyncTime,\n    };\n  },\n)(ChatMessageResults));\n","import type { GlobalState } from '../../../../global/types';\nimport type {\n  ApiChat, ApiGlobalMessageSearchType, ApiMessage, ApiUser,\n} from '../../../../api/types';\nimport type { ISettings } from '../../../../types';\n\nimport { selectChat, selectTheme } from '../../../../global/selectors';\n\nexport type StateProps = {\n  theme: ISettings['theme'];\n  isLoading?: boolean;\n  chatsById: Record<string, ApiChat>;\n  usersById: Record<string, ApiUser>;\n  globalMessagesByChatId?: Record<string, { byId: Record<number, ApiMessage> }>;\n  foundIds?: string[];\n  lastSyncTime?: number;\n  searchChatId?: string;\n  activeDownloads: Record<string, number[]>;\n  isChatProtected?: boolean;\n};\n\nexport function createMapStateToProps(type: ApiGlobalMessageSearchType) {\n  return (global: GlobalState, props: any) => {\n    const { byId: chatsById } = global.chats;\n    const { byId: usersById } = global.users;\n    const {\n      fetchingStatus, resultsByType, chatId,\n    } = global.globalSearch;\n\n    // One component is used for two different types of results.\n    // The differences between them are only in the isVoice property.\n    // The rest of the search results use their own personal components.\n    const currentType = type !== 'audio' ? type : (props?.isVoice ? 'voice' : 'audio');\n\n    const { byChatId: globalMessagesByChatId } = global.messages;\n    const foundIds = resultsByType?.[currentType]?.foundIds;\n\n    const activeDownloads = global.activeDownloads.byChatId;\n\n    return {\n      theme: selectTheme(global),\n      isLoading: foundIds === undefined\n        || (fetchingStatus ? Boolean(fetchingStatus.chats || fetchingStatus.messages) : false),\n      chatsById,\n      usersById,\n      globalMessagesByChatId,\n      foundIds,\n      searchChatId: chatId,\n      activeDownloads,\n      isChatProtected: chatId ? selectChat(global, chatId)?.isProtected : undefined,\n      lastSyncTime: global.lastSyncTime,\n    };\n  };\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection, MediaViewerOrigin } from '../../../types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport buildClassName from '../../../util/buildClassName';\nimport { throttle } from '../../../util/schedulers';\nimport useLang from '../../../hooks/useLang';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Media from '../../common/Media';\nimport ChatMessage from './ChatMessage';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'media';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst MediaResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    openMediaViewer,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleSelectMedia = useCallback((messageId: number, chatId: string) => {\n    openMediaViewer({\n      chatId,\n      messageId,\n      origin: MediaViewerOrigin.SearchResult,\n    });\n  }, [openMediaViewer]);\n\n  function renderGallery() {\n    return (\n      <div className=\"media-list\" dir={lang.isRtl ? 'rtl' : undefined}>\n        {foundMessages.map((message) => (\n          <Media\n            key={message.id}\n            idPrefix=\"search-media\"\n            message={message}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onClick={handleSelectMedia}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  function renderSearchResult() {\n    return foundMessages.map((message) => (\n      <ChatMessage\n        key={message.id}\n        chatId={message.chatId}\n        message={message}\n      />\n    ));\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n  const isMediaGrid = canRenderContents && foundIds && foundIds.length > 0 && !searchQuery;\n  const isMessageList = canRenderContents && foundIds && foundIds.length > 0 && searchQuery;\n\n  const classNames = buildClassName(\n    'search-content custom-scroll',\n    isMessageList && 'chat-list',\n  );\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className={classNames}\n        items={foundMessages}\n        itemSelector={!searchQuery ? '.Media' : '.ListItem'}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {isMediaGrid && renderGallery()}\n        {isMessageList && renderSearchResult()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(MediaResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport WebLink from '../../common/WebLink';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'links';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst LinkResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  isChatProtected,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          dir={lang.isRtl ? 'rtl' : undefined}\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <WebLink\n            key={message.id}\n            message={message}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            isProtected={isChatProtected || message.isProtected}\n            observeIntersection={observeIntersectionForMedia}\n            onMessageClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(LinkResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiMessage } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport { getMessageDocument } from '../../../global/helpers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\n\nimport Document from '../../common/Document';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  searchQuery?: string;\n};\n\nconst CURRENT_TYPE = 'documents';\nconst INTERSECTION_THROTTLE = 500;\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst FileResults: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  activeDownloads,\n  lastSyncTime,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const { observe: observeIntersectionForMedia } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: CURRENT_TYPE,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n      const message = globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n\n      return message && getMessageDocument(message) ? message : undefined;\n    }).filter(Boolean) as ApiMessage[];\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\">{formatMonthAndYear(lang, new Date(message.date * 1000))}</p>\n          )}\n          <Document\n            message={message}\n            withDate\n            datetime={message.date}\n            smaller\n            sender={getSenderName(lang, message, chatsById, usersById)}\n            className=\"scroll-item\"\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n            observeIntersection={observeIntersectionForMedia}\n            onDateClick={handleMessageFocus}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div ref={containerRef} className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps(CURRENT_TYPE),\n)(FileResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { AudioOrigin, LoadMoreDirection } from '../../../types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type { StateProps } from './helpers/createMapStateToProps';\nimport { createMapStateToProps } from './helpers/createMapStateToProps';\nimport { formatMonthAndYear, toYearMonth } from '../../../util/dateFormat';\nimport { getSenderName } from './helpers/getSenderName';\nimport { throttle } from '../../../util/schedulers';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport useLang from '../../../hooks/useLang';\n\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Audio from '../../common/Audio';\nimport NothingFound from '../../common/NothingFound';\nimport Loading from '../../ui/Loading';\n\nexport type OwnProps = {\n  isVoice?: boolean;\n  searchQuery?: string;\n};\n\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nconst AudioResults: FC<OwnProps & StateProps> = ({\n  theme,\n  isVoice,\n  searchQuery,\n  searchChatId,\n  isLoading,\n  chatsById,\n  usersById,\n  globalMessagesByChatId,\n  foundIds,\n  lastSyncTime,\n  activeDownloads,\n}) => {\n  const {\n    searchMessagesGlobal,\n    focusMessage,\n    openAudioPlayer,\n  } = getActions();\n\n  const lang = useLang();\n  const currentType = isVoice ? 'voice' : 'audio';\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (lastSyncTime && direction === LoadMoreDirection.Backwards) {\n      runThrottled(() => {\n        searchMessagesGlobal({\n          type: currentType,\n          query: searchQuery,\n          chatId: searchChatId,\n        });\n      });\n    }\n  }, [currentType, lastSyncTime, searchMessagesGlobal, searchQuery, searchChatId]);\n\n  const foundMessages = useMemo(() => {\n    if (!foundIds || !globalMessagesByChatId) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return foundIds.map((id) => {\n      const [chatId, messageId] = id.split('_');\n\n      return globalMessagesByChatId[chatId]?.byId[Number(messageId)];\n    }).filter(Boolean);\n  }, [globalMessagesByChatId, foundIds]);\n\n  const handleMessageFocus = useCallback((messageId: number, chatId: string) => {\n    focusMessage({ chatId, messageId });\n  }, [focusMessage]);\n\n  const handlePlayAudio = useCallback((messageId: number, chatId: string) => {\n    openAudioPlayer({ chatId, messageId });\n  }, [openAudioPlayer]);\n\n  function renderList() {\n    return foundMessages.map((message, index) => {\n      const shouldDrawDateDivider = index === 0\n        || toYearMonth(message.date) !== toYearMonth(foundMessages[index - 1].date);\n      return (\n        <div\n          className=\"ListItem small-icon\"\n          key={message.id}\n        >\n          {shouldDrawDateDivider && (\n            <p className=\"section-heading\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {formatMonthAndYear(lang, new Date(message.date * 1000))}\n            </p>\n          )}\n          <Audio\n            key={message.id}\n            theme={theme}\n            message={message}\n            origin={AudioOrigin.Search}\n            senderTitle={getSenderName(lang, message, chatsById, usersById)}\n            date={message.date}\n            lastSyncTime={lastSyncTime}\n            className=\"scroll-item\"\n            onPlay={handlePlayAudio}\n            onDateClick={handleMessageFocus}\n            isDownloading={activeDownloads[message.chatId]?.includes(message.id)}\n          />\n        </div>\n      );\n    });\n  }\n\n  const canRenderContents = useAsyncRendering([searchQuery], SLIDE_TRANSITION_DURATION) && !isLoading;\n\n  return (\n    <div className=\"LeftSearch\">\n      <InfiniteScroll\n        className=\"search-content documents-list custom-scroll\"\n        items={foundMessages}\n        onLoadMore={handleLoadMore}\n        noFastList\n      >\n        {!canRenderContents && <Loading />}\n        {canRenderContents && (!foundIds || foundIds.length === 0) && (\n          <NothingFound\n            text={lang('ChatList.Search.NoResults')}\n            description={lang('ChatList.Search.NoResultsDescription')}\n          />\n        )}\n        {canRenderContents && foundIds && foundIds.length > 0 && renderList()}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  createMapStateToProps('audio'),\n)(AudioResults));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { GlobalSearchContent } from '../../../types';\n\nimport { parseDateString } from '../../../util/dateFormat';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport TabList from '../../ui/TabList';\nimport Transition from '../../ui/Transition';\nimport ChatResults from './ChatResults';\nimport UserChatResults from './ChatMessageResults';\nimport MediaResults from './MediaResults';\nimport LinkResults from './LinkResults';\nimport FileResults from './FileResults';\nimport AudioResults from './AudioResults';\n\nimport './LeftSearch.scss';\n\nexport type OwnProps = {\n  searchQuery?: string;\n  searchDate?: number;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentContent?: GlobalSearchContent;\n  chatId?: string;\n};\n\nconst TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'SearchAllChatsShort' },\n  { type: GlobalSearchContent.Media, title: 'SharedMediaTab2' },\n  { type: GlobalSearchContent.Links, title: 'SharedLinksTab2' },\n  { type: GlobalSearchContent.Files, title: 'SharedFilesTab2' },\n  { type: GlobalSearchContent.Music, title: 'SharedMusicTab2' },\n  { type: GlobalSearchContent.Voice, title: 'SharedVoiceTab2' },\n];\n\nconst CHAT_TABS = [\n  { type: GlobalSearchContent.ChatList, title: 'All Messages' },\n  ...TABS.slice(1),\n];\n\nconst TRANSITION_RENDER_COUNT = Object.keys(GlobalSearchContent).length / 2;\n\nconst LeftSearch: FC<OwnProps & StateProps> = ({\n  searchQuery,\n  searchDate,\n  isActive,\n  currentContent = GlobalSearchContent.ChatList,\n  chatId,\n  onReset,\n}) => {\n  const {\n    setGlobalSearchContent,\n    setGlobalSearchDate,\n  } = getActions();\n\n  const lang = useLang();\n  const [activeTab, setActiveTab] = useState(currentContent);\n  const dateSearchQuery = useMemo(() => parseDateString(searchQuery), [searchQuery]);\n\n  const handleSwitchTab = useCallback((index: number) => {\n    const tab = TABS[index];\n    setGlobalSearchContent({ content: tab.type });\n    setActiveTab(index);\n  }, [setGlobalSearchContent]);\n\n  const handleSearchDateSelect = useCallback((value: Date) => {\n    setGlobalSearchDate({ date: value.getTime() / 1000 });\n  }, [setGlobalSearchDate]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, undefined, '.ListItem-button', true);\n\n  return (\n    <div className=\"LeftSearch\" ref={containerRef} onKeyDown={handleKeyDown}>\n      <TabList activeTab={activeTab} tabs={chatId ? CHAT_TABS : TABS} onSwitchTab={handleSwitchTab} />\n      <Transition\n        name={lang.isRtl ? 'slide-optimized-rtl' : 'slide-optimized'}\n        renderCount={TRANSITION_RENDER_COUNT}\n        activeKey={currentContent}\n      >\n        {(() => {\n          switch (currentContent) {\n            case GlobalSearchContent.ChatList:\n              if (chatId) {\n                return (\n                  <UserChatResults\n                    searchQuery={searchQuery}\n                    dateSearchQuery={dateSearchQuery}\n                    onReset={onReset}\n                    onSearchDateSelect={handleSearchDateSelect}\n                  />\n                );\n              }\n              return (\n                <ChatResults\n                  searchQuery={searchQuery}\n                  searchDate={searchDate}\n                  dateSearchQuery={dateSearchQuery}\n                  onReset={onReset}\n                  onSearchDateSelect={handleSearchDateSelect}\n                />\n              );\n            case GlobalSearchContent.Media:\n              return <MediaResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Links:\n              return <LinkResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Files:\n              return <FileResults searchQuery={searchQuery} />;\n            case GlobalSearchContent.Music:\n              return (\n                <AudioResults\n                  key=\"audio\"\n                  searchQuery={searchQuery}\n                />\n              );\n            case GlobalSearchContent.Voice:\n              return (\n                <AudioResults\n                  key=\"voice\"\n                  isVoice\n                  searchQuery={searchQuery}\n                />\n              );\n            default:\n              return undefined;\n          }\n        })()}\n      </Transition>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentContent, chatId } = global.globalSearch;\n\n    return { currentContent, chatId };\n  },\n)(LeftSearch));\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type TwoFaActions = (\n  'setCurrentPassword' | 'setPassword' | 'setHint' | 'setEmail' | 'reset'\n);\nexport type TwoFaDispatch = Dispatch<TwoFaActions>;\n\nexport type TwoFaState = {\n  currentPassword: string;\n  password: string;\n  hint: string;\n  email: string;\n};\n\nconst INITIAL_STATE: TwoFaState = {\n  currentPassword: '',\n  password: '',\n  hint: '',\n  email: '',\n};\n\nconst twoFaReducer: StateReducer<TwoFaState, TwoFaActions> = (\n  state,\n  action,\n) => {\n  switch (action.type) {\n    case 'setCurrentPassword':\n      return {\n        ...state,\n        currentPassword: action.payload,\n      };\n\n    case 'setPassword':\n      return {\n        ...state,\n        password: action.payload,\n      };\n\n    case 'setHint':\n      return {\n        ...state,\n        hint: action.payload,\n      };\n\n    case 'setEmail':\n      return {\n        ...state,\n        email: action.payload,\n      };\n\n    case 'reset':\n      return INITIAL_STATE;\n\n    default:\n      return state;\n  }\n};\n\nconst useTwoFaReducer = () => {\n  return useReducer(twoFaReducer, INITIAL_STATE);\n};\n\nexport default useTwoFaReducer;\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport useLang from '../../../hooks/useLang';\n\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  currentScreen: SettingsScreens;\n  editedFolderId?: number;\n  onReset: () => void;\n  onSaveFilter: () => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n};\n\nconst SettingsHeader: FC<OwnProps> = ({\n  currentScreen,\n  editedFolderId,\n  onReset,\n  onSaveFilter,\n  onScreenSelect,\n}) => {\n  const {\n    signOut,\n    deleteChatFolder,\n  } = getActions();\n\n  const [isSignOutDialogOpen, setIsSignOutDialogOpen] = useState(false);\n  const [isDeleteFolderDialogOpen, setIsDeleteFolderDialogOpen] = useState(false);\n\n  const openSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(true);\n  }, []);\n\n  const closeSignOutConfirmation = useCallback(() => {\n    setIsSignOutDialogOpen(false);\n  }, []);\n\n  const openDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(true);\n  }, []);\n\n  const closeDeleteFolderConfirmation = useCallback(() => {\n    setIsDeleteFolderDialogOpen(false);\n  }, []);\n\n  const handleSignOutMessage = useCallback(() => {\n    closeSignOutConfirmation();\n    signOut();\n  }, [closeSignOutConfirmation, signOut]);\n\n  const handleDeleteFolderMessage = useCallback(() => {\n    closeDeleteFolderConfirmation();\n    deleteChatFolder({ id: editedFolderId });\n    onReset();\n  }, [editedFolderId, closeDeleteFolderConfirmation, deleteChatFolder, onReset]);\n\n  const SettingsMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"More actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  const lang = useLang();\n\n  function renderHeaderContent() {\n    switch (currentScreen) {\n      case SettingsScreens.EditProfile:\n        return <h3>{lang('lng_settings_information')}</h3>;\n      case SettingsScreens.General:\n        return <h3>{lang('General')}</h3>;\n      case SettingsScreens.QuickReaction:\n        return <h3>{lang('DoubleTapSetting')}</h3>;\n      case SettingsScreens.Notifications:\n        return <h3>{lang('Notifications')}</h3>;\n      case SettingsScreens.DataStorage:\n        return <h3>{lang('DataSettings')}</h3>;\n      case SettingsScreens.Privacy:\n        return <h3>{lang('PrivacySettings')}</h3>;\n      case SettingsScreens.Language:\n        return <h3>{lang('Language')}</h3>;\n\n      case SettingsScreens.GeneralChatBackground:\n        return <h3>{lang('ChatBackground')}</h3>;\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return <h3>{lang('SetColor')}</h3>;\n\n      case SettingsScreens.PrivacyPhoneNumber:\n        return <h3>{lang('PrivacyPhone')}</h3>;\n      case SettingsScreens.PrivacyLastSeen:\n        return <h3>{lang('PrivacyLastSeen')}</h3>;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return <h3>{lang('Privacy.ProfilePhoto')}</h3>;\n      case SettingsScreens.PrivacyForwarding:\n        return <h3>{lang('PrivacyForwards')}</h3>;\n      case SettingsScreens.PrivacyGroupChats:\n        return <h3>{lang('AutodownloadGroupChats')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return <h3>{lang('AlwaysShareWith')}</h3>;\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return <h3>{lang('NeverShareWith')}</h3>;\n\n      case SettingsScreens.ActiveSessions:\n        return <h3>{lang('SessionsTitle')}</h3>;\n      case SettingsScreens.ActiveWebsites:\n        return <h3>{lang('OtherWebSessions')}</h3>;\n      case SettingsScreens.PrivacyBlockedUsers:\n        return <h3>{lang('BlockedUsers')}</h3>;\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaEnabled:\n        return <h3>{lang('TwoStepVerification')}</h3>;\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n        return <h3>{lang('PleaseReEnterPassword')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaChangePasswordHint:\n        return <h3>{lang('PasswordHint')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaRecoveryEmail:\n        return <h3>{lang('RecoveryEmailTitle')}</h3>;\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return <h3>Recovery Email Code</h3>;\n      case SettingsScreens.TwoFaCongratulations:\n        return <h3>{lang('TwoStepVerificationPasswordSet')}</h3>;\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n        return <h3>{lang('PleaseEnterCurrentPassword')}</h3>;\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n        return <h3>{lang('Passcode')}</h3>;\n\n      case SettingsScreens.PasscodeTurnOff:\n        return <h3>{lang('PasscodeController.Disable.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n        return <h3>{lang('PasscodeController.Change.Title')}</h3>;\n\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n        return <h3>{lang('PasscodeController.ReEnterPasscode.Placeholder')}</h3>;\n\n      case SettingsScreens.Folders:\n        return <h3>{lang('Filters')}</h3>;\n      case SettingsScreens.FoldersCreateFolder:\n        return <h3>{lang('FilterNew')}</h3>;\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('FilterEdit')}</h3>\n\n            {editedFolderId && (\n              <DropdownMenu\n                className=\"settings-more-menu\"\n                trigger={SettingsMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"delete\" destructive onClick={openDeleteFolderConfirmation}>\n                  {lang('Delete')}\n                </MenuItem>\n              </DropdownMenu>\n            )}\n          </div>\n        );\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <div className=\"settings-main-header\">\n            {(currentScreen === SettingsScreens.FoldersIncludedChats\n              || currentScreen === SettingsScreens.FoldersIncludedChatsFromChatList) ? (\n                <h3>{lang('FilterInclude')}</h3>\n              ) : (\n                <h3>{lang('FilterExclude')}</h3>\n              )}\n\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              className=\"color-primary\"\n              onClick={onSaveFilter}\n              ariaLabel={lang('AutoDeleteConfirm')}\n            >\n              <i className=\"icon-check\" />\n            </Button>\n          </div>\n        );\n\n      default:\n        return (\n          <div className=\"settings-main-header\">\n            <h3>{lang('SETTINGS')}</h3>\n\n            <Button\n              round\n              ripple={!IS_SINGLE_COLUMN_LAYOUT}\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => onScreenSelect(SettingsScreens.EditProfile)}\n              ariaLabel={lang('lng_settings_information')}\n            >\n              <i className=\"icon-edit\" />\n            </Button>\n            <DropdownMenu\n              className=\"settings-more-menu\"\n              trigger={SettingsMenuButton}\n              positionX=\"right\"\n            >\n              <MenuItem icon=\"logout\" onClick={openSignOutConfirmation}>{lang('LogOutTitle')}</MenuItem>\n            </DropdownMenu>\n          </div>\n        );\n    }\n  }\n\n  return (\n    <div className=\"left-header\">\n      <Button\n        round\n        size=\"smaller\"\n        color=\"translucent\"\n        onClick={onReset}\n        ariaLabel={lang('AccDescrGoBack')}\n      >\n        <i className=\"icon-arrow-left\" />\n      </Button>\n      {renderHeaderContent()}\n      <ConfirmDialog\n        isOpen={isSignOutDialogOpen}\n        onClose={closeSignOutConfirmation}\n        text={lang('lng_sure_logout')}\n        confirmLabel={lang('AccountSettings.Logout')}\n        confirmHandler={handleSignOutMessage}\n        confirmIsDestructive\n      />\n      <ConfirmDialog\n        isOpen={isDeleteFolderDialogOpen}\n        onClose={closeDeleteFolderConfirmation}\n        text={lang('FilterDeleteAlert')}\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDeleteFolderMessage}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(SettingsHeader);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { SettingsScreens } from '../../../types';\nimport type { ApiUser } from '../../../api/types';\n\nimport { selectUser } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ProfileInfo from '../../common/ProfileInfo';\nimport ChatExtra from '../../common/ChatExtra';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  sessionCount: number;\n  currentUser?: ApiUser;\n  lastSyncTime?: number;\n};\n\nconst SettingsMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUser,\n  sessionCount,\n  lastSyncTime,\n}) => {\n  const { loadProfilePhotos, loadAuthorizations, loadWebAuthorizations } = getActions();\n\n  const getCustomLanguageName = window.localStorage.getItem('custom-language-name');\n  const customLanguageName = getCustomLanguageName === 'official' ? undefined : getCustomLanguageName;\n\n  const lang = useLang();\n  const profileId = currentUser?.id;\n\n  useEffect(() => {\n    if (profileId && lastSyncTime) {\n      loadProfilePhotos({ profileId });\n    }\n  }, [lastSyncTime, profileId, loadProfilePhotos]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadAuthorizations();\n      loadWebAuthorizations();\n    }\n  }, [lastSyncTime, loadAuthorizations, loadWebAuthorizations]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-main-menu\">\n        {currentUser && (\n          <ProfileInfo\n            userId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        {currentUser && (\n          <ChatExtra\n            chatOrUserId={currentUser.id}\n            forceShowSelf\n          />\n        )}\n        <ListItem\n          icon=\"settings\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.General)}\n        >\n          {lang('Telegram.GeneralSettingsViewController')}\n        </ListItem>\n        <ListItem\n          icon=\"unmute\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Notifications)}\n        >\n          {lang('Notifications')}\n        </ListItem>\n        <ListItem\n          icon=\"data\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.DataStorage)}\n        >\n          {lang('DataSettings')}\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Privacy)}\n        >\n          {lang('PrivacySettings')}\n        </ListItem>\n        <ListItem\n          icon=\"folder\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Folders)}\n        >\n          {lang('Filters')}\n        </ListItem>\n        <ListItem\n          icon=\"active-sessions\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.ActiveSessions)}\n        >\n          {lang('SessionsTitle')}\n          {sessionCount > 0 && (<span className=\"settings-item__current-value\">{sessionCount}</span>)}\n        </ListItem>\n        <ListItem\n          icon=\"language\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.Language)}\n        >\n          {lang('Language')}\n          <span className=\"settings-item__current-value\">{customLanguageName ?? lang.langName}</span>\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId, lastSyncTime } = global;\n\n    return {\n      sessionCount: global.activeSessions.orderedHashes.length,\n      currentUser: currentUserId ? selectUser(global, currentUserId) : undefined,\n      lastSyncTime,\n    };\n  },\n)(SettingsMain));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../lib/teact/teact';\n\nimport { debounce } from '../../util/schedulers';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\ntype OwnProps = {\n  currentUsername?: string;\n  asLink?: boolean;\n  isLoading?: boolean;\n  isUsernameAvailable?: boolean;\n  checkUsername: AnyToVoidFunction;\n  onChange: (value: string | false) => void;\n};\n\nconst MIN_USERNAME_LENGTH = 5;\nconst MAX_USERNAME_LENGTH = 32;\nconst LINK_PREFIX = 'https://t.me/';\nconst LINK_PREFIX_REGEX = /https:\\/\\/t\\.me\\/?/i;\nconst USERNAME_REGEX = /^([a-zA-Z0-9_]+)$/;\n\nconst runDebouncedForCheckUsername = debounce((cb) => cb(), 250, false);\n\nfunction isUsernameValid(username: string) {\n  return username.length >= MIN_USERNAME_LENGTH\n    && username.length <= MAX_USERNAME_LENGTH\n    && USERNAME_REGEX.test(username);\n}\n\nconst SettingsEditProfile: FC<OwnProps> = ({\n  currentUsername,\n  asLink,\n  isLoading,\n  isUsernameAvailable,\n  checkUsername,\n  onChange,\n}) => {\n  const [username, setUsername] = useState(currentUsername || '');\n\n  const lang = useLang();\n  const langPrefix = asLink ? 'SetUrl' : 'Username';\n  const label = asLink ? lang('SetUrlPlaceholder') : lang('Username');\n\n  const [usernameSuccess, usernameError] = useMemo(() => {\n    if (!username.length) {\n      return [];\n    }\n\n    if (username.length < MIN_USERNAME_LENGTH) {\n      return [undefined, `${label} is too short`];\n    }\n    if (username.length > MAX_USERNAME_LENGTH) {\n      return [undefined, `${label} is too long`];\n    }\n    if (!USERNAME_REGEX.test(username)) {\n      return [undefined, `${label} contains invalid characters`];\n    }\n\n    if (isUsernameAvailable === undefined) {\n      return [];\n    }\n\n    // Variable `isUsernameAvailable` is initialized with `undefined`, so a strict false check is required\n    return [\n      isUsernameAvailable ? lang(`${langPrefix}Available`, 'Username') : undefined,\n      isUsernameAvailable === false ? lang(`${langPrefix}InUse`) : undefined,\n    ];\n  }, [username, isUsernameAvailable, lang, langPrefix, label]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [asLink, currentUsername]);\n\n  const handleUsernameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const newUsername = e.target.value.trim().replace(LINK_PREFIX_REGEX, '');\n    setUsername(newUsername);\n    e.target.value = `${asLink ? LINK_PREFIX : ''}${newUsername}`;\n\n    const isValid = isUsernameValid(newUsername);\n\n    if (isValid) {\n      runDebouncedForCheckUsername(() => {\n        checkUsername({ username: newUsername });\n      });\n    }\n\n    if (onChange) {\n      onChange(isValid ? newUsername : false);\n    }\n  }, [asLink, checkUsername, onChange]);\n\n  return (\n    <InputText\n      value={`${asLink ? LINK_PREFIX : ''}${username}`}\n      onChange={handleUsernameChange}\n      label={label}\n      error={usernameError}\n      success={usernameSuccess}\n      readOnly={isLoading}\n    />\n  );\n};\n\nexport default memo(SettingsEditProfile);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, memo, useEffect, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ApiMediaFormat } from '../../../api/types';\nimport { ProfileEditProgress } from '../../../types';\n\nimport { throttle } from '../../../util/schedulers';\nimport { selectUser } from '../../../global/selectors';\nimport { getChatAvatarHash } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport InputText from '../../ui/InputText';\nimport renderText from '../../common/helpers/renderText';\nimport UsernameInput from '../../common/UsernameInput';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\ntype OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentAvatarHash?: string;\n  currentFirstName?: string;\n  currentLastName?: string;\n  currentBio?: string;\n  currentUsername?: string;\n  progress?: ProfileEditProgress;\n  isUsernameAvailable?: boolean;\n};\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst MAX_BIO_LENGTH = 70;\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide your first name';\nconst ERROR_BIO_TOO_LONG = 'Bio can\\' be longer than 70 characters';\n\nconst SettingsEditProfile: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  currentAvatarHash,\n  currentFirstName,\n  currentLastName,\n  currentBio,\n  currentUsername,\n  progress,\n  isUsernameAvailable,\n}) => {\n  const {\n    loadCurrentUser,\n    updateProfile,\n    checkUsername,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isUsernameTouched, setIsUsernameTouched] = useState(false);\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [firstName, setFirstName] = useState(currentFirstName || '');\n  const [lastName, setLastName] = useState(currentLastName || '');\n  const [bio, setBio] = useState(currentBio || '');\n  const [username, setUsername] = useState<string | false>(currentUsername || '');\n\n  const currentAvatarBlobUrl = useMedia(currentAvatarHash, false, ApiMediaFormat.BlobUrl);\n\n  const isLoading = progress === ProfileEditProgress.InProgress;\n  const isUsernameError = username === false;\n\n  const isSaveButtonShown = useMemo(() => {\n    if (isUsernameError) {\n      return false;\n    }\n\n    return Boolean(photo) || isProfileFieldsTouched || isUsernameAvailable === true;\n  }, [photo, isProfileFieldsTouched, isUsernameError, isUsernameAvailable]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadCurrentUser();\n    });\n  }, [loadCurrentUser]);\n\n  useEffect(() => {\n    setPhoto(undefined);\n  }, [currentAvatarBlobUrl]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName || '');\n    setLastName(currentLastName || '');\n    setBio(currentBio || '');\n  }, [currentFirstName, currentLastName, currentBio]);\n\n  useEffect(() => {\n    setUsername(currentUsername || '');\n  }, [currentUsername]);\n\n  useEffect(() => {\n    if (progress === ProfileEditProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setIsUsernameTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handlePhotoChange = useCallback((newPhoto: File) => {\n    setPhoto(newPhoto);\n  }, []);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleBioChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setBio(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUsernameChange = useCallback((value: string | false) => {\n    setUsername(value);\n    setIsUsernameTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n    const trimmedBio = bio.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n      return;\n    }\n\n    if (trimmedBio.length > MAX_BIO_LENGTH) {\n      setError(ERROR_BIO_TOO_LONG);\n      return;\n    }\n\n    updateProfile({\n      photo,\n      ...(isProfileFieldsTouched && {\n        firstName: trimmedFirstName,\n        lastName: trimmedLastName,\n        bio: trimmedBio,\n      }),\n      ...(isUsernameTouched && {\n        username,\n      }),\n    });\n  }, [\n    photo,\n    firstName, lastName, bio, isProfileFieldsTouched,\n    username, isUsernameTouched,\n    updateProfile,\n  ]);\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-edit-profile settings-item\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handlePhotoChange}\n            title=\"Edit your profile photo\"\n            disabled={isLoading}\n          />\n          <InputText\n            value={firstName}\n            onChange={handleFirstNameChange}\n            label={lang('FirstName')}\n            disabled={isLoading}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            value={lastName}\n            onChange={handleLastNameChange}\n            label={lang('LastName')}\n            disabled={isLoading}\n          />\n          <InputText\n            value={bio}\n            onChange={handleBioChange}\n            label={lang('UserBio')}\n            disabled={isLoading}\n            error={error === ERROR_BIO_TOO_LONG ? error : undefined}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('lng_settings_about_bio'), ['br', 'simple_markdown'])}\n          </p>\n        </div>\n\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Username')}</h4>\n\n          <UsernameInput\n            currentUsername={username || ''}\n            isLoading={isLoading}\n            isUsernameAvailable={isUsernameAvailable}\n            checkUsername={checkUsername}\n            onChange={handleUsernameChange}\n          />\n\n          <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {renderText(lang('UsernameHelp'), ['br', 'simple_markdown'])}\n          </p>\n          {username && (\n            <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('lng_username_link')}<br />\n              <span className=\"username-link\">https://t.me/{username}</span>\n            </p>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isSaveButtonShown}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel=\"Save changes\"\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n    const { progress, isUsernameAvailable } = global.profileEdit || {};\n    const currentUser = currentUserId ? selectUser(global, currentUserId) : undefined;\n\n    if (!currentUser) {\n      return {\n        progress,\n        isUsernameAvailable,\n      };\n    }\n\n    const {\n      firstName: currentFirstName,\n      lastName: currentLastName,\n      username: currentUsername,\n      fullInfo,\n    } = currentUser;\n    const { bio: currentBio } = fullInfo || {};\n    const currentAvatarHash = getChatAvatarHash(currentUser);\n\n    return {\n      currentAvatarHash,\n      currentFirstName,\n      currentLastName,\n      currentBio,\n      currentUsername,\n      progress,\n      isUsernameAvailable,\n    };\n  },\n)(SettingsEditProfile));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings } from '../../../types';\n\nimport { AUTODOWNLOAD_FILESIZE_MB_LIMITS } from '../../../config';\nimport { pick } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, (\n  'canAutoLoadPhotoFromContacts' |\n  'canAutoLoadPhotoInPrivateChats' |\n  'canAutoLoadPhotoInGroups' |\n  'canAutoLoadPhotoInChannels' |\n  'canAutoLoadVideoFromContacts' |\n  'canAutoLoadVideoInPrivateChats' |\n  'canAutoLoadVideoInGroups' |\n  'canAutoLoadVideoInChannels' |\n  'canAutoLoadFileFromContacts' |\n  'canAutoLoadFileInPrivateChats' |\n  'canAutoLoadFileInGroups' |\n  'canAutoLoadFileInChannels' |\n  'canAutoPlayGifs' |\n  'canAutoPlayVideos' |\n  'autoLoadFileMaxSizeMb'\n)>;\n\nconst SettingsDataStorage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  canAutoLoadPhotoFromContacts,\n  canAutoLoadPhotoInPrivateChats,\n  canAutoLoadPhotoInGroups,\n  canAutoLoadPhotoInChannels,\n  canAutoLoadVideoFromContacts,\n  canAutoLoadVideoInPrivateChats,\n  canAutoLoadVideoInGroups,\n  canAutoLoadVideoInChannels,\n  canAutoLoadFileFromContacts,\n  canAutoLoadFileInPrivateChats,\n  canAutoLoadFileInGroups,\n  canAutoLoadFileInChannels,\n  canAutoPlayGifs,\n  canAutoPlayVideos,\n  autoLoadFileMaxSizeMb,\n}) => {\n  const { setSettingOption } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const renderFileSizeCallback = useCallback((value: number) => {\n    return lang('AutodownloadSizeLimitUpTo', lang('FileSize.MB', String(AUTODOWNLOAD_FILESIZE_MB_LIMITS[value]), 'i'));\n  }, [lang]);\n\n  const handleFileSizeChange = useCallback((value: number) => {\n    setSettingOption({ autoLoadFileMaxSizeMb: AUTODOWNLOAD_FILESIZE_MB_LIMITS[value] });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayGifsChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayGifs: value });\n  }, [setSettingOption]);\n\n  const handleCanAutoPlayVideosChange = useCallback((value: boolean) => {\n    setSettingOption({ canAutoPlayVideos: value });\n  }, [setSettingOption]);\n\n  function renderContentSizeSlider() {\n    const value = AUTODOWNLOAD_FILESIZE_MB_LIMITS.indexOf(autoLoadFileMaxSizeMb);\n\n    return (\n      <div className=\"pt-5\">\n        <RangeSlider\n          label={lang('AutoDownloadMaxFileSize')}\n          min={0}\n          max={5}\n          value={value !== -1 ? value : 2}\n          renderValue={renderFileSizeCallback}\n          onChange={handleFileSizeChange}\n        />\n      </div>\n    );\n  }\n\n  function renderAutoDownloadBlock(\n    title: string,\n    key: 'Photo' | 'Video' | 'File',\n    canAutoLoadFromContacts: boolean,\n    canAutoLoadInPrivateChats: boolean,\n    canAutoLoadInGroups: boolean,\n    canAutoLoadInChannels: boolean,\n  ) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{title}</h4>\n\n        <Checkbox\n          label={lang('AutoDownloadSettings.Contacts')}\n          checked={canAutoLoadFromContacts}\n          // TODO rewrite to support `useCallback`\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}FromContacts`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.PrivateChats')}\n          checked={canAutoLoadInPrivateChats}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InPrivateChats`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.GroupChats')}\n          checked={canAutoLoadInGroups}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InGroups`]: isChecked })}\n        />\n        <Checkbox\n          label={lang('AutoDownloadSettings.Channels')}\n          checked={canAutoLoadInChannels}\n          // eslint-disable-next-line react/jsx-no-bind\n          onCheck={(isChecked) => setSettingOption({ [`canAutoLoad${key}InChannels`]: isChecked })}\n        />\n\n        {key === 'File' && renderContentSizeSlider()}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadPhotosTitle'),\n        'Photo',\n        canAutoLoadPhotoFromContacts,\n        canAutoLoadPhotoInPrivateChats,\n        canAutoLoadPhotoInGroups,\n        canAutoLoadPhotoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        lang('AutoDownloadVideosTitle'),\n        'Video',\n        canAutoLoadVideoFromContacts,\n        canAutoLoadVideoInPrivateChats,\n        canAutoLoadVideoInGroups,\n        canAutoLoadVideoInChannels,\n      )}\n      {renderAutoDownloadBlock(\n        'Auto-download files', // Proper translation is not available yet\n        'File',\n        canAutoLoadFileFromContacts,\n        canAutoLoadFileInPrivateChats,\n        canAutoLoadFileInGroups,\n        canAutoLoadFileInChannels,\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AutoplayMedia')}</h4>\n\n        <Checkbox\n          label={lang('GifsTab2')}\n          checked={canAutoPlayGifs}\n          onCheck={handleCanAutoPlayGifsChange}\n        />\n        <Checkbox\n          label={lang('DataAndStorage.Autoplay.Videos')}\n          checked={canAutoPlayVideos}\n          onCheck={handleCanAutoPlayVideosChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return pick(global.settings.byKey, [\n      'canAutoLoadPhotoFromContacts',\n      'canAutoLoadPhotoInPrivateChats',\n      'canAutoLoadPhotoInGroups',\n      'canAutoLoadPhotoInChannels',\n      'canAutoLoadVideoFromContacts',\n      'canAutoLoadVideoInPrivateChats',\n      'canAutoLoadVideoInGroups',\n      'canAutoLoadVideoInChannels',\n      'canAutoLoadFileFromContacts',\n      'canAutoLoadFileInPrivateChats',\n      'canAutoLoadFileInGroups',\n      'canAutoLoadFileInChannels',\n      'canAutoPlayGifs',\n      'canAutoPlayVideos',\n      'autoLoadFileMaxSizeMb',\n    ]);\n  },\n)(SettingsDataStorage));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useMemo, useCallback, useEffect,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { ApiChatFolder } from '../../../../api/types';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { throttle } from '../../../../util/schedulers';\nimport { getFolderDescriptionText } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForChatsCount } from '../../../../hooks/useFolderManager';\n\nimport ListItem from '../../../ui/ListItem';\nimport Button from '../../../ui/Button';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onCreateFolder: () => void;\n  onEditFolder: (folder: ApiChatFolder) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  orderedFolderIds?: number[];\n  foldersById: Record<number, ApiChatFolder>;\n  recommendedChatFolders?: ApiChatFolder[];\n};\n\nconst runThrottledForLoadRecommended = throttle((cb) => cb(), 60000, true);\n\nconst MAX_ALLOWED_FOLDERS = 10;\n\nconst SettingsFoldersMain: FC<OwnProps & StateProps> = ({\n  isActive,\n  onCreateFolder,\n  onEditFolder,\n  onReset,\n  orderedFolderIds,\n  foldersById,\n  recommendedChatFolders,\n}) => {\n  const {\n    loadRecommendedChatFolders,\n    addChatFolder,\n    showDialog,\n  } = getActions();\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottledForLoadRecommended(() => {\n      loadRecommendedChatFolders();\n    });\n  }, [loadRecommendedChatFolders]);\n\n  const handleCreateFolder = useCallback(() => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    onCreateFolder();\n  }, [foldersById, showDialog, onCreateFolder]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const chatsCountByFolderId = useFolderManagerForChatsCount();\n  const userFolders = useMemo(() => {\n    if (!orderedFolderIds) {\n      return undefined;\n    }\n\n    return orderedFolderIds.map((id) => {\n      const folder = foldersById[id];\n\n      return {\n        id: folder.id,\n        title: folder.title,\n        subtitle: getFolderDescriptionText(lang, folder, chatsCountByFolderId[folder.id]),\n      };\n    });\n  }, [orderedFolderIds, foldersById, lang, chatsCountByFolderId]);\n\n  const handleCreateFolderFromRecommended = useCallback((folder: ApiChatFolder) => {\n    if (Object.keys(foldersById).length >= MAX_ALLOWED_FOLDERS) {\n      showDialog({\n        data: {\n          message: 'DIALOG_FILTERS_TOO_MUCH',\n          hasErrorKey: true,\n        },\n      });\n\n      return;\n    }\n\n    addChatFolder({ folder });\n  }, [foldersById, addChatFolder, showDialog]);\n\n  return (\n    <div className=\"settings-content no-border custom-scroll\">\n      <div className=\"settings-content-header\">\n        <AnimatedIcon\n          size={STICKER_SIZE_FOLDER_SETTINGS}\n          tgsUrl={LOCAL_TGS_URLS.FoldersAll}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('CreateNewFilterInfo')}\n        </p>\n\n        <Button\n          // TODO: Refactor button component to handle icon placemenet with props\n          className=\"with-icon mb-2\"\n          color=\"primary\"\n          size=\"smaller\"\n          pill\n          fluid\n          onClick={handleCreateFolder}\n          isRtl={lang.isRtl}\n        >\n          <i className=\"icon-add\" />\n          {lang('CreateNewFilter')}\n        </Button>\n      </div>\n\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('Filters')}</h4>\n\n        {userFolders?.length ? userFolders.map((folder) => (\n          <ListItem\n            className=\"mb-2 no-icon\"\n            narrow\n            multiline\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onEditFolder(foldersById[folder.id])}\n          >\n            <span className=\"title\">{folder.title}</span>\n            <span className=\"subtitle\">{folder.subtitle}</span>\n          </ListItem>\n        )) : userFolders && !userFolders.length ? (\n          <p className=\"settings-item-description my-4\" dir=\"auto\">\n            You have no folders yet.\n          </p>\n        ) : <Loading />}\n      </div>\n\n      {(recommendedChatFolders && Boolean(recommendedChatFolders.length)) && (\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('FilterRecommended')}\n          </h4>\n\n          {recommendedChatFolders.map((folder) => (\n            <ListItem\n              className=\"mb-2\"\n              narrow\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleCreateFolderFromRecommended(folder)}\n            >\n              <div className=\"settings-folders-recommended-item\">\n                <div className=\"multiline-item\">\n                  <span className=\"title\">{folder.title}</span>\n                  <span className=\"subtitle\">{folder.description}</span>\n                </div>\n\n                <Button\n                  className=\"px-3\"\n                  color=\"primary\"\n                  size=\"tiny\"\n                  pill\n                  fluid\n                  isRtl={lang.isRtl}\n                >\n                  {lang('Add')}\n                </Button>\n              </div>\n            </ListItem>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      orderedIds: orderedFolderIds,\n      byId: foldersById,\n      recommended: recommendedChatFolders,\n    } = global.chatFolders;\n\n    return {\n      orderedFolderIds,\n      foldersById,\n      recommendedChatFolders,\n    };\n  },\n)(SettingsFoldersMain));\n","import type { FC } from '../../lib/teact/teact';\nimport React from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\n\nimport './ShowMoreButton.scss';\n\ntype OwnProps = {\n  count: number;\n  itemName: string;\n  itemPluralName?: string;\n  isLoading?: boolean;\n  onClick: () => void;\n};\n\nconst ShowMoreButton: FC<OwnProps> = ({\n  count,\n  itemName,\n  itemPluralName,\n  isLoading,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  return (\n    <Button\n      className=\"ShowMoreButton\"\n      color=\"translucent\"\n      size=\"smaller\"\n      isText\n      isLoading={isLoading}\n      isRtl={lang.isRtl}\n      onClick={onClick}\n    >\n      <i className=\"icon-down\" />\n      Show {count} more {count > 1 ? itemPluralName || `${itemName}s` : itemName}\n    </Button>\n  );\n};\n\nexport default ShowMoreButton;\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport { STICKER_SIZE_FOLDER_SETTINGS } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport { findIntersectionWithSet } from '../../../../util/iteratees';\nimport { isUserId } from '../../../../global/helpers';\nimport type {\n  FolderEditDispatch,\n  FoldersState,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  EXCLUDED_CHAT_TYPES,\n  INCLUDED_CHAT_TYPES,\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport ListItem from '../../../ui/ListItem';\nimport InputText from '../../../ui/InputText';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport FloatingActionButton from '../../../ui/FloatingActionButton';\nimport Spinner from '../../../ui/Spinner';\nimport ShowMoreButton from '../../../ui/ShowMoreButton';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  onAddIncludedChats: () => void;\n  onAddExcludedChats: () => void;\n  isActive?: boolean;\n  onReset: () => void;\n  onBack: () => void;\n};\n\ntype StateProps = {\n  loadedActiveChatIds?: string[];\n  loadedArchivedChatIds?: string[];\n};\n\nconst SUBMIT_TIMEOUT = 500;\n\nconst INITIAL_CHATS_LIMIT = 5;\n\nconst ERROR_NO_TITLE = 'Please provide a title for this folder.';\nconst ERROR_NO_CHATS = 'ChatList.Filter.Error.Empty';\n\nconst SettingsFoldersEdit: FC<OwnProps & StateProps> = ({\n  state,\n  dispatch,\n  onAddIncludedChats,\n  onAddExcludedChats,\n  isActive,\n  onReset,\n  onBack,\n  loadedActiveChatIds,\n  loadedArchivedChatIds,\n}) => {\n  const {\n    editChatFolder,\n    addChatFolder,\n  } = getActions();\n\n  const [isIncludedChatsListExpanded, setIsIncludedChatsListExpanded] = useState(false);\n  const [isExcludedChatsListExpanded, setIsExcludedChatsListExpanded] = useState(false);\n\n  const {\n    selectedChatIds: includedChatIds,\n    selectedChatTypes: includedChatTypes,\n  } = selectChatFilters(state, 'included');\n  const {\n    selectedChatIds: excludedChatIds,\n    selectedChatTypes: excludedChatTypes,\n  } = selectChatFilters(state, 'excluded');\n\n  useEffect(() => {\n    setIsIncludedChatsListExpanded(false);\n    setIsExcludedChatsListExpanded(false);\n  }, [state.folderId]);\n\n  const [visibleIncludedChatIds, visibleExcludedChatIds] = useMemo(() => {\n    const allLoadedChatsSet = new Set([\n      ...(loadedActiveChatIds || []),\n      ...(loadedArchivedChatIds || []),\n    ]);\n\n    const loadedIncludedChatIds = findIntersectionWithSet(includedChatIds, allLoadedChatsSet);\n    const loadedExcludedChatIds = findIntersectionWithSet(excludedChatIds, allLoadedChatsSet);\n\n    return [\n      isIncludedChatsListExpanded\n        ? loadedIncludedChatIds\n        : loadedIncludedChatIds.slice(0, INITIAL_CHATS_LIMIT - includedChatTypes.length),\n      isExcludedChatsListExpanded\n        ? loadedExcludedChatIds\n        : loadedExcludedChatIds.slice(0, INITIAL_CHATS_LIMIT - excludedChatTypes.length),\n    ];\n  }, [\n    excludedChatIds, includedChatIds, includedChatTypes, excludedChatTypes,\n    isExcludedChatsListExpanded, isIncludedChatsListExpanded,\n    loadedActiveChatIds, loadedArchivedChatIds,\n  ]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack,\n  });\n\n  const handleChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\n    const { currentTarget } = event;\n    dispatch({ type: 'setTitle', payload: currentTarget.value.trim() });\n  }, [dispatch]);\n\n  const handleSubmit = useCallback(() => {\n    const { title } = state.folder;\n\n    if (!title) {\n      dispatch({ type: 'setError', payload: ERROR_NO_TITLE });\n      return;\n    }\n\n    if (!includedChatIds.length && !Object.keys(includedChatTypes).length) {\n      dispatch({ type: 'setError', payload: ERROR_NO_CHATS });\n      return;\n    }\n\n    dispatch({ type: 'setIsLoading', payload: true });\n    if (state.mode === 'edit') {\n      editChatFolder({ id: state.folderId, folderUpdate: state.folder });\n    } else {\n      addChatFolder({ folder: state.folder });\n    }\n\n    setTimeout(() => {\n      onReset();\n    }, SUBMIT_TIMEOUT);\n  }, [addChatFolder, dispatch, editChatFolder, includedChatIds.length, includedChatTypes, onReset, state]);\n\n  function renderChatType(key: string, mode: 'included' | 'excluded') {\n    const chatType = mode === 'included'\n      ? INCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key)\n      : EXCLUDED_CHAT_TYPES.find(({ key: typeKey }) => typeKey === key);\n\n    if (!chatType) {\n      return undefined;\n    }\n\n    return (\n      <ListItem\n        key={chatType.key}\n        className=\"settings-folders-list-item mb-1\"\n        icon={chatType.icon}\n        narrow\n        inactive\n      >\n        {lang(chatType.title)}\n      </ListItem>\n    );\n  }\n\n  function renderChats(mode: 'included' | 'excluded') {\n    const selectedChatTypes = mode === 'included' ? includedChatTypes : excludedChatTypes;\n    const visibleChatIds = mode === 'included' ? visibleIncludedChatIds : visibleExcludedChatIds;\n\n    const isExpanded = mode === 'included' ? isIncludedChatsListExpanded : isExcludedChatsListExpanded;\n    const allChatIds = mode === 'included' ? includedChatIds : excludedChatIds;\n    const leftChatsCount = allChatIds.length - selectedChatTypes.length - visibleChatIds.length;\n    const clickHandler = mode === 'included'\n      ? () => setIsIncludedChatsListExpanded(true)\n      : () => setIsExcludedChatsListExpanded(true);\n\n    return (\n      <>\n        {selectedChatTypes.map((key) => renderChatType(key, mode))}\n        {visibleChatIds.map((id) => (\n          <ListItem\n            className=\"settings-folders-list-item mb-1\"\n            narrow\n            inactive\n          >\n            {isUserId(id) ? (\n              <PrivateChatInfo avatarSize=\"small\" userId={id} />\n            ) : (\n              <GroupChatInfo avatarSize=\"small\" chatId={id} />\n            )}\n          </ListItem>\n        ))}\n        {(!isExpanded && leftChatsCount > 0) && (\n          <ShowMoreButton\n            count={leftChatsCount}\n            itemName=\"chat\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={clickHandler}\n          />\n        )}\n      </>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content no-border custom-scroll\">\n        <div className=\"settings-content-header\">\n          <AnimatedIcon\n            size={STICKER_SIZE_FOLDER_SETTINGS}\n            tgsUrl={LOCAL_TGS_URLS.FoldersNew}\n            play={String(state.folderId)}\n            className=\"settings-content-icon\"\n          />\n\n          {state.mode === 'create' && (\n            <p className=\"settings-item-description mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterIncludeInfo')}\n            </p>\n          )}\n\n          <InputText\n            className=\"mb-0\"\n            label={lang('FilterNameHint')}\n            value={state.folder.title}\n            onChange={handleChange}\n            error={state.error && state.error === ERROR_NO_TITLE ? ERROR_NO_TITLE : undefined}\n          />\n        </div>\n\n        <div className=\"settings-item no-border pt-3\">\n          {state.error && state.error === ERROR_NO_CHATS && (\n            <p className=\"settings-item-description color-danger mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang(state.error)}\n            </p>\n          )}\n\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterInclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddIncludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('included')}\n        </div>\n\n        <div className=\"settings-item pt-3\">\n          <h4 className=\"settings-item-header mb-3\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterExclude')}</h4>\n\n          <ListItem\n            className=\"settings-folders-list-item color-primary mb-0\"\n            icon=\"add\"\n            onClick={onAddExcludedChats}\n          >\n            {lang('FilterAddChats')}\n          </ListItem>\n\n          {renderChats('excluded')}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={Boolean(state.isTouched)}\n        disabled={state.isLoading}\n        onClick={handleSubmit}\n        ariaLabel={state.mode === 'edit' ? 'Save changes' : 'Create folder'}\n      >\n        {state.isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { listIds } = global.chats;\n\n    return {\n      loadedActiveChatIds: listIds.active,\n      loadedArchivedChatIds: listIds.archived,\n    };\n  },\n)(SettingsFoldersEdit));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  useCallback, useRef, useEffect, memo,\n} from '../../../../lib/teact/teact';\n\nimport { isUserId } from '../../../../global/helpers';\nimport type { FolderChatType } from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  INCLUDED_CHAT_TYPES,\n  EXCLUDED_CHAT_TYPES,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport useInfiniteScroll from '../../../../hooks/useInfiniteScroll';\nimport useLang from '../../../../hooks/useLang';\n\nimport Checkbox from '../../../ui/Checkbox';\nimport InputText from '../../../ui/InputText';\nimport ListItem from '../../../ui/ListItem';\nimport PrivateChatInfo from '../../../common/PrivateChatInfo';\nimport GroupChatInfo from '../../../common/GroupChatInfo';\nimport PickerSelectedItem from '../../../common/PickerSelectedItem';\nimport InfiniteScroll from '../../../ui/InfiniteScroll';\nimport Loading from '../../../ui/Loading';\n\nimport '../../../common/Picker.scss';\nimport './SettingsFoldersChatsPicker.scss';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  chatIds: string[];\n  selectedIds: string[];\n  selectedChatTypes: string[];\n  filterValue?: string;\n  onSelectedIdsChange: (ids: string[]) => void;\n  onSelectedChatTypesChange: (types: string[]) => void;\n  onFilterChange: (value: string) => void;\n};\n\n// Focus slows down animation, also it breaks transition layout in Chrome\nconst FOCUS_DELAY_MS = 500;\n\nconst MAX_CHATS = 100;\nconst MAX_FULL_ITEMS = 10;\nconst ALWAYS_FULL_ITEMS_COUNT = 5;\n\nconst SettingsFoldersChatsPicker: FC<OwnProps> = ({\n  mode,\n  chatIds,\n  selectedIds,\n  selectedChatTypes,\n  filterValue,\n  onSelectedIdsChange,\n  onSelectedChatTypesChange,\n  onFilterChange,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const chatTypes = mode === 'included' ? INCLUDED_CHAT_TYPES : EXCLUDED_CHAT_TYPES;\n  const shouldMinimize = selectedIds.length + selectedChatTypes.length > MAX_FULL_ITEMS;\n  const hasMaxChats = selectedIds.length >= MAX_CHATS;\n\n  useEffect(() => {\n    setTimeout(() => {\n      requestAnimationFrame(() => {\n        inputRef.current!.focus();\n      });\n    }, FOCUS_DELAY_MS);\n  }, []);\n\n  const handleItemClick = useCallback((id: string) => {\n    const newSelectedIds = [...selectedIds];\n    if (newSelectedIds.includes(id)) {\n      newSelectedIds.splice(newSelectedIds.indexOf(id), 1);\n    } else {\n      newSelectedIds.push(id);\n    }\n    onSelectedIdsChange(newSelectedIds);\n  }, [selectedIds, onSelectedIdsChange]);\n\n  const handleChatTypeClick = useCallback((key: FolderChatType['key']) => {\n    const newSelectedChatTypes = [...selectedChatTypes];\n    if (newSelectedChatTypes.includes(key)) {\n      newSelectedChatTypes.splice(newSelectedChatTypes.indexOf(key), 1);\n    } else {\n      newSelectedChatTypes.push(key);\n    }\n    onSelectedChatTypesChange(newSelectedChatTypes);\n  }, [selectedChatTypes, onSelectedChatTypesChange]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    onFilterChange(value);\n  }, [onFilterChange]);\n\n  const lang = useLang();\n\n  function renderSelectedChatType(key: string) {\n    const selectedType = chatTypes.find(({ key: typeKey }) => key === typeKey);\n    if (!selectedType) {\n      return undefined;\n    }\n\n    return (\n      <PickerSelectedItem\n        icon={selectedType.icon}\n        title={lang(selectedType.title)}\n        isMinimized={shouldMinimize}\n        canClose\n        onClick={handleChatTypeClick}\n        clickArg={selectedType.key}\n      />\n    );\n  }\n\n  function renderChatType(type: FolderChatType) {\n    return (\n      <ListItem\n        key={type.key}\n        className=\"chat-item-clickable picker-list-item chat-type-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleChatTypeClick(type.key)}\n        ripple\n      >\n        <i className={`icon-${type.icon}`} />\n        <h3 className=\"chat-type\" dir=\"auto\">{lang(type.title)}</h3>\n        <Checkbox\n          label=\"\"\n          checked={selectedChatTypes.includes(type.key)}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  function renderItem(id: string) {\n    const isSelected = selectedIds.includes(id);\n\n    return (\n      <ListItem\n        key={id}\n        className=\"chat-item-clickable picker-list-item chat-item\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleItemClick(id)}\n        ripple\n        disabled={!isSelected && hasMaxChats}\n      >\n        {isUserId(id) ? (\n          <PrivateChatInfo userId={id} />\n        ) : (\n          <GroupChatInfo chatId={id} withChatType />\n        )}\n        <Checkbox\n          label=\"\"\n          checked={isSelected}\n          round\n        />\n      </ListItem>\n    );\n  }\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, chatIds, Boolean(filterValue));\n\n  return (\n    <div className=\"Picker SettingsFoldersChatsPicker\">\n      <div className=\"picker-header custom-scroll\">\n        {selectedChatTypes.map(renderSelectedChatType)}\n        {selectedIds.map((id, i) => (\n          <PickerSelectedItem\n            chatOrUserId={id}\n            isMinimized={shouldMinimize && i < selectedIds.length - ALWAYS_FULL_ITEMS_COUNT}\n            canClose\n            onClick={handleItemClick}\n            clickArg={id}\n          />\n        ))}\n        {!hasMaxChats ? (\n          <InputText\n            ref={inputRef}\n            value={filterValue}\n            onChange={handleFilterChange}\n            placeholder={lang('Search')}\n          />\n        ) : (\n          <p className=\"max-items-reached\" dir=\"auto\">\n            {`Sorry, you can't add more than ${MAX_CHATS} chats.`}\n          </p>\n        )}\n      </div>\n      <InfiniteScroll\n        className=\"picker-list custom-scroll\"\n        itemSelector=\".chat-item\"\n        items={viewportIds}\n        onLoadMore={getMore}\n      >\n        {(!viewportIds || !viewportIds.length || viewportIds.includes(chatIds[0])) && (\n          <>\n            <h4 key=\"header1\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChatTypes')}\n            </h4>\n            {chatTypes.map(renderChatType)}\n            <div key=\"divider\" className=\"picker-list-divider\" />\n            <h4 key=\"header2\" className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n              {lang('FilterChats')}\n            </h4>\n          </>\n        )}\n\n        {viewportIds?.length ? (\n          viewportIds.map(renderItem)\n        ) : viewportIds && !viewportIds.length ? (\n          <p className=\"no-results\" key=\"no-results\">Sorry, nothing found.</p>\n        ) : (\n          <Loading key=\"loading\" />\n        )}\n      </InfiniteScroll>\n    </div>\n  );\n};\n\nexport default memo(SettingsFoldersChatsPicker);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useMemo, useCallback } from '../../../../lib/teact/teact';\nimport { getGlobal } from '../../../../global';\n\nimport { unique } from '../../../../util/iteratees';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../../config';\nimport { filterChatsByName } from '../../../../global/helpers';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../../hooks/useFolderManager';\nimport type {\n  FoldersState,\n  FolderEditDispatch,\n} from '../../../../hooks/reducers/useFoldersReducer';\nimport {\n  selectChatFilters,\n} from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersChatsPicker from './SettingsFoldersChatsPicker';\nimport Loading from '../../../ui/Loading';\n\ntype OwnProps = {\n  mode: 'included' | 'excluded';\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsFoldersChatFilters: FC<OwnProps> = ({\n  mode,\n  state,\n  dispatch,\n  isActive,\n  onReset,\n}) => {\n  const { chatFilter } = state;\n  const { selectedChatIds, selectedChatTypes } = selectChatFilters(state, mode, true);\n\n  const lang = useLang();\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = [...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []];\n    return unique([\n      ...selectedChatIds,\n      ...filterChatsByName(lang, chatIds, chatsById, chatFilter),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedChatIds, lang, chatFilter]);\n\n  const handleFilterChange = useCallback((newFilter: string) => {\n    dispatch({\n      type: 'setChatFilter',\n      payload: newFilter,\n    });\n  }, [dispatch]);\n\n  const handleSelectedIdsChange = useCallback((ids: string[]) => {\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: { ...state.includeFilters, includedChatIds: ids },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: { ...state.excludeFilters, excludedChatIds: ids },\n      });\n    }\n  }, [mode, state, dispatch]);\n\n  const handleSelectedChatTypesChange = useCallback((keys: string[]) => {\n    const newFilters: Record<string, boolean> = {};\n    keys.forEach((key) => {\n      newFilters[key] = true;\n    });\n\n    if (mode === 'included') {\n      dispatch({\n        type: 'setIncludeFilters',\n        payload: {\n          includedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    } else {\n      dispatch({\n        type: 'setExcludeFilters',\n        payload: {\n          excludedChatIds: selectedChatIds,\n          ...newFilters,\n        },\n      });\n    }\n  }, [mode, selectedChatIds, dispatch]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  if (!displayedIds) {\n    return <Loading />;\n  }\n\n  return (\n    <SettingsFoldersChatsPicker\n      mode={mode}\n      chatIds={displayedIds}\n      selectedIds={selectedChatIds}\n      selectedChatTypes={selectedChatTypes}\n      filterValue={chatFilter}\n      onSelectedIdsChange={handleSelectedIdsChange}\n      onSelectedChatTypesChange={handleSelectedChatTypesChange}\n      onFilterChange={handleFilterChange}\n    />\n  );\n};\n\nexport default memo(SettingsFoldersChatFilters);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiChatFolder } from '../../../../api/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { FolderEditDispatch, FoldersState } from '../../../../hooks/reducers/useFoldersReducer';\n\nimport SettingsFoldersMain from './SettingsFoldersMain';\nimport SettingsFoldersEdit from './SettingsFoldersEdit';\nimport SettingsFoldersChatFilters from './SettingsFoldersChatFilters';\n\nimport './SettingsFolders.scss';\n\nconst TRANSITION_DURATION = 200;\n\nexport type OwnProps = {\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  state: FoldersState;\n  dispatch: FolderEditDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsFolders: FC<OwnProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const handleReset = useCallback(() => {\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        dispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (state.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    state.mode, dispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleCreateFolder = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.FoldersCreateFolder);\n  }, [onScreenSelect, dispatch]);\n\n  const handleEditFolder = useCallback((folder: ApiChatFolder) => {\n    dispatch({ type: 'editFolder', payload: folder });\n    onScreenSelect(SettingsScreens.FoldersEditFolder);\n  }, [dispatch, onScreenSelect]);\n\n  const handleAddIncludedChats = useCallback(() => {\n    dispatch({ type: 'editIncludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersIncludedChatsFromChatList\n      : SettingsScreens.FoldersIncludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  const handleAddExcludedChats = useCallback(() => {\n    dispatch({ type: 'editExcludeFilters' });\n    onScreenSelect(currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n      ? SettingsScreens.FoldersExcludedChatsFromChatList\n      : SettingsScreens.FoldersExcludedChats);\n  }, [currentScreen, dispatch, onScreenSelect]);\n\n  switch (currentScreen) {\n    case SettingsScreens.Folders:\n      return (\n        <SettingsFoldersMain\n          onCreateFolder={handleCreateFolder}\n          onEditFolder={handleEditFolder}\n          isActive={isActive || [\n            SettingsScreens.FoldersCreateFolder,\n            SettingsScreens.FoldersEditFolder,\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n    case SettingsScreens.FoldersCreateFolder:\n    case SettingsScreens.FoldersEditFolder:\n    case SettingsScreens.FoldersEditFolderFromChatList:\n      return (\n        <SettingsFoldersEdit\n          state={state}\n          dispatch={dispatch}\n          onAddIncludedChats={handleAddIncludedChats}\n          onAddExcludedChats={handleAddExcludedChats}\n          onReset={handleReset}\n          isActive={isActive || [\n            SettingsScreens.FoldersIncludedChats,\n            SettingsScreens.FoldersExcludedChats,\n          ].includes(shownScreen)}\n          onBack={onReset}\n        />\n      );\n    case SettingsScreens.FoldersIncludedChats:\n    case SettingsScreens.FoldersIncludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"included\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n    case SettingsScreens.FoldersExcludedChats:\n    case SettingsScreens.FoldersExcludedChatsFromChatList:\n      return (\n        <SettingsFoldersChatFilters\n          mode=\"excluded\"\n          state={state}\n          dispatch={dispatch}\n          onReset={handleReset}\n          isActive={isActive}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(SettingsFolders);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER_HEADER } from '../../../config';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport { getFirstLetters } from '../../../util/textFormat';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\ntype OwnProps = {\n  size?: number;\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCoverAnimated: FC<OwnProps> = ({\n  size = STICKER_SIZE_PICKER_HEADER,\n  stickerSet,\n  observeIntersection,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaHash = `stickerSet${stickerSet.id}`;\n  const lottieData = useMedia(mediaHash, !isIntersecting);\n  const transitionClassNames = useMediaTransition(lottieData);\n\n  const firstLetters = useMemo(() => {\n    if (lottieData) return undefined;\n\n    return getFirstLetters(stickerSet.title, 2);\n  }, [lottieData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {lottieData && (\n        <AnimatedSticker\n          size={size}\n          tgsUrl={lottieData}\n          className={transitionClassNames}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCoverAnimated);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useMemo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiStickerSet } from '../../../api/types';\n\nimport { IS_WEBM_SUPPORTED } from '../../../util/environment';\nimport { getFirstLetters } from '../../../util/textFormat';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../../hooks/useIntersectionObserver';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\ntype OwnProps = {\n  stickerSet: ApiStickerSet;\n  observeIntersection: ObserveFn;\n};\n\nconst StickerSetCover: FC<OwnProps> = ({ stickerSet, observeIntersection }) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n\n  const mediaData = useMedia(stickerSet.hasThumbnail && `stickerSet${stickerSet.id}`, !isIntersecting);\n  const transitionClassNames = useMediaTransition(mediaData);\n  const isVideo = stickerSet.isVideos;\n\n  const firstLetters = useMemo(() => {\n    if ((isVideo && !IS_WEBM_SUPPORTED) || !mediaData) return getFirstLetters(stickerSet.title, 2);\n    return undefined;\n  }, [isVideo, mediaData, stickerSet.title]);\n\n  return (\n    <div ref={ref} className=\"sticker-set-cover\">\n      {firstLetters}\n      {isVideo ? (\n        <video src={mediaData} className={transitionClassNames} loop autoPlay />\n      ) : (\n        <img src={mediaData} className={transitionClassNames} alt=\"\" />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSetCover);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport { STICKER_SIZE_GENERAL_SETTINGS } from '../../../config';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport useLang from '../../../hooks/useLang';\n\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport StickerSetCoverAnimated from '../../middle/composer/StickerSetCoverAnimated';\nimport StickerSetCover from '../../middle/composer/StickerSetCover';\nimport StickerButton from '../../common/StickerButton';\n\nimport './SettingsStickerSet.scss';\n\ntype OwnProps = {\n  stickerSet?: ApiStickerSet;\n  observeIntersection: ObserveFn;\n  onClick: (value: ApiSticker) => void;\n};\n\nconst SettingsStickerSet: FC<OwnProps> = ({\n  stickerSet,\n  observeIntersection,\n  onClick,\n}) => {\n  const lang = useLang();\n\n  if (!stickerSet || !stickerSet.stickers) {\n    return undefined;\n  }\n\n  const firstSticker = stickerSet.stickers?.[0];\n\n  if (stickerSet.hasThumbnail || !firstSticker) {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        inactive={!firstSticker}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => firstSticker && onClick(firstSticker)}\n      >\n        <Button\n          ariaLabel={stickerSet.title}\n          color=\"translucent\"\n          isRtl={lang.isRtl}\n        >\n          {stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              size={STICKER_SIZE_GENERAL_SETTINGS}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersection}\n            />\n          )}\n        </Button>\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  } else {\n    return (\n      <ListItem\n        narrow\n        className=\"SettingsStickerSet\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onClick(firstSticker)}\n      >\n        <StickerButton\n          sticker={firstSticker}\n          size={STICKER_SIZE_GENERAL_SETTINGS}\n          title={stickerSet.title}\n          observeIntersection={observeIntersection}\n          clickArg={undefined}\n          noContextMenu\n        />\n        <div className=\"multiline-menu-item\">\n          <div className=\"title\">{stickerSet.title}</div>\n          <div className=\"subtitle\">{lang('StickerPack.StickerCount', stickerSet.count, 'i')}</div>\n        </div>\n      </ListItem>\n    );\n  }\n};\n\nexport default memo(SettingsStickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, TimeFormat } from '../../../types';\nimport { SettingsScreens } from '../../../types';\nimport type { ApiSticker, ApiStickerSet } from '../../../api/types';\n\nimport {\n  getSystemTheme, IS_IOS, IS_MAC_OS, IS_TOUCH_ENV,\n} from '../../../util/environment';\nimport { pick } from '../../../util/iteratees';\nimport { setTimeFormat } from '../../../util/langProvider';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RangeSlider from '../../ui/RangeSlider';\nimport Checkbox from '../../ui/Checkbox';\nimport type { IRadioOption } from '../../ui/RadioGroup';\nimport RadioGroup from '../../ui/RadioGroup';\nimport SettingsStickerSet from './SettingsStickerSet';\nimport StickerSetModal from '../../common/StickerSetModal.async';\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport switchTheme from '../../../util/switchTheme';\nimport { ANIMATION_LEVEL_MAX } from '../../../config';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Pick<ISettings, (\n    'messageTextSize' |\n    'animationLevel' |\n    'messageSendKeyCombo' |\n    'shouldSuggestStickers' |\n    'shouldLoopStickers' |\n    'timeFormat'\n  )> & {\n    stickerSetIds?: string[];\n    stickerSetsById?: Record<string, ApiStickerSet>;\n    defaultReaction?: string;\n    theme: ISettings['theme'];\n    shouldUseSystemTheme: boolean;\n  };\n\nconst ANIMATION_LEVEL_OPTIONS = [\n  'Solid and Steady',\n  'Nice and Fast',\n  'Lots of Stuff',\n];\n\nconst TIME_FORMAT_OPTIONS: IRadioOption[] = [{\n  label: '12-hour',\n  value: '12h',\n}, {\n  label: '24-hour',\n  value: '24h',\n}];\n\nconst SettingsGeneral: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  stickerSetIds,\n  stickerSetsById,\n  defaultReaction,\n  messageTextSize,\n  animationLevel,\n  messageSendKeyCombo,\n  shouldSuggestStickers,\n  shouldLoopStickers,\n  timeFormat,\n  theme,\n  shouldUseSystemTheme,\n}) => {\n  const {\n    setSettingOption,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const stickerSettingsRef = useRef<HTMLDivElement>(null);\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: stickerSettingsRef });\n  const [isModalOpen, openModal, closeModal] = useFlag();\n  const [sticker, setSticker] = useState<ApiSticker>();\n\n  const lang = useLang();\n\n  const APPEARANCE_THEME_OPTIONS: IRadioOption[] = [{\n    label: lang('EmptyChat.Appearance.Light'),\n    value: 'light',\n  }, {\n    label: lang('EmptyChat.Appearance.Dark'),\n    value: 'dark',\n  }, {\n    label: lang('EmptyChat.Appearance.System'),\n    value: 'auto',\n  }];\n\n  const KEYBOARD_SEND_OPTIONS = !IS_TOUCH_ENV ? [\n    { value: 'enter', label: lang('lng_settings_send_enter'), subLabel: 'New line by Shift + Enter' },\n    {\n      value: 'ctrl-enter',\n      label: lang(IS_MAC_OS ? 'lng_settings_send_cmdenter' : 'lng_settings_send_ctrlenter'),\n      subLabel: 'New line by Enter',\n    },\n  ] : undefined;\n\n  const handleAnimationLevelChange = useCallback((newLevel: number) => {\n    ANIMATION_LEVEL_OPTIONS.forEach((_, i) => {\n      document.body.classList.toggle(`animation-level-${i}`, newLevel === i);\n    });\n\n    setSettingOption({ animationLevel: newLevel });\n  }, [setSettingOption]);\n\n  const handleMessageTextSizeChange = useCallback((newSize: number) => {\n    document.documentElement.style.setProperty(\n      '--composer-text-size', `${Math.max(newSize, IS_IOS ? 16 : 15)}px`,\n    );\n    document.documentElement.style.setProperty('--message-meta-height', `${Math.floor(newSize * 1.3125)}px`);\n    document.documentElement.style.setProperty('--message-text-size', `${newSize}px`);\n    document.documentElement.setAttribute('data-message-text-size', newSize.toString());\n\n    setSettingOption({ messageTextSize: newSize });\n  }, [setSettingOption]);\n\n  const handleAppearanceThemeChange = useCallback((value: string) => {\n    const newTheme = value === 'auto' ? getSystemTheme() : value as ISettings['theme'];\n\n    setSettingOption({ theme: newTheme });\n    setSettingOption({ shouldUseSystemTheme: value === 'auto' });\n    if (newTheme !== theme) {\n      switchTheme(newTheme, animationLevel === ANIMATION_LEVEL_MAX);\n    }\n  }, [animationLevel, setSettingOption, theme]);\n\n  const handleTimeFormatChange = useCallback((newTimeFormat: string) => {\n    setSettingOption({ timeFormat: newTimeFormat });\n    setSettingOption({ wasTimeFormatSetManually: true });\n\n    setTimeFormat(newTimeFormat as TimeFormat);\n  }, [setSettingOption]);\n\n  const handleStickerSetClick = useCallback((value: ApiSticker) => {\n    setSticker(value);\n    openModal();\n  }, [openModal]);\n\n  const handleMessageSendComboChange = useCallback((newCombo: string) => {\n    setSettingOption({ messageSendKeyCombo: newCombo });\n  }, [setSettingOption]);\n\n  const handleSuggestStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldSuggestStickers: newValue });\n  }, [setSettingOption]);\n\n  const handleShouldLoopStickersChange = useCallback((newValue: boolean) => {\n    setSettingOption({ shouldLoopStickers: newValue });\n  }, [setSettingOption]);\n\n  const stickerSets = stickerSetIds && stickerSetIds.map((id: string) => {\n    return stickerSetsById?.[id]?.installedDate ? stickerSetsById[id] : false;\n  }).filter<ApiStickerSet>(Boolean as any);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('SETTINGS')}</h4>\n\n        <RangeSlider\n          label={lang('TextSize')}\n          min={12}\n          max={20}\n          value={messageTextSize}\n          onChange={handleMessageTextSizeChange}\n        />\n\n        <ListItem\n          icon=\"photo\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.GeneralChatBackground)}\n        >\n          {lang('ChatBackground')}\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('Theme')}\n        </h4>\n        <RadioGroup\n          name=\"theme\"\n          options={APPEARANCE_THEME_OPTIONS}\n          selected={shouldUseSystemTheme ? 'auto' : theme}\n          onChange={handleAppearanceThemeChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Time Format\n        </h4>\n        <RadioGroup\n          name=\"timeformat\"\n          options={TIME_FORMAT_OPTIONS}\n          selected={timeFormat}\n          onChange={handleTimeFormatChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Animation Level\n        </h4>\n        <p className=\"settings-item-description\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Choose the desired animations amount.\n        </p>\n\n        <RangeSlider\n          options={ANIMATION_LEVEL_OPTIONS}\n          value={animationLevel}\n          onChange={handleAnimationLevelChange}\n        />\n      </div>\n\n      {KEYBOARD_SEND_OPTIONS && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('VoiceOver.Keyboard')}</h4>\n\n          <RadioGroup\n            name=\"keyboard-send-settings\"\n            options={KEYBOARD_SEND_OPTIONS}\n            onChange={handleMessageSendComboChange}\n            selected={messageSendKeyCombo}\n          />\n        </div>\n      )}\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('AccDescrStickers')}</h4>\n\n        {defaultReaction && (\n          <ListItem\n            className=\"SettingsDefaultReaction\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.QuickReaction)}\n          >\n            <ReactionStaticEmoji reaction={defaultReaction} />\n            <div className=\"title\">{lang('DoubleTapSetting')}</div>\n          </ListItem>\n        )}\n\n        <Checkbox\n          label={lang('SuggestStickers')}\n          checked={shouldSuggestStickers}\n          onCheck={handleSuggestStickersChange}\n        />\n        <Checkbox\n          label={lang('LoopAnimatedStickers')}\n          checked={shouldLoopStickers}\n          onCheck={handleShouldLoopStickersChange}\n        />\n\n        <div className=\"mt-4\" ref={stickerSettingsRef}>\n          {stickerSets && stickerSets.map((stickerSet: ApiStickerSet) => (\n            <SettingsStickerSet\n              key={stickerSet.id}\n              stickerSet={stickerSet}\n              observeIntersection={observeIntersectionForCovers}\n              onClick={handleStickerSetClick}\n            />\n          ))}\n        </div>\n        {sticker && (\n          <StickerSetModal\n            isOpen={isModalOpen}\n            fromSticker={sticker}\n            onClose={closeModal}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { theme, shouldUseSystemTheme } = global.settings.byKey;\n\n    return {\n      ...pick(global.settings.byKey, [\n        'messageTextSize',\n        'animationLevel',\n        'messageSendKeyCombo',\n        'shouldSuggestStickers',\n        'shouldLoopStickers',\n        'isSensitiveEnabled',\n        'canChangeSensitive',\n        'timeFormat',\n      ]),\n      stickerSetIds: global.stickers.added.setIds,\n      stickerSetsById: global.stickers.setsById,\n      defaultReaction: global.appConfig?.defaultReaction,\n      theme,\n      shouldUseSystemTheme,\n    };\n  },\n)(SettingsGeneral));\n","/* eslint-disable eqeqeq */\n/* eslint-disable prefer-template */\n/* eslint-disable prefer-const */\n/* eslint-disable prefer-destructuring */\n/* eslint-disable one-var */\n/* eslint-disable one-var-declaration-per-line */\n\nimport { preloadImage } from './files';\n\n/**\n * HEX > RGB\n * input: 'xxxxxx' (ex. 'ed15fa') case-insensitive\n * output: [r, g, b] ([0-255, 0-255, 0-255])\n */\nexport function hex2rgb(param: string): [number, number, number] {\n  return [\n    parseInt(param.substring(0, 2), 16),\n    parseInt(param.substring(2, 4), 16),\n    parseInt(param.substring(4, 6), 16),\n  ];\n}\n\n/**\n * RGB > HEX\n * input: [r, g, b] ([0-255, 0-255, 0-255])\n * output: 'xxxxxx' (ex. 'ff0000')\n */\nexport function rgb2hex(param: [number, number, number]) {\n  const p0 = param[0].toString(16);\n  const p1 = param[1].toString(16);\n  const p2 = param[2].toString(16);\n  return (p0.length == 1 ? '0' + p0 : p0) + (p1.length == 1 ? '0' + p1 : p1) + (p2.length == 1 ? '0' + p2 : p2);\n}\n\n/**\n * Converts an RGB color value to HSV. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes r, g, and b are contained in the set [0, 255] and\n * returns h, s, and v in the set [0, 1].\n *\n * @param   Number  r       The red color value\n * @param   Number  g       The green color value\n * @param   Number  b       The blue color value\n * @return  Array           The HSV representation\n */\nexport function rgb2hsb([r, g, b]: [number, number, number]): [number, number, number] {\n  r /= 255;\n  g /= 255;\n  b /= 255;\n\n  let max = Math.max(r, g, b), min = Math.min(r, g, b);\n  let h!: number, s: number, v: number = max;\n\n  let d = max - min;\n  s = max == 0 ? 0 : d / max;\n\n  if (max == min) {\n    h = 0; // achromatic\n  } else {\n    switch (max) {\n      case r:\n        h = (g - b) / d + (g < b ? 6 : 0);\n        break;\n      case g:\n        h = (b - r) / d + 2;\n        break;\n      case b:\n        h = (r - g) / d + 4;\n        break;\n    }\n\n    h /= 6;\n  }\n\n  return [h, s, v];\n}\n\n/**\n * Converts an HSV color value to RGB. Conversion formula\n * adapted from http://en.wikipedia.org/wiki/HSV_color_space.\n * Assumes h, s, and v are contained in the set [0, 1] and\n * returns r, g, and b in the set [0, 255].\n *\n * @param   Number  h       The hue\n * @param   Number  s       The saturation\n * @param   Number  v       The value\n * @return  Array           The RGB representation\n */\nexport function hsb2rgb([h, s, v]: [number, number, number]): [number, number, number] {\n  let r!: number, g!: number, b!: number;\n\n  let i = Math.floor(h * 6);\n  let f = h * 6 - i;\n  let p = v * (1 - s);\n  let q = v * (1 - f * s);\n  let t = v * (1 - (1 - f) * s);\n\n  switch (i % 6) {\n    case 0:\n      r = v;\n      g = t;\n      b = p;\n      break;\n    case 1:\n      r = q;\n      g = v;\n      b = p;\n      break;\n    case 2:\n      r = p;\n      g = v;\n      b = t;\n      break;\n    case 3:\n      r = p;\n      g = q;\n      b = v;\n      break;\n    case 4:\n      r = t;\n      g = p;\n      b = v;\n      break;\n    case 5:\n      r = v;\n      g = p;\n      b = q;\n      break;\n  }\n\n  return [\n    Math.round(r * 255),\n    Math.round(g * 255),\n    Math.round(b * 255),\n  ];\n}\n\nexport async function getAverageColor(url: string): Promise<[number, number, number]> {\n  // Only visit every 5 pixels\n  const blockSize = 5;\n  const defaultRGB: [number, number, number] = [0, 0, 0];\n  let data;\n  let width;\n  let height;\n  let i = -4;\n  let length;\n  let rgb: [number, number, number] = [0, 0, 0];\n  let count = 0;\n\n  const canvas = document.createElement('canvas');\n  const context = canvas.getContext && canvas.getContext('2d');\n  if (!context) {\n    return defaultRGB;\n  }\n\n  const image = await preloadImage(url);\n  height = image.naturalHeight || image.offsetHeight || image.height;\n  width = image.naturalWidth || image.offsetWidth || image.width;\n  canvas.height = height;\n  canvas.width = width;\n\n  context.drawImage(image, 0, 0);\n\n  try {\n    data = context.getImageData(0, 0, width, height);\n  } catch (e) {\n    return defaultRGB;\n  }\n\n  length = data.data.length;\n\n  // eslint-disable-next-line no-cond-assign\n  while ((i += blockSize * 4) < length) {\n    ++count;\n    rgb[0] += data.data[i];\n    rgb[1] += data.data[i + 1];\n    rgb[2] += data.data[i + 2];\n  }\n\n  rgb[0] = Math.floor(rgb[0] / count);\n  rgb[1] = Math.floor(rgb[1] / count);\n  rgb[2] = Math.floor(rgb[2] / count);\n\n  return rgb;\n}\n\n// eslint-disable-next-line max-len\n// Function was adapted from https://github.com/telegramdesktop/tdesktop/blob/35ff621b5b52f7e3553fb0f990ea13ade7101b8e/Telegram/SourceFiles/data/data_wall_paper.cpp#L518\nexport function getPatternColor(rgbColor: [number, number, number]) {\n  let [hue, saturation, value] = rgb2hsb(rgbColor);\n\n  saturation = Math.min(1, saturation + 0.05 + 0.1 * (1 - saturation));\n  value = value > 0.5\n    ? Math.max(0, value * 0.65)\n    : Math.max(0, Math.min(1, 1 - value * 0.65));\n\n  return `hsla(${hue * 360}, ${saturation * 100}%, ${value * 100}%, .4)`;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState, useRef,\n} from '../../../lib/teact/teact';\nimport type { ApiWallpaper } from '../../../api/types';\nimport type { ThemeKey } from '../../../types';\nimport { UPLOADING_WALLPAPER_SLUG } from '../../../types';\n\nimport { CUSTOM_BG_CACHE_NAME } from '../../../config';\nimport * as cacheApi from '../../../util/cacheApi';\nimport { fetchBlob } from '../../../util/files';\nimport buildClassName from '../../../util/buildClassName';\nimport useMedia from '../../../hooks/useMedia';\nimport useMediaWithLoadProgress from '../../../hooks/useMediaWithLoadProgress';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useCanvasBlur from '../../../hooks/useCanvasBlur';\n\nimport ProgressSpinner from '../../ui/ProgressSpinner';\n\nimport './WallpaperTile.scss';\n\ntype OwnProps = {\n  wallpaper: ApiWallpaper;\n  theme: ThemeKey;\n  isSelected: boolean;\n  onClick: (slug: string) => void;\n};\n\nconst WallpaperTile: FC<OwnProps> = ({\n  wallpaper,\n  theme,\n  isSelected,\n  onClick,\n}) => {\n  const { slug, document } = wallpaper;\n  const localMediaHash = `wallpaper${document.id!}`;\n  const localBlobUrl = document.previewBlobUrl;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`);\n  const thumbRef = useCanvasBlur(document.thumbnail?.dataUri, Boolean(previewBlobUrl), true);\n  const { transitionClassNames } = useShowTransition(\n    Boolean(previewBlobUrl || localBlobUrl),\n    undefined,\n    undefined,\n    'slow',\n  );\n  const [isLoadAllowed, setIsLoadAllowed] = useState(false);\n  const {\n    mediaData: fullMedia, loadProgress,\n  } = useMediaWithLoadProgress(localMediaHash, !isLoadAllowed);\n  const wasLoadDisabled = usePrevious(isLoadAllowed) === false;\n  const { shouldRender: shouldRenderSpinner, transitionClassNames: spinnerClassNames } = useShowTransition(\n    (isLoadAllowed && !fullMedia) || slug === UPLOADING_WALLPAPER_SLUG,\n    undefined,\n    wasLoadDisabled,\n    'slow',\n  );\n  // To prevent triggering of the effect for useCallback\n  const cacheKeyRef = useRef<string>();\n  cacheKeyRef.current = theme;\n\n  const handleSelect = useCallback(() => {\n    (async () => {\n      const blob = await fetchBlob(fullMedia!);\n      await cacheApi.save(CUSTOM_BG_CACHE_NAME, cacheKeyRef.current!, blob);\n      onClick(slug);\n    })();\n  }, [fullMedia, onClick, slug]);\n\n  useEffect(() => {\n    if (fullMedia) {\n      handleSelect();\n    }\n  }, [fullMedia, handleSelect]);\n\n  const handleClick = useCallback(() => {\n    if (fullMedia) {\n      handleSelect();\n    } else {\n      setIsLoadAllowed((isAllowed) => !isAllowed);\n    }\n  }, [fullMedia, handleSelect]);\n\n  const className = buildClassName(\n    'WallpaperTile',\n    isSelected && 'selected',\n  );\n\n  return (\n    <div className={className} onClick={handleClick}>\n      <div className=\"media-inner\">\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n        />\n        <img\n          src={previewBlobUrl || localBlobUrl}\n          className={buildClassName('full-media', transitionClassNames)}\n          alt=\"\"\n        />\n        {shouldRenderSpinner && (\n          <div className={buildClassName('spinner-container', spinnerClassNames)}>\n            <ProgressSpinner progress={loadProgress} onClick={handleClick} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(WallpaperTile);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useCallback, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\nimport { SettingsScreens, UPLOADING_WALLPAPER_SLUG } from '../../../types';\nimport type { ApiWallpaper } from '../../../api/types';\n\nimport { DARK_THEME_PATTERN_COLOR, DEFAULT_PATTERN_COLOR } from '../../../config';\nimport { throttle } from '../../../util/schedulers';\nimport { openSystemFilesDialog } from '../../../util/systemFilesDialog';\nimport { getAverageColor, getPatternColor, rgb2hex } from '../../../util/colors';\nimport { selectTheme } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Loading from '../../ui/Loading';\nimport WallpaperTile from './WallpaperTile';\n\nimport './SettingsGeneralBackground.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  background?: string;\n  isBlurred?: boolean;\n  loadedWallpapers?: ApiWallpaper[];\n  theme: ThemeKey;\n};\n\nconst SUPPORTED_TYPES = 'image/jpeg';\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onScreenSelect,\n  onReset,\n  background,\n  isBlurred,\n  loadedWallpapers,\n  theme,\n}) => {\n  const {\n    loadWallpapers,\n    uploadWallpaper,\n    setThemeSettings,\n  } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadWallpapers();\n    });\n  }, [loadWallpapers]);\n\n  const handleFileSelect = useCallback((e: Event) => {\n    const { files } = e.target as HTMLInputElement;\n\n    if (files && files.length > 0) {\n      uploadWallpaper(files[0]);\n    }\n  }, [uploadWallpaper]);\n\n  const handleUploadWallpaper = useCallback(() => {\n    openSystemFilesDialog(SUPPORTED_TYPES, handleFileSelect, true);\n  }, [handleFileSelect]);\n\n  const handleSetColor = useCallback(() => {\n    onScreenSelect(SettingsScreens.GeneralChatBackgroundColor);\n  }, [onScreenSelect]);\n\n  const handleResetToDefault = useCallback(() => {\n    setThemeSettings({\n      theme,\n      background: undefined,\n      backgroundColor: undefined,\n      isBlurred: true,\n      patternColor: theme === 'dark' ? DARK_THEME_PATTERN_COLOR : DEFAULT_PATTERN_COLOR,\n    });\n  }, [setThemeSettings, theme]);\n\n  const handleWallPaperSelect = useCallback((slug: string) => {\n    setThemeSettings({ theme: themeRef.current, background: slug });\n    const currentWallpaper = loadedWallpapers && loadedWallpapers.find((wallpaper) => wallpaper.slug === slug);\n    if (currentWallpaper?.document.thumbnail) {\n      getAverageColor(currentWallpaper.document.thumbnail.dataUri)\n        .then((color) => {\n          const patternColor = getPatternColor(color);\n          const rgbColor = `#${rgb2hex(color)}`;\n          setThemeSettings({ theme: themeRef.current, backgroundColor: rgbColor, patternColor });\n        });\n    }\n  }, [loadedWallpapers, setThemeSettings]);\n\n  const handleWallPaperBlurChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setThemeSettings({ theme: themeRef.current, isBlurred: e.target.checked });\n  }, [setThemeSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const isUploading = loadedWallpapers?.[0] && loadedWallpapers[0].slug === UPLOADING_WALLPAPER_SLUG;\n\n  return (\n    <div className=\"SettingsGeneralBackground settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"camera-add\"\n          className=\"mb-0\"\n          disabled={isUploading}\n          onClick={handleUploadWallpaper}\n        >\n          {lang('UploadImage')}\n        </ListItem>\n\n        <ListItem\n          icon=\"colorize\"\n          className=\"mb-0\"\n          onClick={handleSetColor}\n        >\n          {lang('SetColor')}\n        </ListItem>\n\n        <ListItem icon=\"favorite\" onClick={handleResetToDefault}>\n          {lang('ThemeResetToDefaults')}\n        </ListItem>\n\n        <Checkbox\n          label={lang('BackgroundBlurred')}\n          checked={Boolean(isBlurred)}\n          onChange={handleWallPaperBlurChange}\n        />\n      </div>\n\n      {loadedWallpapers ? (\n        <div className=\"settings-wallpapers\">\n          {loadedWallpapers.map((wallpaper) => (\n            <WallpaperTile\n              wallpaper={wallpaper}\n              theme={theme}\n              isSelected={background === wallpaper.slug}\n              onClick={handleWallPaperSelect}\n            />\n          ))}\n        </div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { background, isBlurred } = global.settings.themes[theme] || {};\n    const { loadedWallpapers } = global.settings;\n\n    return {\n      background,\n      isBlurred,\n      loadedWallpapers,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent, MutableRefObject, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ThemeKey } from '../../../types';\n\nimport { pick } from '../../../util/iteratees';\nimport {\n  getPatternColor, hex2rgb, hsb2rgb, rgb2hex, rgb2hsb,\n} from '../../../util/colors';\nimport type { RealTouchEvent } from '../../../util/captureEvents';\nimport { captureEvents } from '../../../util/captureEvents';\nimport { selectTheme } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport buildClassName from '../../../util/buildClassName';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\n\nimport './SettingsGeneralBackgroundColor.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  backgroundColor?: string;\n  theme: ThemeKey;\n};\n\ninterface CanvasRects {\n  colorRect: {\n    offsetLeft: number;\n    top: number;\n    width: number;\n    height: number;\n  };\n  hueRect: {\n    offsetLeft: number;\n    width: number;\n  };\n}\n\nconst DEFAULT_HSB = rgb2hsb(hex2rgb('e6ebee'));\nconst PREDEFINED_COLORS = [\n  '#e6ebee', '#b2cee1', '#008dd0', '#c6e7cb', '#c4e1a6', '#60b16e',\n  '#ccd0af', '#a6a997', '#7a7072', '#fdd7af', '#fdb76e', '#dd8851',\n];\n\nconst SettingsGeneralBackground: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  theme,\n  backgroundColor,\n}) => {\n  const { setThemeSettings } = getActions();\n\n  const themeRef = useRef<string>();\n  themeRef.current = theme;\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const colorPickerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const huePickerRef = useRef<HTMLDivElement>(null);\n  const isFirstRunRef = useRef(true);\n\n  const [hsb, setHsb] = useState(getInitialHsb(backgroundColor));\n  // Cache for drag handlers\n  const hsbRef = useRef(hsb);\n  useEffect(() => {\n    hsbRef.current = hsb;\n  }, [hsb]);\n\n  const [isDragging, markIsDragging, unmarkIsDragging] = useFlag();\n  const [rgbInput, setRgbInput] = useState('');\n  const [hexInput, setHexInput] = useState('');\n\n  const rectsRef = useRef<CanvasRects>();\n  const colorCtxRef = useRef<CanvasRenderingContext2D>();\n\n  // Setup: cache rects, subscribe for drag events\n  useEffect(() => {\n    // We use `offsetLeft` instead of `left` to support screen transition\n    const colorRect = {\n      offsetLeft: colorPickerRef.current!.offsetLeft,\n      ...pick(colorPickerRef.current!.getBoundingClientRect(), ['top', 'width', 'height']),\n    };\n    const hueRect = {\n      offsetLeft: huePickerRef.current!.offsetLeft,\n      ...pick(huePickerRef.current!.getBoundingClientRect(), ['width']),\n    };\n\n    rectsRef.current = { colorRect, hueRect };\n\n    function handleColorDrag(e: MouseEvent | RealTouchEvent) {\n      const colorPosition = [\n        Math.min(Math.max(0, e.pageX! - colorRect.offsetLeft), colorRect.width - 1),\n        Math.min(Math.max(0, e.pageY! - colorRect.top + containerRef.current!.scrollTop), colorRect.height - 1),\n      ];\n\n      const { huePosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(colorPickerRef.current!, {\n      onCapture: handleColorDrag,\n      onDrag: handleColorDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n\n    function handleHueDrag(e: MouseEvent | RealTouchEvent) {\n      const { colorPosition } = hsb2positions(hsbRef.current, rectsRef.current!);\n      const huePosition = Math.min(Math.max(0, e.pageX! - hueRect.offsetLeft), hueRect.width - 1);\n\n      setHsb(positions2hsb({ colorPosition, huePosition }, rectsRef.current!));\n      markIsDragging();\n\n      return true;\n    }\n\n    captureEvents(huePickerRef.current!, {\n      onCapture: handleHueDrag,\n      onDrag: handleHueDrag,\n      onRelease: unmarkIsDragging,\n      onClick: unmarkIsDragging,\n      selectorToPreventScroll: '.SettingsGeneralBackgroundColor',\n      withCursor: true,\n    });\n  }, [markIsDragging, unmarkIsDragging]);\n\n  const { colorPosition = [0, 0], huePosition = 0 } = rectsRef.current ? hsb2positions(hsb, rectsRef.current) : {};\n  const hex = rgb2hex(hsb2rgb(hsb));\n  const hue = hsb[0];\n  const hueHex = rgb2hex(hsb2rgb([hue, 1, 1]));\n\n  // Save value and update inputs when HSL changes\n  useEffect(() => {\n    const rgb = hsb2rgb(hsb);\n    const color = `#${rgb2hex(rgb)}`;\n\n    setRgbInput(rgb.join(', '));\n    setHexInput(color);\n\n    if (!isFirstRunRef.current) {\n      const patternColor = getPatternColor(rgb);\n      setThemeSettings({\n        theme: themeRef.current,\n        background: undefined,\n        backgroundColor: color,\n        patternColor,\n      });\n    }\n    isFirstRunRef.current = false;\n  }, [hsb, setThemeSettings]);\n\n  // Redraw color picker when hue changes\n  useEffect(() => {\n    drawColor(colorPickerRef.current!.firstChild as HTMLCanvasElement, hue, colorCtxRef, rectsRef);\n  }, [hue]);\n\n  // Initially draw hue picker\n  useEffect(() => {\n    drawHue(huePickerRef.current!.firstChild as HTMLCanvasElement);\n  }, []);\n\n  const handleRgbChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const rgbValue = e.currentTarget.value.replace(/[^\\d, ]/g, '').slice(0, 13);\n\n    if (rgbValue.match(/^\\d{1,3},\\s?\\d{1,3},\\s?\\d{1,3}$/)) {\n      const rgb = rgbValue.split(',').map((channel) => Number(channel.trim())) as [number, number, number];\n      setHsb(rgb2hsb(rgb));\n    }\n\n    e.currentTarget.value = rgbValue;\n  }, []);\n\n  const handleHexChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    const hexValue = e.currentTarget.value.replace(/[^0-9a-fA-F]/g, '').slice(0, 6);\n\n    if (hexValue.match(/^#?[0-9a-fA-F]{6}$/)) {\n      setHsb(rgb2hsb(hex2rgb(hexValue.replace('#', ''))));\n    }\n\n    e.currentTarget.value = hexValue;\n  }, []);\n\n  const handlePredefinedColorClick = useCallback((e: React.MouseEvent<HTMLInputElement>) => {\n    setHsb(rgb2hsb(hex2rgb(e.currentTarget.dataset.color!.replace('#', ''))));\n  }, []);\n\n  const className = buildClassName(\n    'SettingsGeneralBackgroundColor settings-content custom-scroll',\n    isDragging && 'is-dragging',\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div ref={containerRef} className={className}>\n      <div className=\"settings-item pt-3\">\n        <div ref={colorPickerRef} className=\"color-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translate(${colorPosition[0]}px, ${colorPosition[1]}px); background-color: #${hex};`}\n          />\n        </div>\n        <div ref={huePickerRef} className=\"hue-picker\">\n          <canvas />\n          <div\n            className=\"handle\"\n            style={`transform: translateX(${huePosition}px); background-color: #${hueHex};`}\n          />\n        </div>\n        <div className=\"tools\">\n          <InputText value={hexInput} label=\"HEX\" onChange={handleHexChange} />\n          <InputText value={rgbInput} label=\"RGB\" onChange={handleRgbChange} />\n        </div>\n      </div>\n      <div className=\"predefined-colors\">\n        {PREDEFINED_COLORS.map((color) => (\n          <div\n            className={color === `#${hex}` ? 'active' : undefined}\n            data-color={color}\n            style={`background-color: ${color};`}\n            onClick={handlePredefinedColorClick}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nfunction getInitialHsb(backgroundColor?: string) {\n  return backgroundColor && backgroundColor.startsWith('#')\n    ? rgb2hsb(hex2rgb(backgroundColor.replace('#', '')))\n    : DEFAULT_HSB;\n}\n\nfunction hsb2positions(hsb: [number, number, number], rects: CanvasRects) {\n  return {\n    colorPosition: [\n      Math.round((hsb[1]) * (rects.colorRect.width - 1)),\n      Math.round((1 - hsb[2]) * (rects.colorRect.height - 1)),\n    ],\n    huePosition: Math.round(hsb[0] * (rects.hueRect.width - 1)),\n  };\n}\n\nfunction positions2hsb(\n  { colorPosition, huePosition }: { colorPosition: number[]; huePosition: number },\n  rects: CanvasRects,\n): [number, number, number] {\n  return [\n    huePosition / (rects.hueRect.width - 1),\n    colorPosition[0] / (rects.colorRect.width - 1),\n    1 - colorPosition[1] / (rects.colorRect.height - 1),\n  ];\n}\n\nfunction drawColor(\n  canvas: HTMLCanvasElement,\n  hue: number,\n  colorCtxRef: MutableRefObject<CanvasRenderingContext2D | undefined>,\n  rectsRef: RefObject<CanvasRects | undefined>,\n) {\n  let w: number;\n  let h: number;\n  let ctx: CanvasRenderingContext2D;\n\n  if (!colorCtxRef.current || !rectsRef.current) {\n    // First run\n    w = canvas.offsetWidth;\n    h = canvas.offsetHeight;\n    ctx = canvas.getContext('2d')!;\n\n    canvas.width = w;\n    canvas.height = h;\n\n    colorCtxRef.current = ctx;\n  } else {\n    w = rectsRef.current.colorRect.width;\n    h = rectsRef.current.colorRect.height;\n    ctx = colorCtxRef.current;\n  }\n\n  const imgData = ctx!.createImageData(w, h);\n  const pixels = imgData.data;\n  const col = hsb2rgb([hue, 1, 1]);\n\n  let index = 0;\n\n  for (let y = 0; y < h; y++) {\n    const perY = 1 - y / (h - 1);\n    const st = [255 * perY, 255 * perY, 255 * perY];\n    const ed = [col[0] * perY, col[1] * perY, col[2] * perY];\n    for (let x = 0; x < w; x++) {\n      const perX = x / (w - 1);\n      pixels[index++] = st[0] + (ed[0] - st[0]) * perX;\n      pixels[index++] = st[1] + (ed[1] - st[1]) * perX;\n      pixels[index++] = st[2] + (ed[2] - st[2]) * perX;\n      pixels[index++] = 255;\n    }\n  }\n\n  ctx!.putImageData(imgData, 0, 0);\n}\n\nfunction drawHue(canvas: HTMLCanvasElement) {\n  const w = canvas.offsetWidth;\n  const h = 1;\n  canvas.width = w;\n  canvas.height = h;\n  const ctx = canvas.getContext('2d')!;\n\n  const imgData = ctx.createImageData(w, h);\n  const pixels = imgData.data;\n\n  let index = 0;\n\n  for (let x = 0; x < w; x++) {\n    const hue = x / (w - 1);\n    const rgb = hsb2rgb([hue, 1, 1]);\n    /* eslint-disable prefer-destructuring */\n    pixels[index++] = rgb[0];\n    pixels[index++] = rgb[1];\n    pixels[index++] = rgb[2];\n    /* eslint-enable prefer-destructuring */\n    pixels[index++] = 255;\n  }\n\n  ctx.putImageData(imgData, 0, 0);\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const theme = selectTheme(global);\n    const { backgroundColor } = global.settings.themes[theme] || {};\n    return {\n      backgroundColor,\n      theme,\n    };\n  },\n)(SettingsGeneralBackground));\n","import type { ChangeEvent } from 'react';\nimport useRunDebounced from '../../../hooks/useRunDebounced';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { playNotifySound } from '../../../util/notifications';\n\nimport Checkbox from '../../ui/Checkbox';\nimport RangeSlider from '../../ui/RangeSlider';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPrivateChatsNotifications: boolean;\n  hasPrivateChatsMessagePreview: boolean;\n  hasGroupNotifications: boolean;\n  hasGroupMessagePreview: boolean;\n  hasBroadcastNotifications: boolean;\n  hasBroadcastMessagePreview: boolean;\n  hasContactJoinedNotifications: boolean;\n  hasWebNotifications: boolean;\n  hasPushNotifications: boolean;\n  notificationSoundVolume: number;\n};\n\nconst SettingsNotifications: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  hasPrivateChatsNotifications,\n  hasPrivateChatsMessagePreview,\n  hasGroupNotifications,\n  hasGroupMessagePreview,\n  hasBroadcastNotifications,\n  hasBroadcastMessagePreview,\n  hasContactJoinedNotifications,\n  hasPushNotifications,\n  hasWebNotifications,\n  notificationSoundVolume,\n}) => {\n  const {\n    loadNotificationSettings,\n    updateContactSignUpNotification,\n    updateNotificationSettings,\n    updateWebNotificationSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadNotificationSettings();\n  }, [loadNotificationSettings]);\n\n  const runDebounced = useRunDebounced(500, true);\n\n  const handleSettingsChange = useCallback((\n    e: ChangeEvent<HTMLInputElement>,\n    peerType: 'contact' | 'group' | 'broadcast',\n    setting: 'silent' | 'showPreviews',\n  ) => {\n    const currentIsSilent = peerType === 'contact'\n      ? !hasPrivateChatsNotifications\n      : !(peerType === 'group' ? hasGroupNotifications : hasBroadcastNotifications);\n    const currentShouldShowPreviews = peerType === 'contact'\n      ? hasPrivateChatsMessagePreview\n      : (peerType === 'group' ? hasGroupMessagePreview : hasBroadcastMessagePreview);\n\n    updateNotificationSettings({\n      peerType,\n      ...(setting === 'silent' && { isSilent: !e.target.checked, shouldShowPreviews: currentShouldShowPreviews }),\n      ...(setting === 'showPreviews' && { shouldShowPreviews: e.target.checked, isSilent: currentIsSilent }),\n    });\n  }, [\n    hasBroadcastMessagePreview, hasBroadcastNotifications,\n    hasGroupMessagePreview, hasGroupNotifications,\n    hasPrivateChatsMessagePreview, hasPrivateChatsNotifications,\n    updateNotificationSettings,\n  ]);\n\n  const handleWebNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasWebNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePushNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateWebNotificationSettings({\n      hasPushNotifications: e.target.checked,\n    });\n  }, [updateWebNotificationSettings]);\n\n  const handlePrivateChatsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'silent');\n  }, [handleSettingsChange]);\n\n  const handlePrivateChatsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'contact', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleGroupsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleGroupsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'group', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleChannelsNotificationsChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'silent');\n  }, [handleSettingsChange]);\n\n  const handleChannelsPreviewChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    handleSettingsChange(e, 'broadcast', 'showPreviews');\n  }, [handleSettingsChange]);\n\n  const handleContactNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    updateContactSignUpNotification({\n      isSilent: !e.target.checked,\n    });\n  }, [updateContactSignUpNotification]);\n\n  const handleVolumeChange = useCallback((volume: number) => {\n    updateWebNotificationSettings({\n      notificationSoundVolume: volume,\n    });\n    runDebounced(() => playNotifySound(undefined, volume));\n  }, [runDebounced, updateWebNotificationSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          Web notifications\n        </h4>\n        <Checkbox\n          label=\"Web notifications\"\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasWebNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasWebNotifications}\n          onChange={handleWebNotificationsChange}\n        />\n        <Checkbox\n          label=\"Offline notifications\"\n          disabled={!hasWebNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPushNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPushNotifications}\n          onChange={handlePushNotificationsChange}\n        />\n        <div className=\"settings-item-slider\">\n          <RangeSlider\n            label=\"Sound\"\n            min={0}\n            max={10}\n            value={notificationSoundVolume}\n            onChange={handleVolumeChange}\n          />\n        </div>\n      </div>\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AutodownloadPrivateChats')}\n        </h4>\n\n        <Checkbox\n          label={lang('NotificationsForPrivateChats')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsNotifications}\n          onChange={handlePrivateChatsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasPrivateChatsNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasPrivateChatsMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasPrivateChatsMessagePreview}\n          onChange={handlePrivateChatsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterGroups')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForGroups')}\n          subLabel={lang(hasGroupNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupNotifications}\n          onChange={handleGroupsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasGroupNotifications}\n          subLabel={lang(hasGroupMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasGroupMessagePreview}\n          onChange={handleGroupsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('FilterChannels')}</h4>\n\n        <Checkbox\n          label={lang('NotificationsForChannels')}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastNotifications ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastNotifications}\n          onChange={handleChannelsNotificationsChange}\n        />\n        <Checkbox\n          label={lang('MessagePreview')}\n          disabled={!hasBroadcastNotifications}\n          // eslint-disable-next-line max-len\n          subLabel={lang(hasBroadcastMessagePreview ? 'UserInfo.NotificationsEnabled' : 'UserInfo.NotificationsDisabled')}\n          checked={hasBroadcastMessagePreview}\n          onChange={handleChannelsPreviewChange}\n        />\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PhoneOther')}</h4>\n\n        <Checkbox\n          label={lang('ContactJoined')}\n          checked={hasContactJoinedNotifications}\n          onChange={handleContactNotificationChange}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      hasPrivateChatsNotifications: Boolean(global.settings.byKey.hasPrivateChatsNotifications),\n      hasPrivateChatsMessagePreview: Boolean(global.settings.byKey.hasPrivateChatsMessagePreview),\n      hasGroupNotifications: Boolean(global.settings.byKey.hasGroupNotifications),\n      hasGroupMessagePreview: Boolean(global.settings.byKey.hasGroupMessagePreview),\n      hasBroadcastNotifications: Boolean(global.settings.byKey.hasBroadcastNotifications),\n      hasBroadcastMessagePreview: Boolean(global.settings.byKey.hasBroadcastMessagePreview),\n      hasContactJoinedNotifications: Boolean(global.settings.byKey.hasContactJoinedNotifications),\n      hasWebNotifications: global.settings.byKey.hasWebNotifications,\n      hasPushNotifications: global.settings.byKey.hasPushNotifications,\n      notificationSoundVolume: global.settings.byKey.notificationSoundVolume,\n    };\n  },\n)(SettingsNotifications));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  hasPassword?: boolean;\n  hasPasscode?: boolean;\n  blockedCount: number;\n  webAuthCount: number;\n  isSensitiveEnabled?: boolean;\n  canChangeSensitive?: boolean;\n  privacyPhoneNumber?: ApiPrivacySettings;\n  privacyLastSeen?: ApiPrivacySettings;\n  privacyProfilePhoto?: ApiPrivacySettings;\n  privacyForwarding?: ApiPrivacySettings;\n  privacyGroupChats?: ApiPrivacySettings;\n  privacyPhoneCall?: ApiPrivacySettings;\n  privacyPhoneP2P?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacy: FC<OwnProps & StateProps> = ({\n  isActive,\n  hasPassword,\n  hasPasscode,\n  blockedCount,\n  webAuthCount,\n  isSensitiveEnabled,\n  canChangeSensitive,\n  privacyPhoneNumber,\n  privacyLastSeen,\n  privacyProfilePhoto,\n  privacyForwarding,\n  privacyGroupChats,\n  privacyPhoneCall,\n  privacyPhoneP2P,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    loadPrivacySettings,\n    loadBlockedContacts,\n    loadAuthorizations,\n    loadContentSettings,\n    updateContentSettings,\n  } = getActions();\n\n  useEffect(() => {\n    loadBlockedContacts();\n    loadAuthorizations();\n    loadPrivacySettings();\n    loadContentSettings();\n  }, [loadBlockedContacts, loadAuthorizations, loadPrivacySettings, loadContentSettings]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function getVisibilityValue(setting?: ApiPrivacySettings) {\n    const { visibility } = setting || {};\n    const blockCount = setting ? setting.blockChatIds.length + setting.blockUserIds.length : 0;\n    const allowCount = setting ? setting.allowChatIds.length + setting.allowUserIds.length : 0;\n    const total = [];\n    if (blockCount) total.push(`-${blockCount}`);\n    if (allowCount) total.push(`+${allowCount}`);\n\n    const exceptionString = total.length ? `(${total.join(',')})` : '';\n\n    switch (visibility) {\n      case 'everybody':\n        return `${lang('P2PEverybody')} ${exceptionString}`;\n\n      case 'contacts':\n        return `${lang('P2PContacts')} ${exceptionString}`;\n\n      case 'nobody':\n        return `${lang('P2PNobody')} ${exceptionString}`;\n    }\n\n    return undefined;\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item pt-3\">\n        <ListItem\n          icon=\"delete-user\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyBlockedUsers)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('BlockedUsers')}</span>\n            {blockedCount > 0 && (\n              <span className=\"subtitle\" dir=\"auto\">\n                {lang('Users', blockedCount)}\n              </span>\n            )}\n          </div>\n        </ListItem>\n        {webAuthCount > 0 && (\n          <ListItem\n            icon=\"web\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => onScreenSelect(SettingsScreens.ActiveWebsites)}\n          >\n            {lang('PrivacySettings.WebSessions')}\n            <span className=\"settings-item__current-value\">{webAuthCount}</span>\n          </ListItem>\n        )}\n        <ListItem\n          icon=\"key\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPasscode ? SettingsScreens.PasscodeEnabled : SettingsScreens.PasscodeDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('Passcode')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPasscode ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          icon=\"lock\"\n          narrow\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(\n            hasPassword ? SettingsScreens.TwoFaEnabled : SettingsScreens.TwoFaDisabled,\n          )}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('TwoStepVerification')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {lang(hasPassword ? 'PasswordOn' : 'PasswordOff')}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyTitle')}</h4>\n\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneNumber)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyPhoneTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneNumber)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyLastSeen)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('LastSeenTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyLastSeen)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyProfilePhoto)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyProfilePhotoTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyProfilePhoto)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneCall)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanCallMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneCall)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyPhoneP2P)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyP2P')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyPhoneP2P)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyForwarding)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('PrivacyForwardsTitle')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyForwarding)}\n            </span>\n          </div>\n        </ListItem>\n        <ListItem\n          narrow\n          className=\"no-icon\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PrivacyGroupChats)}\n        >\n          <div className=\"multiline-menu-item\">\n            <span className=\"title\">{lang('WhoCanAddMe')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {getVisibilityValue(privacyGroupChats)}\n            </span>\n          </div>\n        </ListItem>\n      </div>\n\n      {canChangeSensitive && (\n        <div className=\"settings-item\">\n          <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('lng_settings_sensitive_title')}\n          </h4>\n          <Checkbox\n            label={lang('lng_settings_sensitive_disable_filtering')}\n            subLabel={lang('lng_settings_sensitive_about')}\n            checked={Boolean(isSensitiveEnabled)}\n            disabled={!canChangeSensitive}\n            onCheck={updateContentSettings}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      settings: {\n        byKey: {\n          hasPassword, isSensitiveEnabled, canChangeSensitive,\n        },\n        privacy,\n      },\n      blocked,\n      passcode: {\n        hasPasscode,\n      },\n    } = global;\n\n    return {\n      hasPassword,\n      hasPasscode: Boolean(hasPasscode),\n      blockedCount: blocked.totalCount,\n      webAuthCount: global.activeWebSessions.orderedHashes.length,\n      isSensitiveEnabled,\n      canChangeSensitive,\n      privacyPhoneNumber: privacy.phoneNumber,\n      privacyLastSeen: privacy.lastSeen,\n      privacyProfilePhoto: privacy.profilePhoto,\n      privacyForwarding: privacy.forwards,\n      privacyGroupChats: privacy.chatInvite,\n      privacyPhoneCall: privacy.phoneCall,\n      privacyPhoneP2P: privacy.phoneP2P,\n    };\n  },\n)(SettingsPrivacy));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ISettings, LangCode } from '../../../types';\nimport type { ApiLanguage } from '../../../api/types';\n\nimport { setLanguage } from '../../../util/langProvider';\n\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nconst chinese: ApiLanguage = {\n  beta: true,\n  name: 'Chinese',\n  nativeName: '中文',\n  langCode: 'zh-CN',\n  baseLangCode: 'zh',\n  pluralCode: 'zh',\n  stringsCount: 4793,\n  translatedCount: 4793,\n  translationsUrl: 'https://crwd.in/telegram-tt',\n};\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = Pick<ISettings, 'languages' | 'language'>;\n\nconst SettingsLanguage: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  languages,\n  language,\n}) => {\n  const {\n    loadLanguages,\n    setSettingOption,\n  } = getActions();\n\n  const getCustomLanguage = window.localStorage.getItem('custom-language');\n  const customLanguage = getCustomLanguage === 'official' ? undefined : getCustomLanguage;\n\n  const [selectedLanguage, setSelectedLanguage] = useState<string>(customLanguage ?? language);\n  const [isLoading, markIsLoading, unmarkIsLoading] = useFlag();\n\n  // TODO Throttle\n  useEffect(() => {\n    loadLanguages();\n  }, [loadLanguages]);\n\n  const handleChange = useCallback((langCode: string) => {\n    const displayLang = langCode;\n    if (langCode === 'zh-CN') {\n      window.localStorage.setItem('custom-language', 'zh-CN');\n      window.localStorage.setItem('custom-language-name', '中文');\n      langCode = 'en';\n    } else {\n      window.localStorage.setItem('custom-language', 'official');\n      window.localStorage.removeItem('custom-language-name');\n    }\n\n    setSelectedLanguage(displayLang);\n    markIsLoading();\n\n    void setLanguage(langCode as LangCode, () => {\n      unmarkIsLoading();\n\n      setSettingOption({ language: langCode });\n    });\n  }, [markIsLoading, unmarkIsLoading, setSettingOption]);\n\n  const options = useMemo(() => {\n    return languages ? buildOptions([chinese, ...languages]) : undefined;\n  }, [languages]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content settings-item settings-language custom-scroll settings-item--first\">\n      {options ? (\n        <RadioGroup\n          name=\"keyboard-send-settings\"\n          options={options}\n          selected={selectedLanguage}\n          loadingOption={isLoading ? selectedLanguage : undefined}\n          onChange={handleChange}\n        />\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nfunction buildOptions(languages: ApiLanguage[]) {\n  const currentLangCode = (window.navigator.language || 'en').toLowerCase();\n  const shortLangCode = currentLangCode.substr(0, 2);\n\n  return languages.map(({ langCode, nativeName, name }) => ({\n    value: langCode,\n    label: nativeName,\n    subLabel: name,\n  })).sort((a) => {\n    return currentLangCode && (a.value === currentLangCode || a.value === shortLangCode) ? -1 : 0;\n  });\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      languages: global.settings.byKey.languages,\n      language: global.settings.byKey.language,\n    };\n  },\n)(SettingsLanguage));\n","import type { ApiPrivacyKey } from '../../../../types';\nimport { SettingsScreens } from '../../../../types';\n\nexport function getPrivacyKey(screen: SettingsScreens): ApiPrivacyKey | undefined {\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumber:\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return 'phoneNumber';\n    case SettingsScreens.PrivacyLastSeen:\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return 'lastSeen';\n    case SettingsScreens.PrivacyProfilePhoto:\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return 'profilePhoto';\n    case SettingsScreens.PrivacyForwarding:\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return 'forwards';\n    case SettingsScreens.PrivacyGroupChats:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n      return 'chatInvite';\n    case SettingsScreens.PrivacyPhoneCall:\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return 'phoneCall';\n    case SettingsScreens.PrivacyPhoneP2P:\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return 'phoneP2P';\n  }\n\n  return undefined;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiUser } from '../../../api/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport { getPrivacyKey } from './helpers/privacy';\n\ntype OwnProps = {\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps =\n  Partial<ApiPrivacySettings> & {\n    chatsById?: Record<string, ApiChat>;\n    usersById?: Record<string, ApiUser>;\n  };\n\nconst SettingsPrivacyVisibility: FC<OwnProps & StateProps> = ({\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  visibility,\n  allowUserIds,\n  allowChatIds,\n  blockUserIds,\n  blockChatIds,\n  chatsById,\n}) => {\n  const { setPrivacyVisibility } = getActions();\n\n  const lang = useLang();\n\n  const visibilityOptions = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyGroupChats:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n        ];\n\n      default:\n        return [\n          { value: 'everybody', label: lang('P2PEverybody') },\n          { value: 'contacts', label: lang('P2PContacts') },\n          { value: 'nobody', label: lang('P2PNobody') },\n        ];\n    }\n  }, [lang, screen]);\n\n  const exceptionLists = {\n    shouldShowDenied: visibility !== 'nobody',\n    shouldShowAllowed: visibility !== 'everybody',\n  };\n\n  const privacyKey = getPrivacyKey(screen);\n\n  const headerText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return lang('PrivacyPhoneTitle');\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('LastSeenTitle');\n      case SettingsScreens.PrivacyProfilePhoto:\n        return lang('PrivacyProfilePhotoTitle');\n      case SettingsScreens.PrivacyForwarding:\n        return lang('PrivacyForwardsTitle');\n      case SettingsScreens.PrivacyGroupChats:\n        return lang('WhoCanAddMe');\n      case SettingsScreens.PrivacyPhoneCall:\n        return lang('WhoCanCallMe');\n      case SettingsScreens.PrivacyPhoneP2P:\n        return lang('PrivacyP2P');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const descriptionText = useMemo(() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyLastSeen:\n        return lang('CustomHelp');\n      default:\n        return undefined;\n    }\n  }, [lang, screen]);\n\n  const allowedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberAllowedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenAllowedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoAllowedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingAllowedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallAllowedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PAllowedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsAllowedContacts;\n    }\n  })();\n\n  const deniedContactsScreen = (() => {\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        return SettingsScreens.PrivacyPhoneNumberDeniedContacts;\n      case SettingsScreens.PrivacyLastSeen:\n        return SettingsScreens.PrivacyLastSeenDeniedContacts;\n      case SettingsScreens.PrivacyProfilePhoto:\n        return SettingsScreens.PrivacyProfilePhotoDeniedContacts;\n      case SettingsScreens.PrivacyForwarding:\n        return SettingsScreens.PrivacyForwardingDeniedContacts;\n      case SettingsScreens.PrivacyPhoneCall:\n        return SettingsScreens.PrivacyPhoneCallDeniedContacts;\n      case SettingsScreens.PrivacyPhoneP2P:\n        return SettingsScreens.PrivacyPhoneP2PDeniedContacts;\n      default:\n        return SettingsScreens.PrivacyGroupChatsDeniedContacts;\n    }\n  })();\n\n  const allowedCount = useMemo(() => {\n    if (!allowUserIds || !allowChatIds || !chatsById) {\n      return 0;\n    }\n\n    return allowChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, allowUserIds.length);\n  }, [allowChatIds, allowUserIds, chatsById]);\n\n  const blockCount = useMemo(() => {\n    if (!blockUserIds || !blockChatIds || !chatsById) {\n      return 0;\n    }\n\n    return blockChatIds.reduce((result, chatId) => {\n      return result + (chatsById[chatId] ? chatsById[chatId].membersCount! : 0);\n    }, blockUserIds.length);\n  }, [blockChatIds, blockUserIds, chatsById]);\n\n  const handleVisibilityChange = useCallback((value) => {\n    setPrivacyVisibility({\n      privacyKey,\n      visibility: value,\n    });\n  }, [privacyKey, setPrivacyVisibility]);\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header\" dir={lang.isRtl ? 'rtl' : undefined}>{headerText}</h4>\n\n        <RadioGroup\n          name={`visibility-${privacyKey}`}\n          options={visibilityOptions}\n          onChange={handleVisibilityChange}\n          selected={visibility}\n        />\n\n        {descriptionText && (\n          <p className=\"settings-item-description-larger\" dir={lang.isRtl ? 'rtl' : undefined}>{descriptionText}</p>\n        )}\n      </div>\n\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>{lang('PrivacyExceptions')}</h4>\n\n        {exceptionLists.shouldShowAllowed && (\n          <ListItem\n            narrow\n            icon=\"add-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(allowedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {allowedCount > 0 && <span className=\"date\" dir=\"auto\">+{allowedCount}</span>}\n              <span className=\"title\">{lang('AlwaysAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n        {exceptionLists.shouldShowDenied && (\n          <ListItem\n            narrow\n            icon=\"delete-user\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => {\n              onScreenSelect(deniedContactsScreen);\n            }}\n          >\n            <div className=\"multiline-menu-item full-size\">\n              {blockCount > 0 && <span className=\"date\" dir=\"auto\">&minus;{blockCount}</span>}\n              <span className=\"title\">{lang('NeverAllow')}</span>\n              <span className=\"subtitle\">{lang('EditAdminAddUsers')}</span>\n            </div>\n          </ListItem>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    let privacySettings: ApiPrivacySettings | undefined;\n\n    const {\n      chats: { byId: chatsById },\n      settings: { privacy },\n    } = global;\n\n    switch (screen) {\n      case SettingsScreens.PrivacyPhoneNumber:\n        privacySettings = privacy.phoneNumber;\n        break;\n\n      case SettingsScreens.PrivacyLastSeen:\n        privacySettings = privacy.lastSeen;\n        break;\n\n      case SettingsScreens.PrivacyProfilePhoto:\n        privacySettings = privacy.profilePhoto;\n        break;\n\n      case SettingsScreens.PrivacyPhoneCall:\n        privacySettings = privacy.phoneCall;\n        break;\n\n      case SettingsScreens.PrivacyPhoneP2P:\n        privacySettings = privacy.phoneP2P;\n        break;\n\n      case SettingsScreens.PrivacyForwarding:\n        privacySettings = privacy.forwards;\n        break;\n\n      case SettingsScreens.PrivacyGroupChats:\n        privacySettings = privacy.chatInvite;\n        break;\n    }\n\n    if (!privacySettings) {\n      return {};\n    }\n\n    return {\n      ...privacySettings,\n      chatsById,\n    };\n  },\n)(SettingsPrivacyVisibility));\n","import type { ApiSession } from '../../../../api/types';\n\nexport default function getSessionIcon(session: ApiSession): string {\n  const platform = session.platform.toLowerCase();\n  const device = session.deviceModel.toLowerCase();\n  const systemVersion = session.systemVersion.toLowerCase();\n\n  if (device.includes('xbox')) {\n    return 'xbox';\n  }\n\n  if (device.includes('chrome') && !device.includes('chromebook')) {\n    return 'chrome';\n  }\n  if (device.includes('brave')) {\n    return 'brave';\n  }\n  if (device.includes('vivaldi')) {\n    return 'vivaldi';\n  }\n  if (device.includes('safari')) {\n    return 'safari';\n  }\n  if (device.includes('firefox')) {\n    return 'firefox';\n  }\n  if (device.includes('opera')) {\n    return 'opera';\n  }\n  if (device.includes('samsungbrowser')) {\n    return 'samsung';\n  }\n  if (platform.includes('android')) {\n    return 'android';\n  }\n  if (\n    device.includes('iphone')\n    || device.includes('ipad')\n    || platform.includes('ios')\n    || platform.includes('macos')\n    || systemVersion.includes('macos')\n  ) {\n    return 'apple';\n  }\n  if (platform.includes('ubuntu') || systemVersion.includes('ubuntu')) {\n    return 'ubuntu';\n  }\n  if (platform.includes('linux') || systemVersion.includes('linux')) {\n    return 'linux';\n  }\n  if (platform.includes('windows') || systemVersion.includes('windows')) {\n    return 'windows';\n  }\n\n  return 'unknown';\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"SettingsActiveSession\":\"src-components-left-settings-SettingsActiveSession-module__SettingsActiveSession\",\"settingsActiveSession\":\"src-components-left-settings-SettingsActiveSession-module__SettingsActiveSession\",\"iconDevice\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice\",\"iconDevice__android\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__android\",\"iconDeviceAndroid\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__android\",\"iconDevice__apple\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__apple\",\"iconDeviceApple\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__apple\",\"iconDevice__brave\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__brave\",\"iconDeviceBrave\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__brave\",\"iconDevice__chrome\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__chrome\",\"iconDeviceChrome\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__chrome\",\"iconDevice__edge\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__edge\",\"iconDeviceEdge\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__edge\",\"iconDevice__firefox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__firefox\",\"iconDeviceFirefox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__firefox\",\"iconDevice__linux\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__linux\",\"iconDeviceLinux\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__linux\",\"iconDevice__opera\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__opera\",\"iconDeviceOpera\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__opera\",\"iconDevice__safari\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__safari\",\"iconDeviceSafari\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__safari\",\"iconDevice__samsung\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__samsung\",\"iconDeviceSamsung\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__samsung\",\"iconDevice__ubuntu\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__ubuntu\",\"iconDeviceUbuntu\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__ubuntu\",\"iconDevice__unknown\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__unknown\",\"iconDeviceUnknown\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__unknown\",\"iconDevice__vivaldi\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__vivaldi\",\"iconDeviceVivaldi\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__vivaldi\",\"iconDevice__windows\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__windows\",\"iconDeviceWindows\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__windows\",\"iconDevice__xbox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__xbox\",\"iconDeviceXbox\":\"src-components-left-settings-SettingsActiveSession-module__iconDevice__xbox\",\"title\":\"src-components-left-settings-SettingsActiveSession-module__title\",\"note\":\"src-components-left-settings-SettingsActiveSession-module__note\",\"date\":\"src-components-left-settings-SettingsActiveSession-module__date\",\"box\":\"src-components-left-settings-SettingsActiveSession-module__box\",\"actionHeader\":\"src-components-left-settings-SettingsActiveSession-module__actionHeader\",\"actionName\":\"src-components-left-settings-SettingsActiveSession-module__actionName\",\"headerButton\":\"src-components-left-settings-SettingsActiveSession-module__headerButton\"};","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\nimport getSessionIcon from './helpers/getSessionIcon';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Modal from '../../ui/Modal';\nimport Switcher from '../../ui/Switcher';\nimport Button from '../../ui/Button';\n\nimport styles from './SettingsActiveSession.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiSession;\n};\n\nconst SettingsActiveSession: FC<OwnProps & StateProps> = ({\n  isOpen, session, onClose,\n}) => {\n  const { changeSessionSettings, terminateAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n\n  const handleSecretChatsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areSecretChatsEnabled: !session!.areSecretChatsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleCallsStateChange = useCallback(() => {\n    changeSessionSettings({\n      hash: session!.hash,\n      areCallsEnabled: !session!.areCallsEnabled,\n    });\n  }, [changeSessionSettings, session]);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('SessionPreview.Title')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('SessionPreview.TerminateSession')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.SettingsActiveSession}\n    >\n      <div className={buildClassName(\n        styles.iconDevice,\n        renderingSession && styles[`iconDevice__${getSessionIcon(renderingSession)}`],\n      )}\n      />\n      <h3 className={styles.title} dir=\"auto\">{renderingSession?.deviceModel}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {formatDateTimeToString(renderingSession.dateActive * 1000, lang.code)}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('SessionPreview.App')}</dt>\n        <dd>\n          {renderingSession?.appName} {renderingSession?.appVersion},{' '}\n          {renderingSession?.platform} {renderingSession?.systemVersion}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession && getLocation(renderingSession)}</dd>\n      </dl>\n\n      <p className={styles.note}>{lang('SessionPreview.IpDesc')}</p>\n\n      <h4 className={styles.actionHeader}>{lang('AuthSessions.View.AcceptTitle')}</h4>\n\n      <ListItem onClick={handleSecretChatsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Secret')}</span>\n        <Switcher\n          id=\"accept_secrets\"\n          label=\"On\"\n          checked={renderingSession.areSecretChatsEnabled}\n        />\n      </ListItem>\n      <ListItem onClick={handleCallsStateChange}>\n        <span className={styles.actionName}>{lang('SessionPreview.Accept.Calls')}</span>\n        <Switcher\n          id=\"accept_calls\"\n          label=\"On\"\n          checked={renderingSession.areCallsEnabled}\n        />\n      </ListItem>\n    </Modal>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  return {\n    session: hash ? global.activeSessions.byHash[hash] : undefined,\n  };\n})(SettingsActiveSession));\n","/* eslint-disable react/jsx-no-bind */\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport getSessionIcon from './helpers/getSessionIcon';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveSession from './SettingsActiveSession';\n\nimport './SettingsActiveSessions.scss';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiSession>;\n  orderedHashes: string[];\n  ttlDays?: number;\n};\n\nconst SettingsActiveSessions: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  byHash,\n  orderedHashes,\n  ttlDays,\n}) => {\n  const {\n    terminateAuthorization,\n    terminateAllAuthorizations,\n    changeSessionTtl,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedSessionHash, setOpenedSessionHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const autoTerminateValue = useMemo(() => {\n    if (ttlDays === undefined) {\n      return undefined;\n    }\n    if (ttlDays <= 7) {\n      return '7';\n    }\n    if (ttlDays <= 30) {\n      return '30';\n    }\n    if (ttlDays <= 90) {\n      return '90';\n    }\n    if (ttlDays <= 180) {\n      return '180';\n    }\n\n    return undefined;\n  }, [ttlDays]);\n\n  const AUTO_TERMINATE_OPTIONS = useMemo(() => [{\n    label: lang('Weeks', 1, 'i'),\n    value: '7',\n  }, {\n    label: lang('Months', 1, 'i'),\n    value: '30',\n  }, {\n    label: lang('Months', 3, 'i'),\n    value: '90',\n  }, {\n    label: lang('Months', 6, 'i'),\n    value: '180',\n  }], [lang]);\n\n  const handleTerminateSessionClick = useCallback((hash: string) => {\n    terminateAuthorization({ hash });\n  }, [terminateAuthorization]);\n\n  const handleTerminateAllSessions = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedSessionHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseSessionModal = useCallback(() => {\n    setOpenedSessionHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  const handleChangeSessionTtl = useCallback((value: string) => {\n    changeSessionTtl({ days: Number(value) });\n  }, [changeSessionTtl]);\n\n  const currentSession = useMemo(() => {\n    const currentSessionHash = orderedHashes.find((hash) => byHash[hash].isCurrent);\n\n    return currentSessionHash ? byHash[currentSessionHash] : undefined;\n  }, [byHash, orderedHashes]);\n\n  const otherSessionHashes = useMemo(() => {\n    return orderedHashes.filter((hash) => !byHash[hash].isCurrent);\n  }, [byHash, orderedHashes]);\n  const hasOtherSessions = Boolean(otherSessionHashes.length);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderCurrentSession(session: ApiSession) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('AuthSessions.CurrentSession')}\n        </h4>\n\n        <ListItem narrow inactive icon={`device-${getSessionIcon(session)} icon-device`}>\n          <div className=\"multiline-menu-item\" dir=\"auto\">\n            <span className=\"title\" dir=\"auto\">{session.deviceModel}</span>\n            <span className=\"subtitle black tight\">\n              {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n            </span>\n            <span className=\"subtitle\">{session.ip} - {getLocation(session)}</span>\n          </div>\n        </ListItem>\n\n        {hasOtherSessions && (\n          <ListItem\n            className=\"destructive mb-0 no-icon\"\n            icon=\"stop\"\n            ripple\n            narrow\n            onClick={openConfirmTerminateAllDialog}\n          >\n            {lang('TerminateAllSessions')}\n          </ListItem>\n        )}\n      </div>\n    );\n  }\n\n  function renderOtherSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('OtherSessions')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderAutoTerminate() {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('TerminateOldSessionHeader')}\n        </h4>\n\n        <p>{lang('IfInactiveFor')}</p>\n        <RadioGroup\n          name=\"session_ttl\"\n          options={AUTO_TERMINATE_OPTIONS}\n          selected={autoTerminateValue}\n          onChange={handleChangeSessionTtl}\n        />\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateSessionClick(session.hash);\n          },\n        }]}\n        icon={`device-${getSessionIcon(session)} icon-device`}\n        onClick={() => { handleOpenSessionModal(session.hash); }}\n      >\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{session.deviceModel}</span>\n          <span className=\"subtitle black tight\">\n            {session.appName} {session.appVersion}, {session.platform} {session.systemVersion}\n          </span>\n          <span className=\"subtitle\">{session.ip} {getLocation(session)}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-content custom-scroll SettingsActiveSessions\">\n      {currentSession && renderCurrentSession(currentSession)}\n      {hasOtherSessions && renderOtherSessions(otherSessionHashes)}\n      {renderAutoTerminate()}\n      {hasOtherSessions && (\n        <ConfirmDialog\n          isOpen={isConfirmTerminateAllDialogOpen}\n          onClose={closeConfirmTerminateAllDialog}\n          text={lang('AreYouSureSessions')}\n          confirmLabel={lang('TerminateAllSessions')}\n          confirmHandler={handleTerminateAllSessions}\n          confirmIsDestructive\n        />\n      )}\n      <SettingsActiveSession isOpen={isModalOpen} hash={openedSessionHash} onClose={handleCloseSessionModal} />\n    </div>\n  );\n};\n\nfunction getLocation(session: ApiSession) {\n  return [session.region, session.country].filter(Boolean).join(', ');\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => global.activeSessions,\n)(SettingsActiveSessions));\n","import React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiUser, ApiWebSession } from '../../../api/types';\n\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useCurrentOrPrev from '../../../hooks/useCurrentOrPrev';\n\nimport Modal from '../../ui/Modal';\nimport Button from '../../ui/Button';\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SettingsActiveWebsite.module.scss';\n\ntype OwnProps = {\n  isOpen: boolean;\n  hash?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  session?: ApiWebSession;\n  bot?: ApiUser;\n};\n\nconst SettingsActiveWebsite: FC<OwnProps & StateProps> = ({\n  isOpen, session, bot, onClose,\n}) => {\n  const { terminateWebAuthorization } = getActions();\n  const lang = useLang();\n\n  const renderingSession = useCurrentOrPrev(session, true);\n  const renderingBot = useCurrentOrPrev(bot, true);\n\n  const handleTerminateSessionClick = useCallback(() => {\n    terminateWebAuthorization({ hash: session!.hash });\n    onClose();\n  }, [onClose, session, terminateWebAuthorization]);\n\n  if (!renderingSession) {\n    return undefined;\n  }\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel={lang('Close')} onClick={onClose}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('WebSessionsTitle')}</div>\n        <Button\n          color=\"danger\"\n          onClick={handleTerminateSessionClick}\n          className={buildClassName('modal-action-button', styles.headerButton)}\n        >\n          {lang('AuthSessions.LogOut')}\n        </Button>\n      </div>\n    );\n  }\n  return (\n    <Modal\n      header={renderHeader()}\n      isOpen={isOpen}\n      hasCloseButton\n      onClose={onClose}\n      className={styles.root}\n    >\n      <Avatar className={styles.avatar} user={renderingBot} size=\"large\" />\n      <h3 className={styles.title} dir=\"auto\">{getUserFullName(renderingBot)}</h3>\n      <div className={styles.date} aria-label={lang('PrivacySettings.LastSeen')}>\n        {renderingSession?.domain}\n      </div>\n\n      <dl className={styles.box}>\n        <dt>{lang('AuthSessions.View.Browser')}</dt>\n        <dd>\n          {renderingSession?.browser}\n        </dd>\n\n        <dt>{lang('SessionPreview.Ip')}</dt>\n        <dd>{renderingSession?.ip}</dd>\n\n        <dt>{lang('SessionPreview.Location')}</dt>\n        <dd>{renderingSession?.region}</dd>\n      </dl>\n      <p className={styles.note}>{lang('AuthSessions.View.LocationInfo')}</p>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { hash }) => {\n  const session = hash ? global.activeWebSessions.byHash[hash] : undefined;\n  const bot = session ? global.users.byId[session.botId] : undefined;\n  return {\n    session,\n    bot,\n  };\n})(SettingsActiveWebsite));\n","// extracted by mini-css-extract-plugin\nexport default {\"root\":\"src-components-left-settings-SettingsActiveWebsite-module__root\",\"avatar\":\"src-components-left-settings-SettingsActiveWebsite-module__avatar\",\"title\":\"src-components-left-settings-SettingsActiveWebsite-module__title\",\"note\":\"src-components-left-settings-SettingsActiveWebsite-module__note\",\"date\":\"src-components-left-settings-SettingsActiveWebsite-module__date\",\"box\":\"src-components-left-settings-SettingsActiveWebsite-module__box\",\"action-header\":\"src-components-left-settings-SettingsActiveWebsite-module__action-header\",\"actionHeader\":\"src-components-left-settings-SettingsActiveWebsite-module__action-header\",\"action-name\":\"src-components-left-settings-SettingsActiveWebsite-module__action-name\",\"actionName\":\"src-components-left-settings-SettingsActiveWebsite-module__action-name\",\"header-button\":\"src-components-left-settings-SettingsActiveWebsite-module__header-button\",\"headerButton\":\"src-components-left-settings-SettingsActiveWebsite-module__header-button\"};","// extracted by mini-css-extract-plugin\nexport default {\"avatar\":\"src-components-left-settings-SettingsActiveWebsites-module__avatar\",\"clear-help\":\"src-components-left-settings-SettingsActiveWebsites-module__clear-help\",\"clearHelp\":\"src-components-left-settings-SettingsActiveWebsites-module__clear-help\"};","import React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { FC } from '../../../lib/teact/teact';\nimport type { ApiWebSession } from '../../../api/types';\n\nimport { formatPastTimeShort } from '../../../util/dateFormat';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport SettingsActiveWebsite from './SettingsActiveWebsite';\nimport Avatar from '../../common/Avatar';\n\nimport styles from './SettingsActiveWebsites.module.scss';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  byHash: Record<string, ApiWebSession>;\n  orderedHashes: string[];\n};\n\nconst SettingsActiveWebsites: FC<OwnProps & StateProps> = ({\n  isActive,\n  byHash,\n  orderedHashes,\n  onReset,\n}) => {\n  const {\n    terminateWebAuthorization,\n    terminateAllWebAuthorizations,\n  } = getActions();\n\n  const lang = useLang();\n  const [isConfirmTerminateAllDialogOpen, openConfirmTerminateAllDialog, closeConfirmTerminateAllDialog] = useFlag();\n  const [openedWebsiteHash, setOpenedWebsiteHash] = useState<string | undefined>();\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  const handleTerminateAuthClick = useCallback((hash: string) => {\n    terminateWebAuthorization({ hash });\n  }, [terminateWebAuthorization]);\n\n  const handleTerminateAllAuth = useCallback(() => {\n    closeConfirmTerminateAllDialog();\n    terminateAllWebAuthorizations();\n  }, [closeConfirmTerminateAllDialog, terminateAllWebAuthorizations]);\n\n  const handleOpenSessionModal = useCallback((hash: string) => {\n    setOpenedWebsiteHash(hash);\n    openModal();\n  }, [openModal]);\n\n  const handleCloseWebsiteModal = useCallback(() => {\n    setOpenedWebsiteHash(undefined);\n    closeModal();\n  }, [closeModal]);\n\n  // Close when empty\n  useEffect(() => {\n    if (!orderedHashes.length) {\n      onReset();\n    }\n  }, [onReset, orderedHashes]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderSessions(sessionHashes: string[]) {\n    return (\n      <div className=\"settings-item\">\n        <h4 className=\"settings-item-header mb-4\" dir={lang.isRtl ? 'rtl' : undefined}>\n          {lang('WebSessionsTitle')}\n        </h4>\n\n        {sessionHashes.map(renderSession)}\n      </div>\n    );\n  }\n\n  function renderSession(sessionHash: string) {\n    const session = byHash[sessionHash];\n    const bot = getGlobal().users.byId[session.botId];\n\n    return (\n      <ListItem\n        key={session.hash}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Terminate',\n          icon: 'stop',\n          destructive: true,\n          handler: () => {\n            handleTerminateAuthClick(session.hash);\n          },\n        }]}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => handleOpenSessionModal(session.hash)}\n      >\n        <Avatar className={styles.avatar} user={bot} size=\"tiny\" />\n        <div className=\"multiline-menu-item full-size\" dir=\"auto\">\n          <span className=\"date\">{formatPastTimeShort(lang, session.dateActive * 1000)}</span>\n          <span className=\"title\">{getUserFullName(bot)}</span>\n          <span className={buildClassName('subtitle', 'black', 'tight', styles.platform)}>\n            {session.domain}, {session.browser}, {session.platform}\n          </span>\n          <span className=\"subtitle\">{session.ip} {session.region}</span>\n        </div>\n      </ListItem>\n    );\n  }\n\n  if (!orderedHashes.length) return undefined;\n\n  return (\n    <div className=\"settings-content custom-scroll\">\n      <div className=\"settings-item\">\n        <ListItem\n          className=\"destructive mb-0 no-icon\"\n          icon=\"stop\"\n          ripple\n          narrow\n          onClick={openConfirmTerminateAllDialog}\n        >\n          {lang('AuthSessions.LogOutApplications')}\n        </ListItem>\n        <p className={buildClassName('settings-item-description', styles.clearHelp)}>\n          {lang('ClearOtherWebSessionsHelp')}\n        </p>\n      </div>\n      {renderSessions(orderedHashes)}\n      <ConfirmDialog\n        isOpen={isConfirmTerminateAllDialogOpen}\n        onClose={closeConfirmTerminateAllDialog}\n        title={lang('AuthSessions.LogOutApplications')}\n        text={lang('AreYouSureWebSessions')}\n        confirmHandler={handleTerminateAllAuth}\n        confirmIsDestructive\n      />\n      <SettingsActiveWebsite isOpen={isModalOpen} hash={openedWebsiteHash} onClose={handleCloseWebsiteModal} />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byHash, orderedHashes } = global.activeWebSessions;\n    return {\n      byHash,\n      orderedHashes,\n    };\n  },\n)(SettingsActiveWebsites));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback, useEffect,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport { filterUsersByName, getUserFullName } from '../../../global/helpers';\nimport { unique } from '../../../util/iteratees';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  blockedIds: string[];\n  contactIds?: string[];\n  localContactIds?: string[];\n  currentUserId?: string;\n};\n\nconst BlockUserModal: FC<OwnProps & StateProps> = ({\n  usersById,\n  blockedIds,\n  contactIds,\n  localContactIds,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    setUserSearchQuery,\n    blockContact,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  useEffect(() => {\n    setUserSearchQuery({ query: filter });\n  }, [filter, setUserSearchQuery]);\n\n  const filteredContactIds = useMemo(() => {\n    const availableContactIds = unique([\n      ...(contactIds || []),\n      ...(localContactIds || []),\n    ].filter((contactId) => {\n      return contactId !== currentUserId && !blockedIds.includes(contactId);\n    }));\n\n    return filterUsersByName(availableContactIds, usersById, filter)\n      .sort((firstId, secondId) => {\n        const firstName = getUserFullName(usersById[firstId]) || '';\n        const secondName = getUserFullName(usersById[secondId]) || '';\n\n        return firstName.localeCompare(secondName);\n      });\n  }, [blockedIds, contactIds, currentUserId, filter, localContactIds, usersById]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    const { id: contactId, accessHash } = usersById[userId] || {};\n    if (!contactId || !accessHash) {\n      return;\n    }\n    blockContact({ contactId, accessHash });\n    onClose();\n  }, [blockContact, onClose, usersById]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={filteredContactIds}\n      filterRef={filterRef}\n      filterPlaceholder={lang('BlockedUsers.BlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      users: {\n        byId: usersById,\n      },\n      blocked: {\n        ids: blockedIds,\n      },\n      contactList,\n      currentUserId,\n    } = global;\n\n    return {\n      usersById,\n      blockedIds,\n      contactIds: contactList?.userIds,\n      localContactIds: global.userSearch.localUserIds,\n      currentUserId,\n    };\n  },\n)(BlockUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiCountryCode, ApiUser } from '../../../api/types';\n\nimport { CHAT_HEIGHT_PX } from '../../../config';\nimport { formatPhoneNumberWithCode } from '../../../util/phoneNumber';\nimport {\n  getChatTitle, getUserFullName, isUserId,\n} from '../../../global/helpers';\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport BlockUserModal from './BlockUserModal';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsByIds: Record<string, ApiChat>;\n  usersByIds: Record<string, ApiUser>;\n  blockedIds: string[];\n  phoneCodeList: ApiCountryCode[];\n};\n\nconst SettingsPrivacyBlockedUsers: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  chatsByIds,\n  usersByIds,\n  blockedIds,\n  phoneCodeList,\n}) => {\n  const { unblockContact } = getActions();\n\n  const lang = useLang();\n  const [isBlockUserModalOpen, openBlockUserModal, closeBlockUserModal] = useFlag();\n  const handleUnblockClick = useCallback((contactId: string) => {\n    unblockContact({ contactId });\n  }, [unblockContact]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  function renderContact(contactId: string, i: number, viewportOffset: number) {\n    const isPrivate = isUserId(contactId);\n    const user = isPrivate ? usersByIds[contactId] : undefined;\n    const chat = !isPrivate ? chatsByIds[contactId] : undefined;\n\n    const className = buildClassName(\n      'Chat chat-item-clickable blocked-list-item small-icon',\n      isPrivate ? 'private' : 'group',\n    );\n\n    return (\n      <ListItem\n        key={contactId}\n        className={className}\n        ripple\n        narrow\n        contextActions={[{\n          title: 'Unblock',\n          icon: 'unlock',\n          handler: () => {\n            handleUnblockClick(contactId);\n          },\n        }]}\n        style={`top: ${(viewportOffset + i) * CHAT_HEIGHT_PX}px;`}\n      >\n        <Avatar size=\"medium\" user={user} chat={chat} />\n        <div className=\"contact-info\" dir=\"auto\">\n          <h3 dir=\"auto\">{renderText((isPrivate ? getUserFullName(user) : getChatTitle(lang, chat!)) || '')}</h3>\n          {user?.phoneNumber && (\n            <div className=\"contact-phone\" dir=\"auto\">{formatPhoneNumberWithCode(phoneCodeList, user.phoneNumber)}</div>\n          )}\n          {user && !user.phoneNumber && user.username && (\n            <div className=\"contact-username\" dir=\"auto\">@{user.username}</div>\n          )}\n        </div>\n      </ListItem>\n    );\n  }\n\n  return (\n    <div className=\"settings-fab-wrapper\">\n      <div className=\"settings-content infinite-scroll\">\n        <div className=\"settings-item no-border\">\n          <p className=\"settings-item-description-larger mt-0 mb-2\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {lang('BlockedUsersInfo')}\n          </p>\n        </div>\n\n        <div className=\"chat-list custom-scroll\">\n          {blockedIds?.length ? (\n            <div className=\"scroll-container\">\n              {blockedIds!.map((contactId, i) => renderContact(contactId, i, 0))}\n            </div>\n          ) : blockedIds && !blockedIds.length ? (\n            <div className=\"no-results\" dir=\"auto\">{lang('NoBlocked')}</div>\n          ) : (\n            <Loading key=\"loading\" />\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown\n        onClick={openBlockUserModal}\n        ariaLabel={lang('BlockContact')}\n      >\n        <i className=\"icon-add\" />\n      </FloatingActionButton>\n      <BlockUserModal\n        isOpen={isBlockUserModalOpen}\n        onClose={closeBlockUserModal}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      chats: {\n        byId: chatsByIds,\n      },\n      users: {\n        byId: usersByIds,\n      },\n      blocked: {\n        ids,\n      },\n      countryList: {\n        phoneCodes: phoneCodeList,\n      },\n    } = global;\n\n    return {\n      chatsByIds,\n      usersByIds,\n      blockedIds: ids,\n      phoneCodeList,\n    };\n  },\n)(SettingsPrivacyBlockedUsers));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport renderText from '../../../common/helpers/renderText';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {renderText(lang('EnabledPasswordText'), ['br'])}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaChangePasswordCurrent)}\n        >\n          {lang('ChangePassword')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaTurnOff)}\n        >\n          {lang('TurnPasswordOff')}\n        </ListItem>\n        <ListItem\n          icon=\"email\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCurrentPassword)}\n        >\n          {lang('SetRecoveryEmail')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaEnabled);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PasswordMonkey from '../../common/PasswordMonkey';\nimport PasswordForm from '../../common/PasswordForm';\n\ntype OwnProps = {\n  error?: string;\n  isLoading?: boolean;\n  shouldDisablePasswordManager?: boolean;\n  expectedPassword?: string;\n  placeholder?: string;\n  hint?: string;\n  submitLabel?: string;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (password: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst EQUAL_PASSWORD_ERROR = 'Passwords Should Be Equal';\n\nconst SettingsPasswordForm: FC<OwnProps> = ({\n  isActive,\n  onReset,\n  error,\n  isLoading,\n  shouldDisablePasswordManager,\n  expectedPassword,\n  placeholder = 'Current Password',\n  hint,\n  submitLabel,\n  clearError,\n  onSubmit,\n}) => {\n  const [validationError, setValidationError] = useState<string>('');\n  const [shouldShowPassword, setShouldShowPassword] = useState(false);\n\n  const handleSubmit = useCallback((newPassword) => {\n    if (expectedPassword && newPassword !== expectedPassword) {\n      setValidationError(EQUAL_PASSWORD_ERROR);\n    } else {\n      onSubmit(newPassword);\n    }\n  }, [onSubmit, expectedPassword]);\n\n  const handleClearError = useCallback(() => {\n    if (clearError) {\n      clearError();\n    }\n    setValidationError('');\n  }, [clearError]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content password-form custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <PasswordMonkey isBig isPasswordVisible={shouldShowPassword} />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <PasswordForm\n          error={validationError || error}\n          hint={hint}\n          placeholder={placeholder}\n          shouldDisablePasswordManager={shouldDisablePasswordManager}\n          submitLabel={submitLabel || lang('Next')}\n          clearError={handleClearError}\n          isLoading={isLoading}\n          isPasswordVisible={shouldShowPassword}\n          shouldResetValue={isActive}\n          onChangePasswordVisibility={setShouldShowPassword}\n          onSubmit={handleSubmit}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasswordForm);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('SetAdditionalPasswordInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EditAdminTransferSetPassword')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport renderText from '../../../common/helpers/renderText';\nimport useFlag from '../../../../hooks/useFlag';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport Modal from '../../../ui/Modal';\nimport InputText from '../../../ui/InputText';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  icon: 'hint' | 'email';\n  type?: 'text' | 'email';\n  isLoading?: boolean;\n  error?: string;\n  placeholder: string;\n  shouldConfirm?: boolean;\n  clearError?: NoneToVoidFunction;\n  onSubmit: (value?: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaSkippableForm: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  type = 'text',\n  isLoading,\n  error,\n  placeholder,\n  shouldConfirm,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n  const [isConfirmShown, markIsConfirmShown, unmarkIsConfirmShown] = useFlag(false);\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    setValue(e.target.value);\n  }, [clearError, error]);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n\n    if (!inputRef.current) {\n      return;\n    }\n\n    onSubmit(value);\n  };\n\n  const handleSkip = useCallback(() => {\n    onSubmit();\n  }, [onSubmit]);\n\n  const handleSkipConfirm = useCallback(() => {\n    unmarkIsConfirmShown();\n    onSubmit();\n  }, [onSubmit, unmarkIsConfirmShown]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <form action=\"\" onSubmit={handleSubmit}>\n          <InputText\n            ref={inputRef}\n            value={value}\n            inputMode={type}\n            label={placeholder}\n            error={error}\n            onChange={handleInputChange}\n          />\n\n          {value ? (\n            <Button type=\"submit\" isLoading={isLoading} ripple>{lang('Continue')}</Button>\n          ) : (\n            <Button\n              isText\n              isLoading={isLoading}\n              ripple\n              onClick={shouldConfirm ? markIsConfirmShown : handleSkip}\n            >\n              {lang('YourEmailSkip')}\n            </Button>\n          )}\n        </form>\n        {shouldConfirm && (\n          <Modal\n            className=\"narrow\"\n            isOpen={isConfirmShown}\n            title={lang('YourEmailSkipWarning')}\n            onClose={unmarkIsConfirmShown}\n          >\n            {renderText(lang('YourEmailSkipWarningText'), ['br', 'simple_markdown'])}\n            <div className=\"dialog-buttons\">\n              <Button\n                color=\"danger\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={handleSkipConfirm}\n              >\n                {lang('YourEmailSkip')}\n              </Button>\n              <Button\n                color=\"primary\"\n                ripple\n                isText\n                className=\"confirm-dialog-button\"\n                onClick={unmarkIsConfirmShown}\n              >\n                {lang('Cancel')}\n              </Button>\n            </div>\n          </Modal>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global, { icon }) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, icon === 'email' ? '💌' : '💡'),\n  };\n})(SettingsTwoFaSkippableForm));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport { STICKER_SIZE_TWO_FA } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsTwoFaCongratulations: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  const handleClick = useCallback(() => {\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [onScreenSelect]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_TWO_FA}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          {lang('TwoStepVerificationPasswordSetInfo')}\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={handleClick}>{lang('TwoStepVerificationPasswordReturnSettings')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsTwoFaCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState,\n} from '../../../../lib/teact/teact';\nimport { withGlobal } from '../../../../global';\n\nimport type { ApiSticker } from '../../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../../util/environment';\nimport { selectAnimatedEmoji } from '../../../../global/selectors';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport InputText from '../../../ui/InputText';\nimport Loading from '../../../ui/Loading';\nimport AnimatedIconFromSticker from '../../../common/AnimatedIconFromSticker';\n\ntype OwnProps = {\n  isLoading?: boolean;\n  error?: string;\n  clearError: NoneToVoidFunction;\n  onSubmit: (hint: string) => void;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  animatedEmoji: ApiSticker;\n  codeLength: number;\n};\n\nconst FOCUS_DELAY_TIMEOUT_MS = IS_SINGLE_COLUMN_LAYOUT ? 550 : 400;\nconst ICON_SIZE = 160;\n\nconst SettingsTwoFaEmailCode: FC<OwnProps & StateProps> = ({\n  animatedEmoji,\n  codeLength,\n  isLoading,\n  error,\n  clearError,\n  onSubmit,\n  isActive,\n  onReset,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [value, setValue] = useState<string>('');\n\n  useEffect(() => {\n    if (!IS_TOUCH_ENV) {\n      setTimeout(() => {\n        inputRef.current!.focus();\n      }, FOCUS_DELAY_TIMEOUT_MS);\n    }\n  }, []);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (error && clearError) {\n      clearError();\n    }\n\n    const newValue = e.target.value.slice(0, codeLength);\n\n    if (newValue.length === codeLength) {\n      onSubmit(newValue);\n    }\n\n    setValue(newValue);\n    e.target.value = newValue;\n  }, [clearError, codeLength, error, onSubmit]);\n\n  return (\n    <div className=\"settings-content two-fa custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconFromSticker sticker={animatedEmoji} size={ICON_SIZE} className=\"settings-content-icon\" />\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <InputText\n          value={value}\n          ref={inputRef}\n          inputMode=\"decimal\"\n          label={lang('YourEmailCode')}\n          error={error}\n          onChange={handleInputChange}\n        />\n        {isLoading && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>((global) => {\n  return {\n    animatedEmoji: selectAnimatedEmoji(global, '💌'),\n    codeLength: global.twoFaSettings.waitingEmailCodeLength,\n  };\n})(SettingsTwoFaEmailCode));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport type { TwoFaDispatch, TwoFaState } from '../../../../hooks/reducers/useTwoFaReducer';\nimport useLang from '../../../../hooks/useLang';\n\nimport SettingsTwoFaEnabled from './SettingsTwoFaEnabled';\nimport SettingsTwoFaPassword from '../SettingsPasswordForm';\nimport SettingsTwoFaStart from './SettingsTwoFaStart';\nimport SettingsTwoFaSkippableForm from './SettingsTwoFaSkippableForm';\nimport SettingsTwoFaCongratulations from './SettingsTwoFaCongratulations';\nimport SettingsTwoFaEmailCode from './SettingsTwoFaEmailCode';\n\nexport type OwnProps = {\n  state: TwoFaState;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  dispatch: TwoFaDispatch;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['twoFaSettings'];\n\nconst SettingsTwoFa: FC<OwnProps & StateProps> = ({\n  currentScreen,\n  shownScreen,\n  state,\n  hint,\n  isLoading,\n  error,\n  waitingEmailCodeLength,\n  dispatch,\n  isActive,\n  onScreenSelect,\n  onReset,\n}) => {\n  const {\n    updatePassword,\n    checkPassword,\n    clearTwoFaError,\n    updateRecoveryEmail,\n    provideTwoFaEmailCode,\n    clearPassword,\n  } = getActions();\n\n  useEffect(() => {\n    if (waitingEmailCodeLength) {\n      if (currentScreen === SettingsScreens.TwoFaNewPasswordEmail) {\n        onScreenSelect(SettingsScreens.TwoFaNewPasswordEmailCode);\n      } else if (currentScreen === SettingsScreens.TwoFaRecoveryEmail) {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmailCode);\n      }\n    }\n  }, [currentScreen, onScreenSelect, waitingEmailCodeLength]);\n\n  const handleStartWizard = useCallback(() => {\n    dispatch({ type: 'reset' });\n    onScreenSelect(SettingsScreens.TwoFaNewPassword);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordHint);\n  }, [onScreenSelect]);\n\n  const handleNewPasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaNewPasswordEmail);\n  }, [dispatch, onScreenSelect]);\n\n  const handleNewPasswordEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updatePassword({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleChangePasswordCurrent = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaChangePasswordNew);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    dispatch({ type: 'setPassword', payload: value });\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordConfirm);\n  }, [dispatch, onScreenSelect]);\n\n  const handleChangePasswordConfirm = useCallback(() => {\n    onScreenSelect(SettingsScreens.TwoFaChangePasswordHint);\n  }, [onScreenSelect]);\n\n  const handleChangePasswordHint = useCallback((value?: string) => {\n    dispatch({ type: 'setHint', payload: value });\n    updatePassword({\n      ...state,\n      hint: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updatePassword]);\n\n  const handleTurnOff = useCallback((value: string) => {\n    clearPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.Privacy);\n      },\n    });\n  }, [clearPassword, onScreenSelect]);\n\n  const handleRecoveryEmailCurrentPassword = useCallback((value: string) => {\n    dispatch({ type: 'setCurrentPassword', payload: value });\n    checkPassword({\n      currentPassword: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaRecoveryEmail);\n      },\n    });\n  }, [checkPassword, dispatch, onScreenSelect]);\n\n  const handleRecoveryEmail = useCallback((value?: string) => {\n    dispatch({ type: 'setEmail', payload: value });\n    updateRecoveryEmail({\n      ...state,\n      email: value,\n      onSuccess: () => {\n        onScreenSelect(SettingsScreens.TwoFaCongratulations);\n      },\n    });\n  }, [dispatch, onScreenSelect, state, updateRecoveryEmail]);\n\n  const handleEmailCode = useCallback((code: string) => {\n    provideTwoFaEmailCode({ code });\n  }, [provideTwoFaEmailCode]);\n\n  const lang = useLang();\n\n  switch (currentScreen) {\n    case SettingsScreens.TwoFaDisabled:\n      return (\n        <SettingsTwoFaStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPassword,\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPassword:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordConfirm,\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordHint,\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleNewPasswordHint}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmail,\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          placeholder={lang('RecoveryEmailTitle')}\n          shouldConfirm\n          onSubmit={handleNewPasswordEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaNewPasswordEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaNewPasswordEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaCongratulations:\n      return (\n        <SettingsTwoFaCongratulations\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaEnabled:\n      return (\n        <SettingsTwoFaEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordCurrent,\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaTurnOff,\n            SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordCurrent:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordNew,\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordNew:\n      return (\n        <SettingsTwoFaPassword\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordConfirm,\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordConfirm:\n      return (\n        <SettingsTwoFaPassword\n          expectedPassword={state.password}\n          placeholder={lang('PleaseReEnterPassword')}\n          onSubmit={handleChangePasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.TwoFaChangePasswordHint,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaChangePasswordHint:\n      return (\n        <SettingsTwoFaSkippableForm\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          icon=\"hint\"\n          placeholder={lang('PasswordHintPlaceholder')}\n          onSubmit={handleChangePasswordHint}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaTurnOff:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      return (\n        <SettingsTwoFaPassword\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          hint={hint}\n          onSubmit={handleRecoveryEmailCurrentPassword}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmail,\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmail:\n      return (\n        <SettingsTwoFaSkippableForm\n          icon=\"email\"\n          type=\"email\"\n          placeholder={lang('RecoveryEmailTitle')}\n          onSubmit={handleRecoveryEmail}\n          isActive={isActive || [\n            SettingsScreens.TwoFaRecoveryEmailCode,\n            SettingsScreens.TwoFaCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.TwoFaRecoveryEmailCode:\n      return (\n        <SettingsTwoFaEmailCode\n          isLoading={isLoading}\n          error={error}\n          clearError={clearTwoFaError}\n          onSubmit={handleEmailCode}\n          isActive={isActive || shownScreen === SettingsScreens.TwoFaCongratulations}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.twoFaSettings }),\n)(SettingsTwoFa));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\nimport type { ApiPrivacySettings } from '../../../types';\nimport { SettingsScreens } from '../../../types';\n\nimport { ALL_FOLDER_ID, ARCHIVED_FOLDER_ID } from '../../../config';\nimport { unique } from '../../../util/iteratees';\nimport { filterChatsByName, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { useFolderManagerForOrderedIds } from '../../../hooks/useFolderManager';\nimport { getPrivacyKey } from './helpers/privacy';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  isAllowList?: boolean;\n  screen: SettingsScreens;\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n  settings?: ApiPrivacySettings;\n};\n\nconst SettingsPrivacyVisibilityExceptionList: FC<OwnProps & StateProps> = ({\n  isAllowList,\n  screen,\n  isActive,\n  onScreenSelect,\n  onReset,\n  currentUserId,\n  settings,\n}) => {\n  const { setPrivacySettings } = getActions();\n\n  const lang = useLang();\n\n  const selectedContactIds = useMemo(() => {\n    if (!settings) {\n      return [];\n    }\n\n    if (isAllowList) {\n      return [...settings.allowUserIds, ...settings.allowChatIds];\n    } else {\n      return [...settings.blockUserIds, ...settings.blockChatIds];\n    }\n  }, [isAllowList, settings]);\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [isSubmitShown, setIsSubmitShown] = useState<boolean>(false);\n  const [newSelectedContactIds, setNewSelectedContactIds] = useState<string[]>(selectedContactIds);\n\n  const folderAllOrderedIds = useFolderManagerForOrderedIds(ALL_FOLDER_ID);\n  const folderArchivedOrderedIds = useFolderManagerForOrderedIds(ARCHIVED_FOLDER_ID);\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on chats, so we avoid them\n    const chatsById = getGlobal().chats.byId;\n\n    const chatIds = unique([...folderAllOrderedIds || [], ...folderArchivedOrderedIds || []])\n      .filter((chatId) => {\n        const chat = chatsById[chatId];\n\n        return chat && isUserId(chat.id) && chat.id !== currentUserId;\n      });\n\n    return unique([\n      ...selectedContactIds,\n      ...filterChatsByName(lang, chatIds, chatsById, searchQuery),\n    ]);\n  }, [folderAllOrderedIds, folderArchivedOrderedIds, selectedContactIds, lang, searchQuery, currentUserId]);\n\n  const handleSelectedContactIdsChange = useCallback((value: string[]) => {\n    setNewSelectedContactIds(value);\n    setIsSubmitShown(true);\n  }, []);\n\n  const handleSubmit = useCallback(() => {\n    setPrivacySettings({\n      privacyKey: getPrivacyKey(screen),\n      isAllowList: Boolean(isAllowList),\n      contactsIds: newSelectedContactIds,\n    });\n\n    onScreenSelect(SettingsScreens.Privacy);\n  }, [isAllowList, newSelectedContactIds, onScreenSelect, screen, setPrivacySettings]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"NewChat-inner step-1\">\n      <Picker\n        itemIds={displayedIds || []}\n        selectedIds={newSelectedContactIds}\n        filterValue={searchQuery}\n        filterPlaceholder={isAllowList ? lang('AlwaysAllowPlaceholder') : lang('NeverAllowPlaceholder')}\n        searchInputId=\"new-group-picker-search\"\n        onSelectedIdsChange={handleSelectedContactIdsChange}\n        onFilterChange={setSearchQuery}\n      />\n\n      <FloatingActionButton\n        isShown={isSubmitShown}\n        onClick={handleSubmit}\n        ariaLabel={isAllowList ? lang('AlwaysAllow') : lang('NeverAllow')}\n      >\n        <i className=\"icon-arrow-right\" />\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nfunction getCurrentPrivacySettings(global: GlobalState, screen: SettingsScreens) {\n  const { privacy } = global.settings;\n  switch (screen) {\n    case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n    case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      return privacy.phoneNumber;\n    case SettingsScreens.PrivacyLastSeenAllowedContacts:\n    case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      return privacy.lastSeen;\n    case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n    case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      return privacy.profilePhoto;\n    case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n    case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      return privacy.phoneCall;\n    case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n    case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      return privacy.phoneP2P;\n    case SettingsScreens.PrivacyForwardingAllowedContacts:\n    case SettingsScreens.PrivacyForwardingDeniedContacts:\n      return privacy.forwards;\n    case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n    case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n      return privacy.chatInvite;\n  }\n\n  return undefined;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { screen }): StateProps => {\n    return {\n      currentUserId: global.currentUserId,\n      settings: getCurrentPrivacySettings(global, screen),\n    };\n  },\n)(SettingsPrivacyVisibilityExceptionList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport RadioGroup from '../../ui/RadioGroup';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  selectedReaction?: string;\n};\n\nconst SettingsQuickReaction: FC<OwnProps & StateProps> = ({\n  isActive,\n  onReset,\n  availableReactions,\n  selectedReaction,\n}) => {\n  const { setDefaultReaction } = getActions();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const options = availableReactions?.filter((l) => !l.isInactive).map((l) => {\n    return {\n      label: <><ReactionStaticEmoji reaction={l.reaction} />{l.title}</>,\n      value: l.reaction,\n    };\n  }) || [];\n\n  const handleChange = useCallback((reaction: string) => {\n    setDefaultReaction({ reaction });\n  }, [setDefaultReaction]);\n\n  return (\n    <div className=\"settings-content settings-item custom-scroll settings-quick-reaction\">\n      <RadioGroup\n        name=\"quick-reaction-settings\"\n        options={options}\n        selected={selectedReaction}\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global) => {\n    const { availableReactions, appConfig } = global;\n\n    return {\n      availableReactions,\n      selectedReaction: appConfig?.defaultReaction,\n    };\n  },\n)(SettingsQuickReaction));\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  onStart: NoneToVoidFunction;\n  isActive?: boolean;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeStart: FC<OwnProps> = ({\n  isActive, onReset, onStart,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={STICKER_SIZE_PASSCODE}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description\" dir=\"auto\">\n          When you set up an additional passcode, a lock icon will appear on the chats page.\n          Tap it to lock and unlock your Telegram WebZ.\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Note: if you forget your local passcode, you&apos;ll need to log out of Telegram WebZ and log in again.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={onStart}>{lang('EnablePasscode')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeStart);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport ListItem from '../../../ui/ListItem';\nimport AnimatedIconWithPreview from '../../../common/AnimatedIconWithPreview';\n\nimport lockPreviewUrl from '../../../../assets/lock.png';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\nconst SettingsPasscodeEnabled: FC<OwnProps> = ({\n  isActive, onReset, onScreenSelect,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIconWithPreview\n          tgsUrl={LOCAL_TGS_URLS.Lock}\n          previewUrl={lockPreviewUrl}\n          size={160}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Local passcode is enabled.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <ListItem\n          icon=\"edit\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeChangePasscodeCurrent)}\n        >\n          {lang('Passcode.Change')}\n        </ListItem>\n        <ListItem\n          icon=\"password-off\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onScreenSelect(SettingsScreens.PasscodeTurnOff)}\n        >\n          {lang('Passcode.TurnOff')}\n        </ListItem>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeEnabled);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport { STICKER_SIZE_PASSCODE } from '../../../../config';\nimport { LOCAL_TGS_URLS } from '../../../common/helpers/animatedAssets';\nimport useLang from '../../../../hooks/useLang';\nimport useHistoryBack from '../../../../hooks/useHistoryBack';\n\nimport Button from '../../../ui/Button';\nimport AnimatedIcon from '../../../common/AnimatedIcon';\n\ntype OwnProps = {\n  isActive?: boolean;\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\nconst SettingsPasscodeCongratulations: FC<OwnProps> = ({\n  isActive, onReset,\n}) => {\n  const lang = useLang();\n\n  const fullReset = useCallback(() => {\n    onReset(true);\n  }, [onReset]);\n\n  useHistoryBack({ isActive, onBack: onReset });\n\n  return (\n    <div className=\"settings-content local-passcode custom-scroll\">\n      <div className=\"settings-content-header no-border\">\n        <AnimatedIcon\n          size={STICKER_SIZE_PASSCODE}\n          tgsUrl={LOCAL_TGS_URLS.Congratulations}\n          className=\"settings-content-icon\"\n        />\n\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Congratulations!\n        </p>\n        <p className=\"settings-item-description mb-3\" dir=\"auto\">\n          Now you can lock the app with a passcode so that others can&apos;t open it.\n        </p>\n      </div>\n\n      <div className=\"settings-item pt-0\">\n        <Button onClick={fullReset}>{lang('Back')}</Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(SettingsPasscodeCongratulations);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../../global';\n\nimport type { GlobalState } from '../../../../global/types';\nimport { SettingsScreens } from '../../../../types';\n\nimport useLang from '../../../../hooks/useLang';\nimport { decryptSession } from '../../../../util/passcode';\n\nimport SettingsPasscodeStart from './SettingsPasscodeStart';\nimport SettingsPasscodeForm from '../SettingsPasswordForm';\nimport SettingsPasscodeEnabled from './SettingsPasscodeEnabled';\nimport SettingsPasscodeCongratulations from './SettingsPasscodeCongratulations';\n\nexport type OwnProps = {\n  passcode: string;\n  currentScreen: SettingsScreens;\n  shownScreen: SettingsScreens;\n  isActive?: boolean;\n  onSetPasscode: (passcode: string) => void;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  onReset: () => void;\n};\n\ntype StateProps = GlobalState['passcode'];\n\nconst SettingsPasscode: FC<OwnProps & StateProps> = ({\n  passcode,\n  currentScreen,\n  shownScreen,\n  error,\n  isActive,\n  isLoading,\n  onScreenSelect,\n  onSetPasscode,\n  onReset,\n}) => {\n  const {\n    setPasscode,\n    clearPasscode,\n    setPasscodeError,\n    clearPasscodeError,\n  } = getActions();\n\n  const lang = useLang();\n\n  const handleStartWizard = useCallback(() => {\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeNewPasscode);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPassword = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeNewPasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleNewPasswordConfirm = useCallback(() => {\n    setPasscode({ passcode });\n    onSetPasscode('');\n    onScreenSelect(SettingsScreens.PasscodeCongratulations);\n  }, [onScreenSelect, onSetPasscode, passcode, setPasscode]);\n\n  const handleChangePasswordCurrent = useCallback((currentPasscode: string) => {\n    onSetPasscode('');\n    decryptSession(currentPasscode).then(() => {\n      onScreenSelect(SettingsScreens.PasscodeChangePasscodeNew);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [lang, onScreenSelect, onSetPasscode, setPasscodeError]);\n\n  const handleChangePasswordNew = useCallback((value: string) => {\n    onSetPasscode(value);\n    onScreenSelect(SettingsScreens.PasscodeChangePasscodeConfirm);\n  }, [onScreenSelect, onSetPasscode]);\n\n  const handleTurnOff = useCallback((currentPasscode: string) => {\n    decryptSession(currentPasscode).then(() => {\n      clearPasscode();\n      onScreenSelect(SettingsScreens.Privacy);\n    }, () => {\n      setPasscodeError({\n        error: lang('PasscodeController.Error.Current'),\n      });\n    });\n  }, [clearPasscode, lang, onScreenSelect, setPasscodeError]);\n\n  switch (currentScreen) {\n    case SettingsScreens.PasscodeDisabled:\n      return (\n        <SettingsPasscodeStart\n          onStart={handleStartWizard}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscode,\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscode:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('EnterNewPasscode')}\n          submitLabel={lang('Continue')}\n          onSubmit={handleNewPassword}\n          isActive={isActive || [\n            SettingsScreens.PasscodeNewPasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeNewPasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('ReEnterYourPasscode')}\n          submitLabel={lang('Continue')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeCongratulations:\n      return (\n        <SettingsPasscodeCongratulations\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeEnabled:\n      return (\n        <SettingsPasscodeEnabled\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeCurrent,\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n            SettingsScreens.PasscodeTurnOff,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeCurrent:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleChangePasswordCurrent}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeNew,\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeNew:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          placeholder={lang('PleaseEnterNewFirstPassword')}\n          onSubmit={handleChangePasswordNew}\n          isActive={isActive || [\n            SettingsScreens.PasscodeChangePasscodeConfirm,\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeChangePasscodeConfirm:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          expectedPassword={passcode}\n          placeholder={lang('PasscodeController.ReEnterPasscode.Placeholder')}\n          isLoading={isLoading}\n          onSubmit={handleNewPasswordConfirm}\n          isActive={isActive || [\n            SettingsScreens.PasscodeCongratulations,\n          ].includes(shownScreen)}\n          onReset={onReset}\n        />\n      );\n\n    case SettingsScreens.PasscodeTurnOff:\n      return (\n        <SettingsPasscodeForm\n          shouldDisablePasswordManager\n          error={error ? lang(error) : undefined}\n          clearError={clearPasscodeError}\n          placeholder={lang('PasscodeController.Current.Placeholder')}\n          onSubmit={handleTurnOff}\n          isActive={isActive}\n          onReset={onReset}\n        />\n      );\n\n    default:\n      return undefined;\n  }\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({ ...global.passcode }),\n)(SettingsPasscode));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { SettingsScreens } from '../../../types';\nimport type { FolderEditDispatch, FoldersState } from '../../../hooks/reducers/useFoldersReducer';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\nimport useTwoFaReducer from '../../../hooks/reducers/useTwoFaReducer';\n\nimport Transition from '../../ui/Transition';\nimport SettingsHeader from './SettingsHeader';\nimport SettingsMain from './SettingsMain';\nimport SettingsEditProfile from './SettingsEditProfile';\nimport SettingsDataStorage from './SettingsDataStorage';\nimport SettingsFolders from './folders/SettingsFolders';\nimport SettingsGeneral from './SettingsGeneral';\nimport SettingsGeneralBackground from './SettingsGeneralBackground';\nimport SettingsGeneralBackgroundColor from './SettingsGeneralBackgroundColor';\nimport SettingsNotifications from './SettingsNotifications';\nimport SettingsPrivacy from './SettingsPrivacy';\nimport SettingsLanguage from './SettingsLanguage';\nimport SettingsPrivacyVisibility from './SettingsPrivacyVisibility';\nimport SettingsActiveSessions from './SettingsActiveSessions';\nimport SettingsActiveWebsites from './SettingsActiveWebsites';\nimport SettingsPrivacyBlockedUsers from './SettingsPrivacyBlockedUsers';\nimport SettingsTwoFa from './twoFa/SettingsTwoFa';\nimport SettingsPrivacyVisibilityExceptionList from './SettingsPrivacyVisibilityExceptionList';\nimport SettingsQuickReaction from './SettingsQuickReaction';\nimport SettingsPasscode from './passcode/SettingsPasscode';\n\nimport './Settings.scss';\n\nconst TRANSITION_RENDER_COUNT = Object.keys(SettingsScreens).length / 2;\nconst TRANSITION_DURATION = 200;\n\nconst TWO_FA_SCREENS = [\n  SettingsScreens.TwoFaDisabled,\n  SettingsScreens.TwoFaNewPassword,\n  SettingsScreens.TwoFaNewPasswordConfirm,\n  SettingsScreens.TwoFaNewPasswordHint,\n  SettingsScreens.TwoFaNewPasswordEmail,\n  SettingsScreens.TwoFaNewPasswordEmailCode,\n  SettingsScreens.TwoFaCongratulations,\n  SettingsScreens.TwoFaEnabled,\n  SettingsScreens.TwoFaChangePasswordCurrent,\n  SettingsScreens.TwoFaChangePasswordNew,\n  SettingsScreens.TwoFaChangePasswordConfirm,\n  SettingsScreens.TwoFaChangePasswordHint,\n  SettingsScreens.TwoFaTurnOff,\n  SettingsScreens.TwoFaRecoveryEmailCurrentPassword,\n  SettingsScreens.TwoFaRecoveryEmail,\n  SettingsScreens.TwoFaRecoveryEmailCode,\n];\n\nconst PASSCODE_SCREENS = [\n  SettingsScreens.PasscodeDisabled,\n  SettingsScreens.PasscodeEnabled,\n];\n\nconst FOLDERS_SCREENS = [\n  SettingsScreens.Folders,\n  SettingsScreens.FoldersCreateFolder,\n  SettingsScreens.FoldersEditFolder,\n  SettingsScreens.FoldersEditFolderFromChatList,\n  SettingsScreens.FoldersIncludedChats,\n  SettingsScreens.FoldersIncludedChatsFromChatList,\n  SettingsScreens.FoldersExcludedChats,\n  SettingsScreens.FoldersExcludedChatsFromChatList,\n];\n\nconst PRIVACY_SCREENS = [\n  SettingsScreens.PrivacyBlockedUsers,\n  SettingsScreens.ActiveWebsites,\n];\n\nconst PRIVACY_PHONE_NUMBER_SCREENS = [\n  SettingsScreens.PrivacyPhoneNumberAllowedContacts,\n  SettingsScreens.PrivacyPhoneNumberDeniedContacts,\n];\n\nconst PRIVACY_LAST_SEEN_PHONE_SCREENS = [\n  SettingsScreens.PrivacyLastSeenAllowedContacts,\n  SettingsScreens.PrivacyLastSeenDeniedContacts,\n];\n\nconst PRIVACY_PROFILE_PHOTO_SCREENS = [\n  SettingsScreens.PrivacyProfilePhotoAllowedContacts,\n  SettingsScreens.PrivacyProfilePhotoDeniedContacts,\n];\n\nconst PRIVACY_PHONE_CALL_SCREENS = [\n  SettingsScreens.PrivacyPhoneCallAllowedContacts,\n  SettingsScreens.PrivacyPhoneCallDeniedContacts,\n];\n\nconst PRIVACY_PHONE_P2P_SCREENS = [\n  SettingsScreens.PrivacyPhoneP2PAllowedContacts,\n  SettingsScreens.PrivacyPhoneP2PDeniedContacts,\n];\n\nconst PRIVACY_FORWARDING_SCREENS = [\n  SettingsScreens.PrivacyForwardingAllowedContacts,\n  SettingsScreens.PrivacyForwardingDeniedContacts,\n];\n\nconst PRIVACY_GROUP_CHATS_SCREENS = [\n  SettingsScreens.PrivacyGroupChatsAllowedContacts,\n  SettingsScreens.PrivacyGroupChatsDeniedContacts,\n];\n\nexport type OwnProps = {\n  isActive: boolean;\n  currentScreen: SettingsScreens;\n  foldersState: FoldersState;\n  foldersDispatch: FolderEditDispatch;\n  onScreenSelect: (screen: SettingsScreens) => void;\n  shouldSkipTransition?: boolean;\n  onReset: (forceReturnToChatList?: true | Event) => void;\n};\n\nconst Settings: FC<OwnProps> = ({\n  isActive,\n  currentScreen,\n  foldersState,\n  foldersDispatch,\n  onScreenSelect,\n  onReset,\n  shouldSkipTransition,\n}) => {\n  const [twoFaState, twoFaDispatch] = useTwoFaReducer();\n  const [privacyPasscode, setPrivacyPasscode] = useState<string>('');\n\n  const handleReset = useCallback((forceReturnToChatList?: true | Event) => {\n    if (forceReturnToChatList === true) {\n      onReset(true);\n      return;\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersCreateFolder\n      || currentScreen === SettingsScreens.FoldersEditFolder\n      || currentScreen === SettingsScreens.FoldersEditFolderFromChatList\n    ) {\n      setTimeout(() => {\n        foldersDispatch({ type: 'reset' });\n      }, TRANSITION_DURATION);\n    }\n\n    if (\n      currentScreen === SettingsScreens.FoldersIncludedChats\n      || currentScreen === SettingsScreens.FoldersExcludedChats\n    ) {\n      if (foldersState.mode === 'create') {\n        onScreenSelect(SettingsScreens.FoldersCreateFolder);\n      } else {\n        onScreenSelect(SettingsScreens.FoldersEditFolder);\n      }\n      return;\n    }\n\n    onReset();\n  }, [\n    foldersState.mode, foldersDispatch,\n    currentScreen, onReset, onScreenSelect,\n  ]);\n\n  const handleSaveFilter = useCallback(() => {\n    foldersDispatch({ type: 'saveFilters' });\n    handleReset();\n  }, [foldersDispatch, handleReset]);\n\n  function renderCurrentSectionContent(isScreenActive: boolean, screen: SettingsScreens) {\n    const privacyAllowScreens: Record<number, boolean> = {\n      [SettingsScreens.PrivacyPhoneNumber]: PRIVACY_PHONE_NUMBER_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyLastSeen]: PRIVACY_LAST_SEEN_PHONE_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyProfilePhoto]: PRIVACY_PROFILE_PHOTO_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneCall]: PRIVACY_PHONE_CALL_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyPhoneP2P]: PRIVACY_PHONE_P2P_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyForwarding]: PRIVACY_FORWARDING_SCREENS.includes(screen),\n      [SettingsScreens.PrivacyGroupChats]: PRIVACY_GROUP_CHATS_SCREENS.includes(screen),\n    };\n\n    const isTwoFaScreen = TWO_FA_SCREENS.includes(screen);\n    const isPasscodeScreen = PASSCODE_SCREENS.includes(screen);\n    const isFoldersScreen = FOLDERS_SCREENS.includes(screen);\n    const isPrivacyScreen = PRIVACY_SCREENS.includes(screen)\n      || isTwoFaScreen\n      || isPasscodeScreen\n      || Object.keys(privacyAllowScreens).includes(screen.toString())\n      || Object.values(privacyAllowScreens).find((key) => key === true);\n\n    switch (currentScreen) {\n      case SettingsScreens.Main:\n        return (\n          <SettingsMain onScreenSelect={onScreenSelect} isActive={isActive} onReset={handleReset} />\n        );\n      case SettingsScreens.EditProfile:\n        return (\n          <SettingsEditProfile\n            isActive={isActive && isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.General:\n        return (\n          <SettingsGeneral\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive\n              || screen === SettingsScreens.GeneralChatBackgroundColor\n              || screen === SettingsScreens.GeneralChatBackground\n              || screen === SettingsScreens.QuickReaction\n              || isPrivacyScreen || isFoldersScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.QuickReaction:\n        return (\n          <SettingsQuickReaction isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Notifications:\n        return (\n          <SettingsNotifications isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.DataStorage:\n        return (\n          <SettingsDataStorage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.Privacy:\n        return (\n          <SettingsPrivacy\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || isPrivacyScreen}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.Language:\n        return (\n          <SettingsLanguage isActive={isScreenActive} onReset={handleReset} />\n        );\n      case SettingsScreens.GeneralChatBackground:\n        return (\n          <SettingsGeneralBackground\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || screen === SettingsScreens.GeneralChatBackgroundColor}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.GeneralChatBackgroundColor:\n        return (\n          <SettingsGeneralBackgroundColor\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveSessions:\n        return (\n          <SettingsActiveSessions\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.ActiveWebsites:\n        return (\n          <SettingsActiveWebsites\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyBlockedUsers:\n        return (\n          <SettingsPrivacyBlockedUsers\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n      case SettingsScreens.PrivacyPhoneNumber:\n      case SettingsScreens.PrivacyLastSeen:\n      case SettingsScreens.PrivacyProfilePhoto:\n      case SettingsScreens.PrivacyPhoneCall:\n      case SettingsScreens.PrivacyPhoneP2P:\n      case SettingsScreens.PrivacyForwarding:\n      case SettingsScreens.PrivacyGroupChats:\n        return (\n          <SettingsPrivacyVisibility\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberAllowedContacts:\n      case SettingsScreens.PrivacyLastSeenAllowedContacts:\n      case SettingsScreens.PrivacyProfilePhotoAllowedContacts:\n      case SettingsScreens.PrivacyPhoneCallAllowedContacts:\n      case SettingsScreens.PrivacyPhoneP2PAllowedContacts:\n      case SettingsScreens.PrivacyForwardingAllowedContacts:\n      case SettingsScreens.PrivacyGroupChatsAllowedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            isAllowList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive || privacyAllowScreens[currentScreen]}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PrivacyPhoneNumberDeniedContacts:\n      case SettingsScreens.PrivacyLastSeenDeniedContacts:\n      case SettingsScreens.PrivacyProfilePhotoDeniedContacts:\n      case SettingsScreens.PrivacyPhoneCallDeniedContacts:\n      case SettingsScreens.PrivacyPhoneP2PDeniedContacts:\n      case SettingsScreens.PrivacyForwardingDeniedContacts:\n      case SettingsScreens.PrivacyGroupChatsDeniedContacts:\n        return (\n          <SettingsPrivacyVisibilityExceptionList\n            screen={currentScreen}\n            onScreenSelect={onScreenSelect}\n            isActive={isScreenActive}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.Folders:\n      case SettingsScreens.FoldersCreateFolder:\n      case SettingsScreens.FoldersEditFolder:\n      case SettingsScreens.FoldersEditFolderFromChatList:\n      case SettingsScreens.FoldersIncludedChats:\n      case SettingsScreens.FoldersIncludedChatsFromChatList:\n      case SettingsScreens.FoldersExcludedChats:\n      case SettingsScreens.FoldersExcludedChatsFromChatList:\n        return (\n          <SettingsFolders\n            currentScreen={currentScreen}\n            shownScreen={screen}\n            state={foldersState}\n            dispatch={foldersDispatch}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.TwoFaDisabled:\n      case SettingsScreens.TwoFaNewPassword:\n      case SettingsScreens.TwoFaNewPasswordConfirm:\n      case SettingsScreens.TwoFaNewPasswordHint:\n      case SettingsScreens.TwoFaNewPasswordEmail:\n      case SettingsScreens.TwoFaNewPasswordEmailCode:\n      case SettingsScreens.TwoFaCongratulations:\n      case SettingsScreens.TwoFaEnabled:\n      case SettingsScreens.TwoFaChangePasswordCurrent:\n      case SettingsScreens.TwoFaChangePasswordNew:\n      case SettingsScreens.TwoFaChangePasswordConfirm:\n      case SettingsScreens.TwoFaChangePasswordHint:\n      case SettingsScreens.TwoFaTurnOff:\n      case SettingsScreens.TwoFaRecoveryEmailCurrentPassword:\n      case SettingsScreens.TwoFaRecoveryEmail:\n      case SettingsScreens.TwoFaRecoveryEmailCode:\n        return (\n          <SettingsTwoFa\n            currentScreen={currentScreen}\n            state={twoFaState}\n            dispatch={twoFaDispatch}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      case SettingsScreens.PasscodeDisabled:\n      case SettingsScreens.PasscodeNewPasscode:\n      case SettingsScreens.PasscodeNewPasscodeConfirm:\n      case SettingsScreens.PasscodeChangePasscodeCurrent:\n      case SettingsScreens.PasscodeChangePasscodeNew:\n      case SettingsScreens.PasscodeChangePasscodeConfirm:\n      case SettingsScreens.PasscodeCongratulations:\n      case SettingsScreens.PasscodeEnabled:\n      case SettingsScreens.PasscodeTurnOff:\n        return (\n          <SettingsPasscode\n            currentScreen={currentScreen}\n            passcode={privacyPasscode}\n            onSetPasscode={setPrivacyPasscode}\n            shownScreen={screen}\n            isActive={isScreenActive}\n            onScreenSelect={onScreenSelect}\n            onReset={handleReset}\n          />\n        );\n\n      default:\n        return undefined;\n    }\n  }\n\n  function renderCurrentSection(isScreenActive: boolean, isFrom: boolean, currentKey: SettingsScreens) {\n    return (\n      <>\n        <SettingsHeader\n          currentScreen={currentScreen}\n          onReset={handleReset}\n          onSaveFilter={handleSaveFilter}\n          onScreenSelect={onScreenSelect}\n          editedFolderId={foldersState.folderId}\n        />\n        {renderCurrentSectionContent(isScreenActive, currentKey)}\n      </>\n    );\n  }\n\n  return (\n    <Transition\n      id=\"Settings\"\n      name={shouldSkipTransition ? 'none' : LAYERS_ANIMATION_NAME}\n      activeKey={currentScreen}\n      renderCount={TRANSITION_RENDER_COUNT}\n    >\n      {renderCurrentSection}\n    </Transition>\n  );\n};\n\nexport default memo(Settings);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser, ApiUserStatus } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { filterUsersByName, sortUserIds } from '../../../global/helpers';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport ListItem from '../../ui/ListItem';\nimport Loading from '../../ui/Loading';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\nexport type OwnProps = {\n  filter: string;\n  isActive: boolean;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  contactIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ContactList: FC<OwnProps & StateProps> = ({\n  isActive,\n  filter,\n  usersById,\n  userStatusesById,\n  contactIds,\n  serverTimeOffset,\n  onReset,\n}) => {\n  const {\n    openChat,\n    openNewContactDialog,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleClick = useCallback((id: string) => {\n    openChat({ id, shouldReplaceHistory: true });\n  }, [openChat]);\n\n  const listIds = useMemo(() => {\n    if (!contactIds) {\n      return undefined;\n    }\n\n    const filteredIds = filterUsersByName(contactIds, usersById, filter);\n\n    return sortUserIds(filteredIds, usersById, userStatusesById, undefined, serverTimeOffset);\n  }, [contactIds, filter, usersById, userStatusesById, serverTimeOffset]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, listIds, Boolean(filter));\n\n  return (\n    <InfiniteScroll items={viewportIds} onLoadMore={getMore} className=\"chat-list custom-scroll\">\n      {viewportIds?.length ? (\n        viewportIds.map((id) => (\n          <ListItem\n            key={id}\n            className=\"chat-item-clickable\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleClick(id)}\n            ripple={!IS_SINGLE_COLUMN_LAYOUT}\n          >\n            <PrivateChatInfo userId={id} forceShowSelf avatarSize=\"large\" />\n          </ListItem>\n        ))\n      ) : viewportIds && !viewportIds.length ? (\n        <p className=\"no-results\" key=\"no-results\" dir=\"auto\">\n          {filter.length ? 'No contacts matched your search.' : 'Contact list is empty.'}\n        </p>\n      ) : (\n        <Loading key=\"loading\" />\n      )}\n      <FloatingActionButton\n        isShown\n        onClick={openNewContactDialog}\n        ariaLabel={lang('CreateNewContact')}\n      >\n        <i className=\"icon-add-user-filled\" />\n      </FloatingActionButton>\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: contactIds } = global.contactList || {};\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n\n    return {\n      usersById,\n      userStatusesById,\n      contactIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ContactList));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { useCallback, useMemo, memo } from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { unique } from '../../../util/iteratees';\nimport { filterUsersByName, isUserBot, sortChatIds } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport Picker from '../../common/Picker';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Button from '../../ui/Button';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  selectedMemberIds: string[];\n  onSelectedMemberIdsChange: (ids: string[]) => void;\n  onNextStep: () => void;\n  onReset: () => void;\n};\n\ntype StateProps = {\n  chatsById: Record<string, ApiChat>;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n};\n\nconst NewChatStep1: FC<OwnProps & StateProps> = ({\n  isChannel,\n  isActive,\n  selectedMemberIds,\n  onSelectedMemberIdsChange,\n  onNextStep,\n  onReset,\n  chatsById,\n  localContactIds,\n  searchQuery,\n  isSearching,\n  localUserIds,\n  globalUserIds,\n}) => {\n  const {\n    setGlobalSearchQuery,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const handleFilterChange = useCallback((query: string) => {\n    setGlobalSearchQuery({ query });\n  }, [setGlobalSearchQuery]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const foundContactIds = localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : [];\n\n    return sortChatIds(\n      unique([\n        ...foundContactIds,\n        ...(localUserIds || []),\n        ...(globalUserIds || []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return !user.isSelf && (user.canBeInvitedToGroup || !isUserBot(user));\n      }),\n      chatsById,\n      false,\n      selectedMemberIds,\n    );\n  }, [localContactIds, chatsById, searchQuery, localUserIds, globalUserIds, selectedMemberIds]);\n\n  const handleNextStep = useCallback(() => {\n    if (selectedMemberIds.length || isChannel) {\n      setGlobalSearchQuery({ query: '' });\n      onNextStep();\n    }\n  }, [selectedMemberIds.length, isChannel, setGlobalSearchQuery, onNextStep]);\n\n  return (\n    <div className=\"NewChat step-1\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to Chat List\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('GroupAddMembers')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-1\">\n        <Picker\n          itemIds={displayedIds}\n          selectedIds={selectedMemberIds}\n          filterValue={searchQuery}\n          filterPlaceholder={lang('SendMessageTo')}\n          searchInputId=\"new-group-picker-search\"\n          isLoading={isSearching}\n          onSelectedIdsChange={onSelectedMemberIdsChange}\n          onFilterChange={handleFilterChange}\n        />\n\n        <FloatingActionButton\n          isShown={Boolean(selectedMemberIds.length || isChannel)}\n          onClick={handleNextStep}\n          ariaLabel={isChannel ? 'Continue To Channel Info' : 'Continue To Group Info'}\n        >\n          <i className=\"icon-arrow-right\" />\n        </FloatingActionButton>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { userIds: localContactIds } = global.contactList || {};\n    const { byId: chatsById } = global.chats;\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalResults,\n      localResults,\n    } = global.globalSearch;\n    const { userIds: globalUserIds } = globalResults || {};\n    const { userIds: localUserIds } = localResults || {};\n\n    return {\n      chatsById,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus?.chats,\n      globalUserIds,\n      localUserIds,\n    };\n  },\n)(NewChatStep1));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useCallback, useEffect, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ChatCreationProgress } from '../../../types';\n\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport Button from '../../ui/Button';\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nexport type OwnProps = {\n  isChannel?: boolean;\n  isActive: boolean;\n  memberIds: string[];\n  onReset: (forceReturnToChatList?: boolean) => void;\n};\n\ntype StateProps = {\n  creationProgress?: ChatCreationProgress;\n  creationError?: string;\n};\n\n// TODO @implement\nconst MAX_USERS_FOR_LEGACY_CHAT = 199; // Accounting for current user\n\nconst NewChatStep2: FC<OwnProps & StateProps > = ({\n  isChannel,\n  isActive,\n  memberIds,\n  onReset,\n  creationProgress,\n  creationError,\n}) => {\n  const {\n    createGroupChat,\n    createChannel,\n  } = getActions();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  const [title, setTitle] = useState('');\n  const [about, setAbout] = useState('');\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n\n  const chatTitleEmptyError = 'Chat title can\\'t be empty';\n  const channelTitleEmptyError = 'Channel title can\\'t be empty';\n  const chatTooManyUsersError = 'Sorry, creating supergroups is not yet supported';\n\n  const isLoading = creationProgress === ChatCreationProgress.InProgress;\n\n  const handleTitleChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.currentTarget;\n    const newValue = value.replace(/^\\s+/, '');\n\n    setTitle(newValue);\n\n    if (newValue !== value) {\n      e.currentTarget.value = newValue;\n    }\n  }, []);\n\n  const handleDescriptionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.currentTarget.value);\n  }, []);\n\n  const handleCreateGroup = useCallback(() => {\n    if (!title.length) {\n      setError(chatTitleEmptyError);\n      return;\n    }\n\n    if (memberIds.length > MAX_USERS_FOR_LEGACY_CHAT) {\n      setError(chatTooManyUsersError);\n      return;\n    }\n\n    createGroupChat({\n      title,\n      photo,\n      memberIds,\n    });\n  }, [title, memberIds, createGroupChat, photo, chatTitleEmptyError, chatTooManyUsersError]);\n\n  const handleCreateChannel = useCallback(() => {\n    if (!title.length) {\n      setError(channelTitleEmptyError);\n      return;\n    }\n\n    createChannel({\n      title,\n      about,\n      photo,\n      memberIds,\n    });\n  }, [title, createChannel, about, photo, memberIds, channelTitleEmptyError]);\n\n  useEffect(() => {\n    if (creationProgress === ChatCreationProgress.Complete) {\n      onReset(true);\n    }\n  }, [creationProgress, onReset]);\n\n  const renderedError = (creationError && lang(creationError)) || (\n    error !== chatTitleEmptyError && error !== channelTitleEmptyError\n      ? error\n      : undefined\n  );\n\n  return (\n    <div className=\"NewChat\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => onReset()}\n          ariaLabel=\"Return to member selection\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang(isChannel ? 'NewChannel' : 'NewGroup')}</h3>\n      </div>\n      <div className=\"NewChat-inner step-2\">\n        <AvatarEditable\n          onChange={setPhoto}\n          title={lang('AddPhoto')}\n        />\n        <InputText\n          value={title}\n          onChange={handleTitleChange}\n          label={lang(isChannel ? 'EnterChannelName' : 'GroupName')}\n          error={error === chatTitleEmptyError || error === channelTitleEmptyError ? error : undefined}\n        />\n        {isChannel && (\n          <>\n            <InputText\n              value={about}\n              onChange={handleDescriptionChange}\n              label={lang('DescriptionOptionalPlaceholder')}\n            />\n            <p className=\"note\">{lang('DescriptionInfo')}</p>\n          </>\n        )}\n\n        {renderedError && (\n          <p className=\"error\">{renderedError}</p>\n        )}\n\n        {memberIds.length > 0 && (\n          <>\n            <h3 className=\"chat-members-heading\">{lang('GroupInfo.ParticipantCount', memberIds.length, 'i')}</h3>\n\n            <div className=\"chat-members-list custom-scroll\">\n              {memberIds.map((id) => (\n                <ListItem inactive className=\"chat-item-clickable\">\n                  <PrivateChatInfo userId={id} />\n                </ListItem>\n              ))}\n            </div>\n          </>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={title.length !== 0}\n        onClick={isChannel ? handleCreateChannel : handleCreateGroup}\n        disabled={isLoading}\n        ariaLabel={isChannel ? lang('ChannelIntro.CreateChannel') : 'Create Group'}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-arrow-right\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const {\n      progress: creationProgress,\n      error: creationError,\n    } = global.chatCreation || {};\n\n    return {\n      creationProgress,\n      creationError,\n    };\n  },\n)(NewChatStep2));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\n\nimport { LeftColumnContent } from '../../../types';\n\nimport { LAYERS_ANIMATION_NAME } from '../../../util/environment';\n\nimport Transition from '../../ui/Transition';\nimport NewChatStep1 from './NewChatStep1';\nimport NewChatStep2 from './NewChatStep2';\n\nimport './NewChat.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  isChannel?: boolean;\n  content: LeftColumnContent;\n  onContentChange: (content: LeftColumnContent) => void;\n  onReset: () => void;\n};\n\nconst RENDER_COUNT = Object.keys(LeftColumnContent).length / 2;\n\nconst NewChat: FC<OwnProps> = ({\n  isActive,\n  isChannel = false,\n  content,\n  onContentChange,\n  onReset,\n}) => {\n  const [newChatMemberIds, setNewChatMemberIds] = useState<string[]>([]);\n\n  const handleNextStep = useCallback(() => {\n    onContentChange(isChannel ? LeftColumnContent.NewChannelStep2 : LeftColumnContent.NewGroupStep2);\n  }, [isChannel, onContentChange]);\n\n  return (\n    <Transition\n      id=\"NewChat\"\n      name={LAYERS_ANIMATION_NAME}\n      renderCount={RENDER_COUNT}\n      activeKey={content}\n    >\n      {(isStepActive) => {\n        switch (content) {\n          case LeftColumnContent.NewChannelStep1:\n          case LeftColumnContent.NewGroupStep1:\n            return (\n              <NewChatStep1\n                isChannel={isChannel}\n                isActive={isActive}\n                selectedMemberIds={newChatMemberIds}\n                onSelectedMemberIdsChange={setNewChatMemberIds}\n                onNextStep={handleNextStep}\n                onReset={onReset}\n              />\n            );\n          case LeftColumnContent.NewChannelStep2:\n          case LeftColumnContent.NewGroupStep2:\n            return (\n              <NewChatStep2\n                isChannel={isChannel}\n                isActive={isStepActive && isActive}\n                memberIds={newChatMemberIds}\n                onReset={onReset}\n              />\n            );\n          default:\n            return undefined;\n        }\n      }}\n    </Transition>\n  );\n};\n\nexport default memo(NewChat);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Button from '../ui/Button';\nimport ChatList from './main/ChatList';\nimport type { LeftColumnContent } from '../../types';\n\nimport './ArchivedChats.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n  onReset: () => void;\n  onContentChange: (content: LeftColumnContent) => void;\n};\n\nconst ArchivedChats: FC<OwnProps> = ({ isActive, onReset }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onReset,\n  });\n\n  return (\n    <div className=\"ArchivedChats\">\n      <div className=\"left-header\">\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={onReset}\n          ariaLabel=\"Return to chat list\"\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <h3>{lang('ArchivedChats')}</h3>\n      </div>\n      <ChatList folderType=\"archived\" isActive={isActive} />\n    </div>\n  );\n};\n\nexport default memo(ArchivedChats);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChatFolder } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport CheckboxGroup from '../ui/CheckboxGroup';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatId: string;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n};\n\ntype StateProps = {\n  foldersById?: Record<number, ApiChatFolder>;\n  folderOrderedIds?: number[];\n};\n\nconst ChatFolderModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  chatId,\n  foldersById,\n  folderOrderedIds,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const { editChatFolders } = getActions();\n\n  const lang = useLang();\n\n  const initialSelectedFolderIds = useMemo(() => {\n    if (!foldersById) {\n      return [];\n    }\n\n    return Object.keys(foldersById).reduce((result, folderId) => {\n      const { includedChatIds, pinnedChatIds } = foldersById[Number(folderId)];\n      if (includedChatIds.includes(chatId) || pinnedChatIds?.includes(chatId)) {\n        result.push(folderId);\n      }\n\n      return result;\n    }, [] as string[]);\n  }, [chatId, foldersById]);\n\n  const [selectedFolderIds, setSelectedFolderIds] = useState<string[]>(initialSelectedFolderIds);\n\n  const folders = useMemo(() => {\n    return folderOrderedIds?.map((folderId) => ({\n      label: foldersById ? foldersById[folderId].title : '',\n      value: String(folderId),\n    })) || [];\n  }, [folderOrderedIds, foldersById]);\n\n  const handleSubmit = useCallback(() => {\n    const idsToRemove = initialSelectedFolderIds.filter((id) => !selectedFolderIds.includes(id)).map(Number);\n    const idsToAdd = selectedFolderIds.filter((id) => !initialSelectedFolderIds.includes(id)).map(Number);\n\n    editChatFolders({ chatId, idsToRemove, idsToAdd });\n    onClose();\n  }, [chatId, editChatFolders, initialSelectedFolderIds, onClose, selectedFolderIds]);\n\n  if (!foldersById || !folderOrderedIds) {\n    return undefined;\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onEnter={handleSubmit}\n      className=\"delete\"\n      title={lang('FilterAddTo')}\n    >\n      <CheckboxGroup\n        options={folders}\n        selected={selectedFolderIds}\n        onChange={setSelectedFolderIds}\n        round\n      />\n      <Button color=\"primary\" className=\"confirm-dialog-button\" isText onClick={handleSubmit}>\n        {lang('FilterAddTo')}\n      </Button>\n      <Button className=\"confirm-dialog-button\" isText onClick={onClose}>{lang('Cancel')}</Button>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { byId: foldersById, orderedIds: folderOrderedIds } = global.chatFolders;\n\n    return {\n      foldersById,\n      folderOrderedIds,\n    };\n  },\n)(ChatFolderModal));\n","import type { ApiMessage } from '../../../../api/types';\nimport { ApiMediaFormat } from '../../../../api/types';\n\nimport * as mediaLoader from '../../../../util/mediaLoader';\nimport {\n  getMessageContact,\n  getMessageMediaHash,\n  getMessagePhoto,\n  getMessageText,\n  getMessageTextWithSpoilers,\n  getMessageWebPagePhoto,\n  getMessageWebPageVideo,\n  hasMessageLocalBlobUrl,\n} from '../../../../global/helpers';\nimport { CLIPBOARD_ITEM_SUPPORTED, copyImageToClipboard, copyTextToClipboard } from '../../../../util/clipboard';\nimport getMessageIdsForSelectedText from '../../../../util/getMessageIdsForSelectedText';\n\ntype ICopyOptions = {\n  label: string;\n  icon: string;\n  handler: () => void;\n}[];\n\nexport function getMessageCopyOptions(\n  message: ApiMessage,\n  afterEffect?: () => void,\n  onCopyLink?: () => void,\n  onCopyMessages?: (messageIds: number[]) => void,\n  onCopyNumber?: () => void,\n): ICopyOptions {\n  const options: ICopyOptions = [];\n  const text = getMessageText(message);\n  const photo = getMessagePhoto(message)\n    || (!getMessageWebPageVideo(message) ? getMessageWebPagePhoto(message) : undefined);\n  const contact = getMessageContact(message);\n  const mediaHash = getMessageMediaHash(message, 'inline');\n  const canImageBeCopied = photo && (mediaHash || hasMessageLocalBlobUrl(message)) && CLIPBOARD_ITEM_SUPPORTED;\n  const selection = window.getSelection();\n\n  if (canImageBeCopied) {\n    options.push({\n      label: 'lng_context_copy_image',\n      icon: 'copy-media',\n      handler: () => {\n        Promise.resolve(mediaHash ? mediaLoader.fetch(mediaHash, ApiMediaFormat.BlobUrl) : photo!.blobUrl)\n          .then(copyImageToClipboard);\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (text) {\n    // Detect if the user has selection in the current message\n    const hasSelection = Boolean((\n      selection?.anchorNode?.parentNode\n      && (selection.anchorNode.parentNode as HTMLElement).closest('.Message .content-inner')\n      && selection.toString().replace(/(?:\\r\\n|\\r|\\n)/g, '') !== ''\n    ));\n\n    options.push({\n      label: getCopyLabel(hasSelection),\n      icon: 'copy',\n      handler: () => {\n        const messageIds = getMessageIdsForSelectedText();\n        if (messageIds?.length && onCopyMessages) {\n          onCopyMessages(messageIds);\n        } else {\n          const clipboardText = hasSelection && selection ? selection.toString() : getMessageTextWithSpoilers(message)!;\n          copyTextToClipboard(clipboardText);\n        }\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (onCopyLink) {\n    options.push({\n      label: 'lng_context_copy_message_link',\n      icon: 'link',\n      handler: () => {\n        onCopyLink();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  if (contact && onCopyNumber) {\n    options.push({\n      label: 'lng_profile_copy_phone',\n      icon: 'copy',\n      handler: () => {\n        onCopyNumber();\n\n        afterEffect?.();\n      },\n    });\n  }\n\n  return options;\n}\n\nfunction getCopyLabel(hasSelection: boolean): string {\n  if (hasSelection) {\n    return 'lng_context_copy_selected';\n  }\n  return 'lng_context_copy_text';\n}\n","let scrollLockEl: HTMLElement | null | undefined;\nlet excludedClosestSelector: string | undefined;\n\nconst IGNORED_KEYS: Record<string, boolean> = {\n  Down: true,\n  ArrowDown: true,\n  Up: true,\n  ArrowUp: true,\n  Left: true,\n  ArrowLeft: true,\n  Right: true,\n  ArrowRight: true,\n  ' ': true,\n  PageUp: true,\n  PageDown: true,\n  End: true,\n  Home: true,\n  Tab: true,\n};\n\nfunction isTextBox(target: EventTarget | null) {\n  if (!target || !(target instanceof HTMLElement)) return false;\n  const element = target;\n  const tagName = element.tagName.toLowerCase();\n  if (tagName === 'textarea') return true;\n  if (tagName !== 'input') return false;\n  const type = element.getAttribute('type');\n  if (!type) return false;\n  const inputTypes = [\n    'text', 'password', 'number', 'email', 'tel', 'url',\n    'search', 'date', 'datetime', 'datetime-local', 'time', 'month', 'week',\n  ];\n  return inputTypes.indexOf(type.toLowerCase()) > -1;\n}\n\nexport const getTouchY = (e: WheelEvent | TouchEvent | React.WheelEvent | React.TouchEvent) => {\n  return ('changedTouches' in e ? e.changedTouches[0].clientY : 0);\n};\n\nconst preventDefault = (e: WheelEvent | TouchEvent) => {\n  const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n  if (\n    !scrollLockEl\n    // Allow overlay scrolling\n    || !scrollLockEl.contains(e.target as HTMLElement)\n    // Prevent top overscroll\n    || (scrollLockEl.scrollTop <= 0 && deltaY <= 0)\n    // Prevent bottom overscroll\n    || (scrollLockEl.scrollTop >= (scrollLockEl.scrollHeight - scrollLockEl.offsetHeight) && deltaY >= 0)\n  ) {\n    if (excludedClosestSelector && (e.target as HTMLElement).closest(excludedClosestSelector)) return;\n    e.preventDefault();\n  }\n};\n\nfunction preventDefaultForScrollKeys(e: KeyboardEvent) {\n  if (IGNORED_KEYS[e.key] && !isTextBox(e.target)) {\n    e.preventDefault();\n  }\n}\n\nexport function disableScrolling(el?: HTMLElement | null, _excludedClosestSelector?: string) {\n  scrollLockEl = el;\n  excludedClosestSelector = _excludedClosestSelector;\n  // Disable scrolling in Chrome\n  document.addEventListener('wheel', preventDefault, { passive: false });\n  document.addEventListener('touchmove', preventDefault, { passive: false });\n  document.onkeydown = preventDefaultForScrollKeys;\n}\n\nexport function enableScrolling() {\n  scrollLockEl = undefined;\n  excludedClosestSelector = undefined;\n  document.removeEventListener('wheel', preventDefault); // Enable scrolling in Chrome\n  document.removeEventListener('touchmove', preventDefault);\n  // eslint-disable-next-line no-null/no-null\n  document.onkeydown = null;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useMedia from '../../../hooks/useMedia';\nimport useFlag from '../../../hooks/useFlag';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport AnimatedSticker from '../../common/AnimatedSticker';\n\nimport './ReactionSelectorReaction.scss';\n\nconst REACTION_SIZE = IS_COMPACT_MENU ? 24 : 32;\n\ntype OwnProps = {\n  reaction: ApiAvailableReaction;\n  previewIndex: number;\n  isReady?: boolean;\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n};\n\nconst cn = createClassNameBuilder('ReactionSelectorReaction');\n\nconst ReactionSelectorReaction: FC<OwnProps> = ({\n  reaction, previewIndex, onSendReaction, isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const mediaData = useMedia(`document${reaction.selectAnimation?.id}`, !isReady);\n\n  const [isActivated, activate, deactivate] = useFlag();\n  const [isAnimationLoaded, markAnimationLoaded] = useFlag();\n\n  const shouldRenderAnimated = Boolean(isReady && mediaData);\n  const { transitionClassNames: animatedClassNames } = useShowTransition(shouldRenderAnimated);\n  const { shouldRender: shouldRenderStatic, transitionClassNames: staticClassNames } = useShowTransition(\n    !isReady || !isAnimationLoaded, undefined, true,\n  );\n\n  function handleClick() {\n    if (!containerRef.current) return;\n    const { x, y } = containerRef.current.getBoundingClientRect();\n\n    onSendReaction(reaction.reaction, x, y);\n  }\n\n  return (\n    <div\n      className={cn('&', IS_COMPACT_MENU && 'compact')}\n      onClick={handleClick}\n      ref={containerRef}\n      onMouseEnter={isReady ? activate : undefined}\n    >\n      {shouldRenderStatic && (\n        <div\n          className={cn(\n            'static',\n            isReady ? [staticClassNames] : undefined,\n          )}\n          style={`background-position-x: ${previewIndex * -REACTION_SIZE}px;`}\n        />\n      )}\n      {shouldRenderAnimated && (\n        <AnimatedSticker\n          className={cn('animated', [animatedClassNames])}\n          tgsUrl={mediaData}\n          play={isActivated}\n          noLoop\n          size={REACTION_SIZE}\n          onLoad={markAnimationLoaded}\n          onEnded={deactivate}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(ReactionSelectorReaction);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useLayoutEffect, useRef } from '../../../lib/teact/teact';\n\nimport type { ApiAvailableReaction } from '../../../api/types';\n\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useFlag from '../../../hooks/useFlag';\nimport { getTouchY } from '../../../util/scrollLock';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\nimport { IS_COMPACT_MENU } from '../../../util/environment';\n\nimport ReactionSelectorReaction from './ReactionSelectorReaction';\n\nimport './ReactionSelector.scss';\n\ntype OwnProps = {\n  enabledReactions?: string[];\n  onSendReaction: (reaction: string, x: number, y: number) => void;\n  isPrivate?: boolean;\n  availableReactions?: ApiAvailableReaction[];\n  isReady?: boolean;\n};\n\nconst cn = createClassNameBuilder('ReactionSelector');\n\nconst ReactionSelector: FC<OwnProps> = ({\n  availableReactions,\n  enabledReactions,\n  onSendReaction,\n  isPrivate,\n  isReady,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const itemsScrollRef = useRef<HTMLDivElement>(null);\n  const [isHorizontalScrollEnabled, enableHorizontalScroll] = useFlag(false);\n  useHorizontalScroll(itemsScrollRef.current, !isHorizontalScrollEnabled);\n\n  useLayoutEffect(() => {\n    enableHorizontalScroll();\n  }, [enableHorizontalScroll]);\n\n  const handleWheel = (e: React.WheelEvent | React.TouchEvent) => {\n    if (!itemsScrollRef) return;\n    const deltaY = 'deltaY' in e ? e.deltaY : getTouchY(e);\n\n    if (deltaY) {\n      e.preventDefault();\n    }\n  };\n\n  if ((!isPrivate && !enabledReactions?.length) || !availableReactions) return undefined;\n\n  return (\n    <div className={cn('&', IS_COMPACT_MENU && 'compact')} onWheelCapture={handleWheel} onTouchMove={handleWheel}>\n      <div className={cn('bubble-big')} />\n      <div className={cn('bubble-small')} />\n      <div className={cn('items-wrapper')}>\n        <div className={cn('items', ['no-scrollbar'])} ref={itemsScrollRef}>\n          {availableReactions?.map((reaction, i) => {\n            if (reaction.isInactive\n              || (!isPrivate && (!enabledReactions || !enabledReactions.includes(reaction.reaction)))) return undefined;\n            return (\n              <ReactionSelectorReaction\n                key={reaction.reaction}\n                previewIndex={i}\n                isReady={isReady}\n                onSendReaction={onSendReaction}\n                reaction={reaction}\n              />\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(ReactionSelector);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiMessage, ApiUser } from '../../../api/types';\nimport type { IAnchorPosition } from '../../../types';\n\nimport { getMessageCopyOptions } from './helpers/copyOptions';\nimport { disableScrolling, enableScrolling } from '../../../util/scrollLock';\nimport { getUserFullName } from '../../../global/helpers';\nimport buildClassName from '../../../util/buildClassName';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\n\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuPosition from '../../../hooks/useContextMenuPosition';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\nimport Avatar from '../../common/Avatar';\nimport ReactionSelector from './ReactionSelector';\n\nimport './MessageContextMenu.scss';\n\ntype OwnProps = {\n  availableReactions?: ApiAvailableReaction[];\n  isOpen: boolean;\n  anchor: IAnchorPosition;\n  message: ApiMessage;\n  canSendNow?: boolean;\n  enabledReactions?: string[];\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  isPrivate?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  isDownloading?: boolean;\n  canShowSeenBy?: boolean;\n  seenByRecentUsers?: ApiUser[];\n  onReply: () => void;\n  onEdit: () => void;\n  onPin: () => void;\n  onUnpin: () => void;\n  onForward: () => void;\n  onDelete: () => void;\n  onReport: () => void;\n  onFaveSticker: () => void;\n  onUnfaveSticker: () => void;\n  onSelect: () => void;\n  onSend: () => void;\n  onReschedule: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd?: () => void;\n  onCopyLink?: () => void;\n  onCopyMessages?: (messageIds: number[]) => void;\n  onCopyNumber?: () => void;\n  onDownload?: () => void;\n  onSaveGif?: () => void;\n  onShowSeenBy?: () => void;\n  onShowReactors?: () => void;\n  onSendReaction: (reaction: string | undefined, x: number, y: number) => void;\n};\n\nconst SCROLLBAR_WIDTH = 10;\nconst REACTION_BUBBLE_EXTRA_WIDTH = 32;\nconst ANIMATION_DURATION = 200;\n\nconst MessageContextMenu: FC<OwnProps> = ({\n  availableReactions,\n  isOpen,\n  message,\n  isPrivate,\n  enabledReactions,\n  anchor,\n  canSendNow,\n  canReschedule,\n  canReply,\n  canEdit,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  isDownloading,\n  canShowSeenBy,\n  canShowReactionsCount,\n  canRemoveReaction,\n  canShowReactionList,\n  seenByRecentUsers,\n  onReply,\n  onEdit,\n  onPin,\n  onUnpin,\n  onForward,\n  onDelete,\n  onReport,\n  onFaveSticker,\n  onUnfaveSticker,\n  onSelect,\n  onSend,\n  onReschedule,\n  onClose,\n  onCloseAnimationEnd,\n  onCopyLink,\n  onCopyNumber,\n  onDownload,\n  onSaveGif,\n  onShowSeenBy,\n  onShowReactors,\n  onSendReaction,\n  onCopyMessages,\n}) => {\n  const { showNotification } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const menuRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const scrollableRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n  const noReactions = !isPrivate && !enabledReactions?.length;\n  const withReactions = canShowReactionList && !noReactions;\n\n  const [isReady, markIsReady, unmarkIsReady] = useFlag();\n\n  const handleAfterCopy = useCallback(() => {\n    showNotification({\n      message: lang('Share.Link.Copied'),\n    });\n    onClose();\n  }, [lang, onClose, showNotification]);\n\n  const copyOptions = getMessageCopyOptions(\n    message, handleAfterCopy, canCopyLink ? onCopyLink : undefined, onCopyMessages, onCopyNumber,\n  );\n\n  const getTriggerElement = useCallback(() => {\n    return document.querySelector(`.Transition__slide--active > .MessageList div[data-message-id=\"${message.id}\"]`);\n  }, [message.id]);\n\n  const getRootElement = useCallback(\n    () => document.querySelector('.Transition__slide--active > .MessageList'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => document.querySelector('.MessageContextMenu .bubble'),\n    [],\n  );\n\n  const getLayout = useCallback(() => {\n    const extraHeightAudioPlayer = (IS_SINGLE_COLUMN_LAYOUT\n      && (document.querySelector<HTMLElement>('.AudioPlayer-content'))?.offsetHeight) || 0;\n    const pinnedElement = document.querySelector<HTMLElement>('.HeaderPinnedMessage-wrapper');\n    const extraHeightPinned = (((IS_SINGLE_COLUMN_LAYOUT && !extraHeightAudioPlayer)\n      || (!IS_SINGLE_COLUMN_LAYOUT && pinnedElement?.classList.contains('full-width')))\n      && pinnedElement?.offsetHeight) || 0;\n\n    return {\n      extraPaddingX: SCROLLBAR_WIDTH,\n      extraTopPadding: (document.querySelector<HTMLElement>('.MiddleHeader')!).offsetHeight,\n      marginSides: withReactions ? REACTION_BUBBLE_EXTRA_WIDTH : undefined,\n      extraMarginTop: extraHeightPinned + extraHeightAudioPlayer,\n    };\n  }, [withReactions]);\n\n  const handleRemoveReaction = useCallback(() => {\n    onSendReaction(undefined, 0, 0);\n  }, [onSendReaction]);\n\n  useEffect(() => {\n    if (!isOpen) {\n      unmarkIsReady();\n      return;\n    }\n\n    setTimeout(() => {\n      markIsReady();\n    }, ANIMATION_DURATION);\n  }, [isOpen, markIsReady, unmarkIsReady]);\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style, menuStyle, withScroll,\n  } = useContextMenuPosition(anchor, getTriggerElement, getRootElement, getMenuElement, getLayout);\n\n  useEffect(() => {\n    disableScrolling(withScroll ? scrollableRef.current : undefined, '.ReactionSelector');\n\n    return enableScrolling;\n  }, [withScroll]);\n\n  return (\n    <Menu\n      ref={menuRef}\n      isOpen={isOpen}\n      transformOriginX={transformOriginX}\n      transformOriginY={transformOriginY}\n      positionX={positionX}\n      positionY={positionY}\n      style={style}\n      bubbleStyle={menuStyle}\n      className={buildClassName(\n        'MessageContextMenu', 'fluid', withReactions && 'with-reactions',\n      )}\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n    >\n      {canShowReactionList && (\n        <ReactionSelector\n          enabledReactions={enabledReactions}\n          onSendReaction={onSendReaction}\n          isPrivate={isPrivate}\n          availableReactions={availableReactions}\n          isReady={isReady}\n        />\n      )}\n\n      <div\n        className=\"scrollable-content custom-scroll\"\n        style={menuStyle}\n        ref={scrollableRef}\n      >\n        {canRemoveReaction && <MenuItem icon=\"heart-outline\" onClick={handleRemoveReaction}>Remove Reaction</MenuItem>}\n        {canSendNow && <MenuItem icon=\"send-outline\" onClick={onSend}>{lang('MessageScheduleSend')}</MenuItem>}\n        {canReschedule && (\n          <MenuItem icon=\"schedule\" onClick={onReschedule}>{lang('MessageScheduleEditTime')}</MenuItem>\n        )}\n        {canReply && <MenuItem icon=\"reply\" onClick={onReply}>{lang('Reply')}</MenuItem>}\n        {canEdit && <MenuItem icon=\"edit\" onClick={onEdit}>{lang('Edit')}</MenuItem>}\n        {canFaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onFaveSticker}>{lang('AddToFavorites')}</MenuItem>\n        )}\n        {canUnfaveSticker && (\n          <MenuItem icon=\"favorite\" onClick={onUnfaveSticker}>{lang('Stickers.RemoveFromFavorites')}</MenuItem>\n        )}\n        {canCopy && copyOptions.map((option) => (\n          <MenuItem key={option.label} icon={option.icon} onClick={option.handler}>{lang(option.label)}</MenuItem>\n        ))}\n        {canPin && <MenuItem icon=\"pin\" onClick={onPin}>{lang('DialogPin')}</MenuItem>}\n        {canUnpin && <MenuItem icon=\"unpin\" onClick={onUnpin}>{lang('DialogUnpin')}</MenuItem>}\n        {canSaveGif && <MenuItem icon=\"gifs\" onClick={onSaveGif}>{lang('lng_context_save_gif')}</MenuItem>}\n        {canDownload && (\n          <MenuItem icon=\"download\" onClick={onDownload}>\n            {isDownloading ? lang('lng_context_cancel_download') : lang('lng_media_download')}\n          </MenuItem>\n        )}\n        {canForward && <MenuItem icon=\"forward\" onClick={onForward}>{lang('Forward')}</MenuItem>}\n        {canSelect && <MenuItem icon=\"select\" onClick={onSelect}>{lang('Common.Select')}</MenuItem>}\n        {canReport && <MenuItem icon=\"flag\" onClick={onReport}>{lang('lng_context_report_msg')}</MenuItem>}\n        {(canShowSeenBy || canShowReactionsCount) && (\n          <MenuItem\n            className=\"MessageContextMenu--seen-by\"\n            icon={canShowReactionsCount ? 'heart-outline' : 'group'}\n            onClick={canShowReactionsCount ? onShowReactors : onShowSeenBy}\n            disabled={!canShowReactionsCount && !message.seenByUserIds?.length}\n          >\n            <span className=\"MessageContextMenu--seen-by-label\">\n              {canShowReactionsCount && message.reactors?.count ? (\n                canShowSeenBy && message.seenByUserIds?.length\n                  ? lang(\n                    'Chat.OutgoingContextMixedReactionCount',\n                    [message.reactors.count, message.seenByUserIds.length],\n                  )\n                  : lang('Chat.ContextReactionCount', message.reactors.count, 'i')\n              ) : (\n                message.seenByUserIds?.length === 1 && seenByRecentUsers\n                  ? getUserFullName(seenByRecentUsers[0])\n                  : (message.seenByUserIds?.length\n                    ? lang('Conversation.ContextMenuSeen', message.seenByUserIds.length, 'i')\n                    : lang('Conversation.ContextMenuNoViews')\n                  )\n              )}\n            </span>\n            <div className=\"avatars\">\n              {seenByRecentUsers?.map((user) => (\n                <Avatar\n                  size=\"micro\"\n                  user={user}\n                />\n              ))}\n            </div>\n          </MenuItem>\n        )}\n        {canDelete && <MenuItem destructive icon=\"delete\" onClick={onDelete}>{lang('Delete')}</MenuItem>}\n      </div>\n    </Menu>\n  );\n};\n\nexport default memo(MessageContextMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { MessageListType } from '../../../global/types';\nimport type { ApiAvailableReaction, ApiMessage } from '../../../api/types';\nimport type { IAlbum, IAnchorPosition } from '../../../types';\n\nimport {\n  selectActiveDownloadIds,\n  selectAllowedMessageActions,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsMessageProtected,\n} from '../../../global/selectors';\nimport {\n  isActionMessage, isChatChannel,\n  isChatGroup, isOwnMessage, areReactionsEmpty, isUserId, isMessageLocal, getMessageVideo,\n} from '../../../global/helpers';\nimport { SERVICE_NOTIFICATIONS_USER_ID } from '../../../config';\nimport { getDayStartAt } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport { REM } from '../../common/helpers/mediaDimensions';\n\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useFlag from '../../../hooks/useFlag';\n\nimport DeleteMessageModal from '../../common/DeleteMessageModal';\nimport ReportModal from '../../common/ReportModal';\nimport PinMessageModal from '../../common/PinMessageModal';\nimport MessageContextMenu from './MessageContextMenu';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst START_SIZE = 2 * REM;\n\nexport type OwnProps = {\n  isOpen: boolean;\n  chatUsername?: string;\n  message: ApiMessage;\n  album?: IAlbum;\n  anchor: IAnchorPosition;\n  messageListType: MessageListType;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  availableReactions?: ApiAvailableReaction[];\n  noOptions?: boolean;\n  canSendNow?: boolean;\n  canReschedule?: boolean;\n  canReply?: boolean;\n  canPin?: boolean;\n  canShowReactionsCount?: boolean;\n  canShowReactionList?: boolean;\n  canRemoveReaction?: boolean;\n  canUnpin?: boolean;\n  canDelete?: boolean;\n  canReport?: boolean;\n  canEdit?: boolean;\n  canForward?: boolean;\n  canFaveSticker?: boolean;\n  canUnfaveSticker?: boolean;\n  canCopy?: boolean;\n  isPrivate?: boolean;\n  hasFullInfo?: boolean;\n  canCopyLink?: boolean;\n  canSelect?: boolean;\n  canDownload?: boolean;\n  canSaveGif?: boolean;\n  activeDownloads: number[];\n  canShowSeenBy?: boolean;\n  enabledReactions?: string[];\n};\n\nconst ContextMenuContainer: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  isOpen,\n  messageListType,\n  chatUsername,\n  message,\n  album,\n  anchor,\n  onClose,\n  onCloseAnimationEnd,\n  noOptions,\n  canSendNow,\n  hasFullInfo,\n  canReschedule,\n  canReply,\n  canPin,\n  canUnpin,\n  canDelete,\n  canReport,\n  canShowReactionsCount,\n  canShowReactionList,\n  canRemoveReaction,\n  canEdit,\n  enabledReactions,\n  isPrivate,\n  canForward,\n  canFaveSticker,\n  canUnfaveSticker,\n  canCopy,\n  canCopyLink,\n  canSelect,\n  canDownload,\n  canSaveGif,\n  activeDownloads,\n  canShowSeenBy,\n}) => {\n  const {\n    setReplyingToId,\n    setEditingId,\n    pinMessage,\n    openForwardMenu,\n    faveSticker,\n    unfaveSticker,\n    toggleMessageSelection,\n    sendScheduledMessages,\n    rescheduleMessage,\n    downloadMessageMedia,\n    cancelMessageMediaDownload,\n    loadSeenBy,\n    openSeenByModal,\n    sendReaction,\n    openReactorListModal,\n    loadFullChat,\n    loadReactors,\n    copyMessagesByIds,\n    saveGif,\n  } = getActions();\n\n  const { transitionClassNames } = useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const [isPinModalOpen, setIsPinModalOpen] = useState(false);\n  const [isCalendarOpen, openCalendar, closeCalendar] = useFlag();\n\n  useEffect(() => {\n    if (canShowSeenBy && isOpen) {\n      loadSeenBy({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [loadSeenBy, isOpen, message.chatId, message.id, canShowSeenBy]);\n\n  useEffect(() => {\n    if (canShowReactionsCount && isOpen) {\n      loadReactors({ chatId: message.chatId, messageId: message.id });\n    }\n  }, [canShowReactionsCount, isOpen, loadReactors, message.chatId, message.id]);\n\n  useEffect(() => {\n    if (!hasFullInfo && !isPrivate && isOpen) {\n      loadFullChat({ chatId: message.chatId });\n    }\n  }, [hasFullInfo, isOpen, isPrivate, loadFullChat, message.chatId]);\n\n  const seenByRecentUsers = useMemo(() => {\n    if (message.reactions?.recentReactions?.length) {\n      // No need for expensive global updates on users, so we avoid them\n      const usersById = getGlobal().users.byId;\n\n      return message.reactions?.recentReactions?.slice(0, 3).map(({ userId }) => usersById[userId]).filter(Boolean);\n    }\n\n    if (!message.seenByUserIds) {\n      return undefined;\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    return message.seenByUserIds?.slice(0, 3).map((id) => usersById[id]).filter(Boolean);\n  }, [message.reactions?.recentReactions, message.seenByUserIds]);\n\n  const isDownloading = album ? album.messages.some((msg) => activeDownloads.includes(msg.id))\n    : activeDownloads.includes(message.id);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closePinModal = useCallback(() => {\n    setIsPinModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleCloseCalendar = useCallback(() => {\n    closeCalendar();\n    onClose();\n  }, [closeCalendar, onClose]);\n\n  const handleReply = useCallback(() => {\n    setReplyingToId({ messageId: message.id });\n    closeMenu();\n  }, [setReplyingToId, message.id, closeMenu]);\n\n  const handleEdit = useCallback(() => {\n    setEditingId({ messageId: message.id });\n    closeMenu();\n  }, [setEditingId, message.id, closeMenu]);\n\n  const handlePin = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsPinModalOpen(true);\n  }, []);\n\n  const handleUnpin = useCallback(() => {\n    pinMessage({ messageId: message.id, isUnpin: true });\n    closeMenu();\n  }, [pinMessage, message.id, closeMenu]);\n\n  const handleForward = useCallback(() => {\n    closeMenu();\n    if (album?.messages) {\n      const messageIds = album.messages.map(({ id }) => id);\n      openForwardMenu({ fromChatId: message.chatId, messageIds });\n    } else {\n      openForwardMenu({ fromChatId: message.chatId, messageIds: [message.id] });\n    }\n  }, [openForwardMenu, message, closeMenu, album]);\n\n  const handleFaveSticker = useCallback(() => {\n    closeMenu();\n    faveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, faveSticker]);\n\n  const handleUnfaveSticker = useCallback(() => {\n    closeMenu();\n    unfaveSticker({ sticker: message.content.sticker });\n  }, [closeMenu, message.content.sticker, unfaveSticker]);\n\n  const handleSelectMessage = useCallback(() => {\n    const params = album?.messages\n      ? {\n        messageId: message.id,\n        childMessageIds: album.messages.map(({ id }) => id),\n        withShift: false,\n      }\n      : { messageId: message.id, withShift: false };\n\n    toggleMessageSelection(params);\n    closeMenu();\n  }, [closeMenu, message.id, toggleMessageSelection, album]);\n\n  const handleScheduledMessageSend = useCallback(() => {\n    sendScheduledMessages({ chatId: message.chatId, id: message.id });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendScheduledMessages]);\n\n  const handleOpenCalendar = useCallback(() => {\n    setIsMenuOpen(false);\n    openCalendar();\n  }, [openCalendar]);\n\n  const handleOpenSeenByModal = useCallback(() => {\n    closeMenu();\n    openSeenByModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, message.chatId, message.id, openSeenByModal]);\n\n  const handleOpenReactorListModal = useCallback(() => {\n    closeMenu();\n    openReactorListModal({ chatId: message.chatId, messageId: message.id });\n  }, [closeMenu, openReactorListModal, message.chatId, message.id]);\n\n  const handleRescheduleMessage = useCallback((date: Date) => {\n    rescheduleMessage({\n      chatId: message.chatId,\n      messageId: message.id,\n      scheduledAt: Math.round(date.getTime() / 1000),\n    });\n  }, [message.chatId, message.id, rescheduleMessage]);\n\n  const handleCopyMessages = useCallback((messageIds: number[]) => {\n    copyMessagesByIds({ messageIds });\n    closeMenu();\n  }, [closeMenu, copyMessagesByIds]);\n\n  const handleCopyLink = useCallback(() => {\n    copyTextToClipboard(`https://t.me/${chatUsername || `c/${message.chatId.replace('-', '')}`}/${message.id}`);\n    closeMenu();\n  }, [chatUsername, closeMenu, message]);\n\n  const handleCopyNumber = useCallback(() => {\n    copyTextToClipboard(message.content.contact!.phoneNumber);\n    closeMenu();\n  }, [closeMenu, message]);\n\n  const handleDownloadClick = useCallback(() => {\n    (album?.messages || [message]).forEach((msg) => {\n      if (isDownloading) {\n        cancelMessageMediaDownload({ message: msg });\n      } else {\n        downloadMessageMedia({ message: msg });\n      }\n    });\n    closeMenu();\n  }, [album, message, closeMenu, isDownloading, cancelMessageMediaDownload, downloadMessageMedia]);\n\n  const handleSaveGif = useCallback(() => {\n    const video = getMessageVideo(message);\n    saveGif({ gif: video });\n    closeMenu();\n  }, [closeMenu, message, saveGif]);\n\n  const handleSendReaction = useCallback((reaction: string | undefined, x: number, y: number) => {\n    sendReaction({\n      chatId: message.chatId, messageId: message.id, reaction, x, y, startSize: START_SIZE,\n    });\n    closeMenu();\n  }, [closeMenu, message.chatId, message.id, sendReaction]);\n\n  const reportMessageIds = useMemo(() => (album ? album.messages : [message]).map(({ id }) => id), [album, message]);\n\n  if (noOptions) {\n    closeMenu();\n\n    return undefined;\n  }\n\n  const scheduledMaxDate = new Date();\n  scheduledMaxDate.setFullYear(scheduledMaxDate.getFullYear() + 1);\n\n  return (\n    <div className={buildClassName('ContextMenuContainer', transitionClassNames)}>\n      <MessageContextMenu\n        availableReactions={availableReactions}\n        message={message}\n        isPrivate={isPrivate}\n        isOpen={isMenuOpen}\n        enabledReactions={enabledReactions}\n        anchor={anchor}\n        canShowReactionsCount={canShowReactionsCount}\n        canShowReactionList={canShowReactionList}\n        canRemoveReaction={canRemoveReaction}\n        canSendNow={canSendNow}\n        canReschedule={canReschedule}\n        canReply={canReply}\n        canDelete={canDelete}\n        canReport={canReport}\n        canPin={canPin}\n        canUnpin={canUnpin}\n        canEdit={canEdit}\n        canForward={canForward}\n        canFaveSticker={canFaveSticker}\n        canUnfaveSticker={canUnfaveSticker}\n        canCopy={canCopy}\n        canCopyLink={canCopyLink}\n        canSelect={canSelect}\n        canDownload={canDownload}\n        canSaveGif={canSaveGif}\n        canShowSeenBy={canShowSeenBy}\n        isDownloading={isDownloading}\n        seenByRecentUsers={seenByRecentUsers}\n        onReply={handleReply}\n        onEdit={handleEdit}\n        onPin={handlePin}\n        onUnpin={handleUnpin}\n        onForward={handleForward}\n        onDelete={handleDelete}\n        onReport={handleReport}\n        onFaveSticker={handleFaveSticker}\n        onUnfaveSticker={handleUnfaveSticker}\n        onSelect={handleSelectMessage}\n        onSend={handleScheduledMessageSend}\n        onReschedule={handleOpenCalendar}\n        onClose={closeMenu}\n        onCopyLink={handleCopyLink}\n        onCopyMessages={handleCopyMessages}\n        onCopyNumber={handleCopyNumber}\n        onDownload={handleDownloadClick}\n        onSaveGif={handleSaveGif}\n        onShowSeenBy={handleOpenSeenByModal}\n        onSendReaction={handleSendReaction}\n        onShowReactors={handleOpenReactorListModal}\n      />\n      <DeleteMessageModal\n        isOpen={isDeleteModalOpen}\n        isSchedule={messageListType === 'scheduled'}\n        onClose={closeDeleteModal}\n        album={album}\n        message={message}\n      />\n      <ReportModal\n        isOpen={isReportModalOpen}\n        onClose={closeReportModal}\n        messageIds={reportMessageIds}\n      />\n      <PinMessageModal\n        isOpen={isPinModalOpen}\n        messageId={message.id}\n        chatId={message.chatId}\n        onClose={closePinModal}\n      />\n      {canReschedule && (\n        <CalendarModal\n          isOpen={isCalendarOpen}\n          withTimePicker\n          selectedAt={message.date * 1000}\n          maxAt={getDayStartAt(scheduledMaxDate)}\n          isFutureMode\n          onClose={handleCloseCalendar}\n          onSubmit={handleRescheduleMessage}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { message, messageListType }): StateProps => {\n    const { threadId } = selectCurrentMessageList(global) || {};\n    const activeDownloads = selectActiveDownloadIds(global, message.chatId);\n    const chat = selectChat(global, message.chatId);\n    const { seenByExpiresAt, seenByMaxChatMembers } = global.appConfig || {};\n    const {\n      noOptions,\n      canReply,\n      canPin,\n      canUnpin,\n      canDelete,\n      canReport,\n      canEdit,\n      canForward,\n      canFaveSticker,\n      canUnfaveSticker,\n      canCopy,\n      canCopyLink,\n      canSelect,\n      canDownload,\n      canSaveGif,\n    } = (threadId && selectAllowedMessageActions(global, message, threadId)) || {};\n    const isPinned = messageListType === 'pinned';\n    const isScheduled = messageListType === 'scheduled';\n    const isChannel = chat && isChatChannel(chat);\n    const isLocal = isMessageLocal(message);\n    const canShowSeenBy = Boolean(chat\n      && seenByMaxChatMembers\n      && seenByExpiresAt\n      && isChatGroup(chat)\n      && isOwnMessage(message)\n      && !isScheduled\n      && chat.membersCount\n      && chat.membersCount <= seenByMaxChatMembers\n      && message.date > Date.now() / 1000 - seenByExpiresAt);\n    const isPrivate = chat && isUserId(chat.id);\n    const isAction = isActionMessage(message);\n    const canShowReactionsCount = !isLocal && !isChannel && !isScheduled && !isAction && !isPrivate && message.reactions\n      && !areReactionsEmpty(message.reactions) && message.reactions.canSeeList;\n    const canRemoveReaction = isPrivate && message.reactions?.results?.some((l) => l.isChosen);\n    const isProtected = selectIsMessageProtected(global, message);\n    const canCopyNumber = Boolean(message.content.contact);\n\n    return {\n      availableReactions: global.availableReactions,\n      noOptions,\n      canSendNow: isScheduled,\n      canReschedule: isScheduled,\n      canReply: !isPinned && !isScheduled && canReply,\n      canPin: !isScheduled && canPin,\n      canUnpin: !isScheduled && canUnpin,\n      canDelete,\n      canReport,\n      canEdit: !isPinned && canEdit,\n      canForward: !isProtected && !isScheduled && canForward,\n      canFaveSticker: !isScheduled && canFaveSticker,\n      canUnfaveSticker: !isScheduled && canUnfaveSticker,\n      canCopy: canCopyNumber || (!isProtected && canCopy),\n      canCopyLink: !isProtected && !isScheduled && canCopyLink,\n      canSelect,\n      canDownload: !isProtected && canDownload,\n      canSaveGif: !isProtected && canSaveGif,\n      activeDownloads,\n      canShowSeenBy,\n      enabledReactions: chat?.isForbidden ? undefined : chat?.fullInfo?.enabledReactions,\n      isPrivate,\n      hasFullInfo: Boolean(chat?.fullInfo),\n      canShowReactionsCount,\n      canShowReactionList: !isLocal && !isAction && !isScheduled && chat?.id !== SERVICE_NOTIFICATIONS_USER_ID,\n      canRemoveReaction,\n    };\n  },\n)(ContextMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiSticker, ApiStickerSet } from '../../api/types';\n\nimport { STICKER_SIZE_MODAL } from '../../config';\nimport {\n  selectCanScheduleUntilOnline,\n  selectChat,\n  selectCurrentMessageList,\n  selectIsChatWithSelf,\n  selectShouldSchedule,\n  selectStickerSet,\n  selectStickerSetByShortName,\n} from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport renderText from './helpers/renderText';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\nimport Loading from '../ui/Loading';\nimport StickerButton from './StickerButton';\n\nimport './StickerSetModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  fromSticker?: ApiSticker;\n  stickerSetShortName?: string;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  canSendStickers?: boolean;\n  stickerSet?: ApiStickerSet;\n  canScheduleUntilOnline?: boolean;\n  shouldSchedule?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerSetModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  fromSticker,\n  stickerSetShortName,\n  stickerSet,\n  canSendStickers,\n  canScheduleUntilOnline,\n  shouldSchedule,\n  isSavedMessages,\n  onClose,\n}) => {\n  const {\n    loadStickers,\n    toggleStickerSet,\n    sendMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const lang = useLang();\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE, isDisabled: !isOpen });\n\n  useEffect(() => {\n    if (isOpen) {\n      if (fromSticker) {\n        const { stickerSetId, stickerSetAccessHash } = fromSticker;\n        loadStickers({\n          stickerSetId,\n          stickerSetAccessHash,\n        });\n      } else if (stickerSetShortName) {\n        loadStickers({\n          stickerSetShortName,\n        });\n      }\n    }\n  }, [isOpen, fromSticker, loadStickers, stickerSetShortName]);\n\n  const handleSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, isScheduleRequested?: boolean) => {\n    sticker = {\n      ...sticker,\n      isPreloadedGlobally: true,\n    };\n\n    if (shouldSchedule || isScheduleRequested) {\n      requestCalendar((scheduledAt) => {\n        sendMessage({ sticker, isSilent, scheduledAt });\n        onClose();\n      });\n    } else {\n      sendMessage({ sticker, isSilent });\n      onClose();\n    }\n  }, [onClose, requestCalendar, sendMessage, shouldSchedule]);\n\n  const handleButtonClick = useCallback(() => {\n    if (stickerSet) {\n      toggleStickerSet({ stickerSetId: stickerSet.id });\n      onClose();\n    }\n  }, [onClose, stickerSet, toggleStickerSet]);\n\n  return (\n    <Modal\n      className=\"StickerSetModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n      hasCloseButton\n      title={stickerSet ? renderText(stickerSet.title, ['emoji', 'links']) : lang('AccDescrStickerSet')}\n    >\n      {stickerSet?.stickers ? (\n        <>\n          <div ref={containerRef} className=\"stickers custom-scroll\">\n            {stickerSet.stickers.map((sticker) => (\n              <StickerButton\n                sticker={sticker}\n                size={STICKER_SIZE_MODAL}\n                observeIntersection={observeIntersection}\n                onClick={canSendStickers ? handleSelect : undefined}\n                clickArg={sticker}\n                isSavedMessages={isSavedMessages}\n              />\n            ))}\n          </div>\n          <div className=\"button-wrapper\">\n            <Button\n              size=\"smaller\"\n              fluid\n              color={stickerSet.installedDate ? 'danger' : 'primary'}\n              onClick={handleButtonClick}\n            >\n              {lang(\n                stickerSet.installedDate ? 'StickerPack.RemoveStickerCount' : 'StickerPack.AddStickerCount',\n                stickerSet.count,\n                'i',\n              )}\n            </Button>\n          </div>\n        </>\n      ) : (\n        <Loading />\n      )}\n      {calendar}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { fromSticker, stickerSetShortName }): StateProps => {\n    const currentMessageList = selectCurrentMessageList(global);\n    const { chatId, threadId } = currentMessageList || {};\n    const chat = chatId && selectChat(global, chatId);\n    const sendOptions = chat ? getAllowedAttachmentOptions(chat) : undefined;\n    const canSendStickers = Boolean(\n      chat && threadId && getCanPostInChat(chat, threadId) && sendOptions?.canSendStickers,\n    );\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n\n    return {\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n      canSendStickers,\n      isSavedMessages,\n      shouldSchedule: selectShouldSchedule(global),\n      stickerSet: fromSticker\n        ? selectStickerSet(global, fromSticker.stickerSetId)\n        : stickerSetShortName\n          ? selectStickerSetByShortName(global, stickerSetShortName)\n          : undefined,\n    };\n  },\n)(StickerSetModal));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiBotCommand, ApiChat } from '../../api/types';\nimport type { IAnchorPosition } from '../../types';\n\nimport { REPLIES_USER_ID } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { disableScrolling, enableScrolling } from '../../util/scrollLock';\nimport {\n  selectChat, selectNotifySettings, selectNotifyExceptions, selectUser, selectChatBot,\n} from '../../global/selectors';\nimport {\n  isUserId, getCanDeleteChat, selectIsChatMuted, getCanAddContact, isChatChannel, isChatGroup,\n} from '../../global/helpers';\nimport useShowTransition from '../../hooks/useShowTransition';\nimport useLang from '../../hooks/useLang';\n\nimport Portal from '../ui/Portal';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\nimport DeleteChatModal from '../common/DeleteChatModal';\nimport ReportModal from '../common/ReportModal';\n\nimport './HeaderMenuContainer.scss';\n\nconst BOT_BUTTONS: Record<string, { icon: string; label: string }> = {\n  settings: {\n    icon: 'bots',\n    label: 'BotSettings',\n  },\n  privacy: {\n    icon: 'info',\n    label: 'Privacy',\n  },\n  help: {\n    icon: 'help',\n    label: 'BotHelp',\n  },\n};\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  isOpen: boolean;\n  withExtraActions: boolean;\n  anchor: IAnchorPosition;\n  isChannel?: boolean;\n  canStartBot?: boolean;\n  canRestartBot?: boolean;\n  canSubscribe?: boolean;\n  canSearch?: boolean;\n  canCall?: boolean;\n  canMute?: boolean;\n  canViewStatistics?: boolean;\n  canLeave?: boolean;\n  canEnterVoiceChat?: boolean;\n  canCreateVoiceChat?: boolean;\n  onSubscribeChannel: () => void;\n  onSearchClick: () => void;\n  onClose: () => void;\n  onCloseAnimationEnd: () => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  botCommands?: ApiBotCommand[];\n  isPrivate?: boolean;\n  isMuted?: boolean;\n  canAddContact?: boolean;\n  canReportChat?: boolean;\n  canDeleteChat?: boolean;\n  hasLinkedChat?: boolean;\n};\n\nconst HeaderMenuContainer: FC<OwnProps & StateProps> = ({\n  chatId,\n  isOpen,\n  withExtraActions,\n  anchor,\n  isChannel,\n  botCommands,\n  canStartBot,\n  canRestartBot,\n  canSubscribe,\n  canSearch,\n  canCall,\n  canMute,\n  canViewStatistics,\n  canLeave,\n  canEnterVoiceChat,\n  canCreateVoiceChat,\n  chat,\n  isPrivate,\n  isMuted,\n  canReportChat,\n  canDeleteChat,\n  hasLinkedChat,\n  canAddContact,\n  onSubscribeChannel,\n  onSearchClick,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const {\n    updateChatMutedState,\n    enterMessageSelectMode,\n    sendBotCommand,\n    restartBot,\n    joinGroupCall,\n    createGroupCall,\n    openLinkedChat,\n    openAddContactDialog,\n    requestCall,\n    toggleStatistics,\n  } = getActions();\n  const [isMenuOpen, setIsMenuOpen] = useState(true);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isReportModalOpen, setIsReportModalOpen] = useState(false);\n  const { x, y } = anchor;\n\n  useShowTransition(isOpen, onCloseAnimationEnd, undefined, false);\n\n  const handleReport = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsReportModalOpen(true);\n  }, []);\n\n  const closeReportModal = useCallback(() => {\n    setIsReportModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleDelete = useCallback(() => {\n    setIsMenuOpen(false);\n    setIsDeleteModalOpen(true);\n  }, []);\n\n  const closeMenu = useCallback(() => {\n    setIsMenuOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const closeDeleteModal = useCallback(() => {\n    setIsDeleteModalOpen(false);\n    onClose();\n  }, [onClose]);\n\n  const handleStartBot = useCallback(() => {\n    sendBotCommand({ command: '/start' });\n  }, [sendBotCommand]);\n\n  const handleRestartBot = useCallback(() => {\n    restartBot({ chatId });\n  }, [chatId, restartBot]);\n\n  const handleToggleMuteClick = useCallback(() => {\n    updateChatMutedState({ chatId, isMuted: !isMuted });\n    closeMenu();\n  }, [chatId, closeMenu, isMuted, updateChatMutedState]);\n\n  const handleEnterVoiceChatClick = useCallback(() => {\n    if (canCreateVoiceChat) {\n      // TODO show popup to schedule\n      createGroupCall({\n        chatId,\n      });\n    } else {\n      joinGroupCall({\n        chatId,\n      });\n    }\n    closeMenu();\n  }, [closeMenu, canCreateVoiceChat, chatId, joinGroupCall, createGroupCall]);\n\n  const handleLinkedChatClick = useCallback(() => {\n    openLinkedChat({ id: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, openLinkedChat]);\n\n  const handleAddContactClick = useCallback(() => {\n    openAddContactDialog({ userId: chatId });\n    closeMenu();\n  }, [openAddContactDialog, chatId, closeMenu]);\n\n  const handleSubscribe = useCallback(() => {\n    onSubscribeChannel();\n    closeMenu();\n  }, [closeMenu, onSubscribeChannel]);\n\n  const handleVideoCall = useCallback(() => {\n    requestCall({ userId: chatId, isVideo: true });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleCall = useCallback(() => {\n    requestCall({ userId: chatId });\n    closeMenu();\n  }, [chatId, closeMenu, requestCall]);\n\n  const handleSearch = useCallback(() => {\n    onSearchClick();\n    closeMenu();\n  }, [closeMenu, onSearchClick]);\n\n  const handleStatisticsClick = useCallback(() => {\n    toggleStatistics();\n    closeMenu();\n  }, [closeMenu, toggleStatistics]);\n\n  const handleSelectMessages = useCallback(() => {\n    enterMessageSelectMode();\n    closeMenu();\n  }, [closeMenu, enterMessageSelectMode]);\n\n  useEffect(() => {\n    disableScrolling();\n\n    return enableScrolling;\n  }, []);\n\n  const lang = useLang();\n\n  const botButtons = useMemo(() => {\n    return botCommands?.map(({ command }) => {\n      const cmd = BOT_BUTTONS[command];\n      if (!cmd) return undefined;\n      const handleClick = () => {\n        sendBotCommand({ command: `/${command}` });\n        closeMenu();\n      };\n\n      return (\n        <MenuItem\n          key={command}\n          icon={cmd.icon}\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={handleClick}\n        >\n          {lang(cmd.label)}\n        </MenuItem>\n      );\n    });\n  }, [botCommands, closeMenu, lang, sendBotCommand]);\n\n  return (\n    <Portal>\n      <div className=\"HeaderMenuContainer\">\n        <Menu\n          isOpen={isMenuOpen}\n          positionX=\"right\"\n          style={`left: ${x}px;top: ${y}px;`}\n          onClose={closeMenu}\n        >\n          {withExtraActions && canStartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleStartBot}\n            >\n              {lang('BotStart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canRestartBot && (\n            <MenuItem\n              icon=\"bots\"\n              onClick={handleRestartBot}\n            >\n              {lang('BotRestart')}\n            </MenuItem>\n          )}\n          {withExtraActions && canSubscribe && (\n            <MenuItem\n              icon={isChannel ? 'channel' : 'group'}\n              onClick={handleSubscribe}\n            >\n              {lang(isChannel ? 'ProfileJoinChannel' : 'ProfileJoinGroup')}\n            </MenuItem>\n          )}\n          {canAddContact && (\n            <MenuItem\n              icon=\"add-user\"\n              onClick={handleAddContactClick}\n            >\n              {lang('AddContact')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canCall && (\n            <MenuItem\n              icon=\"phone\"\n              onClick={handleCall}\n            >\n              {lang('Call')}\n            </MenuItem>\n          )}\n          {canCall && (\n            <MenuItem\n              icon=\"video-outlined\"\n              onClick={handleVideoCall}\n            >\n              {lang('VideoCall')}\n            </MenuItem>\n          )}\n          {IS_SINGLE_COLUMN_LAYOUT && canSearch && (\n            <MenuItem\n              icon=\"search\"\n              onClick={handleSearch}\n            >\n              {lang('Search')}\n            </MenuItem>\n          )}\n          {canMute && (\n            <MenuItem\n              icon={isMuted ? 'unmute' : 'mute'}\n              onClick={handleToggleMuteClick}\n            >\n              {lang(isMuted ? 'ChatsUnmute' : 'ChatsMute')}\n            </MenuItem>\n          )}\n          {(canEnterVoiceChat || canCreateVoiceChat) && (\n            <MenuItem\n              icon=\"voice-chat\"\n              onClick={handleEnterVoiceChatClick}\n            >\n              {lang(canCreateVoiceChat ? 'StartVoipChat' : 'VoipGroupJoinCall')}\n            </MenuItem>\n          )}\n          {hasLinkedChat && (\n            <MenuItem\n              icon={isChannel ? 'comments' : 'channel'}\n              onClick={handleLinkedChatClick}\n            >\n              {lang(isChannel ? 'ViewDiscussion' : 'lng_profile_view_channel')}\n            </MenuItem>\n          )}\n          <MenuItem\n            icon=\"select\"\n            onClick={handleSelectMessages}\n          >\n            {lang('ReportSelectMessages')}\n          </MenuItem>\n          {canViewStatistics && (\n            <MenuItem\n              icon=\"stats\"\n              onClick={handleStatisticsClick}\n            >\n              {lang('Statistics')}\n            </MenuItem>\n          )}\n          {canReportChat && (\n            <MenuItem\n              icon=\"flag\"\n              onClick={handleReport}\n            >\n              {lang('ReportPeer.Report')}\n            </MenuItem>\n          )}\n          {botButtons}\n          {canLeave && (\n            <MenuItem\n              destructive\n              icon=\"delete\"\n              onClick={handleDelete}\n            >\n              {lang(isPrivate\n                ? 'DeleteChatUser'\n                : (canDeleteChat ? 'GroupInfo.DeleteAndExit' : (isChannel ? 'LeaveChannel' : 'Group.LeaveGroup')))}\n            </MenuItem>\n          )}\n        </Menu>\n        {chat && (\n          <DeleteChatModal\n            isOpen={isDeleteModalOpen}\n            onClose={closeDeleteModal}\n            chat={chat}\n          />\n        )}\n        {canReportChat && chat?.id && (\n          <ReportModal\n            isOpen={isReportModalOpen}\n            onClose={closeReportModal}\n            subject=\"peer\"\n            chatId={chat.id}\n          />\n        )}\n      </div>\n    </Portal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    if (!chat || chat.isRestricted) {\n      return {};\n    }\n    const isPrivate = isUserId(chat.id);\n    const user = isPrivate ? selectUser(global, chatId) : undefined;\n    const canAddContact = user && getCanAddContact(user);\n    const canReportChat = isChatChannel(chat) || isChatGroup(chat) || (user && !user.isSelf);\n\n    const chatBot = chatId !== REPLIES_USER_ID ? selectChatBot(global, chatId) : undefined;\n\n    return {\n      chat,\n      isMuted: selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global)),\n      isPrivate,\n      canAddContact,\n      canReportChat,\n      canDeleteChat: getCanDeleteChat(chat),\n      hasLinkedChat: Boolean(chat?.fullInfo?.linkedChatId),\n      botCommands: chatBot?.fullInfo?.botInfo?.commands,\n    };\n  },\n)(HeaderMenuContainer));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef, useState, useLayoutEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat } from '../../api/types';\n\nimport { debounce } from '../../util/schedulers';\nimport { selectCurrentTextSearch, selectCurrentChat } from '../../global/selectors';\nimport { getDayStartAt } from '../../util/dateFormat';\n\nimport Button from '../ui/Button';\nimport SearchInput from '../ui/SearchInput';\n\nimport './MobileSearch.scss';\n\nexport type OwnProps = {\n  isActive: boolean;\n};\n\ntype StateProps = {\n  isActive?: boolean;\n  chat?: ApiChat;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n  isHistoryCalendarOpen?: boolean;\n};\n\nconst runDebouncedForSearch = debounce((cb) => cb(), 200, false);\n\nconst MobileSearchFooter: FC<StateProps> = ({\n  isActive,\n  chat,\n  query,\n  totalCount,\n  foundIds,\n  isHistoryCalendarOpen,\n}) => {\n  const {\n    setLocalTextSearchQuery,\n    searchTextMessagesLocal,\n    focusMessage,\n    closeLocalTextSearch,\n    openHistoryCalendar,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  const [focusedIndex, setFocusedIndex] = useState(0);\n\n  // Fix for iOS keyboard\n  useEffect(() => {\n    const { visualViewport } = window as any;\n    if (!visualViewport) {\n      return undefined;\n    }\n\n    const mainEl = document.getElementById('Main') as HTMLDivElement;\n    const handleResize = () => {\n      const { activeElement } = document;\n      if (activeElement && (activeElement === inputRef.current)) {\n        const { pageTop, height } = visualViewport;\n        mainEl.style.transform = `translateY(${pageTop}px)`;\n        mainEl.style.height = `${height}px`;\n        document.documentElement.scrollTop = pageTop;\n      } else {\n        mainEl.style.transform = '';\n        mainEl.style.height = '';\n      }\n    };\n\n    visualViewport.addEventListener('resize', handleResize);\n\n    return () => {\n      visualViewport.removeEventListener('resize', handleResize);\n    };\n  }, []);\n\n  // Focus message\n  useEffect(() => {\n    if (chat?.id && foundIds?.length) {\n      focusMessage({ chatId: chat.id, messageId: foundIds[0] });\n      setFocusedIndex(0);\n    } else {\n      setFocusedIndex(-1);\n    }\n  }, [chat?.id, focusMessage, foundIds]);\n\n  // Disable native up/down buttons on iOS\n  useEffect(() => {\n    Array.from(document.querySelectorAll<HTMLInputElement>('input')).forEach((input) => {\n      input.disabled = Boolean(isActive && input !== inputRef.current);\n    });\n\n    Array.from(document.querySelectorAll<HTMLDivElement>('div[contenteditable]')).forEach((div) => {\n      div.contentEditable = isActive ? 'false' : 'true';\n    });\n  }, [isActive]);\n\n  // Blur on exit\n  useEffect(() => {\n    if (!isActive) {\n      inputRef.current!.blur();\n    }\n  }, [isActive]);\n\n  useLayoutEffect(() => {\n    const searchInput = document.querySelector<HTMLInputElement>('#MobileSearch input')!;\n    searchInput.blur();\n  }, [isHistoryCalendarOpen]);\n\n  const handleMessageSearchQueryChange = useCallback((newQuery: string) => {\n    setLocalTextSearchQuery({ query: newQuery });\n\n    if (newQuery.length) {\n      runDebouncedForSearch(searchTextMessagesLocal);\n    }\n  }, [searchTextMessagesLocal, setLocalTextSearchQuery]);\n\n  const handleUp = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex + 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  const handleDown = useCallback(() => {\n    if (chat && foundIds) {\n      const newFocusIndex = focusedIndex - 1;\n      focusMessage({ chatId: chat.id, messageId: foundIds[newFocusIndex] });\n      setFocusedIndex(newFocusIndex);\n    }\n  }, [chat, focusedIndex, focusMessage, foundIds]);\n\n  return (\n    <div id=\"MobileSearch\" className={isActive ? 'active' : ''}>\n      <div className=\"header\">\n        <Button\n          size=\"smaller\"\n          round\n          color=\"translucent\"\n          onClick={closeLocalTextSearch}\n        >\n          <i className=\"icon-arrow-left\" />\n        </Button>\n        <SearchInput\n          ref={inputRef}\n          value={query}\n          onChange={handleMessageSearchQueryChange}\n        />\n      </div>\n      <div className=\"footer\">\n        <div className=\"counter\">\n          {query ? (\n            foundIds?.length ? (\n              `${focusedIndex + 1} of ${totalCount}`\n            ) : foundIds && !foundIds.length ? (\n              'No results'\n            ) : (\n              ''\n            )\n          ) : (\n            <Button\n              round\n              size=\"smaller\"\n              color=\"translucent\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openHistoryCalendar({ selectedAt: getDayStartAt(Date.now()) })}\n              ariaLabel=\"Search messages by date\"\n            >\n              <i className=\"icon-calendar\" />\n            </Button>\n          )}\n        </div>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleUp}\n          disabled={!foundIds || !foundIds.length || focusedIndex === foundIds.length - 1}\n        >\n          <i className=\"icon-up\" />\n        </Button>\n        <Button\n          round\n          size=\"smaller\"\n          color=\"translucent\"\n          onClick={handleDown}\n          disabled={!foundIds || !foundIds.length || focusedIndex === 0}\n        >\n          <i className=\"icon-down\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const chat = selectCurrentChat(global);\n    if (!chat) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      query,\n      totalCount,\n      foundIds,\n      isHistoryCalendarOpen: Boolean(global.historyCalendarSelectedAt),\n    };\n  },\n)(MobileSearchFooter));\n","export default function findInViewport(\n  container: HTMLElement,\n  selectorOrElements: string | NodeListOf<HTMLElement> | HTMLElement[],\n  margin = 0,\n  isDense = false,\n  shouldContainBottom = false,\n  isHorizontal = false,\n) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const allElements = typeof selectorOrElements === 'string'\n    ? container.querySelectorAll<HTMLElement>(selectorOrElements)\n    : selectorOrElements;\n  const { length } = allElements;\n  const visibleIndexes: number[] = [];\n  let isFound = false;\n\n  for (let i = 0; i < length; i++) {\n    const element = allElements[i];\n    const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n    const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n    const isVisible = shouldContainBottom\n      ? y2 >= viewportY1 - margin && y2 <= viewportY2 + margin\n      : y1 <= viewportY2 + margin && y2 >= viewportY1 - margin;\n\n    if (isVisible) {\n      visibleIndexes.push(i);\n      isFound = true;\n    } else if (isFound && !isDense) {\n      break;\n    }\n  }\n\n  return { allElements, visibleIndexes };\n}\n","function isFullyVisible(container: HTMLElement, element: HTMLElement, isHorizontal = false) {\n  const viewportY1 = container[isHorizontal ? 'scrollLeft' : 'scrollTop'];\n  const viewportY2 = viewportY1 + container[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  const y1 = element[isHorizontal ? 'offsetLeft' : 'offsetTop'];\n  const y2 = y1 + element[isHorizontal ? 'offsetWidth' : 'offsetHeight'];\n  return y1 > viewportY1 && y2 < viewportY2;\n}\n\nexport default isFullyVisible;\n","import findInViewport from './findInViewport';\nimport isFullyVisible from './isFullyVisible';\nimport fastSmoothScroll from './fastSmoothScroll';\n\nconst VIEWPORT_MARGIN = 8;\nconst SCROLL_MARGIN = 10;\n\nexport default function setTooltipItemVisible(selector: string, index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container || index < 0) {\n    return;\n  }\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    selector,\n    VIEWPORT_MARGIN,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first]))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    fastSmoothScroll(container, allElements[index], position, SCROLL_MARGIN);\n  }\n}\n","import { useCallback, useEffect, useState } from '../../../../lib/teact/teact';\nimport captureKeyboardListeners from '../../../../util/captureKeyboardListeners';\nimport cycleRestrict from '../../../../util/cycleRestrict';\n\nexport function useKeyboardNavigation({\n  isActive,\n  isHorizontal,\n  shouldSaveSelectionOnUpdateItems,\n  shouldRemoveSelectionOnReset,\n  noArrowNavigation,\n  items,\n  shouldSelectOnTab,\n  onSelect,\n  onClose,\n}: {\n  isActive: boolean;\n  isHorizontal?: boolean;\n  shouldSaveSelectionOnUpdateItems?: boolean;\n  shouldRemoveSelectionOnReset?: boolean;\n  noArrowNavigation?: boolean;\n  items?: any[];\n  shouldSelectOnTab?: boolean;\n  onSelect: AnyToVoidFunction;\n  onClose: NoneToVoidFunction;\n}) {\n  const [selectedItemIndex, setSelectedItemIndex] = useState(-1);\n\n  const getSelectedIndex = useCallback((newIndex: number) => {\n    if (!items) {\n      return -1;\n    }\n\n    return cycleRestrict(items.length, newIndex);\n  }, [items]);\n\n  const handleArrowKey = useCallback((value: number, e: KeyboardEvent) => {\n    e.preventDefault();\n    setSelectedItemIndex((index) => (getSelectedIndex(index + value)));\n  }, [setSelectedItemIndex, getSelectedIndex]);\n\n  const handleItemSelect = useCallback((e: KeyboardEvent) => {\n    if (items && items.length && selectedItemIndex > -1) {\n      const item = items[selectedItemIndex];\n      if (item) {\n        e.preventDefault();\n        onSelect(item);\n      }\n    }\n  }, [items, onSelect, selectedItemIndex]);\n\n  const isSelectionOutOfRange = !items || selectedItemIndex > items.length - 1;\n  useEffect(() => {\n    if (!shouldSaveSelectionOnUpdateItems || isSelectionOutOfRange) {\n      setSelectedItemIndex(shouldRemoveSelectionOnReset ? -1 : 0);\n    }\n  }, [isSelectionOutOfRange, shouldRemoveSelectionOnReset, shouldSaveSelectionOnUpdateItems]);\n\n  useEffect(() => (isActive ? captureKeyboardListeners({\n    onEsc: onClose,\n    onUp: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onDown: noArrowNavigation || isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onLeft: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(-1, e),\n    onRight: noArrowNavigation || !isHorizontal ? undefined : (e: KeyboardEvent) => handleArrowKey(1, e),\n    onTab: shouldSelectOnTab ? handleItemSelect : undefined,\n    onEnter: handleItemSelect,\n  }) : undefined), [\n    noArrowNavigation, handleArrowKey, handleItemSelect, isActive, isHorizontal, onClose, shouldSelectOnTab,\n  ]);\n\n  return selectedItemIndex;\n}\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\nimport './MentionTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onInsertUserName: (user: ApiUser, forceFocus?: boolean) => void;\n  filteredUsers?: ApiUser[];\n};\n\nconst MentionTooltip: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  onInsertUserName,\n  filteredUsers,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleUserSelect = useCallback((userId: string, forceFocus = false) => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const user = usersById[userId];\n    if (!user) {\n      return;\n    }\n\n    onInsertUserName(user, forceFocus);\n  }, [onInsertUserName]);\n\n  const handleSelectMention = useCallback((member: ApiUser) => {\n    handleUserSelect(member.id, true);\n  }, [handleUserSelect]);\n\n  const selectedMentionIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: filteredUsers,\n    onSelect: handleSelectMention,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedMentionIndex, containerRef);\n  }, [selectedMentionIndex]);\n\n  useEffect(() => {\n    if (filteredUsers && !filteredUsers.length) {\n      onClose();\n    }\n  }, [filteredUsers, onClose]);\n\n  const prevChatMembers = usePrevious(\n    filteredUsers?.length\n      ? filteredUsers\n      : undefined,\n    shouldRender,\n  );\n  const renderedChatMembers = filteredUsers && !filteredUsers.length\n    ? prevChatMembers\n    : filteredUsers;\n\n  if (!shouldRender || (renderedChatMembers && !renderedChatMembers.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'MentionTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedChatMembers?.map(({ id }, index) => (\n        <ListItem\n          key={id}\n          className=\"chat-item-clickable scroll-item\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => handleUserSelect(id)}\n          focus={selectedMentionIndex === index}\n        >\n          <PrivateChatInfo\n            userId={id}\n            avatarSize=\"small\"\n            withUsername\n          />\n        </ListItem>\n      ))}\n    </div>\n  );\n};\n\nexport default memo(MentionTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport type { ApiAttachment, ApiChatMember } from '../../../api/types';\n\nimport {\n  CONTENT_TYPES_WITH_PREVIEW,\n  EDITABLE_INPUT_MODAL_ID,\n  SUPPORTED_AUDIO_CONTENT_TYPES,\n  SUPPORTED_IMAGE_CONTENT_TYPES,\n  SUPPORTED_VIDEO_CONTENT_TYPES,\n} from '../../../config';\nimport { getFileExtension } from '../../common/helpers/documentInfo';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport getFilesFromDataTransferItems from './helpers/getFilesFromDataTransferItems';\n\nimport usePrevious from '../../../hooks/usePrevious';\nimport useMentionTooltip from './hooks/useMentionTooltip';\nimport useEmojiTooltip from './hooks/useEmojiTooltip';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useContextMenuHandlers from '../../../hooks/useContextMenuHandlers';\nimport { useStateRef } from '../../../hooks/useStateRef';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport File from '../../common/File';\nimport MessageInput from './MessageInput';\nimport MentionTooltip from './MentionTooltip';\nimport EmojiTooltip from './EmojiTooltip.async';\nimport CustomSendMenu from './CustomSendMenu.async';\n\nimport './AttachmentModal.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  attachments: ApiAttachment[];\n  caption: string;\n  canShowCustomSendMenu?: boolean;\n  isReady?: boolean;\n  isChatWithSelf?: boolean;\n  currentUserId?: string;\n  groupChatMembers?: ApiChatMember[];\n  recentEmojis: string[];\n  baseEmojiKeywords?: Record<string, string[]>;\n  emojiKeywords?: Record<string, string[]>;\n  shouldSchedule?: boolean;\n  addRecentEmoji: AnyToVoidFunction;\n  onCaptionUpdate: (html: string) => void;\n  onSend: () => void;\n  onFileAppend: (files: File[], isQuick: boolean) => void;\n  onClear: () => void;\n  onSendSilent: () => void;\n  onSendScheduled: () => void;\n};\n\nconst DROP_LEAVE_TIMEOUT_MS = 150;\n\nconst AttachmentModal: FC<OwnProps> = ({\n  chatId,\n  threadId,\n  attachments,\n  caption,\n  canShowCustomSendMenu,\n  isReady,\n  isChatWithSelf,\n  currentUserId,\n  groupChatMembers,\n  recentEmojis,\n  baseEmojiKeywords,\n  emojiKeywords,\n  shouldSchedule,\n  addRecentEmoji,\n  onCaptionUpdate,\n  onSend,\n  onFileAppend,\n  onClear,\n  onSendSilent,\n  onSendScheduled,\n}) => {\n  const captionRef = useStateRef(caption);\n  // eslint-disable-next-line no-null/no-null\n  const mainButtonRef = useStateRef<HTMLButtonElement | null>(null);\n  const hideTimeoutRef = useRef<number>();\n  const prevAttachments = usePrevious(attachments);\n  const renderingAttachments = attachments.length ? attachments : prevAttachments;\n  const isOpen = Boolean(attachments.length);\n  const [isHovered, markHovered, unmarkHovered] = useFlag();\n  const isQuick = Boolean(renderingAttachments && renderingAttachments.every((a) => a.quick));\n  const lang = useLang();\n\n  const {\n    isMentionTooltipOpen, closeMentionTooltip, insertMention, mentionFilteredUsers,\n  } = useMentionTooltip(\n    isOpen,\n    captionRef,\n    onCaptionUpdate,\n    EDITABLE_INPUT_MODAL_ID,\n    groupChatMembers,\n    undefined,\n    currentUserId,\n  );\n  const {\n    isEmojiTooltipOpen, closeEmojiTooltip, filteredEmojis, insertEmoji,\n  } = useEmojiTooltip(\n    isOpen,\n    captionRef,\n    recentEmojis,\n    EDITABLE_INPUT_MODAL_ID,\n    onCaptionUpdate,\n    baseEmojiKeywords,\n    emojiKeywords,\n    !isReady,\n  );\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n\n  const {\n    isContextMenuOpen: isCustomSendMenuOpen,\n    handleContextMenu,\n    handleContextMenuClose,\n    handleContextMenuHide,\n  } = useContextMenuHandlers(mainButtonRef, !canShowCustomSendMenu || !isOpen);\n\n  const sendAttachments = useCallback(() => {\n    if (isOpen) {\n      if (shouldSchedule) {\n        onSendScheduled();\n      } else {\n        onSend();\n      }\n    }\n  }, [isOpen, onSendScheduled, onSend, shouldSchedule]);\n\n  const handleDragLeave = (e: React.DragEvent<HTMLElement>) => {\n    const { relatedTarget: toTarget, target: fromTarget } = e;\n\n    // Esc button pressed during drag event\n    if ((fromTarget as HTMLDivElement).matches('.drop-target') && !toTarget) {\n      hideTimeoutRef.current = window.setTimeout(unmarkHovered, DROP_LEAVE_TIMEOUT_MS);\n    }\n\n    // Prevent DragLeave event from firing when the pointer moves inside the AttachmentModal drop target\n    if (fromTarget && (fromTarget as HTMLElement).closest('.AttachmentModal.hovered')) {\n      return;\n    }\n\n    if (toTarget) {\n      e.stopPropagation();\n    }\n\n    unmarkHovered();\n  };\n\n  const handleFilesDrop = useCallback(async (e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    unmarkHovered();\n\n    const { dataTransfer } = e;\n\n    const files = await getFilesFromDataTransferItems(dataTransfer.items);\n    if (files?.length) {\n      const newFiles = isQuick\n        ? Array.from(files).filter((file) => {\n          return file.type && CONTENT_TYPES_WITH_PREVIEW.has(file.type);\n        })\n        : Array.from(files);\n\n      onFileAppend(newFiles, isQuick);\n    }\n  }, [isQuick, onFileAppend, unmarkHovered]);\n\n  function handleDragOver(e: React.MouseEvent<HTMLDivElement, MouseEvent>) {\n    e.preventDefault();\n    e.stopPropagation();\n\n    if (hideTimeoutRef.current) {\n      window.clearTimeout(hideTimeoutRef.current);\n      hideTimeoutRef.current = undefined;\n    }\n  }\n\n  if (!renderingAttachments) {\n    return undefined;\n  }\n\n  const areAllPhotos = renderingAttachments.every((a) => SUPPORTED_IMAGE_CONTENT_TYPES.has(a.mimeType));\n  const areAllVideos = renderingAttachments.every((a) => SUPPORTED_VIDEO_CONTENT_TYPES.has(a.mimeType));\n  const areAllAudios = renderingAttachments.every((a) => SUPPORTED_AUDIO_CONTENT_TYPES.has(a.mimeType));\n\n  let title = '';\n  if (areAllPhotos) {\n    title = lang('PreviewSender.SendPhoto', renderingAttachments.length, 'i');\n  } else if (areAllVideos) {\n    title = lang('PreviewSender.SendVideo', renderingAttachments.length, 'i');\n  } else if (areAllAudios) {\n    title = lang('PreviewSender.SendAudio', renderingAttachments.length, 'i');\n  } else {\n    title = lang('PreviewSender.SendFile', renderingAttachments.length, 'i');\n  }\n\n  function renderHeader() {\n    if (!renderingAttachments) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header-condensed\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel attachments\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{title}</div>\n        <div className=\"AttachmentModal--send-wrapper\">\n          <Button\n            ref={mainButtonRef}\n            color=\"primary\"\n            size=\"smaller\"\n            className=\"modal-action-button\"\n            onClick={sendAttachments}\n            onContextMenu={canShowCustomSendMenu ? handleContextMenu : undefined}\n          >\n            {lang('Send')}\n          </Button>\n          {canShowCustomSendMenu && (\n            <CustomSendMenu\n              isOpen={isCustomSendMenuOpen}\n              isOpenToBottom\n              onSendSilent={!isChatWithSelf ? onSendSilent : undefined}\n              onSendSchedule={onSendScheduled}\n              onClose={handleContextMenuClose}\n              onCloseAnimationEnd={handleContextMenuHide}\n              isSavedMessages={isChatWithSelf}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClear}\n      header={renderHeader()}\n      className={`AttachmentModal ${isHovered ? 'hovered' : ''}`}\n    >\n      <div\n        className=\"drop-target\"\n        onDragEnter={markHovered}\n        onDrop={handleFilesDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        data-attach-description={lang('Preview.Dragging.AddItems', 10)}\n      >\n        {isQuick ? (\n          <div className=\"media-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              attachment.mimeType.startsWith('image/')\n                ? <img src={attachment.blobUrl} alt=\"\" />\n                : <video src={attachment.blobUrl} autoPlay muted loop />\n            ))}\n          </div>\n        ) : (\n          <div className=\"document-wrapper custom-scroll\">\n            {renderingAttachments.map((attachment) => (\n              <File\n                name={attachment.filename}\n                extension={getFileExtension(attachment.filename, attachment.mimeType)}\n                previewData={attachment.previewBlobUrl}\n                size={attachment.size}\n                smaller\n              />\n            ))}\n          </div>\n        )}\n\n        <div className=\"attachment-caption-wrapper\">\n          <MentionTooltip\n            isOpen={isMentionTooltipOpen}\n            onClose={closeMentionTooltip}\n            onInsertUserName={insertMention}\n            filteredUsers={mentionFilteredUsers}\n          />\n          <EmojiTooltip\n            isOpen={isEmojiTooltipOpen}\n            emojis={filteredEmojis}\n            onClose={closeEmojiTooltip}\n            onEmojiSelect={insertEmoji}\n            addRecentEmoji={addRecentEmoji}\n          />\n          <MessageInput\n            id=\"caption-input-text\"\n            chatId={chatId}\n            threadId={threadId}\n            isAttachmentModalInput\n            html={caption}\n            editableInputId={EDITABLE_INPUT_MODAL_ID}\n            placeholder={lang('Caption')}\n            onUpdate={onCaptionUpdate}\n            onSend={sendAttachments}\n            canAutoFocus={Boolean(isReady && attachments.length)}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(AttachmentModal);\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\n\nimport type { ApiNewPoll } from '../../../api/types';\n\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport parseMessageInput from '../../../util/parseMessageInput';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Modal from '../../ui/Modal';\nimport InputText from '../../ui/InputText';\nimport Checkbox from '../../ui/Checkbox';\nimport RadioGroup from '../../ui/RadioGroup';\n\nimport './PollModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  shouldBeAnonimous?: boolean;\n  isQuiz?: boolean;\n  onSend: (pollSummary: ApiNewPoll) => void;\n  onClear: () => void;\n};\n\nconst MAX_LIST_HEIGHT = 320;\nconst MAX_OPTIONS_COUNT = 10;\nconst MAX_OPTION_LENGTH = 100;\nconst MAX_QUESTION_LENGTH = 255;\nconst MAX_SOLUTION_LENGTH = 200;\n\nconst PollModal: FC<OwnProps> = ({\n  isOpen, isQuiz, shouldBeAnonimous, onSend, onClear,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const questionInputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const optionsListRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const solutionRef = useRef<HTMLDivElement>(null);\n\n  const [question, setQuestion] = useState<string>('');\n  const [options, setOptions] = useState<string[]>(['']);\n  const [isAnonymous, setIsAnonymous] = useState(true);\n  const [isMultipleAnswers, setIsMultipleAnswers] = useState(false);\n  const [isQuizMode, setIsQuizMode] = useState(isQuiz || false);\n  const [solution, setSolution] = useState<string>('');\n  const [correctOption, setCorrectOption] = useState<string>();\n  const [hasErrors, setHasErrors] = useState<boolean>(false);\n\n  const lang = useLang();\n\n  const focusInput = useCallback((ref: RefObject<HTMLInputElement>) => {\n    if (isOpen && ref.current) {\n      ref.current.focus();\n    }\n  }, [isOpen]);\n\n  useEffect(() => (isOpen ? captureEscKeyListener(onClear) : undefined), [isOpen, onClear]);\n  useEffect(() => {\n    if (!isOpen) {\n      setQuestion('');\n      setOptions(['']);\n      setIsAnonymous(true);\n      setIsMultipleAnswers(false);\n      setIsQuizMode(isQuiz || false);\n      setSolution('');\n      setCorrectOption('');\n      setHasErrors(false);\n    }\n  }, [isQuiz, isOpen]);\n\n  useEffect(() => focusInput(questionInputRef), [focusInput, isOpen]);\n\n  useLayoutEffect(() => {\n    const solutionEl = solutionRef.current;\n\n    if (solutionEl && solution !== solutionEl.innerHTML) {\n      solutionEl.innerHTML = solution;\n    }\n  }, [solution]);\n\n  const addNewOption = useCallback((newOptions: string[] = []) => {\n    setOptions([...newOptions, '']);\n    requestAnimationFrame(() => {\n      const list = optionsListRef.current;\n      if (!list) {\n        return;\n      }\n\n      list.classList.toggle('overflown', list.scrollHeight > MAX_LIST_HEIGHT);\n      list.scrollTo({ top: list.scrollHeight, behavior: 'smooth' });\n    });\n  }, []);\n\n  const handleCreate = useCallback(() => {\n    setHasErrors(false);\n    if (!isOpen) {\n      return;\n    }\n\n    const questionTrimmed = question.trim().substring(0, MAX_QUESTION_LENGTH);\n    const optionsTrimmed = options.map((o) => o.trim().substring(0, MAX_OPTION_LENGTH)).filter((o) => o.length);\n\n    if (!questionTrimmed || optionsTrimmed.length < 2) {\n      setQuestion(questionTrimmed);\n      if (optionsTrimmed.length) {\n        if (optionsTrimmed.length < 2) {\n          addNewOption(optionsTrimmed);\n        } else {\n          setOptions(optionsTrimmed);\n        }\n      } else {\n        addNewOption();\n      }\n      setHasErrors(true);\n      return;\n    }\n\n    if (isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)])) {\n      setHasErrors(true);\n      return;\n    }\n\n    const answers = optionsTrimmed\n      .map((text, index) => ({\n        text: text.trim(),\n        option: String(index),\n        ...(String(index) === correctOption && { correct: true }),\n      }));\n\n    const payload: ApiNewPoll = {\n      summary: {\n        question: questionTrimmed,\n        answers,\n        ...(!isAnonymous && { isPublic: true }),\n        ...(isMultipleAnswers && { multipleChoice: true }),\n        ...(isQuizMode && { quiz: true }),\n      },\n    };\n\n    if (isQuizMode) {\n      const { text, entities } = (solution && parseMessageInput(solution.substring(0, MAX_SOLUTION_LENGTH))) || {};\n\n      payload.quiz = {\n        correctAnswers: [correctOption],\n        ...(text && { solution: text }),\n        ...(entities && { solutionEntities: entities }),\n      };\n    }\n\n    onSend(payload);\n  }, [\n    isOpen,\n    question,\n    options,\n    isQuizMode,\n    correctOption,\n    isAnonymous,\n    isMultipleAnswers,\n    onSend,\n    addNewOption,\n    solution,\n  ]);\n\n  const updateOption = useCallback((index: number, text: string) => {\n    const newOptions = [...options];\n    newOptions[index] = text;\n    if (newOptions[newOptions.length - 1].trim().length && newOptions.length < MAX_OPTIONS_COUNT) {\n      addNewOption(newOptions);\n    } else {\n      setOptions(newOptions);\n    }\n  }, [options, addNewOption]);\n\n  const removeOption = useCallback((index: number) => {\n    const newOptions = [...options];\n    newOptions.splice(index, 1);\n    setOptions(newOptions);\n    requestAnimationFrame(() => {\n      if (!optionsListRef.current) {\n        return;\n      }\n\n      optionsListRef.current.classList.toggle('overflown', optionsListRef.current.scrollHeight > MAX_LIST_HEIGHT);\n    });\n  }, [options]);\n\n  const handleCorrectOptionChange = useCallback((newValue: string) => {\n    setCorrectOption(newValue);\n  }, [setCorrectOption]);\n\n  const handleIsAnonymousChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsAnonymous(e.target.checked);\n  }, []);\n\n  const handleMultipleAnswersChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsMultipleAnswers(e.target.checked);\n  }, []);\n\n  const handleQuizModeChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsQuizMode(e.target.checked);\n  }, []);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent<HTMLDivElement>) => {\n    if (e.keyCode === 13) {\n      handleCreate();\n    }\n  }, [handleCreate]);\n\n  const handleQuestionChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setQuestion(e.target.value);\n  }, []);\n\n  const getQuestionError = useCallback(() => {\n    if (hasErrors && !question.trim().length) {\n      return lang('lng_polls_choose_question');\n    }\n\n    return undefined;\n  }, [hasErrors, lang, question]);\n\n  const getOptionsError = useCallback((index: number) => {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n    if (hasErrors && optionsTrimmed.length < 2 && !options[index].trim().length) {\n      return lang('lng_polls_choose_answers');\n    }\n    return undefined;\n  }, [hasErrors, lang, options]);\n\n  function renderHeader() {\n    return (\n      <div className=\"modal-header-condensed\">\n        <Button round color=\"translucent\" size=\"smaller\" ariaLabel=\"Cancel poll creation\" onClick={onClear}>\n          <i className=\"icon-close\" />\n        </Button>\n        <div className=\"modal-title\">{lang('NewPoll')}</div>\n        <Button\n          color=\"primary\"\n          size=\"smaller\"\n          className=\"modal-action-button\"\n          onClick={handleCreate}\n        >\n          {lang('Create')}\n        </Button>\n      </div>\n    );\n  }\n\n  function renderOptions() {\n    return options.map((option, index) => (\n      <div className=\"option-wrapper\">\n        <InputText\n          label={index !== options.length - 1 || options.length === MAX_OPTIONS_COUNT\n            ? lang('OptionHint')\n            : lang('CreatePoll.AddOption')}\n          error={getOptionsError(index)}\n          value={option}\n          // eslint-disable-next-line react/jsx-no-bind\n          onChange={(e) => updateOption(index, e.currentTarget.value)}\n          onKeyPress={handleKeyPress}\n        />\n        {index !== options.length - 1 && (\n          <Button\n            className=\"option-remove-button\"\n            round\n            color=\"translucent\"\n            size=\"smaller\"\n            ariaLabel={lang('Delete')}\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => removeOption(index)}\n          >\n            <i className=\"icon-close\" />\n          </Button>\n        )}\n      </div>\n    ));\n  }\n\n  function renderRadioOptions() {\n    return renderOptions()\n      .map((label, index) => ({ value: String(index), label, hidden: index === options.length - 1 }));\n  }\n\n  function renderQuizNoOptionError() {\n    const optionsTrimmed = options.map((o) => o.trim()).filter((o) => o.length);\n\n    return isQuizMode && (!correctOption || !optionsTrimmed[Number(correctOption)]) && (\n      <p className=\"error\">{lang('lng_polls_choose_correct')}</p>\n    );\n  }\n\n  return (\n    <Modal isOpen={isOpen} onClose={onClear} header={renderHeader()} className=\"PollModal\">\n      <InputText\n        ref={questionInputRef}\n        label={lang('AskAQuestion')}\n        value={question}\n        error={getQuestionError()}\n        onChange={handleQuestionChange}\n        onKeyPress={handleKeyPress}\n      />\n      <div className=\"options-divider\" />\n\n      <div className=\"options-list custom-scroll\" ref={optionsListRef}>\n        <h3 className=\"options-header\">{lang('PollOptions')}</h3>\n\n        {hasErrors && renderQuizNoOptionError()}\n        {isQuizMode ? (\n          <RadioGroup\n            name=\"correctOption\"\n            options={renderRadioOptions()}\n            onChange={handleCorrectOptionChange}\n          />\n        ) : (\n          renderOptions()\n        )}\n\n      </div>\n\n      <div className=\"options-divider\" />\n\n      <div className=\"quiz-mode\">\n        {!shouldBeAnonimous && (\n          <Checkbox\n            label={lang('PollAnonymous')}\n            checked={isAnonymous}\n            onChange={handleIsAnonymousChange}\n          />\n        )}\n        <Checkbox\n          label={lang('PollMultiple')}\n          checked={isMultipleAnswers}\n          disabled={isQuizMode}\n          onChange={handleMultipleAnswersChange}\n        />\n        <Checkbox\n          label={lang('PollQuiz')}\n          checked={isQuizMode}\n          disabled={isMultipleAnswers || isQuiz !== undefined}\n          onChange={handleQuizModeChange}\n        />\n        {isQuizMode && (\n          <>\n            <h3 className=\"options-header\">{lang('lng_polls_solution_title')}</h3>\n            <div\n              ref={solutionRef}\n              className=\"form-control\"\n              contentEditable\n              dir=\"auto\"\n              onChange={(e) => setSolution(e.currentTarget.innerHTML)}\n            />\n            <div className=\"note\">{lang('CreatePoll.ExplanationInfo')}</div>\n          </>\n        )}\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(PollModal);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport { IS_EMOJI_SUPPORTED } from '../../../util/environment';\nimport { handleEmojiLoad, LOADED_EMOJIS } from '../../../util/emoji';\nimport buildClassName from '../../../util/buildClassName';\n\nimport './EmojiButton.scss';\n\ntype OwnProps = {\n  emoji: Emoji;\n  focus?: boolean;\n  onClick: (emoji: string, name: string) => void;\n};\n\nconst EmojiButton: FC<OwnProps> = ({ emoji, focus, onClick }) => {\n  const handleClick = useCallback((e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    // Preventing safari from losing focus on Composer MessageInput\n    e.preventDefault();\n\n    onClick(emoji.native, emoji.id);\n  }, [emoji, onClick]);\n\n  const className = buildClassName(\n    'EmojiButton',\n    focus && 'focus',\n  );\n\n  const src = `./img-apple-64/${emoji.image}.png`;\n  const isLoaded = LOADED_EMOJIS.has(src);\n\n  return (\n    <div\n      className={className}\n      onMouseDown={handleClick}\n      title={`:${emoji.names[0]}:`}\n    >\n      {IS_EMOJI_SUPPORTED ? emoji.native : (\n        <img\n          src={src}\n          className={!isLoaded ? 'opacity-transition shown' : undefined}\n          alt={emoji.native}\n          loading=\"lazy\"\n          data-path={src}\n          onLoad={!isLoaded ? handleEmojiLoad : undefined}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(EmojiButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useRef } from '../../../lib/teact/teact';\n\nimport { RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport windowSize from '../../../util/windowSize';\n\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\nimport useLang from '../../../hooks/useLang';\n\nimport EmojiButton from './EmojiButton';\n\nconst EMOJIS_PER_ROW_ON_DESKTOP = 9;\nconst EMOJI_MARGIN = 4;\nconst MOBILE_CONTAINER_PADDING = 8;\nconst EMOJI_SIZE = 40;\n\ntype OwnProps = {\n  category: EmojiCategory;\n  index: number;\n  allEmojis: AllEmojis;\n  observeIntersection: ObserveFn;\n  shouldRender: boolean;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\nconst EmojiCategory: FC<OwnProps> = ({\n  category, index, allEmojis, observeIntersection, shouldRender, onEmojiSelect,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const lang = useLang();\n\n  const emojisPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (EMOJI_SIZE + EMOJI_MARGIN))\n    : EMOJIS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(category.emojis.length / emojisPerRow) * (EMOJI_SIZE + EMOJI_MARGIN);\n\n  return (\n    <div\n      ref={ref}\n      key={category.id}\n      id={`emoji-category-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\" dir=\"auto\">\n          {lang(category.id === RECENT_SYMBOL_SET_ID ? 'RecentStickers' : `Emoji${index}`)}\n        </p>\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n        dir={lang.isRtl ? 'rtl' : undefined}\n      >\n        {shouldRender && category.emojis.map((name) => {\n          const emoji = allEmojis[name];\n          // Recent emojis may contain emoticons that are no longer in the list\n          if (!emoji) {\n            return undefined;\n          }\n          // Some emojis have multiple skins and are represented as an Object with emojis for all skins.\n          // For now, we select only the first emoji with 'neutral' skin.\n          const displayedEmoji = 'id' in emoji ? emoji : emoji[1];\n\n          return (\n            <EmojiButton\n              key={displayedEmoji.id}\n              emoji={displayedEmoji}\n              onClick={onEmojiSelect}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(EmojiCategory);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { GlobalState } from '../../../global/types';\n\nimport { MENU_TRANSITION_DURATION, RECENT_SYMBOL_SET_ID } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport type {\n  EmojiModule,\n  EmojiRawData,\n  EmojiData,\n} from '../../../util/emoji';\nimport {\n  uncompressEmoji,\n} from '../../../util/emoji';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport { pick } from '../../../util/iteratees';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Loading from '../../ui/Loading';\nimport EmojiCategory from './EmojiCategory';\n\nimport './EmojiPicker.scss';\n\ntype OwnProps = {\n  className?: string;\n  onEmojiSelect: (emoji: string, name: string) => void;\n};\n\ntype StateProps = Pick<GlobalState, 'recentEmojis'>;\ntype EmojiCategoryData = { id: string; name: string; emojis: string[] };\n\nconst ICONS_BY_CATEGORY: Record<string, string> = {\n  recent: 'icon-recent',\n  people: 'icon-smile',\n  nature: 'icon-animals',\n  foods: 'icon-eats',\n  activity: 'icon-sport',\n  places: 'icon-car',\n  objects: 'icon-lamp',\n  symbols: 'icon-language',\n  flags: 'icon-flag',\n};\n\nconst OPEN_ANIMATION_DELAY = 200;\n// Only a few categories are above this height.\nconst SMOOTH_SCROLL_DISTANCE = 800;\nconst FOCUS_MARGIN = 50;\nconst HEADER_BUTTON_WIDTH = 42; // px. Includes margins\nconst INTERSECTION_THROTTLE = 200;\n\nconst categoryIntersections: boolean[] = [];\n\nlet emojiDataPromise: Promise<EmojiModule>;\nlet emojiRawData: EmojiRawData;\nlet emojiData: EmojiData;\n\nconst EmojiPicker: FC<OwnProps & StateProps> = ({\n  className, onEmojiSelect, recentEmojis,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n\n  const [categories, setCategories] = useState<EmojiCategoryData[]>();\n  const [emojis, setEmojis] = useState<AllEmojis>();\n  const [activeCategoryIndex, setActiveCategoryIndex] = useState(0);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('emoji-category-')) {\n        return;\n      }\n\n      const index = Number(id.replace('emoji-category-', ''));\n      categoryIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = categoryIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveCategoryIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n\n  useHorizontalScroll(headerRef.current, !IS_SINGLE_COLUMN_LAYOUT);\n\n  // Scroll header when active set updates\n  useEffect(() => {\n    if (!categories) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeCategoryIndex * HEADER_BUTTON_WIDTH - header.offsetWidth / 2 + HEADER_BUTTON_WIDTH / 2;\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [categories, activeCategoryIndex]);\n\n  const lang = useLang();\n\n  const allCategories = useMemo(() => {\n    if (!categories) {\n      return MEMO_EMPTY_ARRAY;\n    }\n    const themeCategories = [...categories];\n    if (recentEmojis?.length) {\n      themeCategories.unshift({\n        id: RECENT_SYMBOL_SET_ID,\n        name: lang('RecentStickers'),\n        emojis: recentEmojis,\n      });\n    }\n\n    return themeCategories;\n  }, [categories, lang, recentEmojis]);\n\n  // Initialize data on first render.\n  useEffect(() => {\n    setTimeout(() => {\n      const exec = () => {\n        setCategories(emojiData.categories);\n\n        setEmojis(emojiData.emojis as AllEmojis);\n      };\n\n      if (emojiData) {\n        exec();\n      } else {\n        ensureEmojiData()\n          .then(exec);\n      }\n    }, OPEN_ANIMATION_DELAY);\n  }, []);\n\n  const selectCategory = useCallback((index: number) => {\n    setActiveCategoryIndex(index);\n    const categoryEl = document.getElementById(`emoji-category-${index}`)!;\n    fastSmoothScroll(containerRef.current!, categoryEl, 'start', FOCUS_MARGIN, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    onEmojiSelect(emoji, name);\n  }, [onEmojiSelect]);\n\n  const canRenderContents = useAsyncRendering([], MENU_TRANSITION_DURATION);\n\n  function renderCategoryButton(category: EmojiCategoryData, index: number) {\n    const icon = ICONS_BY_CATEGORY[category.id];\n\n    return icon && (\n      <Button\n        className={`symbol-set-button ${index === activeCategoryIndex ? 'activated' : ''}`}\n        round\n        faded\n        color=\"translucent\"\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => selectCategory(index)}\n        ariaLabel={category.name}\n      >\n        <i className={icon} />\n      </Button>\n    );\n  }\n\n  const containerClassName = buildClassName('EmojiPicker', className);\n\n  if (!emojis || !canRenderContents) {\n    return (\n      <div className={containerClassName}>\n        <Loading />\n      </div>\n    );\n  }\n\n  return (\n    <div className={containerClassName}>\n      <div ref={headerRef} className=\"EmojiPicker-header\" dir={lang.isRtl ? 'rtl' : ''}>\n        {allCategories.map(renderCategoryButton)}\n      </div>\n      <div\n        ref={containerRef}\n        className={buildClassName('EmojiPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allCategories.map((category, i) => (\n          <EmojiCategory\n            category={category}\n            index={i}\n            allEmojis={emojis}\n            observeIntersection={observeIntersection}\n            shouldRender={activeCategoryIndex >= i - 1 && activeCategoryIndex <= i + 1}\n            onEmojiSelect={handleEmojiSelect}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nasync function ensureEmojiData() {\n  if (!emojiDataPromise) {\n    emojiDataPromise = import('emoji-data-ios/emoji-data.json');\n    emojiRawData = (await emojiDataPromise).default;\n\n    emojiData = uncompressEmoji(emojiRawData);\n  }\n\n  return emojiDataPromise;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => pick(global, ['recentEmojis']),\n)(EmojiPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\nimport type { ObserveFn } from '../../../hooks/useIntersectionObserver';\nimport { useOnIntersect } from '../../../hooks/useIntersectionObserver';\n\nimport { FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, STICKER_SIZE_PICKER } from '../../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport windowSize from '../../../util/windowSize';\nimport buildClassName from '../../../util/buildClassName';\n\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useMediaTransition from '../../../hooks/useMediaTransition';\n\nimport StickerButton from '../../common/StickerButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  stickerSet: StickerSetOrRecent;\n  loadAndPlay: boolean;\n  index: number;\n  shouldRender: boolean;\n  favoriteStickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onStickerUnfave: (sticker: ApiSticker) => void;\n  onStickerFave: (sticker: ApiSticker) => void;\n  onStickerRemoveRecent: (sticker: ApiSticker) => void;\n};\n\nconst STICKERS_PER_ROW_ON_DESKTOP = 5;\nconst STICKER_MARGIN = IS_SINGLE_COLUMN_LAYOUT ? 8 : 16;\nconst MOBILE_CONTAINER_PADDING = 8;\n\nconst StickerSet: FC<OwnProps> = ({\n  stickerSet,\n  loadAndPlay,\n  index,\n  shouldRender,\n  favoriteStickers,\n  isSavedMessages,\n  observeIntersection,\n  onStickerSelect,\n  onStickerUnfave,\n  onStickerFave,\n  onStickerRemoveRecent,\n}) => {\n  const { clearRecentStickers } = getActions();\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  const [isConfirmModalOpen, openConfirmModal, closeConfirmModal] = useFlag();\n  const lang = useLang();\n\n  useOnIntersect(ref, observeIntersection);\n\n  const transitionClassNames = useMediaTransition(shouldRender);\n\n  const handleClearRecent = useCallback(() => {\n    clearRecentStickers();\n    closeConfirmModal();\n  }, [clearRecentStickers, closeConfirmModal]);\n\n  const stickersPerRow = IS_SINGLE_COLUMN_LAYOUT\n    ? Math.floor((windowSize.get().width - MOBILE_CONTAINER_PADDING) / (STICKER_SIZE_PICKER + STICKER_MARGIN))\n    : STICKERS_PER_ROW_ON_DESKTOP;\n  const height = Math.ceil(stickerSet.count / stickersPerRow) * (STICKER_SIZE_PICKER + STICKER_MARGIN);\n\n  const favoriteStickerIdsSet = useMemo(() => (\n    favoriteStickers ? new Set(favoriteStickers.map(({ id }) => id)) : undefined\n  ), [favoriteStickers]);\n\n  const isRecent = stickerSet.id === RECENT_SYMBOL_SET_ID;\n\n  return (\n    <div\n      ref={ref}\n      key={stickerSet.id}\n      id={`sticker-set-${index}`}\n      className=\"symbol-set\"\n    >\n      <div className=\"symbol-set-header\">\n        <p className=\"symbol-set-name\">{stickerSet.title}</p>\n        {isRecent && (\n          <i className=\"symbol-set-remove icon-close\" onClick={openConfirmModal} />\n        )}\n      </div>\n      <div\n        className={buildClassName('symbol-set-container', transitionClassNames)}\n        style={`height: ${height}px;`}\n      >\n        {shouldRender && stickerSet.stickers && stickerSet.stickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            noAnimate={!loadAndPlay}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            onUnfaveClick={stickerSet.id === FAVORITE_SYMBOL_SET_ID && favoriteStickerIdsSet?.has(sticker.id)\n              ? onStickerUnfave : undefined}\n            onFaveClick={!favoriteStickerIdsSet?.has(sticker.id) ? onStickerFave : undefined}\n            onRemoveRecentClick={isRecent ? onStickerRemoveRecent : undefined}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n          />\n        ))}\n      </div>\n\n      {isRecent && (\n        <ConfirmDialog\n          text={lang('ClearRecentEmoji')}\n          isOpen={isConfirmModalOpen}\n          onClose={closeConfirmModal}\n          confirmHandler={handleClearRecent}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(StickerSet);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useRef, useMemo, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiStickerSet, ApiSticker, ApiChat } from '../../../api/types';\nimport type { StickerSetOrRecent } from '../../../types';\n\nimport {\n  CHAT_STICKER_SET_ID,\n  FAVORITE_SYMBOL_SET_ID, RECENT_SYMBOL_SET_ID, SLIDE_TRANSITION_DURATION, STICKER_SIZE_PICKER_HEADER,\n} from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport { MEMO_EMPTY_ARRAY } from '../../../util/memo';\nimport fastSmoothScroll from '../../../util/fastSmoothScroll';\nimport buildClassName from '../../../util/buildClassName';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport { pickTruthy } from '../../../util/iteratees';\nimport { selectChat, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useHorizontalScroll from '../../../hooks/useHorizontalScroll';\nimport useLang from '../../../hooks/useLang';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\n\nimport Avatar from '../../common/Avatar';\nimport Loading from '../../ui/Loading';\nimport Button from '../../ui/Button';\nimport StickerButton from '../../common/StickerButton';\nimport StickerSet from './StickerSet';\nimport StickerSetCover from './StickerSetCover';\nimport StickerSetCoverAnimated from './StickerSetCoverAnimated';\n\nimport './StickerPicker.scss';\n\ntype OwnProps = {\n  chatId: string;\n  threadId?: number;\n  className: string;\n  loadAndPlay: boolean;\n  canSendStickers: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  recentStickers: ApiSticker[];\n  favoriteStickers: ApiSticker[];\n  stickerSetsById: Record<string, ApiStickerSet>;\n  addedSetIds?: string[];\n  shouldPlay?: boolean;\n  isSavedMessages?: boolean;\n};\n\nconst SMOOTH_SCROLL_DISTANCE = 500;\nconst HEADER_BUTTON_WIDTH = 52; // px (including margin)\nconst STICKER_INTERSECTION_THROTTLE = 200;\n\nconst stickerSetIntersections: boolean[] = [];\n\nconst StickerPicker: FC<OwnProps & StateProps> = ({\n  chat,\n  threadId,\n  className,\n  loadAndPlay,\n  canSendStickers,\n  recentStickers,\n  favoriteStickers,\n  addedSetIds,\n  stickerSetsById,\n  shouldPlay,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const {\n    loadRecentStickers,\n    addRecentSticker,\n    unfaveSticker,\n    faveSticker,\n    removeRecentSticker,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const headerRef = useRef<HTMLDivElement>(null);\n  const [activeSetIndex, setActiveSetIndex] = useState<number>(0);\n\n  const sendMessageAction = useSendMessageAction(chat!.id, threadId);\n\n  const { observe: observeIntersection } = useIntersectionObserver({\n    rootRef: containerRef,\n    throttleMs: STICKER_INTERSECTION_THROTTLE,\n  }, (entries) => {\n    entries.forEach((entry) => {\n      const { id } = entry.target as HTMLDivElement;\n      if (!id || !id.startsWith('sticker-set-')) {\n        return;\n      }\n\n      const index = Number(id.replace('sticker-set-', ''));\n      stickerSetIntersections[index] = entry.isIntersecting;\n    });\n\n    const intersectingWithIndexes = stickerSetIntersections\n      .map((isIntersecting, index) => ({ index, isIntersecting }))\n      .filter(({ isIntersecting }) => isIntersecting);\n\n    if (!intersectingWithIndexes.length) {\n      return;\n    }\n\n    setActiveSetIndex(intersectingWithIndexes[Math.floor(intersectingWithIndexes.length / 2)].index);\n  });\n  const { observe: observeIntersectionForCovers } = useIntersectionObserver({ rootRef: headerRef });\n\n  const lang = useLang();\n\n  const areAddedLoaded = Boolean(addedSetIds);\n\n  const allSets = useMemo(() => {\n    if (!addedSetIds) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    const defaultSets = [];\n\n    if (favoriteStickers.length) {\n      defaultSets.push({\n        id: FAVORITE_SYMBOL_SET_ID,\n        title: lang('FavoriteStickers'),\n        stickers: favoriteStickers,\n        count: favoriteStickers.length,\n      });\n    }\n\n    if (recentStickers.length) {\n      defaultSets.push({\n        id: RECENT_SYMBOL_SET_ID,\n        title: lang('RecentStickers'),\n        stickers: recentStickers,\n        count: recentStickers.length,\n      });\n    }\n\n    if (chat?.fullInfo?.stickerSet) {\n      const fullSet = stickerSetsById[chat.fullInfo.stickerSet.id];\n      if (fullSet) {\n        defaultSets.push({\n          id: CHAT_STICKER_SET_ID,\n          title: lang('GroupStickers'),\n          stickers: fullSet.stickers,\n          count: fullSet.stickers!.length,\n        });\n      }\n    }\n\n    return [\n      ...defaultSets,\n      ...Object.values(pickTruthy(stickerSetsById, addedSetIds)),\n    ];\n  }, [addedSetIds, favoriteStickers, recentStickers, chat, lang, stickerSetsById]);\n\n  const noPopulatedSets = useMemo(() => (\n    areAddedLoaded\n    && allSets.filter((set) => set.stickers?.length).length === 0\n  ), [allSets, areAddedLoaded]);\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadRecentStickers();\n      sendMessageAction({ type: 'chooseSticker' });\n    }\n  }, [loadAndPlay, loadRecentStickers, sendMessageAction]);\n\n  useHorizontalScroll(headerRef.current);\n\n  // Scroll container and header when active set changes\n  useEffect(() => {\n    if (!areAddedLoaded) {\n      return;\n    }\n\n    const header = headerRef.current;\n    if (!header) {\n      return;\n    }\n\n    const newLeft = activeSetIndex * HEADER_BUTTON_WIDTH - (header.offsetWidth / 2 - HEADER_BUTTON_WIDTH / 2);\n\n    fastSmoothScrollHorizontal(header, newLeft);\n  }, [areAddedLoaded, activeSetIndex]);\n\n  const selectStickerSet = useCallback((index: number) => {\n    setActiveSetIndex(index);\n    const stickerSetEl = document.getElementById(`sticker-set-${index}`)!;\n    fastSmoothScroll(containerRef.current!, stickerSetEl, 'start', undefined, SMOOTH_SCROLL_DISTANCE);\n  }, []);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule);\n    addRecentSticker({ sticker });\n  }, [addRecentSticker, onStickerSelect]);\n\n  const handleStickerUnfave = useCallback((sticker: ApiSticker) => {\n    unfaveSticker({ sticker });\n  }, [unfaveSticker]);\n\n  const handleStickerFave = useCallback((sticker: ApiSticker) => {\n    faveSticker({ sticker });\n  }, [faveSticker]);\n\n  const handleMouseMove = useCallback(() => {\n    sendMessageAction({ type: 'chooseSticker' });\n  }, [sendMessageAction]);\n\n  const handleRemoveRecentSticker = useCallback((sticker: ApiSticker) => {\n    removeRecentSticker({ sticker });\n  }, [removeRecentSticker]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  function renderCover(stickerSet: StickerSetOrRecent, index: number) {\n    const firstSticker = stickerSet.stickers?.[0];\n    const buttonClassName = buildClassName(\n      'symbol-set-button sticker-set-button',\n      index === activeSetIndex && 'activated',\n    );\n\n    if (stickerSet.id === RECENT_SYMBOL_SET_ID\n      || stickerSet.id === FAVORITE_SYMBOL_SET_ID\n      || stickerSet.id === CHAT_STICKER_SET_ID\n      || stickerSet.hasThumbnail\n      || !firstSticker) {\n      return (\n        <Button\n          key={stickerSet.id}\n          className={buttonClassName}\n          ariaLabel={stickerSet.title}\n          round\n          faded={stickerSet.id === RECENT_SYMBOL_SET_ID || stickerSet.id === FAVORITE_SYMBOL_SET_ID}\n          color=\"translucent\"\n          // eslint-disable-next-line react/jsx-no-bind\n          onClick={() => selectStickerSet(index)}\n        >\n          {stickerSet.id === RECENT_SYMBOL_SET_ID ? (\n            <i className=\"icon-recent\" />\n          ) : stickerSet.id === FAVORITE_SYMBOL_SET_ID ? (\n            <i className=\"icon-favorite\" />\n          ) : stickerSet.id === CHAT_STICKER_SET_ID ? (\n            <Avatar chat={chat} size=\"small\" />\n          ) : stickerSet.isLottie ? (\n            <StickerSetCoverAnimated\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          ) : (\n            <StickerSetCover\n              stickerSet={stickerSet as ApiStickerSet}\n              observeIntersection={observeIntersectionForCovers}\n            />\n          )}\n        </Button>\n      );\n    } else {\n      return (\n        <StickerButton\n          key={stickerSet.id}\n          sticker={firstSticker}\n          size={STICKER_SIZE_PICKER_HEADER}\n          title={stickerSet.title}\n          className={buttonClassName}\n          observeIntersection={observeIntersectionForCovers}\n          onClick={selectStickerSet}\n          clickArg={index}\n          noContextMenu\n        />\n      );\n    }\n  }\n\n  const fullClassName = buildClassName('StickerPicker', className);\n\n  if (!areAddedLoaded || !canRenderContents || noPopulatedSets || !canSendStickers) {\n    return (\n      <div className={fullClassName}>\n        {!canSendStickers ? (\n          <div className=\"picker-disabled\">{lang('ErrorSendRestrictedStickersAll')}</div>\n        ) : noPopulatedSets ? (\n          <div className=\"picker-disabled\">{lang('NoStickers')}</div>\n        ) : (\n          <Loading />\n        )}\n      </div>\n    );\n  }\n\n  return (\n    <div className={fullClassName}>\n      <div\n        ref={headerRef}\n        className=\"StickerPicker-header no-selection no-scrollbar\"\n      >\n        {allSets.map(renderCover)}\n      </div>\n      <div\n        ref={containerRef}\n        onMouseMove={handleMouseMove}\n        className={buildClassName('StickerPicker-main no-selection', IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n      >\n        {allSets.map((stickerSet, i) => (\n          <StickerSet\n            key={stickerSet.id}\n            stickerSet={stickerSet}\n            loadAndPlay={Boolean(shouldPlay && loadAndPlay)}\n            index={i}\n            observeIntersection={observeIntersection}\n            shouldRender={activeSetIndex >= i - 1 && activeSetIndex <= i + 1}\n            onStickerSelect={handleStickerSelect}\n            onStickerUnfave={handleStickerUnfave}\n            onStickerFave={handleStickerFave}\n            onStickerRemoveRecent={handleRemoveRecentSticker}\n            favoriteStickers={favoriteStickers}\n            isSavedMessages={isSavedMessages}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const {\n      setsById,\n      added,\n      recent,\n      favorite,\n    } = global.stickers;\n\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      recentStickers: recent.stickers,\n      favoriteStickers: favorite.stickers,\n      stickerSetsById: setsById,\n      addedSetIds: added.setIds,\n      shouldPlay: global.settings.byKey.shouldLoopStickers,\n      isSavedMessages,\n    };\n  },\n)(StickerPicker));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../lib/teact/teact';\n\nimport type { ApiVideo } from '../../api/types';\nimport { ApiMediaFormat } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport buildClassName from '../../util/buildClassName';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\nimport { useIsIntersecting } from '../../hooks/useIntersectionObserver';\nimport { preventMessageInputBlurWithBubbling } from '../middle/helpers/preventMessageInputBlur';\n\nimport useMedia from '../../hooks/useMedia';\nimport useVideoCleanup from '../../hooks/useVideoCleanup';\nimport useBuffering from '../../hooks/useBuffering';\nimport useCanvasBlur from '../../hooks/useCanvasBlur';\nimport useLang from '../../hooks/useLang';\nimport useContextMenuPosition from '../../hooks/useContextMenuPosition';\nimport useContextMenuHandlers from '../../hooks/useContextMenuHandlers';\n\nimport Spinner from '../ui/Spinner';\nimport Button from '../ui/Button';\nimport Menu from '../ui/Menu';\nimport MenuItem from '../ui/MenuItem';\n\nimport './GifButton.scss';\n\ntype OwnProps = {\n  gif: ApiVideo;\n  observeIntersection: ObserveFn;\n  isDisabled?: boolean;\n  className?: string;\n  onClick?: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onUnsaveClick?: (gif: ApiVideo) => void;\n  isSavedMessages?: boolean;\n};\n\nconst GifButton: FC<OwnProps> = ({\n  gif,\n  isDisabled,\n  className,\n  observeIntersection,\n  onClick,\n  onUnsaveClick,\n  isSavedMessages,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const ref = useRef<HTMLDivElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const videoRef = useRef<HTMLVideoElement>(null);\n\n  const lang = useLang();\n\n  const hasThumbnail = Boolean(gif.thumbnail?.dataUri);\n  const localMediaHash = `gif${gif.id}`;\n  const isIntersecting = useIsIntersecting(ref, observeIntersection);\n  const loadAndPlay = isIntersecting && !isDisabled;\n  const previewBlobUrl = useMedia(`${localMediaHash}?size=m`, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const thumbRef = useCanvasBlur(gif.thumbnail?.dataUri, Boolean(previewBlobUrl));\n  const videoData = useMedia(localMediaHash, !loadAndPlay, ApiMediaFormat.BlobUrl);\n  const shouldRenderVideo = Boolean(loadAndPlay && videoData);\n  const { isBuffered, bufferingHandlers } = useBuffering(true);\n  const shouldRenderSpinner = loadAndPlay && !isBuffered;\n  const isVideoReady = loadAndPlay && isBuffered;\n\n  useVideoCleanup(videoRef, [shouldRenderVideo]);\n\n  const {\n    isContextMenuOpen, contextMenuPosition,\n    handleBeforeContextMenu, handleContextMenu,\n    handleContextMenuClose, handleContextMenuHide,\n  } = useContextMenuHandlers(ref);\n\n  const getTriggerElement = useCallback(() => ref.current, []);\n\n  const getRootElement = useCallback(\n    () => ref.current!.closest('.custom-scroll, .no-scrollbar'),\n    [],\n  );\n\n  const getMenuElement = useCallback(\n    () => ref.current!.querySelector('.gif-context-menu .bubble'),\n    [],\n  );\n\n  const {\n    positionX, positionY, transformOriginX, transformOriginY, style: menuStyle,\n  } = useContextMenuPosition(\n    contextMenuPosition,\n    getTriggerElement,\n    getRootElement,\n    getMenuElement,\n  );\n\n  const handleClick = useCallback(() => {\n    if (isContextMenuOpen || !onClick) return;\n    onClick({\n      ...gif,\n      blobUrl: videoData,\n    });\n  }, [isContextMenuOpen, onClick, gif, videoData]);\n\n  const handleUnsaveClick = useCallback((e: React.MouseEvent) => {\n    e.stopPropagation();\n    e.preventDefault();\n    onUnsaveClick!(gif);\n  }, [onUnsaveClick, gif]);\n\n  const handleContextDelete = useCallback(() => {\n    onUnsaveClick?.(gif);\n  }, [gif, onUnsaveClick]);\n\n  const handleSendQuiet = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, true);\n  }, [gif, onClick, videoData]);\n\n  const handleSendScheduled = useCallback(() => {\n    onClick!({\n      ...gif,\n      blobUrl: videoData,\n    }, undefined, true);\n  }, [gif, onClick, videoData]);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    preventMessageInputBlurWithBubbling(e);\n    handleBeforeContextMenu(e);\n  }, [handleBeforeContextMenu]);\n\n  useEffect(() => {\n    if (isDisabled) handleContextMenuClose();\n  }, [handleContextMenuClose, isDisabled]);\n\n  const fullClassName = buildClassName(\n    'GifButton',\n    gif.width && gif.height && gif.width < gif.height ? 'vertical' : 'horizontal',\n    onClick && 'interactive',\n    localMediaHash,\n    className,\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={fullClassName}\n      onMouseDown={handleMouseDown}\n      onClick={handleClick}\n      onContextMenu={handleContextMenu}\n    >\n      {!IS_TOUCH_ENV && onUnsaveClick && (\n        <Button\n          className=\"gif-unsave-button\"\n          color=\"dark\"\n          pill\n          onClick={handleUnsaveClick}\n        >\n          <i className=\"icon-close gif-unsave-button-icon\" />\n        </Button>\n      )}\n      {hasThumbnail && (\n        <canvas\n          ref={thumbRef}\n          className=\"thumbnail\"\n          // We need to always render to avoid blur re-calculation\n          style={isVideoReady ? 'display: none;' : undefined}\n        />\n      )}\n      {previewBlobUrl && !isVideoReady && (\n        <img\n          src={previewBlobUrl}\n          alt=\"\"\n          className=\"preview\"\n        />\n      )}\n      {shouldRenderVideo && (\n        <video\n          ref={videoRef}\n          autoPlay\n          loop\n          muted\n          playsInline\n          preload=\"none\"\n          // eslint-disable-next-line react/jsx-props-no-spreading\n          {...bufferingHandlers}\n        >\n          <source src={videoData} />\n        </video>\n      )}\n      {shouldRenderSpinner && (\n        <Spinner color={previewBlobUrl || hasThumbnail ? 'white' : 'black'} />\n      )}\n      {onClick && contextMenuPosition !== undefined && (\n        <Menu\n          isOpen={isContextMenuOpen}\n          transformOriginX={transformOriginX}\n          transformOriginY={transformOriginY}\n          positionX={positionX}\n          positionY={positionY}\n          style={menuStyle}\n          className=\"gif-context-menu\"\n          autoClose\n          onClose={handleContextMenuClose}\n          onCloseAnimationEnd={handleContextMenuHide}\n        >\n          {!isSavedMessages && <MenuItem onClick={handleSendQuiet} icon=\"mute\">{lang('SendWithoutSound')}</MenuItem>}\n          <MenuItem onClick={handleSendScheduled} icon=\"calendar\">\n            {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n          </MenuItem>\n          {onUnsaveClick && (\n            <MenuItem destructive icon=\"delete\" onClick={handleContextDelete}>{lang('Delete')}</MenuItem>\n          )}\n        </Menu>\n      )}\n    </div>\n  );\n};\n\nexport default memo(GifButton);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiVideo } from '../../../api/types';\n\nimport { SLIDE_TRANSITION_DURATION } from '../../../config';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport buildClassName from '../../../util/buildClassName';\nimport { selectCurrentMessageList, selectIsChatWithSelf } from '../../../global/selectors';\n\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useAsyncRendering from '../../right/hooks/useAsyncRendering';\n\nimport Loading from '../../ui/Loading';\nimport GifButton from '../../common/GifButton';\n\nimport './GifPicker.scss';\n\ntype OwnProps = {\n  className: string;\n  loadAndPlay: boolean;\n  canSendGifs: boolean;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  savedGifs?: ApiVideo[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifPicker: FC<OwnProps & StateProps> = ({\n  className,\n  loadAndPlay,\n  canSendGifs,\n  savedGifs,\n  isSavedMessages,\n  onGifSelect,\n}) => {\n  const { loadSavedGifs, saveGif } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  useEffect(() => {\n    if (loadAndPlay) {\n      loadSavedGifs();\n    }\n  }, [loadAndPlay, loadSavedGifs]);\n\n  const handleUnsaveClick = useCallback((gif: ApiVideo) => {\n    saveGif({ gif, shouldUnsave: true });\n  }, [saveGif]);\n\n  const canRenderContents = useAsyncRendering([], SLIDE_TRANSITION_DURATION);\n\n  return (\n    <div\n      ref={containerRef}\n      className={buildClassName('GifPicker', className, IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll')}\n    >\n      {!canSendGifs ? (\n        <div className=\"picker-disabled\">Sending GIFs is not allowed in this chat.</div>\n      ) : canRenderContents && savedGifs && savedGifs.length ? (\n        savedGifs.map((gif) => (\n          <GifButton\n            key={gif.id}\n            gif={gif}\n            observeIntersection={observeIntersection}\n            isDisabled={!loadAndPlay}\n            onClick={canSendGifs ? onGifSelect : undefined}\n            onUnsaveClick={handleUnsaveClick}\n            isSavedMessages={isSavedMessages}\n          />\n        ))\n      ) : canRenderContents && savedGifs ? (\n        <div className=\"picker-disabled\">No saved GIFs.</div>\n      ) : (\n        <Loading />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { chatId } = selectCurrentMessageList(global) || {};\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    return {\n      savedGifs: global.gifs.saved.gifs,\n      isSavedMessages,\n    };\n  },\n)(GifPicker));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\n\ntype OwnProps = {\n  activeTab: SymbolMenuTabs;\n  onSwitchTab: (tab: SymbolMenuTabs) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n};\n\nexport enum SymbolMenuTabs {\n  'Emoji',\n  'Stickers',\n  'GIFs',\n}\n\n// Getting enum string values for display in Tabs.\n// See: https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\nexport const SYMBOL_MENU_TAB_TITLES = Object.values(SymbolMenuTabs)\n  .filter((value): value is string => typeof value === 'string');\n\nconst SYMBOL_MENU_TAB_ICONS = {\n  [SymbolMenuTabs.Emoji]: 'icon-smile',\n  [SymbolMenuTabs.Stickers]: 'icon-stickers',\n  [SymbolMenuTabs.GIFs]: 'icon-gifs',\n};\n\nconst SymbolMenuFooter: FC<OwnProps> = ({\n  activeTab, onSwitchTab, onRemoveSymbol, onSearchOpen,\n}) => {\n  const lang = useLang();\n\n  function renderTabButton(tab: SymbolMenuTabs) {\n    return (\n      <Button\n        className={`symbol-tab-button ${activeTab === tab ? 'activated' : ''}`}\n        // eslint-disable-next-line react/jsx-no-bind\n        onClick={() => onSwitchTab(tab)}\n        ariaLabel={SYMBOL_MENU_TAB_TITLES[tab]}\n        round\n        faded\n        color=\"translucent\"\n      >\n        <i className={SYMBOL_MENU_TAB_ICONS[tab]} />\n      </Button>\n    );\n  }\n\n  const handleSearchOpen = useCallback(() => {\n    onSearchOpen(activeTab === SymbolMenuTabs.Stickers ? 'stickers' : 'gifs');\n  }, [activeTab, onSearchOpen]);\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  return (\n    <div className=\"SymbolMenu-footer\" onClick={stopPropagation} dir={lang.isRtl ? 'rtl' : undefined}>\n      {activeTab !== SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-search-button\"\n          ariaLabel={activeTab === SymbolMenuTabs.Stickers ? 'Search Stickers' : 'Search GIFs'}\n          round\n          faded\n          color=\"translucent\"\n          onClick={handleSearchOpen}\n        >\n          <i className=\"icon-search\" />\n        </Button>\n      )}\n\n      {renderTabButton(SymbolMenuTabs.Emoji)}\n      {renderTabButton(SymbolMenuTabs.Stickers)}\n      {renderTabButton(SymbolMenuTabs.GIFs)}\n\n      {activeTab === SymbolMenuTabs.Emoji && (\n        <Button\n          className=\"symbol-delete-button\"\n          onClick={onRemoveSymbol}\n          ariaLabel=\"Remove Symbol\"\n          round\n          faded\n          color=\"translucent\"\n        >\n          <i className=\"icon-delete-left\" />\n        </Button>\n      )}\n    </div>\n  );\n};\n\nexport default memo(SymbolMenuFooter);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useLayoutEffect, useRef, useState,\n} from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiSticker, ApiVideo } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport { fastRaf } from '../../../util/schedulers';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Button from '../../ui/Button';\nimport Menu from '../../ui/Menu';\nimport Transition from '../../ui/Transition';\nimport EmojiPicker from './EmojiPicker';\nimport StickerPicker from './StickerPicker';\nimport GifPicker from './GifPicker';\nimport SymbolMenuFooter, { SYMBOL_MENU_TAB_TITLES, SymbolMenuTabs } from './SymbolMenuFooter';\nimport Portal from '../../ui/Portal';\n\nimport './SymbolMenu.scss';\n\nconst ANIMATION_DURATION = 350;\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  canSendStickers: boolean;\n  canSendGifs: boolean;\n  onLoad: () => void;\n  onClose: () => void;\n  onEmojiSelect: (emoji: string) => void;\n  onStickerSelect: (\n    sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean, shouldPreserveInput?: boolean\n  ) => void;\n  onGifSelect: (gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => void;\n  onRemoveSymbol: () => void;\n  onSearchOpen: (type: 'stickers' | 'gifs') => void;\n  addRecentEmoji: AnyToVoidFunction;\n};\n\ntype StateProps = {\n  isLeftColumnShown: boolean;\n};\n\nlet isActivated = false;\n\nconst SymbolMenu: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  canSendStickers,\n  canSendGifs,\n  isLeftColumnShown,\n  onLoad,\n  onClose,\n  onEmojiSelect,\n  onStickerSelect,\n  onGifSelect,\n  onRemoveSymbol,\n  onSearchOpen,\n  addRecentEmoji,\n}) => {\n  const [activeTab, setActiveTab] = useState<number>(0);\n  const [recentEmojis, setRecentEmojis] = useState<string[]>([]);\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, onClose, false, false);\n\n  if (!isActivated && isOpen) {\n    isActivated = true;\n  }\n\n  useEffect(() => {\n    onLoad();\n  }, [onLoad]);\n\n  useLayoutEffect(() => {\n    if (!IS_SINGLE_COLUMN_LAYOUT) {\n      return undefined;\n    }\n\n    if (isOpen) {\n      document.body.classList.add('enable-symbol-menu-transforms');\n      document.body.classList.add('is-symbol-menu-open');\n    }\n\n    return () => {\n      if (isOpen) {\n        fastRaf(() => {\n          document.body.classList.remove('is-symbol-menu-open');\n          setTimeout(() => {\n            document.body.classList.remove('enable-symbol-menu-transforms');\n          }, ANIMATION_DURATION);\n        });\n      }\n    };\n  }, [isOpen]);\n\n  const recentEmojisRef = useRef(recentEmojis);\n  recentEmojisRef.current = recentEmojis;\n  useEffect(() => {\n    if (!recentEmojisRef.current.length) {\n      return;\n    }\n\n    recentEmojisRef.current.forEach((name) => {\n      addRecentEmoji({ emoji: name });\n    });\n\n    setRecentEmojis([]);\n  }, [isOpen, activeTab, addRecentEmoji]);\n\n  const handleEmojiSelect = useCallback((emoji: string, name: string) => {\n    setRecentEmojis((emojis) => {\n      return [...emojis, name];\n    });\n\n    onEmojiSelect(emoji);\n  }, [onEmojiSelect]);\n\n  const handleSearch = useCallback((type: 'stickers' | 'gifs') => {\n    onClose();\n    onSearchOpen(type);\n  }, [onClose, onSearchOpen]);\n\n  const handleStickerSelect = useCallback((sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onStickerSelect(sticker, isSilent, shouldSchedule, true);\n  }, [onStickerSelect]);\n\n  const lang = useLang();\n\n  function renderContent(isActive: boolean, isFrom: boolean) {\n    switch (activeTab) {\n      case SymbolMenuTabs.Emoji:\n        return (\n          <EmojiPicker\n            className=\"picker-tab\"\n            onEmojiSelect={handleEmojiSelect}\n          />\n        );\n      case SymbolMenuTabs.Stickers:\n        return (\n          <StickerPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendStickers ? isOpen && (isActive || isFrom) : false}\n            canSendStickers={canSendStickers}\n            onStickerSelect={handleStickerSelect}\n            chatId={chatId}\n            threadId={threadId}\n          />\n        );\n      case SymbolMenuTabs.GIFs:\n        return (\n          <GifPicker\n            className=\"picker-tab\"\n            loadAndPlay={canSendGifs ? isOpen && (isActive || isFrom) : false}\n            canSendGifs={canSendGifs}\n            onGifSelect={onGifSelect}\n          />\n        );\n    }\n\n    return undefined;\n  }\n\n  function stopPropagation(event: any) {\n    event.stopPropagation();\n  }\n\n  const content = (\n    <>\n      <div className=\"SymbolMenu-main\" onClick={stopPropagation}>\n        {isActivated && (\n          <Transition name=\"slide\" activeKey={activeTab} renderCount={SYMBOL_MENU_TAB_TITLES.length}>\n            {renderContent}\n          </Transition>\n        )}\n      </div>\n      {IS_SINGLE_COLUMN_LAYOUT && (\n        <Button\n          round\n          faded\n          color=\"translucent\"\n          ariaLabel={lang('Close')}\n          className=\"symbol-close-button\"\n          size=\"tiny\"\n          onClick={onClose}\n        >\n          <i className=\"icon-close\" />\n        </Button>\n      )}\n      <SymbolMenuFooter\n        activeTab={activeTab}\n        onSwitchTab={setActiveTab}\n        onRemoveSymbol={onRemoveSymbol}\n        onSearchOpen={handleSearch}\n      />\n    </>\n  );\n\n  if (IS_SINGLE_COLUMN_LAYOUT) {\n    if (!shouldRender) {\n      return undefined;\n    }\n\n    const className = buildClassName(\n      'SymbolMenu mobile-menu',\n      transitionClassNames,\n      isLeftColumnShown && 'left-column-open',\n    );\n\n    return (\n      <Portal>\n        <div className={className}>\n          {content}\n        </div>\n      </Portal>\n    );\n  }\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SymbolMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {content}\n    </Menu>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    return {\n      isLeftColumnShown: global.isLeftColumnShown,\n    };\n  },\n)(SymbolMenu));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport renderText from '../../common/helpers/renderText';\nimport buildClassName from '../../../util/buildClassName';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\n\nimport './BotCommand.scss';\n\ntype OwnProps = {\n  botCommand: ApiBotCommand;\n  bot?: ApiUser;\n  withAvatar?: boolean;\n  focus?: boolean;\n  onClick: (botCommand: ApiBotCommand) => void;\n};\n\nconst BotCommand: FC<OwnProps> = ({\n  withAvatar,\n  focus,\n  botCommand,\n  bot,\n  onClick,\n}) => {\n  return (\n    <ListItem\n      key={botCommand.command}\n      className={buildClassName('BotCommand chat-item-clickable scroll-item', withAvatar && 'with-avatar')}\n      multiline\n      // eslint-disable-next-line react/jsx-no-bind\n      onClick={() => onClick(botCommand)}\n      focus={focus}\n    >\n      {withAvatar && (\n        <Avatar size=\"small\" user={bot} />\n      )}\n      <div className=\"content-inner\">\n        <span className=\"title\">/{botCommand.command}</span>\n        <span className=\"subtitle\">{renderText(botCommand.description)}</span>\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BotCommand);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiBotCommand, ApiUser } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport BotCommand from './BotCommand';\n\nimport './BotCommandTooltip.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  withUsername?: boolean;\n  botCommands?: ApiBotCommand[];\n  onClick: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n};\n\nconst BotCommandTooltip: FC<OwnProps & StateProps> = ({\n  usersById,\n  isOpen,\n  withUsername,\n  botCommands,\n  onClick,\n  onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n\n  const handleSendCommand = useCallback(({ botId, command }: ApiBotCommand) => {\n    const bot = usersById[botId];\n    sendBotCommand({\n      command: `/${command}${withUsername && bot ? `@${bot.username}` : ''}`,\n      botId,\n    });\n    onClick();\n  }, [onClick, sendBotCommand, usersById, withUsername]);\n\n  const selectedCommandIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: botCommands,\n    onSelect: handleSendCommand,\n    onClose,\n  });\n\n  useEffect(() => {\n    if (botCommands && !botCommands.length) {\n      onClose();\n    }\n  }, [botCommands, onClose]);\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedCommandIndex, containerRef);\n  }, [selectedCommandIndex]);\n\n  const prevCommands = usePrevious(botCommands && botCommands.length ? botCommands : undefined, shouldRender);\n  const renderedCommands = botCommands && !botCommands.length ? prevCommands : botCommands;\n\n  if (!shouldRender || (renderedCommands && !renderedCommands.length)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'BotCommandTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n  );\n\n  return (\n    <div className={className} ref={containerRef}>\n      {renderedCommands && renderedCommands.map((chatBotCommand, index) => (\n        <BotCommand\n          key={`${chatBotCommand.botId}_${chatBotCommand.command}`}\n          botCommand={chatBotCommand}\n          bot={usersById[chatBotCommand.botId]}\n          withAvatar\n          onClick={handleSendCommand}\n          focus={selectedCommandIndex === index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => ({\n    usersById: global.users.byId,\n  }),\n)(BotCommandTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { ApiBotCommand } from '../../../api/types';\n\nimport { IS_SINGLE_COLUMN_LAYOUT, IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\n\nimport Menu from '../../ui/Menu';\nimport BotCommand from './BotCommand';\n\nimport './BotCommandMenu.scss';\nimport { getActions } from '../../../global';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botCommands: ApiBotCommand[];\n  onClose: NoneToVoidFunction;\n};\n\nconst BotCommandMenu: FC<OwnProps> = ({\n  isOpen, botCommands, onClose,\n}) => {\n  const { sendBotCommand } = getActions();\n\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose, undefined, IS_SINGLE_COLUMN_LAYOUT);\n\n  const handleClick = useCallback((botCommand: ApiBotCommand) => {\n    sendBotCommand({\n      command: `/${botCommand.command}`,\n      botId: botCommand.botId,\n    });\n    onClose();\n  }, [onClose, sendBotCommand]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"BotCommandMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      {botCommands.map((botCommand) => (\n        <BotCommand\n          key={botCommand.command}\n          botCommand={botCommand}\n          onClick={handleClick}\n        />\n      ))}\n    </Menu>\n  );\n};\n\nexport default memo(BotCommandMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useEffect, useRef } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiSticker } from '../../../api/types';\n\nimport { STICKER_SIZE_PICKER } from '../../../config';\nimport buildClassName from '../../../util/buildClassName';\nimport captureEscKeyListener from '../../../util/captureEscKeyListener';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevious from '../../../hooks/usePrevious';\nimport useSendMessageAction from '../../../hooks/useSendMessageAction';\nimport { selectIsChatWithSelf } from '../../../global/selectors';\n\nimport Loading from '../../ui/Loading';\nimport StickerButton from '../../common/StickerButton';\n\nimport './StickerTooltip.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId?: number;\n  isOpen: boolean;\n  onStickerSelect: (sticker: ApiSticker, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\ntype StateProps = {\n  stickers?: ApiSticker[];\n  isSavedMessages?: boolean;\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst StickerTooltip: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  isOpen,\n  stickers,\n  isSavedMessages,\n  onStickerSelect,\n}) => {\n  const { clearStickersForEmoji } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const prevStickers = usePrevious(stickers, true);\n  const displayedStickers = stickers || prevStickers;\n  const sendMessageAction = useSendMessageAction(chatId, threadId);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  useEffect(() => (isOpen ? captureEscKeyListener(clearStickersForEmoji) : undefined), [isOpen, clearStickersForEmoji]);\n\n  const handleMouseMove = () => {\n    sendMessageAction({ type: 'chooseSticker' });\n  };\n\n  const className = buildClassName(\n    'StickerTooltip composer-tooltip custom-scroll',\n    transitionClassNames,\n    !(displayedStickers?.length) && 'hidden',\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n      onMouseMove={handleMouseMove}\n    >\n      {shouldRender && displayedStickers ? (\n        displayedStickers.map((sticker) => (\n          <StickerButton\n            key={sticker.id}\n            sticker={sticker}\n            size={STICKER_SIZE_PICKER}\n            observeIntersection={observeIntersection}\n            onClick={onStickerSelect}\n            clickArg={sticker}\n            isSavedMessages={isSavedMessages}\n            canViewSet\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { stickers } = global.stickers.forEmoji;\n    const isSavedMessages = selectIsChatWithSelf(global, chatId);\n\n    return { stickers, isSavedMessages };\n  },\n)(StickerTooltip));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\n\nimport Menu from '../../ui/Menu';\nimport MenuItem from '../../ui/MenuItem';\n\nimport './CustomSendMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  isOpenToBottom?: boolean;\n  isSavedMessages?: boolean;\n  onSendSilent?: NoneToVoidFunction;\n  onSendSchedule?: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n  onCloseAnimationEnd?: NoneToVoidFunction;\n};\n\nconst CustomSendMenu: FC<OwnProps> = ({\n  isOpen,\n  isOpenToBottom = false,\n  isSavedMessages,\n  onSendSilent,\n  onSendSchedule,\n  onClose,\n  onCloseAnimationEnd,\n}) => {\n  const [handleMouseEnter, handleMouseLeave] = useMouseInside(isOpen, onClose);\n\n  const lang = useLang();\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      autoClose\n      positionX=\"right\"\n      positionY={isOpenToBottom ? 'top' : 'bottom'}\n      className=\"CustomSendMenu\"\n      onClose={onClose}\n      onCloseAnimationEnd={onCloseAnimationEnd}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n    >\n      {onSendSilent && <MenuItem icon=\"mute\" onClick={onSendSilent}>{lang('SendWithoutSound')}</MenuItem>}\n      {onSendSchedule && (\n        <MenuItem icon=\"schedule\" onClick={onSendSchedule}>\n          {lang(isSavedMessages ? 'SetReminder' : 'ScheduleMessage')}\n        </MenuItem>\n      )}\n    </Menu>\n  );\n};\n\nexport default memo(CustomSendMenu);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\n\nimport buildClassName from '../../../util/buildClassName';\nimport findInViewport from '../../../util/findInViewport';\nimport isFullyVisible from '../../../util/isFullyVisible';\nimport fastSmoothScrollHorizontal from '../../../util/fastSmoothScrollHorizontal';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport usePrevDuringAnimation from '../../../hooks/usePrevDuringAnimation';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport Loading from '../../ui/Loading';\nimport EmojiButton from './EmojiButton';\n\nimport './EmojiTooltip.scss';\n\nconst VIEWPORT_MARGIN = 8;\nconst EMOJI_BUTTON_WIDTH = 44;\nconst CLOSE_DURATION = 350;\n\nfunction setItemVisible(index: number, containerRef: Record<string, any>) {\n  const container = containerRef.current!;\n  if (!container) {\n    return;\n  }\n\n  const { visibleIndexes, allElements } = findInViewport(\n    container,\n    '.EmojiButton',\n    VIEWPORT_MARGIN,\n    true,\n    true,\n    true,\n  );\n\n  if (!allElements.length || !allElements[index]) {\n    return;\n  }\n  const first = visibleIndexes[0];\n  if (!visibleIndexes.includes(index)\n    || (index === first && !isFullyVisible(container, allElements[first], true))) {\n    const position = index > visibleIndexes[visibleIndexes.length - 1] ? 'start' : 'end';\n    const newLeft = position === 'start' ? index * EMOJI_BUTTON_WIDTH : 0;\n\n    fastSmoothScrollHorizontal(container, newLeft);\n  }\n}\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onEmojiSelect: (text: string) => void;\n  onClose: NoneToVoidFunction;\n  addRecentEmoji: AnyToVoidFunction;\n  emojis: Emoji[];\n};\n\nconst EmojiTooltip: FC<OwnProps> = ({\n  isOpen,\n  emojis,\n  onClose,\n  onEmojiSelect,\n  addRecentEmoji,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const listEmojis: Emoji[] = usePrevDuringAnimation(emojis.length ? emojis : undefined, CLOSE_DURATION) || [];\n\n  const handleSelectEmoji = useCallback((emoji: Emoji) => {\n    onEmojiSelect(emoji.native);\n    addRecentEmoji({ emoji: emoji.id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const handleClick = useCallback((native: string, id: string) => {\n    onEmojiSelect(native);\n    addRecentEmoji({ emoji: id });\n  }, [addRecentEmoji, onEmojiSelect]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    isHorizontal: true,\n    items: emojis,\n    onSelect: handleSelectEmoji,\n    onClose,\n  });\n\n  useEffect(() => {\n    setItemVisible(selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const className = buildClassName(\n    'EmojiTooltip composer-tooltip custom-scroll-x',\n    transitionClassNames,\n  );\n\n  return (\n    <div\n      ref={containerRef}\n      className={className}\n    >\n      {shouldRender && listEmojis ? (\n        listEmojis.map((emoji, index) => (\n          <EmojiButton\n            key={emoji.id}\n            emoji={emoji}\n            focus={selectedIndex === index}\n            onClick={handleClick}\n          />\n        ))\n      ) : shouldRender ? (\n        <Loading />\n      ) : undefined}\n    </div>\n  );\n};\n\nexport default memo(EmojiTooltip);\n","import type { FC, TeactNode } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiWebDocument } from '../../../../api/types';\n\nimport { getFirstLetters } from '../../../../util/textFormat';\nimport renderText from '../../../common/helpers/renderText';\nimport useMedia from '../../../../hooks/useMedia';\nimport { preventMessageInputBlurWithBubbling } from '../../helpers/preventMessageInputBlur';\n\nimport ListItem from '../../../ui/ListItem';\n\nimport './BaseResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  thumbnail?: ApiWebDocument;\n  thumbUrl?: string;\n  title?: string;\n  description?: string;\n  transitionClassNames?: string;\n  onClick: NoneToVoidFunction;\n};\n\nconst BaseResult: FC<OwnProps> = ({\n  title,\n  description,\n  thumbnail,\n  thumbUrl,\n  focus,\n  transitionClassNames = '',\n  onClick,\n}) => {\n  let content: TeactNode | undefined;\n\n  const thumbnailDataUrl = useMedia(thumbnail ? `webDocument:${thumbnail.url}` : undefined);\n  thumbUrl = thumbUrl || thumbnailDataUrl;\n\n  if (thumbUrl) {\n    content = (\n      <img src={thumbUrl} className={transitionClassNames} alt=\"\" decoding=\"async\" draggable=\"false\" />\n    );\n  } else if (title) {\n    content = getFirstLetters(title, 1);\n  }\n\n  return (\n    <ListItem\n      focus={focus}\n      className=\"BaseResult chat-item-clickable\"\n      onMouseDown={preventMessageInputBlurWithBubbling}\n      onClick={onClick}\n    >\n      <span className=\"thumb\">\n        {typeof content === 'string' ? renderText(content) : content}\n      </span>\n      <div className=\"content-inner\">\n        {title && (<div className=\"title\">{title}</div>)}\n        {description && (<div className=\"description\">{description}</div>)}\n      </div>\n    </ListItem>\n  );\n};\n\nexport default memo(BaseResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type {\n  ApiBotInlineMediaResult, ApiBotInlineResult, ApiPhoto, ApiThumbnail, ApiWebDocument,\n} from '../../../../api/types';\n\nimport buildClassName from '../../../../util/buildClassName';\nimport useMedia from '../../../../hooks/useMedia';\nimport useMediaTransition from '../../../../hooks/useMediaTransition';\n\nimport BaseResult from './BaseResult';\n\nimport './MediaResult.scss';\n\nexport type OwnProps = {\n  focus?: boolean;\n  isForGallery?: boolean;\n  inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst MediaResult: FC<OwnProps> = ({\n  focus, isForGallery, inlineResult, onClick,\n}) => {\n  let photo: ApiPhoto | undefined;\n  let thumbnail: ApiThumbnail | undefined;\n  let webThumbnail: ApiWebDocument | undefined;\n\n  if ('photo' in inlineResult) {\n    photo = inlineResult.photo;\n  }\n  // For results with type=video (for example @stikstokbot)\n  if ('thumbnail' in inlineResult) {\n    thumbnail = inlineResult.thumbnail;\n  }\n  if ('webThumbnail' in inlineResult && isForGallery) {\n    webThumbnail = inlineResult.webThumbnail;\n  }\n\n  const thumbnailDataUrl = useMedia(webThumbnail ? `webDocument:${webThumbnail.url}` : undefined);\n  const mediaBlobUrl = useMedia(photo && `photo${photo.id}?size=m`);\n  const transitionClassNames = useMediaTransition(mediaBlobUrl);\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  if (isForGallery) {\n    return (\n      <div className=\"MediaResult chat-item-clickable\" onClick={handleClick}>\n        <img src={(photo?.thumbnail?.dataUri) || thumbnailDataUrl} alt=\"\" />\n        <img src={mediaBlobUrl} className={buildClassName('full-media', transitionClassNames)} alt=\"\" />\n      </div>\n    );\n  }\n\n  const { title, description } = inlineResult;\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbUrl={mediaBlobUrl || (thumbnail?.dataUri || thumbnailDataUrl)}\n      transitionClassNames={transitionClassNames}\n      title={title}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(MediaResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineResult } from '../../../../api/types';\n\nimport BaseResult from './BaseResult';\n\nexport type OwnProps = {\n  focus?: boolean;\n  inlineResult: ApiBotInlineResult;\n  onClick: (result: ApiBotInlineResult) => void;\n};\n\nconst ArticleResult: FC<OwnProps> = ({ focus, inlineResult, onClick }) => {\n  const {\n    title, url, description, webThumbnail,\n  } = inlineResult;\n\n  const handleClick = useCallback(() => {\n    onClick(inlineResult);\n  }, [inlineResult, onClick]);\n\n  return (\n    <BaseResult\n      focus={focus}\n      thumbnail={webThumbnail}\n      title={title || url}\n      description={description}\n      onClick={handleClick}\n    />\n  );\n};\n\nexport default memo(ArticleResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiVideo } from '../../../../api/types';\n\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport GifButton from '../../../common/GifButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst GifResult: FC<OwnProps> = ({\n  inlineResult, isSavedMessages, canSendGifs, observeIntersection, onClick,\n}) => {\n  const { gif } = inlineResult;\n\n  const handleClick = useCallback((_gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    onClick(inlineResult, isSilent, shouldSchedule);\n  }, [inlineResult, onClick]);\n\n  if (!gif) {\n    return undefined;\n  }\n\n  return (\n    <GifButton\n      gif={gif}\n      observeIntersection={observeIntersection}\n      className=\"chat-item-clickable\"\n      onClick={canSendGifs ? handleClick : undefined}\n      isSavedMessages={isSavedMessages}\n    />\n  );\n};\n\nexport default memo(GifResult);\n","import type { FC } from '../../../../lib/teact/teact';\nimport React, { memo } from '../../../../lib/teact/teact';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult } from '../../../../api/types';\n\nimport { STICKER_SIZE_INLINE_BOT_RESULT } from '../../../../config';\nimport type { ObserveFn } from '../../../../hooks/useIntersectionObserver';\n\nimport StickerButton from '../../../common/StickerButton';\n\ntype OwnProps = {\n  inlineResult: ApiBotInlineMediaResult;\n  isSavedMessages?: boolean;\n  observeIntersection: ObserveFn;\n  onClick: (result: ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean) => void;\n};\n\nconst StickerResult: FC<OwnProps> = ({\n  inlineResult,\n  isSavedMessages,\n  observeIntersection,\n  onClick,\n}) => {\n  const { sticker } = inlineResult;\n\n  if (!sticker) {\n    return undefined;\n  }\n\n  return (\n    <StickerButton\n      sticker={sticker}\n      size={STICKER_SIZE_INLINE_BOT_RESULT}\n      observeIntersection={observeIntersection}\n      title={sticker.emoji}\n      className=\"chat-item-clickable\"\n      onClick={onClick}\n      clickArg={inlineResult}\n      isSavedMessages={isSavedMessages}\n      canViewSet\n    />\n  );\n};\n\nexport default memo(StickerResult);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions } from '../../../global';\n\nimport type { ApiBotInlineMediaResult, ApiBotInlineResult, ApiBotInlineSwitchPm } from '../../../api/types';\nimport { LoadMoreDirection } from '../../../types';\n\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport buildClassName from '../../../util/buildClassName';\nimport useShowTransition from '../../../hooks/useShowTransition';\nimport { throttle } from '../../../util/schedulers';\nimport { useIntersectionObserver } from '../../../hooks/useIntersectionObserver';\nimport usePrevious from '../../../hooks/usePrevious';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\n\nimport MediaResult from './inlineResults/MediaResult';\nimport ArticleResult from './inlineResults/ArticleResult';\nimport GifResult from './inlineResults/GifResult';\nimport StickerResult from './inlineResults/StickerResult';\nimport ListItem from '../../ui/ListItem';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\n\nimport './InlineBotTooltip.scss';\n\nconst INTERSECTION_DEBOUNCE_MS = 200;\nconst runThrottled = throttle((cb) => cb(), 500, true);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  botId?: string;\n  isGallery?: boolean;\n  inlineBotResults?: (ApiBotInlineResult | ApiBotInlineMediaResult)[];\n  switchPm?: ApiBotInlineSwitchPm;\n  isSavedMessages?: boolean;\n  canSendGifs?: boolean;\n  onSelectResult: (\n    inlineResult: ApiBotInlineMediaResult | ApiBotInlineResult, isSilent?: boolean, shouldSchedule?: boolean\n  ) => void;\n  loadMore: NoneToVoidFunction;\n  onClose: NoneToVoidFunction;\n};\n\nconst InlineBotTooltip: FC<OwnProps> = ({\n  isOpen,\n  botId,\n  isGallery,\n  inlineBotResults,\n  switchPm,\n  isSavedMessages,\n  canSendGifs,\n  loadMore,\n  onClose,\n  onSelectResult,\n}) => {\n  const {\n    openChat,\n    startBot,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const { shouldRender, transitionClassNames } = useShowTransition(isOpen, undefined, undefined, false);\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({\n    rootRef: containerRef,\n    debounceMs: INTERSECTION_DEBOUNCE_MS,\n    isDisabled: !isOpen,\n  });\n\n  const handleLoadMore = useCallback(({ direction }: { direction: LoadMoreDirection }) => {\n    if (direction === LoadMoreDirection.Backwards) {\n      runThrottled(loadMore);\n    }\n  }, [loadMore]);\n\n  const selectedIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    shouldRemoveSelectionOnReset: isGallery,\n    noArrowNavigation: isGallery,\n    items: inlineBotResults,\n    onSelect: onSelectResult,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedIndex, containerRef);\n  }, [selectedIndex]);\n\n  const handleSendPm = useCallback(() => {\n    openChat({ id: botId });\n    startBot({ botId, param: switchPm!.startParam });\n  }, [botId, openChat, startBot, switchPm]);\n\n  const prevInlineBotResults = usePrevious(\n    inlineBotResults?.length\n      ? inlineBotResults\n      : undefined,\n    shouldRender,\n  );\n  const renderedInlineBotResults = inlineBotResults && !inlineBotResults.length\n    ? prevInlineBotResults\n    : inlineBotResults;\n\n  if (!shouldRender || !(renderedInlineBotResults?.length || switchPm)) {\n    return undefined;\n  }\n\n  const className = buildClassName(\n    'InlineBotTooltip composer-tooltip',\n    IS_TOUCH_ENV ? 'no-scrollbar' : 'custom-scroll',\n    isGallery && 'gallery',\n    transitionClassNames,\n  );\n\n  function renderSwitchPm() {\n    return (\n      <ListItem ripple className=\"switch-pm scroll-item\" onClick={handleSendPm}>\n        <span className=\"title\">{switchPm!.text}</span>\n      </ListItem>\n    );\n  }\n\n  function renderContent() {\n    return renderedInlineBotResults!.map((inlineBotResult, index) => {\n      switch (inlineBotResult.type) {\n        case 'gif':\n          return (\n            <GifResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n              canSendGifs={canSendGifs}\n            />\n          );\n\n        case 'photo':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              isForGallery={isGallery}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        case 'sticker':\n          return (\n            <StickerResult\n              key={inlineBotResult.id}\n              inlineResult={inlineBotResult}\n              observeIntersection={observeIntersection}\n              onClick={onSelectResult}\n              isSavedMessages={isSavedMessages}\n            />\n          );\n\n        case 'video':\n        case 'file':\n        case 'game':\n          return (\n            <MediaResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n        case 'article':\n        case 'audio':\n          return (\n            <ArticleResult\n              key={inlineBotResult.id}\n              focus={selectedIndex === index}\n              inlineResult={inlineBotResult}\n              onClick={onSelectResult}\n            />\n          );\n\n        default:\n          return undefined;\n      }\n    });\n  }\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className={className}\n      items={renderedInlineBotResults}\n      itemSelector=\".chat-item-clickable\"\n      noFastList\n      onLoadMore={handleLoadMore}\n      sensitiveArea={160}\n    >\n      {switchPm && renderSwitchPm()}\n      {renderedInlineBotResults?.length && renderContent()}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(InlineBotTooltip);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useCallback, useEffect, useRef, memo,\n} from '../../../lib/teact/teact';\n\nimport setTooltipItemVisible from '../../../util/setTooltipItemVisible';\nimport { useKeyboardNavigation } from './hooks/useKeyboardNavigation';\nimport { IS_TOUCH_ENV } from '../../../util/environment';\nimport renderText from '../../common/helpers/renderText';\nimport { getUserFullName, isUserId } from '../../../global/helpers';\nimport useMouseInside from '../../../hooks/useMouseInside';\nimport useLang from '../../../hooks/useLang';\nimport buildClassName from '../../../util/buildClassName';\nimport { getActions, getGlobal } from '../../../global';\n\nimport ListItem from '../../ui/ListItem';\nimport Avatar from '../../common/Avatar';\nimport Menu from '../../ui/Menu';\n\nimport './SendAsMenu.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  chatId?: string;\n  selectedSendAsId?: string;\n  sendAsIds?: string[];\n};\n\nconst SendAsMenu: FC<OwnProps> = ({\n  isOpen,\n  onClose,\n  chatId,\n  selectedSendAsId,\n  sendAsIds,\n}) => {\n  const { saveDefaultSendAs } = getActions();\n\n  // No need for expensive global updates on users and chats, so we avoid them\n  const usersById = getGlobal().users.byId;\n  const chatsById = getGlobal().chats.byId;\n\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [handleMouseEnter, handleMouseLeave, markMouseInside] = useMouseInside(isOpen, onClose, undefined);\n\n  useEffect(() => {\n    if (isOpen) {\n      markMouseInside();\n    }\n  }, [isOpen, markMouseInside]);\n\n  const handleUserSelect = useCallback((id: string) => {\n    onClose();\n    saveDefaultSendAs({ chatId, sendAsId: id });\n  }, [chatId, onClose, saveDefaultSendAs]);\n\n  const selectedSendAsIndex = useKeyboardNavigation({\n    isActive: isOpen,\n    items: sendAsIds,\n    onSelect: handleUserSelect,\n    shouldSelectOnTab: true,\n    shouldSaveSelectionOnUpdateItems: true,\n    onClose,\n  });\n\n  useEffect(() => {\n    setTooltipItemVisible('.chat-item-clickable', selectedSendAsIndex, containerRef);\n  }, [selectedSendAsIndex]);\n\n  useEffect(() => {\n    if (sendAsIds && !sendAsIds.length) {\n      onClose();\n    }\n  }, [sendAsIds, onClose]);\n\n  return (\n    <Menu\n      isOpen={isOpen}\n      positionX=\"left\"\n      positionY=\"bottom\"\n      onClose={onClose}\n      className=\"SendAsMenu\"\n      onCloseAnimationEnd={onClose}\n      onMouseEnter={!IS_TOUCH_ENV ? handleMouseEnter : undefined}\n      onMouseLeave={!IS_TOUCH_ENV ? handleMouseLeave : undefined}\n      noCloseOnBackdrop={!IS_TOUCH_ENV}\n      noCompact\n    >\n      <div className=\"send-as-title\" dir=\"auto\">{lang('SendMessageAsTitle')}</div>\n      {usersById && chatsById && sendAsIds?.map((id, index) => {\n        const user = isUserId(id) ? usersById[id] : undefined;\n        const chat = !user ? chatsById[id] : undefined;\n        const fullName = user ? getUserFullName(user) : chat?.title;\n\n        return (\n          <ListItem\n            key={id}\n            className=\"SendAsItem chat-item-clickable scroll-item with-avatar\"\n            // eslint-disable-next-line react/jsx-no-bind\n            onClick={() => handleUserSelect(id)}\n            focus={selectedSendAsIndex === index}\n          >\n            <Avatar\n              size=\"small\"\n              user={user}\n              chat={chat}\n              className={buildClassName(selectedSendAsId === id && 'selected')}\n            />\n            <div className=\"info\">\n              <div className=\"title\">\n                <h3 dir=\"auto\">{fullName && renderText(fullName)}</h3>\n              </div>\n              <span className=\"subtitle\">{user\n                ? lang('VoipGroupPersonalAccount')\n                : lang('Subscribers', chat?.membersCount, 'i')}\n              </span>\n            </div>\n          </ListItem>\n        );\n      })}\n    </Menu>\n  );\n};\n\nexport default memo(SendAsMenu);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useMemo, memo, useRef } from '../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiUser, ApiChat } from '../../api/types';\n\nimport { MEMO_EMPTY_ARRAY } from '../../util/memo';\nimport {\n  selectUser,\n  selectChatMessages,\n  selectChat,\n  selectCurrentTextSearch,\n} from '../../global/selectors';\nimport {\n  getChatTitle,\n  getUserFullName,\n  isChatChannel,\n} from '../../global/helpers';\nimport useLang from '../../hooks/useLang';\nimport useKeyboardListNavigation from '../../hooks/useKeyboardListNavigation';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../hooks/useInfiniteScroll';\nimport { renderMessageSummary } from '../common/helpers/renderMessageText';\nimport renderText from '../common/helpers/renderText';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport ListItem from '../ui/ListItem';\nimport LastMessageMeta from '../common/LastMessageMeta';\nimport Avatar from '../common/Avatar';\n\nimport './RightSearch.scss';\n\nexport type OwnProps = {\n  chatId: string;\n  threadId: number;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  messagesById?: Record<number, ApiMessage>;\n  query?: string;\n  totalCount?: number;\n  foundIds?: number[];\n};\n\nconst RightSearch: FC<OwnProps & StateProps> = ({\n  chatId,\n  threadId,\n  onClose,\n  isActive,\n  chat,\n  messagesById,\n  query,\n  totalCount,\n  foundIds,\n}) => {\n  const {\n    searchTextMessagesLocal,\n    focusMessage,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const [viewportIds, getMore] = useInfiniteScroll(searchTextMessagesLocal, foundIds);\n\n  const viewportResults = useMemo(() => {\n    if (!query || !viewportIds?.length || !messagesById) {\n      return MEMO_EMPTY_ARRAY;\n    }\n\n    return viewportIds.map((id) => {\n      const message = messagesById[id];\n      if (!message) {\n        return undefined;\n      }\n\n      const senderUser = message.senderId ? selectUser(getGlobal(), message.senderId) : undefined;\n\n      let senderChat;\n      if (chat && isChatChannel(chat)) {\n        senderChat = chat;\n      } else if (message.forwardInfo) {\n        const { isChannelPost, fromChatId } = message.forwardInfo;\n        senderChat = isChannelPost && fromChatId ? selectChat(getGlobal(), fromChatId) : undefined;\n      } else {\n        senderChat = message.senderId ? selectChat(getGlobal(), message.senderId) : undefined;\n      }\n\n      return {\n        message,\n        senderUser,\n        senderChat,\n        onClick: () => focusMessage({ chatId, threadId, messageId: id }),\n      };\n    }).filter(Boolean);\n  }, [query, viewportIds, messagesById, chat, focusMessage, chatId, threadId]);\n\n  const handleKeyDown = useKeyboardListNavigation(containerRef, true, (index) => {\n    const foundResult = viewportResults?.[index === -1 ? 0 : index];\n    if (foundResult) {\n      foundResult.onClick();\n    }\n  }, '.ListItem-button', true);\n\n  const renderSearchResult = ({\n    message, senderUser, senderChat, onClick,\n  }: {\n    message: ApiMessage;\n    senderUser?: ApiUser;\n    senderChat?: ApiChat;\n    onClick: NoneToVoidFunction;\n  }) => {\n    const title = senderChat ? getChatTitle(lang, senderChat) : getUserFullName(senderUser);\n    const text = renderMessageSummary(lang, message, undefined, query);\n\n    return (\n      <ListItem\n        key={message.id}\n        teactOrderKey={-message.date}\n        className=\"chat-item-clickable search-result-message m-0\"\n        onClick={onClick}\n      >\n        <Avatar chat={senderChat} user={senderUser} />\n        <div className=\"info\">\n          <div className=\"title\">\n            <h3 dir=\"auto\">{title && renderText(title)}</h3>\n            <LastMessageMeta message={message} />\n          </div>\n          <div className=\"subtitle\" dir=\"auto\">\n            {text}\n          </div>\n        </div>\n      </ListItem>\n    );\n  };\n\n  const isOnTop = viewportIds?.[0] === foundIds?.[0];\n\n  return (\n    <InfiniteScroll\n      ref={containerRef}\n      className=\"RightSearch custom-scroll\"\n      items={viewportResults}\n      preloadBackwards={0}\n      onLoadMore={getMore}\n      onKeyDown={handleKeyDown}\n    >\n      {isOnTop && (\n        <p key=\"helper-text\" className=\"helper-text\" dir=\"auto\">\n          {!query ? (\n            lang('lng_dlg_search_for_messages')\n          ) : (totalCount === 0 || !viewportResults.length) ? (\n            lang('lng_search_no_results')\n          ) : totalCount === 1 ? (\n            '1 message found'\n          ) : (\n            `${(viewportResults.length && (totalCount || viewportResults.length))} messages found`\n          )}\n        </p>\n      )}\n      {viewportResults.map(renderSearchResult)}\n    </InfiniteScroll>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const messagesById = chat && selectChatMessages(global, chat.id);\n    if (!chat || !messagesById) {\n      return {};\n    }\n\n    const { query, results } = selectCurrentTextSearch(global) || {};\n    const { totalCount, foundIds } = results || {};\n\n    return {\n      chat,\n      messagesById,\n      query,\n      totalCount,\n      foundIds,\n    };\n  },\n)(RightSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, memo, useMemo, useCallback,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiStickerSet } from '../../api/types';\nimport type { ObserveFn } from '../../hooks/useIntersectionObserver';\n\nimport { STICKER_SIZE_SEARCH } from '../../config';\nimport { selectShouldLoopStickers, selectStickerSet } from '../../global/selectors';\nimport useFlag from '../../hooks/useFlag';\nimport useOnChange from '../../hooks/useOnChange';\nimport useLang from '../../hooks/useLang';\n\nimport Button from '../ui/Button';\nimport StickerButton from '../common/StickerButton';\nimport StickerSetModal from '../common/StickerSetModal.async';\nimport Spinner from '../ui/Spinner';\n\ntype OwnProps = {\n  stickerSetId: string;\n  observeIntersection: ObserveFn;\n  isSomeModalOpen: boolean;\n  onModalToggle: (isOpen: boolean) => void;\n};\n\ntype StateProps = {\n  set?: ApiStickerSet;\n  shouldPlay?: boolean;\n};\n\nconst STICKERS_TO_DISPLAY = 5;\n\nconst StickerSetResult: FC<OwnProps & StateProps> = ({\n  stickerSetId, observeIntersection, set, shouldPlay,\n  isSomeModalOpen, onModalToggle,\n}) => {\n  const { loadStickers, toggleStickerSet } = getActions();\n\n  const lang = useLang();\n  const isAdded = set && Boolean(set.installedDate);\n  const areStickersLoaded = Boolean(set?.stickers);\n\n  const [isModalOpen, openModal, closeModal] = useFlag();\n\n  useOnChange(() => {\n    onModalToggle(isModalOpen);\n  }, [isModalOpen, onModalToggle]);\n\n  const displayedStickers = useMemo(() => {\n    if (!set) {\n      return [];\n    }\n\n    const coverStickerIds = (set.covers || []).map(({ id }) => id);\n    const otherStickers = set.stickers ? set.stickers.filter(({ id }) => !coverStickerIds.includes(id)) : [];\n\n    return [...(set.covers || []), ...otherStickers].slice(0, STICKERS_TO_DISPLAY);\n  }, [set]);\n\n  useEffect(() => {\n    // Featured stickers are initialized with one sticker in collection (cover of SickerSet)\n    if (!areStickersLoaded && displayedStickers.length < STICKERS_TO_DISPLAY) {\n      loadStickers({ stickerSetId });\n    }\n  }, [areStickersLoaded, displayedStickers.length, loadStickers, stickerSetId]);\n\n  const handleAddClick = useCallback(() => {\n    toggleStickerSet({ stickerSetId });\n  }, [toggleStickerSet, stickerSetId]);\n\n  if (!set) {\n    return undefined;\n  }\n\n  const canRenderStickers = displayedStickers.length > 0;\n\n  return (\n    <div key={set.id} className=\"sticker-set\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <div className=\"sticker-set-header\">\n        <div className=\"title-wrapper\">\n          <h3 className=\"title\" dir=\"auto\">{set.title}</h3>\n          <p className=\"count\" dir=\"auto\">{lang('Stickers', set.count, 'i')}</p>\n        </div>\n        <Button\n          className={isAdded ? 'is-added' : undefined}\n          color=\"primary\"\n          size=\"tiny\"\n          pill\n          fluid\n          onClick={handleAddClick}\n        >\n          {lang(isAdded ? 'Stickers.Installed' : 'Stickers.Install')}\n        </Button>\n      </div>\n      <div className=\"sticker-set-main\">\n        {!canRenderStickers && <Spinner />}\n        {canRenderStickers && displayedStickers.map((sticker) => (\n          <StickerButton\n            sticker={sticker}\n            size={STICKER_SIZE_SEARCH}\n            observeIntersection={observeIntersection}\n            noAnimate={!shouldPlay || isModalOpen || isSomeModalOpen}\n            clickArg={undefined}\n            onClick={openModal}\n            noContextMenu\n          />\n        ))}\n      </div>\n      {canRenderStickers && (\n        <StickerSetModal\n          isOpen={isModalOpen}\n          fromSticker={displayedStickers[0]}\n          onClose={closeModal}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { stickerSetId }): StateProps => {\n    return {\n      set: selectStickerSet(global, stickerSetId),\n      shouldPlay: selectShouldLoopStickers(global),\n    };\n  },\n)(StickerSetResult));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useEffect, useRef, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport { throttle } from '../../util/schedulers';\nimport { selectCurrentStickerSearch } from '../../global/selectors';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport Loading from '../ui/Loading';\nimport StickerSetResult from './StickerSetResult';\n\nimport './StickerSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  featuredIds?: string[];\n  resultIds?: string[];\n};\n\nconst INTERSECTION_THROTTLE = 200;\n\nconst runThrottled = throttle((cb) => cb(), 60000, true);\n\nconst StickerSearch: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  query,\n  featuredIds,\n  resultIds,\n}) => {\n  const { loadFeaturedStickers } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const lang = useLang();\n\n  const [isModalOpen, setIsModalOpen] = useState(false);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, throttleMs: INTERSECTION_THROTTLE });\n\n  // Due to the parent Transition, this component never gets unmounted,\n  // that's why we use throttled API call on every update.\n  useEffect(() => {\n    runThrottled(() => {\n      loadFeaturedStickers();\n    });\n  });\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!query && featuredIds) {\n      return featuredIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    if (resultIds) {\n      if (!resultIds.length) {\n        return <p className=\"helper-text\" dir=\"auto\">Nothing found.</p>;\n      }\n\n      return resultIds.map((id) => (\n        <StickerSetResult\n          key={id}\n          stickerSetId={id}\n          observeIntersection={observeIntersection}\n          isSomeModalOpen={isModalOpen}\n          onModalToggle={setIsModalOpen}\n        />\n      ));\n    }\n\n    return <Loading />;\n  }\n\n  return (\n    <div ref={containerRef} className=\"StickerSearch custom-scroll\" dir={lang.isRtl ? 'rtl' : undefined}>\n      {renderContent()}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentStickerSearch(global);\n    const { query, resultIds } = currentSearch || {};\n    const { featured } = global.stickers;\n\n    return {\n      query,\n      featuredIds: featured.setIds,\n      resultIds,\n    };\n  },\n)(StickerSearch));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useRef, useCallback } from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { ApiChat, ApiVideo } from '../../api/types';\n\nimport { IS_TOUCH_ENV } from '../../util/environment';\nimport {\n  selectCurrentGifSearch,\n  selectChat,\n  selectIsChatWithBot,\n  selectCurrentMessageList,\n  selectCanScheduleUntilOnline,\n  selectIsChatWithSelf,\n} from '../../global/selectors';\nimport { getAllowedAttachmentOptions, getCanPostInChat } from '../../global/helpers';\nimport buildClassName from '../../util/buildClassName';\nimport { useIntersectionObserver } from '../../hooks/useIntersectionObserver';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\nimport useSchedule from '../../hooks/useSchedule';\n\nimport InfiniteScroll from '../ui/InfiniteScroll';\nimport GifButton from '../common/GifButton';\nimport Loading from '../ui/Loading';\n\nimport './GifSearch.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  query?: string;\n  results?: ApiVideo[];\n  chat?: ApiChat;\n  isChatWithBot?: boolean;\n  canScheduleUntilOnline?: boolean;\n  isSavedMessages?: boolean;\n  canPostInChat?: boolean;\n};\n\nconst PRELOAD_BACKWARDS = 96; // GIF Search bot results are multiplied by 24\nconst INTERSECTION_DEBOUNCE = 300;\n\nconst GifSearch: FC<OwnProps & StateProps> = ({\n  isActive,\n  query,\n  results,\n  chat,\n  isChatWithBot,\n  canScheduleUntilOnline,\n  isSavedMessages,\n  canPostInChat,\n  onClose,\n}) => {\n  const {\n    searchMoreGifs,\n    sendMessage,\n    setGifSearchQuery,\n  } = getActions();\n\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const [requestCalendar, calendar] = useSchedule(canScheduleUntilOnline);\n\n  const {\n    observe: observeIntersection,\n  } = useIntersectionObserver({ rootRef: containerRef, debounceMs: INTERSECTION_DEBOUNCE });\n\n  const canSendGifs = canPostInChat && getAllowedAttachmentOptions(chat, isChatWithBot).canSendGifs;\n\n  const handleGifClick = useCallback((gif: ApiVideo, isSilent?: boolean, shouldSchedule?: boolean) => {\n    if (canSendGifs) {\n      if (shouldSchedule) {\n        requestCalendar((scheduledAt) => {\n          sendMessage({ gif, scheduledAt, isSilent });\n        });\n      } else {\n        sendMessage({ gif, isSilent });\n      }\n    }\n\n    if (IS_TOUCH_ENV) {\n      setGifSearchQuery({ query: undefined });\n    }\n  }, [canSendGifs, requestCalendar, sendMessage, setGifSearchQuery]);\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderContent() {\n    if (query === undefined) {\n      return undefined;\n    }\n\n    if (!results) {\n      return (\n        <Loading />\n      );\n    }\n\n    if (!results.length) {\n      return (\n        <p className=\"helper-text\" dir=\"auto\">{lang('NoGIFsFound')}</p>\n      );\n    }\n\n    return results.map((gif) => (\n      <GifButton\n        key={gif.id}\n        gif={gif}\n        observeIntersection={observeIntersection}\n        onClick={canSendGifs ? handleGifClick : undefined}\n        isSavedMessages={isSavedMessages}\n      />\n    ));\n  }\n\n  const hasResults = Boolean(query !== undefined && results && results.length);\n\n  return (\n    <div className=\"GifSearch\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <InfiniteScroll\n        ref={containerRef}\n        className={buildClassName('gif-container custom-scroll', hasResults && 'grid')}\n        items={results}\n        itemSelector=\".GifButton\"\n        preloadBackwards={PRELOAD_BACKWARDS}\n        noFastList\n        onLoadMore={searchMoreGifs}\n      >\n        {renderContent()}\n      </InfiniteScroll>\n      {calendar}\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const currentSearch = selectCurrentGifSearch(global);\n    const { query, results } = currentSearch || {};\n    const { chatId, threadId } = selectCurrentMessageList(global) || {};\n    const chat = chatId ? selectChat(global, chatId) : undefined;\n    const isChatWithBot = chat ? selectIsChatWithBot(global, chat) : undefined;\n    const isSavedMessages = Boolean(chatId) && selectIsChatWithSelf(global, chatId);\n    const canPostInChat = Boolean(chat) && Boolean(threadId) && getCanPostInChat(chat, threadId);\n\n    return {\n      query,\n      results,\n      chat,\n      isChatWithBot,\n      isSavedMessages,\n      canPostInChat,\n      canScheduleUntilOnline: Boolean(chatId) && selectCanScheduleUntilOnline(global, chatId),\n    };\n  },\n)(GifSearch));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\n\nimport type {\n  ApiChannelStatistics, ApiGroupStatistics, ApiMessageStatistics, StatisticsOverviewItem,\n} from '../../../api/types';\n\nimport { formatInteger, formatIntegerCompact } from '../../../util/textFormat';\nimport { formatFullDate } from '../../../util/dateFormat';\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\n\nimport './StatisticsOverview.scss';\n\ntype OverviewCell = {\n  name: string;\n  title: string;\n  isPercentage?: boolean;\n  isPlain?: boolean;\n  isApproximate?: boolean;\n};\n\nconst CHANNEL_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'followers', title: 'ChannelStats.Overview.Followers' },\n    { name: 'enabledNotifications', title: 'ChannelStats.Overview.EnabledNotifications', isPercentage: true },\n  ],\n  [\n    { name: 'viewsPerPost', title: 'ChannelStats.Overview.ViewsPerPost' },\n    { name: 'sharesPerPost', title: 'ChannelStats.Overview.SharesPerPost' },\n  ],\n];\n\nconst GROUP_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'members', title: 'Stats.GroupMembers' },\n    { name: 'messages', title: 'Stats.GroupMessages' },\n  ],\n  [\n    { name: 'viewers', title: 'Stats.GroupViewers' },\n    { name: 'posters', title: 'Stats.GroupPosters' },\n  ],\n];\n\nconst MESSAGE_OVERVIEW: OverviewCell[][] = [\n  [\n    { name: 'views', title: 'Stats.Message.Views', isPlain: true },\n    {\n      name: 'forwards', title: 'Stats.Message.PrivateShares', isPlain: true, isApproximate: true,\n    },\n  ],\n  [\n    { name: 'publicForwards', title: 'Stats.Message.PublicShares', isPlain: true },\n  ],\n];\n\nexport type OwnProps = {\n  isGroup?: boolean;\n  isMessage?: boolean;\n  statistics: ApiChannelStatistics | ApiGroupStatistics | ApiMessageStatistics;\n};\n\nconst StatisticsOverview: FC<OwnProps> = ({ isGroup, isMessage, statistics }) => {\n  const lang = useLang();\n\n  const renderOverviewItemValue = ({ change, percentage }: StatisticsOverviewItem) => {\n    if (!change) {\n      return undefined;\n    }\n\n    const isChangeNegative = Number(change) < 0;\n\n    return (\n      <span className={buildClassName('StatisticsOverview__value', isChangeNegative && 'negative')}>\n        {isChangeNegative ? `-${formatIntegerCompact(Math.abs(change))}` : `+${formatIntegerCompact(change)}`}\n        {percentage && (\n          <>\n            {' '}\n            ({percentage}%)\n          </>\n        )}\n      </span>\n    );\n  };\n\n  const { period } = (statistics as ApiGroupStatistics);\n\n  return (\n    <div className=\"StatisticsOverview\">\n      <div className=\"StatisticsOverview__header\">\n        <div className=\"StatisticsOverview__title\">{lang('StatisticOverview')}</div>\n\n        {period && (\n          <div className=\"StatisticsOverview__caption\">\n            {formatFullDate(lang, period.minDate * 1000)} — {formatFullDate(lang, period.maxDate * 1000)}\n          </div>\n        )}\n      </div>\n\n      <table className=\"StatisticsOverview__table\">\n        {(isMessage ? MESSAGE_OVERVIEW : isGroup ? GROUP_OVERVIEW : CHANNEL_OVERVIEW).map((row) => (\n          <tr>\n            {row.map((cell: OverviewCell) => {\n              const field = (statistics as any)[cell.name];\n\n              if (cell.isPlain) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">\n                      {cell.isApproximate ? `≈${formatInteger(field)}` : formatInteger(field)}\n                    </b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              if (cell.isPercentage) {\n                return (\n                  <td className=\"StatisticsOverview__table-cell\">\n                    <b className=\"StatisticsOverview__table-value\">{field.percentage}%</b>\n                    <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                  </td>\n                );\n              }\n\n              return (\n                <td className=\"StatisticsOverview__table-cell\">\n                  <b className=\"StatisticsOverview__table-value\">\n                    {formatIntegerCompact(field.current)}\n                  </b>\n                  {' '}\n                  {renderOverviewItemValue(field)}\n                  <h3 className=\"StatisticsOverview__table-heading\">{lang(cell.title)}</h3>\n                </td>\n              );\n            })}\n          </tr>\n        ))}\n      </table>\n    </div>\n  );\n};\n\nexport default memo(StatisticsOverview);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport type { LangFn } from '../../../hooks/useLang';\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\n\nimport type { ApiMessage, StatisticsRecentMessage as StatisticsRecentMessageType } from '../../../api/types';\n\nimport buildClassName from '../../../util/buildClassName';\nimport { formatDateTimeToString } from '../../../util/dateFormat';\nimport {\n  getMessageMediaHash,\n  getMessageMediaThumbDataUri,\n  getMessageVideo,\n  getMessageRoundVideo,\n} from '../../../global/helpers';\nimport { renderMessageSummary } from '../../common/helpers/renderMessageText';\nimport useMedia from '../../../hooks/useMedia';\n\nimport './StatisticsRecentMessage.scss';\n\nexport type OwnProps = {\n  message: ApiMessage & StatisticsRecentMessageType;\n};\n\nconst StatisticsRecentMessage: FC<OwnProps> = ({ message }) => {\n  const lang = useLang();\n  const { toggleMessageStatistics } = getActions();\n\n  const mediaThumbnail = getMessageMediaThumbDataUri(message);\n  const mediaBlobUrl = useMedia(getMessageMediaHash(message, 'micro'));\n  const isRoundVideo = Boolean(getMessageRoundVideo(message));\n\n  const handleClick = useCallback(() => {\n    toggleMessageStatistics({ messageId: message.id });\n  }, [toggleMessageStatistics, message.id]);\n\n  return (\n    <div\n      className={buildClassName(\n        'StatisticsRecentMessage',\n        Boolean(mediaBlobUrl || mediaThumbnail) && 'StatisticsRecentMessage--with-image',\n      )}\n      onClick={handleClick}\n    >\n      <div className=\"StatisticsRecentMessage__title\">\n        <div className=\"StatisticsRecentMessage__summary\">\n          {renderSummary(lang, message, mediaBlobUrl || mediaThumbnail, isRoundVideo)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {lang('ChannelStats.ViewsCount', message.views, 'i')}\n        </div>\n      </div>\n\n      <div className=\"StatisticsRecentMessage__info\">\n        <div className=\"StatisticsRecentMessage__date\">\n          {formatDateTimeToString(message.date * 1000, lang.code)}\n        </div>\n        <div className=\"StatisticsRecentMessage__meta\">\n          {message.forwards ? lang('ChannelStats.SharesCount', message.forwards) : 'No shares'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nfunction renderSummary(lang: LangFn, message: ApiMessage, blobUrl?: string, isRoundVideo?: boolean) {\n  if (!blobUrl) {\n    return renderMessageSummary(lang, message);\n  }\n\n  return (\n    <span className=\"media-preview\">\n      <img src={blobUrl} alt=\"\" className={buildClassName('media-preview__image', isRoundVideo && 'round')} />\n      {getMessageVideo(message) && <i className=\"icon-play\" />}\n      {renderMessageSummary(lang, message, true)}\n    </span>\n  );\n}\n\nexport default memo(StatisticsRecentMessage);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef, useMemo,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type {\n  ApiMessage,\n  ApiChannelStatistics,\n  ApiGroupStatistics,\n  StatisticsRecentMessage as StatisticsRecentMessageType,\n  StatisticsGraph,\n} from '../../../api/types';\nimport { selectChat, selectStatistics } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsRecentMessage from './StatisticsRecentMessage';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst CHANNEL_GRAPHS_TITLES = {\n  growthGraph: 'ChannelStats.Graph.Growth',\n  followersGraph: 'ChannelStats.Graph.Followers',\n  muteGraph: 'ChannelStats.Graph.Notifications',\n  topHoursGraph: 'ChannelStats.Graph.ViewsByHours',\n  viewsBySourceGraph: 'ChannelStats.Graph.ViewsBySource',\n  newFollowersBySourceGraph: 'ChannelStats.Graph.NewFollowersBySource',\n  languagesGraph: 'ChannelStats.Graph.Language',\n  interactionsGraph: 'ChannelStats.Graph.Interactions',\n};\nconst CHANNEL_GRAPHS = Object.keys(CHANNEL_GRAPHS_TITLES) as (keyof ApiChannelStatistics)[];\n\nconst GROUP_GRAPHS_TITLES = {\n  growthGraph: 'Stats.GroupGrowthTitle',\n  membersGraph: 'Stats.GroupMembersTitle',\n  languagesGraph: 'Stats.GroupLanguagesTitle',\n  messagesGraph: 'Stats.GroupMessagesTitle',\n  actionsGraph: 'Stats.GroupActionsTitle',\n  topHoursGraph: 'Stats.GroupTopHoursTitle',\n};\nconst GROUP_GRAPHS = Object.keys(GROUP_GRAPHS_TITLES) as (keyof ApiGroupStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n};\n\nexport type StateProps = {\n  statistics: ApiChannelStatistics | ApiGroupStatistics;\n  dcId?: number;\n  isGroup: boolean;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  statistics,\n  dcId,\n  isGroup,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    loadStatistics({ chatId, isGroup });\n  }, [chatId, loadStatistics, isGroup]);\n\n  const graphs = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS : CHANNEL_GRAPHS;\n  }, [isGroup]);\n\n  const graphTitles = useMemo(() => {\n    return isGroup ? GROUP_GRAPHS_TITLES : CHANNEL_GRAPHS_TITLES;\n  }, [isGroup]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    graphs.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({\n          name,\n          chatId,\n          token: graph,\n          // Hardcode percentage for languages graph, since API does not return `percentage` flag\n          isPercentage: name === 'languagesGraph',\n        });\n      }\n    });\n  }, [graphs, chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      graphs.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((graphTitles as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n\n        containerRef.current!.children[index].classList.remove('hidden');\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    graphs, graphTitles, isReady, statistics, lang, chatId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isGroup={isGroup} />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {graphs.map((graph) => (\n          <div key={graph} className=\"Statistics__graph hidden\" />\n        ))}\n      </div>\n\n      {Boolean((statistics as ApiChannelStatistics).recentTopMessages?.length) && (\n        <div className=\"Statistics__messages\">\n          <h2 className=\"Statistics__messages-title\">{lang('ChannelStats.Recent.Header')}</h2>\n\n          {(statistics as ApiChannelStatistics).recentTopMessages.map((message) => (\n            <StatisticsRecentMessage message={message as ApiMessage & StatisticsRecentMessageType} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const statistics = selectStatistics(global, chatId);\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const isGroup = chat?.type === 'chatTypeSuperGroup';\n\n    return {\n      statistics, dcId, isGroup,\n    };\n  },\n)(Statistics));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\n\nimport useLang from '../../../hooks/useLang';\nimport { getActions } from '../../../global';\nimport type { ApiMessagePublicForward } from '../../../api/types';\n\nimport Avatar from '../../common/Avatar';\n\nimport './StatisticsPublicForward.scss';\n\nexport type OwnProps = {\n  data: ApiMessagePublicForward;\n};\n\nconst StatisticsPublicForward: FC<OwnProps> = ({ data }) => {\n  const lang = useLang();\n  const { openChatByUsername } = getActions();\n\n  const handleClick = useCallback(() => {\n    openChatByUsername({ username: data.chat.username, messageId: data.messageId });\n  }, [data, openChatByUsername]);\n\n  return (\n    <div className=\"StatisticsPublicForward\" onClick={handleClick}>\n      <Avatar size=\"medium\" chat={data.chat} />\n\n      <div className=\"StatisticsPublicForward__info\">\n        <div className=\"StatisticsPublicForward__title\">\n          {data.title}\n        </div>\n\n        <div className=\"StatisticsPublicForward__views\">\n          {lang('ChannelStats.ViewsCount', data.views, 'i')}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(StatisticsPublicForward);\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useState, useEffect, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { callApi } from '../../../api/gramjs';\nimport type { ApiMessageStatistics, ApiMessagePublicForward, StatisticsGraph } from '../../../api/types';\nimport { selectChat } from '../../../global/selectors';\n\nimport buildClassName from '../../../util/buildClassName';\nimport useLang from '../../../hooks/useLang';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\n\nimport Loading from '../../ui/Loading';\nimport StatisticsOverview from './StatisticsOverview';\nimport StatisticsPublicForward from './StatisticsPublicForward';\n\nimport './Statistics.scss';\n\ntype ILovelyChart = { create: Function };\nlet lovelyChartPromise: Promise<ILovelyChart>;\nlet LovelyChart: ILovelyChart;\n\nasync function ensureLovelyChart() {\n  if (!lovelyChartPromise) {\n    lovelyChartPromise = import('../../../lib/lovely-chart/LovelyChart') as Promise<ILovelyChart>;\n    LovelyChart = await lovelyChartPromise;\n  }\n\n  return lovelyChartPromise;\n}\n\nconst GRAPH_TITLES = {\n  viewsGraph: 'Stats.MessageInteractionsTitle',\n};\nconst GRAPHS = Object.keys(GRAPH_TITLES) as (keyof ApiMessageStatistics)[];\n\nexport type OwnProps = {\n  chatId: string;\n  isActive: boolean;\n};\n\nexport type StateProps = {\n  statistics?: ApiMessageStatistics;\n  messageId?: number;\n  dcId?: number;\n};\n\nconst Statistics: FC<OwnProps & StateProps> = ({\n  chatId,\n  isActive,\n  statistics,\n  dcId,\n  messageId,\n}) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n  const [isReady, setIsReady] = useState(false);\n  const loadedCharts = useRef<string[]>([]);\n\n  const { loadMessageStatistics, loadStatisticsAsyncGraph } = getActions();\n  const forceUpdate = useForceUpdate();\n\n  useEffect(() => {\n    if (messageId) {\n      loadMessageStatistics({ chatId, messageId });\n    }\n  }, [chatId, loadMessageStatistics, messageId]);\n\n  useEffect(() => {\n    if (!isActive || messageId) {\n      loadedCharts.current = [];\n      setIsReady(false);\n    }\n  }, [isActive, messageId]);\n\n  // Load async graphs\n  useEffect(() => {\n    if (!statistics) {\n      return;\n    }\n\n    GRAPHS.forEach((name) => {\n      const graph = statistics[name as keyof typeof statistics];\n      const isAsync = typeof graph === 'string';\n\n      if (isAsync) {\n        loadStatisticsAsyncGraph({ name, chatId, token: graph });\n      }\n    });\n  }, [chatId, statistics, loadStatisticsAsyncGraph]);\n\n  useEffect(() => {\n    (async () => {\n      await ensureLovelyChart();\n\n      if (!isReady) {\n        setIsReady(true);\n        return;\n      }\n\n      if (!statistics || !containerRef.current) {\n        return;\n      }\n\n      GRAPHS.forEach((name, index: number) => {\n        const graph = statistics[name as keyof typeof statistics];\n        const isAsync = typeof graph === 'string';\n\n        if (isAsync || loadedCharts.current.includes(name)) {\n          return;\n        }\n\n        if (!graph) {\n          loadedCharts.current.push(name);\n\n          return;\n        }\n\n        const { zoomToken } = graph as StatisticsGraph;\n\n        LovelyChart.create(\n          containerRef.current!.children[index],\n          {\n            title: lang((GRAPH_TITLES as Record<string, string>)[name]),\n            ...zoomToken ? {\n              onZoom: (x: number) => callApi('fetchStatisticsAsyncGraph', { token: zoomToken, x, dcId }),\n              zoomOutLabel: lang('Graph.ZoomOut'),\n            } : {},\n            ...graph as StatisticsGraph,\n          },\n        );\n\n        loadedCharts.current.push(name);\n      });\n\n      forceUpdate();\n    })();\n  }, [\n    isReady, statistics, lang, chatId, messageId, loadStatisticsAsyncGraph, dcId, forceUpdate,\n  ]);\n\n  if (!isReady || !statistics || !messageId) {\n    return <Loading />;\n  }\n\n  return (\n    <div className={buildClassName('Statistics custom-scroll', isReady && 'ready')}>\n      <StatisticsOverview statistics={statistics} isMessage />\n\n      {!loadedCharts.current.length && <Loading />}\n\n      <div ref={containerRef}>\n        {GRAPHS.map((graph) => (\n          <div className={buildClassName('Statistics__graph', !loadedCharts.current.includes(graph) && 'hidden')} />\n        ))}\n      </div>\n\n      {Boolean(statistics.publicForwards) && (\n        <div className=\"Statistics__public-forwards\">\n          <h2 className=\"Statistics__public-forwards-title\">{lang('Stats.Message.PublicShares')}</h2>\n\n          {statistics.publicForwardsData!.map((item: ApiMessagePublicForward) => (\n            <StatisticsPublicForward data={item} />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const dcId = chat?.fullInfo?.statisticsDcId;\n    const statistics = global.statistics.currentMessage;\n    const messageId = global.statistics.currentMessageId;\n\n    return { statistics, dcId, messageId };\n  },\n)(Statistics));\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, useState, memo, useEffect,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type {\n  ApiChat,\n  ApiMessage,\n  ApiPollAnswer,\n  ApiPollResult,\n} from '../../api/types';\nimport usePrevious from '../../hooks/usePrevious';\nimport useLang from '../../hooks/useLang';\n\nimport ShowMoreButton from '../ui/ShowMoreButton';\nimport Loading from '../ui/Loading';\nimport ListItem from '../ui/ListItem';\nimport PrivateChatInfo from '../common/PrivateChatInfo';\n\nimport './PollAnswerResults.scss';\n\ntype OwnProps = {\n  chat: ApiChat;\n  message: ApiMessage;\n  answer: ApiPollAnswer;\n  answerVote: ApiPollResult;\n  totalVoters: number;\n};\n\ntype StateProps = {\n  voters?: string[];\n  offset: string;\n};\n\nconst INITIAL_LIMIT = 4;\nconst VIEW_MORE_LIMIT = 50;\n\nconst PollAnswerResults: FC<OwnProps & StateProps> = ({\n  chat,\n  message,\n  answer,\n  answerVote,\n  totalVoters,\n  voters,\n  offset,\n}) => {\n  const {\n    loadPollOptionResults,\n    openChat,\n    closePollResults,\n  } = getActions();\n\n  const prevVotersCount = usePrevious<number>(answerVote.votersCount);\n  const [isLoading, setIsLoading] = useState<boolean>(true);\n  const areVotersLoaded = Boolean(voters);\n  const { option, text } = answer;\n  const lang = useLang();\n\n  useEffect(() => {\n    // For update when new votes arrive or when the user takes back his vote\n    if (!areVotersLoaded || prevVotersCount !== answerVote.votersCount) {\n      loadPollOptionResults({\n        chat, messageId: message.id, option, offset, limit: INITIAL_LIMIT, shouldResetVoters: true,\n      });\n    }\n    // eslint-disable-next-line\n  }, [answerVote.votersCount, areVotersLoaded]);\n\n  const handleViewMoreClick = useCallback(() => {\n    setIsLoading(true);\n    loadPollOptionResults({\n      chat, messageId: message.id, option, offset, limit: VIEW_MORE_LIMIT,\n    });\n  }, [chat, loadPollOptionResults, message.id, offset, option]);\n\n  useEffect(() => {\n    setIsLoading(false);\n  }, [voters]);\n\n  const handleMemberClick = useCallback((id: string) => {\n    openChat({ id });\n    closePollResults();\n  }, [closePollResults, openChat]);\n\n  function renderViewMoreButton() {\n    const leftVotersCount = answerVote.votersCount - voters!.length;\n\n    return answerVote.votersCount > INITIAL_LIMIT && leftVotersCount > 0 && (\n      <ShowMoreButton\n        count={leftVotersCount}\n        itemName=\"voter\"\n        isLoading={isLoading}\n        onClick={handleViewMoreClick}\n      />\n    );\n  }\n\n  return (\n    <div className=\"PollAnswerResults\">\n      <div className=\"poll-voters\">\n        {voters\n          ? voters.map((id) => (\n            <ListItem\n              key={id}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleMemberClick(id)}\n            >\n              <PrivateChatInfo\n                avatarSize=\"tiny\"\n                userId={id}\n                forceShowSelf\n                noStatusOrTyping\n              />\n            </ListItem>\n          ))\n          : <Loading />}\n        {voters && renderViewMoreButton()}\n      </div>\n      <div className=\"answer-head\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <span className=\"answer-title\" dir=\"auto\">{text}</span>\n        <span className=\"answer-percent\" dir={lang.isRtl ? 'auto' : undefined}>\n          {getPercentage(answerVote.votersCount, totalVoters)}%\n        </span>\n      </div>\n    </div>\n  );\n};\n\nfunction getPercentage(value: number, total: number) {\n  return total > 0 ? ((value / total) * 100).toFixed() : 0;\n}\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { answer }: OwnProps): StateProps => {\n    const { voters, offsets } = global.pollResults;\n\n    return {\n      voters: voters?.[answer.option],\n      offset: (offsets?.[answer.option]) || '',\n    };\n  },\n)(PollAnswerResults));\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { ApiMessage, ApiChat } from '../../api/types';\nimport { selectChat, selectChatMessage } from '../../global/selectors';\nimport { buildCollectionByKey } from '../../util/iteratees';\nimport { getMessagePoll } from '../../global/helpers';\nimport renderText from '../common/helpers/renderText';\nimport useLang from '../../hooks/useLang';\nimport useHistoryBack from '../../hooks/useHistoryBack';\n\nimport PollAnswerResults from './PollAnswerResults';\nimport Loading from '../ui/Loading';\n\nimport './PollResults.scss';\n\ntype OwnProps = {\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  message?: ApiMessage;\n  lastSyncTime?: number;\n};\n\nconst PollResults: FC<OwnProps & StateProps> = ({\n  onClose,\n  isActive,\n  chat,\n  message,\n  lastSyncTime,\n}) => {\n  const lang = useLang();\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  if (!message || !chat) {\n    return <Loading />;\n  }\n\n  const { summary, results } = getMessagePoll(message)!;\n  if (!results.results) {\n    return undefined;\n  }\n\n  const resultsByOption = buildCollectionByKey(results.results, 'option');\n\n  return (\n    <div className=\"PollResults\" dir={lang.isRtl ? 'rtl' : undefined}>\n      <h3 className=\"poll-question\" dir=\"auto\">{renderText(summary.question, ['emoji', 'br'])}</h3>\n      <div className=\"poll-results-list custom-scroll\">\n        {lastSyncTime && summary.answers.map((answer) => (\n          <PollAnswerResults\n            key={`${message.id}-${answer.option}`}\n            chat={chat}\n            message={message}\n            answer={answer}\n            answerVote={resultsByOption[answer.option]}\n            totalVoters={results.totalVoters!}\n          />\n        ))}\n        {!lastSyncTime && <Loading />}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal(\n  (global): StateProps => {\n    const {\n      pollResults: { chatId, messageId },\n      lastSyncTime,\n    } = global;\n\n    if (!chatId || !messageId) {\n      return {};\n    }\n\n    const chat = selectChat(global, chatId);\n    const message = selectChatMessage(global, chatId, messageId);\n\n    return {\n      chat,\n      message,\n      lastSyncTime,\n    };\n  },\n)(PollResults));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport {\n  selectChat, selectNotifyExceptions, selectNotifySettings, selectUser,\n} from '../../../global/selectors';\nimport { selectIsChatMuted } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  userId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  progress?: ManagementProgress;\n  isMuted?: boolean;\n};\n\nconst ERROR_FIRST_NAME_MISSING = 'Please provide first name';\n\nconst ManageUser: FC<OwnProps & StateProps> = ({\n  userId,\n  user,\n  progress,\n  isMuted,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateContact,\n    deleteContact,\n    closeManagement,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [error, setError] = useState<string | undefined>();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const currentFirstName = user ? (user.firstName || '') : '';\n  const currentLastName = user ? (user.lastName || '') : '';\n\n  const [firstName, setFirstName] = useState(currentFirstName);\n  const [lastName, setLastName] = useState(currentLastName);\n  const [isNotificationsEnabled, setIsNotificationsEnabled] = useState(!isMuted);\n\n  useEffect(() => {\n    setIsNotificationsEnabled(!isMuted);\n  }, [isMuted]);\n\n  useEffect(() => {\n    setIsProfileFieldsTouched(false);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, userId]);\n\n  useEffect(() => {\n    setFirstName(currentFirstName);\n    setLastName(currentLastName);\n  }, [currentFirstName, currentLastName, user]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n      closeDeleteDialog();\n    }\n  }, [closeDeleteDialog, progress]);\n\n  const handleFirstNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setFirstName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleLastNameChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setLastName(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleNotificationChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsNotificationsEnabled(e.target.checked);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleProfileSave = useCallback(() => {\n    const trimmedFirstName = firstName.trim();\n    const trimmedLastName = lastName.trim();\n\n    if (!trimmedFirstName.length) {\n      setError(ERROR_FIRST_NAME_MISSING);\n    }\n\n    updateContact({\n      userId,\n      isMuted: !isNotificationsEnabled,\n      firstName: trimmedFirstName,\n      lastName: trimmedLastName,\n    });\n  }, [firstName, lastName, updateContact, userId, isNotificationsEnabled]);\n\n  const handleDeleteContact = useCallback(() => {\n    deleteContact({ userId });\n    closeDeleteDialog();\n    closeManagement();\n  }, [closeDeleteDialog, closeManagement, deleteContact, userId]);\n\n  if (!user) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <PrivateChatInfo\n            userId={user.id}\n            avatarSize=\"jumbo\"\n            status=\"original name\"\n            withFullInfo\n          />\n          <InputText\n            id=\"user-first-name\"\n            label={lang('UserInfo.FirstNamePlaceholder')}\n            onChange={handleFirstNameChange}\n            value={firstName}\n            error={error === ERROR_FIRST_NAME_MISSING ? error : undefined}\n          />\n          <InputText\n            id=\"user-last-name\"\n            label={lang('UserInfo.LastNamePlaceholder')}\n            onChange={handleLastNameChange}\n            value={lastName}\n          />\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isNotificationsEnabled}\n              label={lang('Notifications')}\n              subLabel={lang(isNotificationsEnabled\n                ? 'UserInfo.NotificationsEnabled'\n                : 'UserInfo.NotificationsDisabled')}\n              onChange={handleNotificationChange}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteContact')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleProfileSave}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={lang('AreYouSureDeleteContact')}\n        confirmLabel={lang('DeleteContact')}\n        confirmHandler={handleDeleteContact}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n    const chat = selectChat(global, userId)!;\n    const { progress } = global.management;\n    const isMuted = selectIsChatMuted(chat, selectNotifySettings(global), selectNotifyExceptions(global));\n\n    return {\n      user, progress, isMuted,\n    };\n  },\n)(ManageUser));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight, isChatBasicGroup } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport { selectChat } from '../../../global/selectors';\nimport { formatInteger } from '../../../util/textFormat';\nimport renderText from '../../common/helpers/renderText';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isBasicGroup: boolean;\n  hasLinkedChannel: boolean;\n  canChangeInfo?: boolean;\n  canBanUsers?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst GROUP_TITLE_EMPTY = 'Group title can\\'t be empty';\n\n// Some checkboxes control multiple rights, and some rights are not controlled from Permissions screen,\n// so we need to define the amount manually\nconst TOTAL_PERMISSIONS_COUNT = 8;\n\nconst ManageGroup: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isBasicGroup,\n  hasLinkedChannel,\n  canChangeInfo,\n  canBanUsers,\n  canInvite,\n  onScreenSelect,\n  onClose,\n  isActive,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n}) => {\n  const {\n    togglePreHistoryHidden,\n    updateChat,\n    deleteChat,\n    leaveChannel,\n    deleteChannel,\n    closeManagement,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const currentTitle = chat.title;\n  const currentAbout = chat.fullInfo ? (chat.fullInfo.about || '') : '';\n\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle || '');\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const isPublicGroup = chat.username || hasLinkedChannel;\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime && canInvite) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, canInvite, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickPermissions = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupPermissions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateGroup = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(GROUP_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleClickMembers = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupMembers);\n  }, [onScreenSelect]);\n\n  const handleTogglePreHistory = useCallback(() => {\n    if (!chat.fullInfo) {\n      return;\n    }\n\n    const { isPreHistoryHidden } = chat.fullInfo;\n\n    togglePreHistoryHidden({ chatId: chat.id, isEnabled: !isPreHistoryHidden });\n  }, [chat, togglePreHistoryHidden]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  const enabledPermissionsCount = useMemo(() => {\n    if (!chat.defaultBannedRights) {\n      return 0;\n    }\n\n    let totalCount = [\n      'sendMessages',\n      'sendMedia',\n      'embedLinks',\n      'sendPolls',\n      'changeInfo',\n      'inviteUsers',\n      'pinMessages',\n    ].filter(\n      (key) => !chat.defaultBannedRights![key as keyof ApiChatBannedRights],\n    ).length;\n\n    const { sendStickers, sendGifs } = chat.defaultBannedRights;\n\n    // These two rights are controlled with a single checkbox\n    if (!sendStickers && !sendGifs) {\n      totalCount += 1;\n    }\n\n    return totalCount;\n  }, [chat]);\n\n  const adminsCount = (chat.fullInfo?.adminMembers?.length) || 0;\n\n  const handleDeleteGroup = useCallback(() => {\n    if (isBasicGroup) {\n      deleteChat({ chatId: chat.id });\n    } else if (!chat.isCreator) {\n      leaveChannel({ chatId: chat.id });\n    } else {\n      deleteChannel({ chatId: chat.id });\n    }\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [\n    isBasicGroup, chat.isCreator, chat.id,\n    closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, deleteChat, openChat,\n  ]);\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-title\"\n            label={lang('GroupName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === GROUP_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"group-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('GroupType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          {hasLinkedChannel && (\n            <ListItem\n              icon=\"message\"\n              multiline\n              onClick={handleClickDiscussion}\n            >\n              <span className=\"title\">{lang('LinkedChannel')}</span>\n              <span className=\"subtitle\">{lang('DiscussionUnlink')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"permissions\"\n            multiline\n            onClick={handleClickPermissions}\n            disabled={!canBanUsers}\n          >\n            <span className=\"title\">{lang('ChannelPermissions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledPermissionsCount}/{TOTAL_PERMISSIONS_COUNT}\n            </span>\n          </ListItem>\n\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{formatInteger(adminsCount)}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('MemberRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"group\" multiline onClick={handleClickMembers}>\n            <span className=\"title\">{lang('GroupMembers')}</span>\n            <span className=\"subtitle\">{formatInteger(chat.membersCount ?? 0)}</span>\n          </ListItem>\n\n          {!isPublicGroup && chat.fullInfo && (\n            <div className=\"ListItem narrow no-selection\">\n              <Checkbox\n                checked={!chat.fullInfo.isPreHistoryHidden}\n                label={lang('ChatHistory')}\n                onChange={handleTogglePreHistory}\n                disabled={!canBanUsers}\n              />\n            </div>\n          )}\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {lang('DeleteMega')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateGroup}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        textParts={renderText(\n          isBasicGroup || !chat.isCreator\n            ? lang('AreYouSureDeleteAndExit')\n            : lang('AreYouSureDeleteThisChatWithGroup', chat.title),\n          ['br', 'simple_markdown'],\n        )}\n        confirmLabel={isBasicGroup || !chat.isCreator ? lang('DeleteMega') : lang('DeleteGroupForAll')}\n        confirmHandler={handleDeleteGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const hasLinkedChannel = Boolean(chat.fullInfo?.linkedChatId);\n    const isBasicGroup = isChatBasicGroup(chat);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isBasicGroup,\n      hasLinkedChannel,\n      canChangeInfo: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'changeInfo'),\n      canBanUsers: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'banUsers'),\n      canInvite: isBasicGroup ? chat.isCreator : getHasAdminRight(chat, 'inviteUsers'),\n      exportedInvites: invites,\n      lastSyncTime: global.lastSyncTime,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageGroup));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatBannedRights, ApiChatMember } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  currentUserId?: string;\n};\n\nconst FLOATING_BUTTON_ANIMATION_TIMEOUT_MS = 250;\n\nfunction getLangKeyForBannedRightKey(key: string) {\n  switch (key) {\n    case 'sendMessages':\n      return 'UserRestrictionsNoSend';\n    case 'sendMedia':\n      return 'UserRestrictionsNoSendMedia';\n    case 'sendStickers':\n      return 'UserRestrictionsNoSendStickers';\n    case 'embedLinks':\n      return 'UserRestrictionsNoEmbedLinks';\n    case 'sendPolls':\n      return 'UserRestrictionsNoSendPolls';\n    case 'changeInfo':\n      return 'UserRestrictionsNoChangeInfo';\n    case 'inviteUsers':\n      return 'UserRestrictionsInviteUsers';\n    case 'pinMessages':\n      return 'UserRestrictionsPinMessages';\n    default:\n      return undefined;\n  }\n}\n\nconst ManageGroupPermissions: FC<OwnProps & StateProps> = ({\n  onScreenSelect,\n  onChatMemberSelect,\n  chat,\n  currentUserId,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatDefaultBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleAddExceptionClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupUserPermissionsCreate);\n  }, [onScreenSelect]);\n\n  const handleExceptionMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  useEffect(() => {\n    setPermissions((chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setTimeout(() => {\n      setIsLoading(false);\n    }, FLOATING_BUTTON_ANIMATION_TIMEOUT_MS);\n  }, [chat]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatDefaultBannedRights({ chatId: chat.id, bannedRights: permissions });\n  }, [chat, permissions, updateChatDefaultBannedRights]);\n\n  const removedUsersCount = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return 0;\n    }\n\n    return chat.fullInfo.kickedMembers.length;\n  }, [chat]);\n\n  const exceptionMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return [];\n    }\n\n    return chat.fullInfo.members.filter(({ bannedRights }) => Boolean(bannedRights));\n  }, [chat]);\n\n  const getMemberExceptions = useCallback((member: ApiChatMember) => {\n    const { bannedRights } = member;\n    if (!bannedRights || !chat) {\n      return undefined;\n    }\n\n    const { defaultBannedRights } = chat;\n\n    return Object.keys(bannedRights).reduce((result, key) => {\n      if (\n        !bannedRights[key as keyof ApiChatBannedRights]\n        || (defaultBannedRights?.[key as keyof ApiChatBannedRights])\n        || key === 'sendInline' || key === 'viewMessages' || key === 'sendGames'\n      ) {\n        return result;\n      }\n\n      const langKey = getLangKeyForBannedRightKey(key);\n\n      if (!langKey) {\n        return result;\n      }\n\n      const translatedString = lang(langKey);\n\n      return `${result}${!result.length ? translatedString : `, ${translatedString}`}`;\n    }, '');\n  }, [chat, lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('ChannelPermissionsHeader')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        <div className=\"section\">\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\">\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('PrivacyExceptions')}</h3>\n\n          <ListItem\n            icon=\"add-user\"\n            onClick={handleAddExceptionClick}\n          >\n            {lang('ChannelAddException')}\n          </ListItem>\n\n          {exceptionMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable exceptions-member\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleExceptionMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberExceptions(member)}\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat, currentUserId: global.currentUserId };\n  },\n)(ManageGroupPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  useMemo, useState, memo, useRef, useCallback,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { filterUsersByName } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\n\nimport ChatOrUserPicker from '../../common/ChatOrUserPicker';\n\nexport type OwnProps = {\n  chat: ApiChat;\n  isOpen: boolean;\n  onClose: NoneToVoidFunction;\n};\n\ntype StateProps = {\n  currentUserId?: string;\n};\n\nconst RemoveGroupUserModal: FC<OwnProps & StateProps> = ({\n  chat,\n  currentUserId,\n  isOpen,\n  onClose,\n}) => {\n  const {\n    loadMoreMembers,\n    deleteChatMember,\n  } = getActions();\n\n  const lang = useLang();\n  const [filter, setFilter] = useState('');\n  // eslint-disable-next-line no-null/no-null\n  const filterRef = useRef<HTMLInputElement>(null);\n\n  const usersId = useMemo(() => {\n    const availableMemberIds = (chat.fullInfo?.members || [])\n      .reduce((acc: string[], member) => {\n        if (!member.isAdmin && !member.isOwner && member.userId !== currentUserId) {\n          acc.push(member.userId);\n        }\n        return acc;\n      }, []);\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n\n    return filterUsersByName(availableMemberIds, usersById, filter);\n  }, [chat.fullInfo?.members, currentUserId, filter]);\n\n  const handleRemoveUser = useCallback((userId: string) => {\n    deleteChatMember({ chatId: chat.id, userId });\n    onClose();\n  }, [chat.id, deleteChatMember, onClose]);\n\n  return (\n    <ChatOrUserPicker\n      isOpen={isOpen}\n      chatOrUserIds={usersId}\n      filterRef={filterRef}\n      filterPlaceholder={lang('ChannelBlockUser')}\n      filter={filter}\n      onFilterChange={setFilter}\n      loadMore={loadMoreMembers}\n      onSelectChatOrUser={handleRemoveUser}\n      onClose={onClose}\n    />\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { currentUserId } = global;\n\n    return { currentUserId };\n  },\n)(RemoveGroupUserModal));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember, ApiUser } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getHasAdminRight, getUserFullName, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useFlag from '../../../hooks/useFlag';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport RemoveGroupUserModal from './RemoveGroupUserModal';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  usersById: Record<string, ApiUser>;\n  canDeleteMembers?: boolean;\n  isChannel?: boolean;\n};\n\nconst ManageChatRemovedUsers: FC<OwnProps & StateProps> = ({\n  chat,\n  usersById,\n  canDeleteMembers,\n  isChannel,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const lang = useLang();\n  const [isRemoveUserModalOpen, openRemoveUserModal, closeRemoveUserModal] = useFlag();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const removedMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.kickedMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.kickedMembers;\n  }, [chat]);\n\n  const getRemovedBy = useCallback((member: ApiChatMember) => {\n    if (!member.kickedByUserId) {\n      return undefined;\n    }\n\n    const kickedByUser = usersById[member.kickedByUserId];\n    if (!kickedByUser) {\n      return undefined;\n    }\n\n    return lang('UserRemovedBy', getUserFullName(kickedByUser));\n  }, [lang, usersById]);\n\n  const getContextActions = useCallback((member: ApiChatMember) => {\n    if (!chat) {\n      return undefined;\n    }\n\n    return [{\n      title: lang('Unblock'),\n      icon: 'delete',\n      destructive: true,\n      handler: () => updateChatMemberBannedRights({\n        chatId: chat.id,\n        userId: member.userId,\n        bannedRights: {},\n      }),\n    }];\n  }, [lang, chat, updateChatMemberBannedRights]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\">{lang(isChannel ? 'NoBlockedChannel2' : 'NoBlockedGroup2')}</p>\n\n          {removedMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              ripple\n              contextActions={getContextActions(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getRemovedBy(member)}\n              />\n            </ListItem>\n          ))}\n          {canDeleteMembers && (\n            <FloatingActionButton\n              isShown\n              onClick={openRemoveUserModal}\n              ariaLabel={lang('Channel.EditAdmin.Permission.BanUsers')}\n            >\n              <i className=\"icon-add-user-filled\" />\n            </FloatingActionButton>\n          )}\n          {chat && canDeleteMembers && (\n            <RemoveGroupUserModal\n              chat={chat}\n              isOpen={isRemoveUserModalOpen}\n              onClose={closeRemoveUserModal}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById } = global.users;\n    const canDeleteMembers = chat && (getHasAdminRight(chat, 'banUsers') || chat.isCreator);\n\n    return {\n      chat,\n      usersById,\n      canDeleteMembers,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageChatRemovedUsers));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport { ManagementScreens, ManagementProgress } from '../../../types';\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ApiMediaFormat } from '../../../api/types';\n\nimport { getChatAvatarHash, getHasAdminRight } from '../../../global/helpers';\nimport useMedia from '../../../hooks/useMedia';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { formatInteger } from '../../../util/textFormat';\n\nimport AvatarEditable from '../../ui/AvatarEditable';\nimport InputText from '../../ui/InputText';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\nimport './Management.scss';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  progress?: ManagementProgress;\n  isSignaturesShown: boolean;\n  canChangeInfo?: boolean;\n  canInvite?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  lastSyncTime?: number;\n  availableReactionsCount?: number;\n};\n\nconst CHANNEL_TITLE_EMPTY = 'Channel title can\\'t be empty';\n\nconst ManageChannel: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  progress,\n  isSignaturesShown,\n  canChangeInfo,\n  canInvite,\n  exportedInvites,\n  lastSyncTime,\n  availableReactionsCount,\n  onScreenSelect,\n  onClose,\n  isActive,\n}) => {\n  const {\n    updateChat,\n    toggleSignatures,\n    closeManagement,\n    leaveChannel,\n    deleteChannel,\n    openChat,\n    loadExportedChatInvites,\n    loadChatJoinRequests,\n  } = getActions();\n\n  const currentTitle = chat ? (chat.title || '') : '';\n  const currentAbout = chat?.fullInfo ? (chat.fullInfo.about || '') : '';\n  const hasLinkedChat = chat?.fullInfo?.linkedChatId;\n\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [isProfileFieldsTouched, setIsProfileFieldsTouched] = useState(false);\n  const [title, setTitle] = useState(currentTitle);\n  const [about, setAbout] = useState(currentAbout);\n  const [photo, setPhoto] = useState<File | undefined>();\n  const [error, setError] = useState<string | undefined>();\n  const imageHash = chat && getChatAvatarHash(chat);\n  const currentAvatarBlobUrl = useMedia(imageHash, false, ApiMediaFormat.BlobUrl);\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (lastSyncTime) {\n      loadExportedChatInvites({ chatId });\n      loadExportedChatInvites({ chatId, isRevoked: true });\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chatId, loadExportedChatInvites, lastSyncTime, loadChatJoinRequests]);\n\n  useEffect(() => {\n    if (progress === ManagementProgress.Complete) {\n      setIsProfileFieldsTouched(false);\n      setError(undefined);\n    }\n  }, [progress]);\n\n  const adminsCount = (chat?.fullInfo?.adminMembers?.length) || 0;\n  const removedUsersCount = (chat?.fullInfo?.kickedMembers?.length) || 0;\n\n  const handleClickEditType = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatPrivacyType);\n  }, [onScreenSelect]);\n\n  const handleClickDiscussion = useCallback(() => {\n    onScreenSelect(ManagementScreens.Discussion);\n  }, [onScreenSelect]);\n\n  const handleClickReactions = useCallback(() => {\n    onScreenSelect(ManagementScreens.Reactions);\n  }, [onScreenSelect]);\n\n  const handleClickAdministrators = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChatAdministrators);\n  }, [onScreenSelect]);\n\n  const handleClickInvites = useCallback(() => {\n    onScreenSelect(ManagementScreens.Invites);\n  }, [onScreenSelect]);\n\n  const handleClickRequests = useCallback(() => {\n    onScreenSelect(ManagementScreens.JoinRequests);\n  }, [onScreenSelect]);\n\n  const handleSetPhoto = useCallback((file: File) => {\n    setPhoto(file);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleAboutChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setAbout(e.target.value);\n    setIsProfileFieldsTouched(true);\n  }, []);\n\n  const handleUpdateChannel = useCallback(() => {\n    const trimmedTitle = title.trim();\n    const trimmedAbout = about.trim();\n\n    if (!trimmedTitle.length) {\n      setError(CHANNEL_TITLE_EMPTY);\n      return;\n    }\n\n    updateChat({\n      chatId,\n      title: trimmedTitle,\n      about: trimmedAbout,\n      photo,\n    });\n  }, [about, chatId, photo, title, updateChat]);\n\n  const handleToggleSignatures = useCallback(() => {\n    toggleSignatures({ chatId, isEnabled: !isSignaturesShown });\n  }, [chatId, isSignaturesShown, toggleSignatures]);\n\n  const handleClickSubscribers = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelSubscribers);\n  }, [onScreenSelect]);\n\n  const handleRemovedUsersClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.ChannelRemovedUsers);\n  }, [onScreenSelect]);\n\n  const handleDeleteChannel = useCallback(() => {\n    if (chat.isCreator) {\n      deleteChannel({ chatId: chat.id });\n    } else {\n      leaveChannel({ chatId: chat.id });\n    }\n\n    closeDeleteDialog();\n    closeManagement();\n    openChat({ id: undefined });\n  }, [chat.isCreator, chat.id, closeDeleteDialog, closeManagement, leaveChannel, deleteChannel, openChat]);\n\n  const enabledReactionsCount = chat.fullInfo?.enabledReactions?.length || 0;\n\n  if (chat.isRestricted || chat.isForbidden) {\n    return undefined;\n  }\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AvatarEditable\n            currentAvatarBlobUrl={currentAvatarBlobUrl}\n            onChange={handleSetPhoto}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-title\"\n            label={lang('EnterChannelName')}\n            onChange={handleTitleChange}\n            value={title}\n            error={error === CHANNEL_TITLE_EMPTY ? error : undefined}\n            disabled={!canChangeInfo}\n          />\n          <InputText\n            id=\"channel-about\"\n            className=\"mb-2\"\n            label={lang('DescriptionPlaceholder')}\n            onChange={handleAboutChange}\n            value={about}\n            disabled={!canChangeInfo}\n          />\n          {chat.isCreator && (\n            <ListItem icon=\"lock\" multiline onClick={handleClickEditType}>\n              <span className=\"title\">{lang('ChannelType')}</span>\n              <span className=\"subtitle\">{chat.username ? lang('TypePublic') : lang('TypePrivate')}</span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"message\"\n            multiline\n            onClick={handleClickDiscussion}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Discussion')}</span>\n            <span className=\"subtitle\">{hasLinkedChat ? lang('DiscussionUnlink') : lang('Add')}</span>\n          </ListItem>\n          {canInvite && (\n            <ListItem\n              icon=\"link\"\n              onClick={handleClickInvites}\n              multiline\n              disabled={!exportedInvites}\n            >\n              <span className=\"title\">{lang('GroupInfo.InviteLinks')}</span>\n              <span className=\"subtitle\">\n                {exportedInvites ? formatInteger(exportedInvites.length) : lang('Loading')}\n              </span>\n            </ListItem>\n          )}\n          {Boolean(chat.joinRequests?.length) && (\n            <ListItem\n              icon=\"add-user-filled\"\n              onClick={handleClickRequests}\n              multiline\n            >\n              <span className=\"title\">{lang('SubscribeRequests')}</span>\n              <span className=\"subtitle\">\n                {formatInteger(chat.joinRequests!.length)}\n              </span>\n            </ListItem>\n          )}\n          <ListItem\n            icon=\"heart-outline\"\n            multiline\n            onClick={handleClickReactions}\n            disabled={!canChangeInfo}\n          >\n            <span className=\"title\">{lang('Reactions')}</span>\n            <span className=\"subtitle\" dir=\"auto\">\n              {enabledReactionsCount}/{availableReactionsCount}\n            </span>\n          </ListItem>\n          <div className=\"ListItem no-selection narrow\">\n            <Checkbox\n              checked={isSignaturesShown}\n              label={lang('ChannelSignMessages')}\n              onChange={handleToggleSignatures}\n            />\n          </div>\n        </div>\n        <div className=\"section\">\n          <ListItem\n            icon=\"admin\"\n            multiline\n            onClick={handleClickAdministrators}\n          >\n            <span className=\"title\">{lang('ChannelAdministrators')}</span>\n            <span className=\"subtitle\">{adminsCount}</span>\n          </ListItem>\n          <ListItem\n            icon=\"group\"\n            multiline\n            onClick={handleClickSubscribers}\n          >\n            <span className=\"title\" dir=\"auto\">{lang('ChannelSubscribers')}</span>\n            <span className=\"subtitle\" dir=\"auto\">{lang('Subscribers', chat.membersCount ?? 0, 'i')}</span>\n          </ListItem>\n          <ListItem\n            icon=\"delete-user\"\n            multiline\n            narrow\n            onClick={handleRemovedUsersClick}\n          >\n            <span className=\"title\">{lang('ChannelBlockedUsers')}</span>\n            <span className=\"subtitle\">{removedUsersCount}</span>\n          </ListItem>\n        </div>\n        <div className=\"section\">\n          <ListItem icon=\"delete\" ripple destructive onClick={openDeleteDialog}>\n            {chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n          </ListItem>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={isProfileFieldsTouched}\n        onClick={handleUpdateChannel}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        text={chat.isCreator ? lang('ChannelDeleteAlert') : lang('ChannelLeaveAlert')}\n        confirmLabel={chat.isCreator ? lang('ChannelDelete') : lang('LeaveChannel')}\n        confirmHandler={handleDeleteChannel}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { progress } = global.management;\n    const isSignaturesShown = Boolean(chat?.isSignaturesShown);\n    const { invites } = global.management.byChatId[chatId] || {};\n\n    return {\n      chat,\n      progress,\n      isSignaturesShown,\n      canChangeInfo: getHasAdminRight(chat, 'changeInfo'),\n      canInvite: getHasAdminRight(chat, 'inviteUsers'),\n      lastSyncTime: global.lastSyncTime,\n      exportedInvites: invites,\n      availableReactionsCount: global.availableReactions?.filter((l) => !l.isInactive).length,\n    };\n  },\n)(ManageChannel));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementProgress } from '../../../types';\n\nimport { selectChat, selectManagement } from '../../../global/selectors';\nimport { isChatChannel } from '../../../global/helpers';\nimport useFlag from '../../../hooks/useFlag';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport SafeLink from '../../common/SafeLink';\nimport ListItem from '../../ui/ListItem';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Loading from '../../ui/Loading';\nimport Spinner from '../../ui/Spinner';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport UsernameInput from '../../common/UsernameInput';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype PrivacyType = 'private' | 'public';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  isChannel: boolean;\n  progress?: ManagementProgress;\n  isUsernameAvailable?: boolean;\n  isProtected?: boolean;\n};\n\nconst ManageChatPrivacyType: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  isChannel,\n  progress,\n  isUsernameAvailable,\n  isProtected,\n}) => {\n  const {\n    checkPublicLink,\n    updatePublicLink,\n    updatePrivateLink,\n    toggleIsProtected,\n  } = getActions();\n\n  const isPublic = Boolean(chat.username);\n  const privateLink = chat.fullInfo?.inviteLink;\n\n  const [privacyType, setPrivacyType] = useState<PrivacyType>(isPublic ? 'public' : 'private');\n  const [username, setUsername] = useState();\n  const [isRevokeConfirmDialogOpen, openRevokeConfirmDialog, closeRevokeConfirmDialog] = useFlag();\n\n  const canUpdate = Boolean(\n    (privacyType === 'public' && username && isUsernameAvailable)\n    || (privacyType === 'private' && isPublic),\n  );\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (privacyType && !privateLink) {\n      updatePrivateLink();\n    }\n  }, [privacyType, privateLink, updatePrivateLink]);\n\n  const handleOptionChange = useCallback((value: string) => {\n    setPrivacyType(value as PrivacyType);\n  }, []);\n\n  const handleForwardingOptionChange = useCallback((value: string) => {\n    toggleIsProtected({\n      chatId: chat.id,\n      isProtected: value === 'protected',\n    });\n  }, [chat.id, toggleIsProtected]);\n\n  const handleSave = useCallback(() => {\n    updatePublicLink({ username: privacyType === 'public' ? username : '' });\n  }, [privacyType, updatePublicLink, username]);\n\n  const handleRevokePrivateLink = useCallback(() => {\n    closeRevokeConfirmDialog();\n    updatePrivateLink();\n  }, [closeRevokeConfirmDialog, updatePrivateLink]);\n\n  const lang = useLang();\n  const langPrefix1 = isChannel ? 'Channel' : 'Mega';\n  const langPrefix2 = isChannel ? 'Channel' : 'Group';\n\n  const options = [\n    { value: 'private', label: lang(`${langPrefix1}Private`), subLabel: lang(`${langPrefix1}PrivateInfo`) },\n    { value: 'public', label: lang(`${langPrefix1}Public`), subLabel: lang(`${langPrefix1}PublicInfo`) },\n  ];\n\n  const forwardingOptions = [{\n    value: 'allowed',\n    label: lang('ChannelVisibility.Forwarding.Enabled'),\n  }, {\n    value: 'protected',\n    label: lang('ChannelVisibility.Forwarding.Disabled'),\n  }];\n\n  const isLoading = progress === ManagementProgress.InProgress;\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">{lang(`${langPrefix2}Type`)}</h3>\n          <RadioGroup\n            selected={privacyType}\n            name=\"channel-type\"\n            options={options}\n            onChange={handleOptionChange}\n          />\n        </div>\n        {privacyType === 'private' ? (\n          <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n            {privateLink ? (\n              <>\n                <SafeLink url={privateLink} className=\"group-link\" text={privateLink} />\n                <p className=\"section-info\" dir={lang.isRtl ? 'rtl' : undefined}>\n                  {lang(`${langPrefix1}PrivateLinkHelp`)}\n                </p>\n\n                <ListItem icon=\"delete\" ripple destructive onClick={openRevokeConfirmDialog}>\n                  {lang('RevokeLink')}\n                </ListItem>\n                <ConfirmDialog\n                  isOpen={isRevokeConfirmDialogOpen}\n                  onClose={closeRevokeConfirmDialog}\n                  text={lang('RevokeAlert')}\n                  confirmLabel={lang('RevokeButton')}\n                  confirmHandler={handleRevokePrivateLink}\n                  confirmIsDestructive\n                />\n              </>\n            ) : (\n              <Loading />\n            )}\n          </div>\n        ) : (\n          <div className=\"section no-border\">\n            <UsernameInput\n              asLink\n              currentUsername={chat.username}\n              isLoading={isLoading}\n              isUsernameAvailable={isUsernameAvailable}\n              checkUsername={checkPublicLink}\n              onChange={setUsername}\n            />\n            <p className=\"section-info\" dir=\"auto\">\n              {lang(`${langPrefix2}.Username.CreatePublicLinkHelp`)}\n            </p>\n          </div>\n        )}\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\">\n            {lang(isChannel ? 'ChannelVisibility.Forwarding.ChannelTitle' : 'ChannelVisibility.Forwarding.GroupTitle')}\n          </h3>\n          <RadioGroup\n            selected={isProtected ? 'protected' : 'allowed'}\n            name=\"forwarding-type\"\n            options={forwardingOptions}\n            onChange={handleForwardingOptionChange}\n          />\n          <p className=\"section-info\">\n            {isChannel\n              ? lang('ChannelVisibility.Forwarding.ChannelInfo')\n              : lang('ChannelVisibility.Forwarding.GroupInfo')}\n          </p>\n        </div>\n      </div>\n      <FloatingActionButton\n        isShown={canUpdate}\n        disabled={isLoading}\n        ariaLabel={lang('Save')}\n        onClick={handleSave}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { isUsernameAvailable } = selectManagement(global, chatId)!;\n\n    return {\n      chat,\n      isChannel: isChatChannel(chat),\n      progress: global.management.progress,\n      isUsernameAvailable,\n      isProtected: chat?.isProtected,\n    };\n  },\n)(ManageChatPrivacyType));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_DISCUSSION_GROUPS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport GroupChatInfo from '../../common/GroupChatInfo';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport useFlag from '../../../hooks/useFlag';\nimport renderText from '../../common/helpers/renderText';\nimport Avatar from '../../common/Avatar';\nimport { isChatChannel } from '../../../global/helpers';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  chatsByIds: Record<string, ApiChat>;\n  linkedChat?: ApiChat;\n  forDiscussionIds?: string[];\n  isChannel?: boolean;\n};\n\nconst ManageDiscussion: FC<OwnProps & StateProps> = ({\n  chat,\n  onClose,\n  isActive,\n  chatId,\n  chatsByIds,\n  linkedChat,\n  forDiscussionIds,\n  isChannel,\n  onScreenSelect,\n}) => {\n  const {\n    loadGroupsForDiscussion,\n    linkDiscussionGroup,\n    unlinkDiscussionGroup,\n  } = getActions();\n\n  const [linkedGroupId, setLinkedGroupId] = useState<string>();\n  const [isConfirmUnlinkGroupDialogOpen, openConfirmUnlinkGroupDialog, closeConfirmUnlinkGroupDialog] = useFlag();\n  const [isConfirmLinkGroupDialogOpen, openConfirmLinkGroupDialog, closeConfirmLinkGroupDialog] = useFlag();\n  const lang = useLang();\n  const linkedChatId = linkedChat?.id;\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    loadGroupsForDiscussion();\n  }, [loadGroupsForDiscussion]);\n\n  const handleUnlinkGroupSessions = useCallback(() => {\n    closeConfirmUnlinkGroupDialog();\n    unlinkDiscussionGroup({ channelId: isChannel ? chatId : linkedChatId });\n    if (!isChannel) {\n      onScreenSelect(ManagementScreens.Initial);\n    }\n  }, [closeConfirmUnlinkGroupDialog, unlinkDiscussionGroup, isChannel, chatId, linkedChatId, onScreenSelect]);\n\n  const handleLinkGroupSessions = useCallback(() => {\n    closeConfirmLinkGroupDialog();\n    linkDiscussionGroup({ channelId: chatId, chatId: linkedGroupId });\n  }, [closeConfirmLinkGroupDialog, linkDiscussionGroup, chatId, linkedGroupId]);\n\n  const onDiscussionClick = (groupId: string) => {\n    setLinkedGroupId(groupId);\n    openConfirmLinkGroupDialog();\n  };\n\n  function renderUnlinkGroupHeader() {\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedChat}\n        />\n        <div className=\"modal-title\">\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupHeader() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    return (\n      <div className=\"modal-header\">\n        <Avatar\n          size=\"tiny\"\n          chat={linkedGroup}\n        />\n        <div className=\"modal-title\">\n          {lang('Channel.DiscussionGroup.LinkGroup')}\n        </div>\n      </div>\n    );\n  }\n\n  function renderLinkGroupConfirmText() {\n    const linkedGroup = chatsByIds[linkedGroupId];\n\n    if (!linkedGroup) {\n      return undefined;\n    }\n\n    if (linkedGroup.hasPrivateLink) {\n      return renderText(\n        `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?`,\n        ['br', 'simple_markdown'],\n      );\n    }\n\n    return renderText(\n      // eslint-disable-next-line max-len\n      `Do you want to make **${linkedGroup.title}** the discussion board for **${chat!.title}**?\\n\\nAnyone from the channel will be able to see messages in this group.`,\n      ['br', 'simple_markdown'],\n    );\n  }\n\n  function renderLinkedGroup() {\n    return (\n      <div>\n        <ListItem\n          className=\"chat-item-clickable\"\n          inactive\n        >\n          <GroupChatInfo chatId={linkedChat!.id} />\n        </ListItem>\n        <ListItem\n          icon=\"delete\"\n          ripple\n          destructive\n          onClick={openConfirmUnlinkGroupDialog}\n        >\n          {lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n        </ListItem>\n        <ConfirmDialog\n          isOpen={isConfirmUnlinkGroupDialogOpen}\n          onClose={closeConfirmUnlinkGroupDialog}\n          header={renderUnlinkGroupHeader()}\n          textParts={renderText(\n            lang(isChannel ? 'DiscussionUnlinkChannelAlert' : 'DiscussionUnlinkGroupAlert', linkedChat!.title),\n            ['br', 'simple_markdown'],\n          )}\n          confirmLabel={lang(isChannel ? 'DiscussionUnlinkGroup' : 'DiscussionUnlinkChannel')}\n          confirmHandler={handleUnlinkGroupSessions}\n          confirmIsDestructive\n        />\n      </div>\n    );\n  }\n\n  function renderDiscussionGroups() {\n    return (\n      <div>\n        <p className=\"section-help\" dir=\"auto\">{lang('DiscussionChannelHelp')}</p>\n\n        <div teactFastList>\n          <ListItem\n            key=\"create-group\"\n            icon=\"group\"\n            ripple\n            teactOrderKey={0}\n            className=\"not-implemented\"\n          >\n            {lang('DiscussionCreateGroup')}\n          </ListItem>\n          {forDiscussionIds ? (\n            forDiscussionIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i + 1}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => {\n                  onDiscussionClick(id);\n                }}\n              >\n                <GroupChatInfo chatId={id} />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound key=\"nothing-found\" teactOrderKey={0} text=\"No discussion groups found\" />\n          )}\n        </div>\n        <p className=\"mt-4 mb-0 section-help\" dir=\"auto\">{lang('DiscussionChannelHelp2')}</p>\n        <ConfirmDialog\n          isOpen={isConfirmLinkGroupDialogOpen}\n          onClose={closeConfirmLinkGroupDialog}\n          header={renderLinkGroupHeader()}\n          textParts={renderLinkGroupConfirmText()}\n          confirmLabel={lang('DiscussionLinkGroup')}\n          confirmHandler={handleLinkGroupSessions}\n          isButtonsInOneRow\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.DiscussionGroups}\n            size={STICKER_SIZE_DISCUSSION_GROUPS}\n            className=\"section-icon\"\n          />\n          {linkedChat && renderLinkedGroup()}\n          {!linkedChat && renderDiscussionGroups()}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { forDiscussionIds, byId: chatsByIds } = global.chats;\n    const linkedChat = chat?.fullInfo?.linkedChatId\n      ? selectChat(global, chat.fullInfo.linkedChatId)\n      : undefined;\n\n    return {\n      chat,\n      chatsByIds,\n      forDiscussionIds,\n      linkedChat,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageDiscussion));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatBannedRights } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\n\ntype OwnProps = {\n  chatId: string;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isFormFullyDisabled?: boolean;\n};\n\nconst ManageGroupUserPermissions: FC<OwnProps & StateProps> = ({\n  chat,\n  selectedChatMemberId,\n  onScreenSelect,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatMemberBannedRights } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatBannedRights>({});\n  const [havePermissionChanged, setHavePermissionChanged] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isBanConfirmationDialogOpen, openBanConfirmationDialog, closeBanConfirmationDialog] = useFlag();\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.members) {\n      return undefined;\n    }\n\n    return chat.fullInfo.members.find(({ userId }) => userId === selectedChatMemberId);\n  }, [chat, selectedChatMemberId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedChatMemberId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.GroupPermissions);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedChatMemberId]);\n\n  useEffect(() => {\n    setPermissions((selectedChatMember?.bannedRights) || (chat?.defaultBannedRights) || {});\n    setHavePermissionChanged(false);\n    setIsLoading(false);\n  }, [chat, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as Exclude<keyof ApiChatBannedRights, 'untilDate'>]),\n      ...(name === 'sendStickers' && {\n        sendGifs: getUpdatedPermissionValue(p[name]),\n      }),\n    }));\n    setHavePermissionChanged(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: permissions,\n    });\n  }, [chat, selectedChatMemberId, permissions, updateChatMemberBannedRights]);\n\n  const handleBanFromGroup = useCallback(() => {\n    if (!chat || !selectedChatMemberId) {\n      return;\n    }\n\n    updateChatMemberBannedRights({\n      chatId: chat.id,\n      userId: selectedChatMemberId,\n      bannedRights: {\n        viewMessages: true,\n      },\n    });\n  }, [chat, selectedChatMemberId, updateChatMemberBannedRights]);\n\n  const getControlIsDisabled = useCallback((key: Exclude<keyof ApiChatBannedRights, 'untilDate'>) => {\n    if (isFormFullyDisabled) {\n      return true;\n    }\n\n    if (!chat || !chat.defaultBannedRights) {\n      return false;\n    }\n\n    return chat.defaultBannedRights[key];\n  }, [chat, isFormFullyDisabled]);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo userId={selectedChatMember.userId} />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('UserRestrictionsCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMessages\"\n              checked={!permissions.sendMessages}\n              label={lang('UserRestrictionsSend')}\n              blocking\n              disabled={getControlIsDisabled('sendMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendMedia\"\n              checked={!permissions.sendMedia}\n              label={lang('UserRestrictionsSendMedia')}\n              blocking\n              disabled={getControlIsDisabled('sendMedia')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendStickers\"\n              checked={!permissions.sendStickers && !permissions.sendGifs}\n              label={lang('UserRestrictionsSendStickers')}\n              blocking\n              disabled={getControlIsDisabled('sendStickers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"sendPolls\"\n              checked={!permissions.sendPolls}\n              label={lang('UserRestrictionsSendPolls')}\n              blocking\n              disabled={getControlIsDisabled('sendPolls')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"embedLinks\"\n              checked={!permissions.embedLinks}\n              label={lang('UserRestrictionsEmbedLinks')}\n              blocking\n              disabled={getControlIsDisabled('embedLinks')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={!permissions.inviteUsers}\n              label={lang('UserRestrictionsInviteUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"pinMessages\"\n              checked={!permissions.pinMessages}\n              label={lang('UserRestrictionsPinMessages')}\n              blocking\n              disabled={getControlIsDisabled('pinMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!permissions.changeInfo}\n              label={lang('UserRestrictionsChangeInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n        </div>\n\n        {!isFormFullyDisabled && (\n          <div className=\"section\">\n            <ListItem icon=\"delete-user\" ripple destructive onClick={openBanConfirmationDialog}>\n              {lang('UserRestrictionsBlock')}\n            </ListItem>\n          </div>\n        )}\n      </div>\n\n      <FloatingActionButton\n        isShown={havePermissionChanged}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      <ConfirmDialog\n        isOpen={isBanConfirmationDialogOpen}\n        onClose={closeBanConfirmationDialog}\n        text=\"Are you sure you want to ban and remove this user from the group?\"\n        confirmLabel=\"Remove\"\n        confirmHandler={handleBanFromGroup}\n        confirmIsDestructive\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return { chat, isFormFullyDisabled };\n  },\n)(ManageGroupUserPermissions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { getGlobal, withGlobal } from '../../../global';\n\nimport { ManagementScreens } from '../../../types';\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\n\nimport { getUserFullName, isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  currentUserId?: string;\n  isChannel: boolean;\n};\n\nconst ManageChatAdministrators: FC<OwnProps & StateProps> = ({\n  chat,\n  isChannel,\n  currentUserId,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n}) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleRecentActionsClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupRecentActions);\n  }, [onScreenSelect]);\n\n  const adminMembers = useMemo(() => {\n    if (!chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const handleAdminMemberClick = useCallback((member: ApiChatMember) => {\n    onChatMemberSelect(member.userId, member.promotedByUserId === currentUserId);\n    onScreenSelect(ManagementScreens.ChatAdminRights);\n  }, [currentUserId, onChatMemberSelect, onScreenSelect]);\n\n  const handleAddAdminClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.GroupAddAdmins);\n  }, [onScreenSelect]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const promotedByUser = member.promotedByUserId ? usersById[member.promotedByUserId] : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem\n            icon=\"recent\"\n            multiline\n            onClick={handleRecentActionsClick}\n          >\n            <span className=\"title\">{lang('EventLog')}</span>\n            <span className=\"subtitle\">{lang(isChannel ? 'EventLogInfoDetailChannel' : 'EventLogInfoDetail')}</span>\n          </ListItem>\n        </div>\n\n        <div className=\"section\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <p className=\"text-muted\" dir=\"auto\">\n            {isChannel\n              ? 'You can add administrators to help you manage your channel.'\n              : 'You can add administrators to help you manage your group.'}\n          </p>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => handleAdminMemberClick(member)}\n            >\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n\n          <FloatingActionButton\n            isShown\n            onClick={handleAddAdminClick}\n            ariaLabel={lang('Channel.Management.AddModerator')}\n          >\n            <i className=\"icon-add-user-filled\" />\n          </FloatingActionButton>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      chat,\n      currentUserId: global.currentUserId,\n      isChannel: isChatChannel(chat),\n    };\n  },\n)(ManageChatAdministrators));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatMember } from '../../../api/types';\nimport useLang from '../../../hooks/useLang';\nimport { selectChat } from '../../../global/selectors';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n};\n\nconst ManageGroupRecentActions: FC<OwnProps & StateProps> = ({ chat, onClose, isActive }) => {\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const adminMembers = useMemo(() => {\n    if (!chat || !chat.fullInfo || !chat.fullInfo.adminMembers) {\n      return [];\n    }\n\n    return chat.fullInfo.adminMembers.sort((a, b) => {\n      if (a.isOwner) {\n        return -1;\n      } else if (b.isOwner) {\n        return 1;\n      }\n\n      return 0;\n    });\n  }, [chat]);\n\n  const getMemberStatus = useCallback((member: ApiChatMember) => {\n    if (member.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    return lang('ChannelAdmin');\n  }, [lang]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">Actions</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllEvents')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewAdmins')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterNewMembers')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterChannelInfo')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterDeletedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterEditedMessages')}\n              onChange={undefined}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogFilterLeavingMembers')}\n              onChange={undefined}\n            />\n          </div>\n        </div>\n\n        <div className=\"section not-implemented\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <h3 className=\"section-heading\" dir=\"auto\">{lang('Channel.Management.Title')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={!false}\n              label={lang('EventLogAllAdmins')}\n              onChange={undefined}\n            />\n          </div>\n\n          {adminMembers.map((member) => (\n            <ListItem\n              key={member.userId}\n              className=\"chat-item-clickable picker-list-item\"\n              onClick={undefined}\n              ripple\n            >\n              <Checkbox label=\"\" checked={!false} />\n              <PrivateChatInfo\n                userId={member.userId}\n                status={getMemberStatus(member)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return { chat };\n  },\n)(ManageGroupRecentActions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiChatAdminRights, ApiUser } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { getUserFullName, isChatBasicGroup, isChatChannel } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport InputText from '../../ui/InputText';\n\ntype OwnProps = {\n  chatId: string;\n  selectedUserId?: string;\n  isPromotedByCurrentUser?: boolean;\n  isNewAdmin?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat: ApiChat;\n  usersById: Record<string, ApiUser>;\n  currentUserId?: string;\n  isChannel: boolean;\n  isFormFullyDisabled: boolean;\n  defaultRights?: ApiChatAdminRights;\n};\n\nconst CUSTOM_TITLE_MAX_LENGTH = 16;\n\nconst ManageGroupAdminRights: FC<OwnProps & StateProps> = ({\n  isNewAdmin,\n  selectedUserId,\n  defaultRights,\n  onScreenSelect,\n  chat,\n  usersById,\n  currentUserId,\n  isChannel,\n  isFormFullyDisabled,\n  onClose,\n  isActive,\n}) => {\n  const { updateChatAdmin } = getActions();\n\n  const [permissions, setPermissions] = useState<ApiChatAdminRights>({});\n  const [isTouched, setIsTouched] = useState(Boolean(isNewAdmin));\n  const [isLoading, setIsLoading] = useState(false);\n  const [isDismissConfirmationDialogOpen, openDismissConfirmationDialog, closeDismissConfirmationDialog] = useFlag();\n  const [customTitle, setCustomTitle] = useState('');\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const selectedChatMember = useMemo(() => {\n    const selectedAdminMember = chat.fullInfo?.adminMembers?.find(({ userId }) => userId === selectedUserId);\n\n    // If `selectedAdminMember` variable is filled with a value, then we have already saved the administrator,\n    // so now we need to return to the list of administrators\n    if (isNewAdmin && (selectedAdminMember || !selectedUserId)) {\n      return undefined;\n    }\n\n    if (isNewAdmin) {\n      const user = getGlobal().users.byId[selectedUserId!];\n\n      return user ? {\n        userId: user.id,\n        adminRights: defaultRights,\n        customTitle: lang('ChannelAdmin'),\n        isOwner: false,\n        promotedByUserId: undefined,\n      } : undefined;\n    }\n\n    return selectedAdminMember;\n  }, [chat.fullInfo?.adminMembers, defaultRights, isNewAdmin, lang, selectedUserId]);\n\n  useEffect(() => {\n    if (chat?.fullInfo && selectedUserId && !selectedChatMember) {\n      onScreenSelect(ManagementScreens.ChatAdministrators);\n    }\n  }, [chat, onScreenSelect, selectedChatMember, selectedUserId]);\n\n  useEffect(() => {\n    setPermissions(selectedChatMember?.adminRights || {});\n    setCustomTitle((selectedChatMember?.customTitle || '').substr(0, CUSTOM_TITLE_MAX_LENGTH));\n    setIsTouched(Boolean(isNewAdmin));\n    setIsLoading(false);\n  }, [defaultRights, isNewAdmin, selectedChatMember]);\n\n  const handlePermissionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name } = e.target;\n\n    function getUpdatedPermissionValue(value: true | undefined) {\n      return value ? undefined : true;\n    }\n\n    setPermissions((p) => ({\n      ...p,\n      [name]: getUpdatedPermissionValue(p[name as keyof ApiChatAdminRights]),\n    }));\n    setIsTouched(true);\n  }, []);\n\n  const handleSavePermissions = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    setIsLoading(true);\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: permissions,\n      customTitle,\n    });\n  }, [selectedUserId, updateChatAdmin, chat.id, permissions, customTitle]);\n\n  const handleDismissAdmin = useCallback(() => {\n    if (!selectedUserId) {\n      return;\n    }\n\n    updateChatAdmin({\n      chatId: chat.id,\n      userId: selectedUserId,\n      adminRights: {},\n    });\n    closeDismissConfirmationDialog();\n  }, [chat.id, closeDismissConfirmationDialog, selectedUserId, updateChatAdmin]);\n\n  const getControlIsDisabled = useCallback((key: keyof ApiChatAdminRights) => {\n    if (isChatBasicGroup(chat)) {\n      return false;\n    }\n\n    if (isFormFullyDisabled || !chat.adminRights) {\n      return true;\n    }\n\n    return !chat.adminRights![key];\n  }, [chat, isFormFullyDisabled]);\n\n  const memberStatus = useMemo(() => {\n    if (isNewAdmin || !selectedChatMember) {\n      return undefined;\n    }\n\n    if (selectedChatMember.isOwner) {\n      return lang('ChannelCreator');\n    }\n\n    const promotedByUser = selectedChatMember.promotedByUserId\n      ? usersById[selectedChatMember.promotedByUserId]\n      : undefined;\n\n    if (promotedByUser) {\n      return lang('EditAdminPromotedBy', getUserFullName(promotedByUser));\n    }\n\n    return lang('ChannelAdmin');\n  }, [isNewAdmin, selectedChatMember, usersById, lang]);\n\n  const handleCustomTitleChange = useCallback((e) => {\n    const { value } = e.target;\n    setCustomTitle(value);\n    setIsTouched(true);\n  }, []);\n\n  if (!selectedChatMember) {\n    return undefined;\n  }\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <ListItem inactive className=\"chat-item-clickable\">\n            <PrivateChatInfo\n              userId={selectedChatMember.userId}\n              status={memberStatus}\n              forceShowSelf\n            />\n          </ListItem>\n\n          <h3 className=\"section-heading mt-4\" dir=\"auto\">{lang('EditAdminWhatCanDo')}</h3>\n\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"changeInfo\"\n              checked={Boolean(permissions.changeInfo)}\n              label={lang(isChannel ? 'EditAdminChangeChannelInfo' : 'EditAdminChangeGroupInfo')}\n              blocking\n              disabled={getControlIsDisabled('changeInfo')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"postMessages\"\n                checked={Boolean(permissions.postMessages)}\n                label={lang('EditAdminPostMessages')}\n                blocking\n                disabled={getControlIsDisabled('postMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          {isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"editMessages\"\n                checked={Boolean(permissions.editMessages)}\n                label={lang('EditAdminEditMessages')}\n                blocking\n                disabled={getControlIsDisabled('editMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"deleteMessages\"\n              checked={Boolean(permissions.deleteMessages)}\n              label={lang(isChannel ? 'EditAdminDeleteMessages' : 'EditAdminGroupDeleteMessages')}\n              blocking\n              disabled={getControlIsDisabled('deleteMessages')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"banUsers\"\n                checked={Boolean(permissions.banUsers)}\n                label={lang('EditAdminBanUsers')}\n                blocking\n                disabled={getControlIsDisabled('banUsers')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"inviteUsers\"\n              checked={Boolean(permissions.inviteUsers)}\n              label={lang('EditAdminAddUsers')}\n              blocking\n              disabled={getControlIsDisabled('inviteUsers')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"pinMessages\"\n                checked={Boolean(permissions.pinMessages)}\n                label={lang('EditAdminPinMessages')}\n                blocking\n                disabled={getControlIsDisabled('pinMessages')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"addAdmins\"\n              checked={Boolean(permissions.addAdmins)}\n              label={lang('EditAdminAddAdmins')}\n              blocking\n              disabled={getControlIsDisabled('addAdmins')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"manageCall\"\n              checked={Boolean(permissions.manageCall)}\n              label={lang('StartVoipChatPermission')}\n              blocking\n              disabled={getControlIsDisabled('manageCall')}\n              onChange={handlePermissionChange}\n            />\n          </div>\n          {!isChannel && (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name=\"anonymous\"\n                checked={Boolean(permissions.anonymous)}\n                label={lang('EditAdminSendAnonymously')}\n                blocking\n                disabled={getControlIsDisabled('anonymous')}\n                onChange={handlePermissionChange}\n              />\n            </div>\n          )}\n\n          {isFormFullyDisabled && (\n            <p className=\"section-info mb-4\" dir=\"auto\">\n              {lang('Channel.EditAdmin.CannotEdit')}\n            </p>\n          )}\n\n          {!isChannel && (\n            <InputText\n              id=\"admin-title\"\n              label={lang('EditAdminRank')}\n              onChange={handleCustomTitleChange}\n              value={customTitle}\n              disabled={isFormFullyDisabled}\n              maxLength={CUSTOM_TITLE_MAX_LENGTH}\n            />\n          )}\n\n          {currentUserId !== selectedUserId && !isFormFullyDisabled && !isNewAdmin && (\n            <ListItem icon=\"delete\" ripple destructive onClick={openDismissConfirmationDialog}>\n              {lang('EditAdminRemoveAdmin')}\n            </ListItem>\n          )}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSavePermissions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n\n      {!isNewAdmin && (\n        <ConfirmDialog\n          isOpen={isDismissConfirmationDialogOpen}\n          onClose={closeDismissConfirmationDialog}\n          text=\"Are you sure you want to dismiss this admin?\"\n          confirmLabel={lang('Channel.Admin.Dismiss')}\n          confirmHandler={handleDismissAdmin}\n          confirmIsDestructive\n        />\n      )}\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId, isPromotedByCurrentUser }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n    const { byId: usersById } = global.users;\n    const { currentUserId } = global;\n    const isChannel = isChatChannel(chat);\n    const isFormFullyDisabled = !(chat.isCreator || isPromotedByCurrentUser);\n\n    return {\n      chat,\n      usersById,\n      currentUserId,\n      isChannel,\n      isFormFullyDisabled,\n      defaultRights: chat.adminRights,\n    };\n  },\n)(ManageGroupAdminRights));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useRef,\n} from '../../../lib/teact/teact';\nimport { getActions, getGlobal, withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { unique } from '../../../util/iteratees';\nimport { selectChat } from '../../../global/selectors';\nimport {\n  sortUserIds, isChatChannel, filterUsersByName, sortChatIds, isUserBot,\n} from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useInfiniteScroll from '../../../hooks/useInfiniteScroll';\nimport useKeyboardListNavigation from '../../../hooks/useKeyboardListNavigation';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport NothingFound from '../../common/NothingFound';\nimport ListItem from '../../ui/ListItem';\nimport InputText from '../../ui/InputText';\nimport InfiniteScroll from '../../ui/InfiniteScroll';\nimport Loading from '../../ui/Loading';\n\ntype OwnProps = {\n  chatId: string;\n  isActive: boolean;\n  noAdmins?: boolean;\n  onClose: NoneToVoidFunction;\n  onScreenSelect?: (screen: ManagementScreens) => void;\n  onChatMemberSelect?: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n};\n\ntype StateProps = {\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  adminMembers?: ApiChatMember[];\n  isChannel?: boolean;\n  localContactIds?: string[];\n  searchQuery?: string;\n  isSearching?: boolean;\n  localUserIds?: string[];\n  globalUserIds?: string[];\n  serverTimeOffset: number;\n};\n\nconst ManageGroupMembers: FC<OwnProps & StateProps> = ({\n  noAdmins,\n  members,\n  adminMembers,\n  userStatusesById,\n  isChannel,\n  isActive,\n  globalUserIds,\n  localContactIds,\n  localUserIds,\n  isSearching,\n  searchQuery,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n  onChatMemberSelect,\n}) => {\n  const { openChat, setUserSearchQuery, closeManagement } = getActions();\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const adminIds = useMemo(() => {\n    return noAdmins ? adminMembers?.map(({ userId }) => userId) || [] : [];\n  }, [adminMembers, noAdmins]);\n\n  const memberIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    if (!members || !usersById) {\n      return [];\n    }\n\n    const userIds = sortUserIds(\n      members.map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n\n    return noAdmins ? userIds.filter((userId) => !adminIds.includes(userId)) : userIds;\n  }, [members, userStatusesById, serverTimeOffset, noAdmins, adminIds]);\n\n  const displayedIds = useMemo(() => {\n    // No need for expensive global updates on users, so we avoid them\n    const usersById = getGlobal().users.byId;\n    const chatsById = getGlobal().chats.byId;\n    const shouldUseSearchResults = Boolean(searchQuery);\n    const listedIds = !shouldUseSearchResults\n      ? memberIds\n      : (localContactIds ? filterUsersByName(localContactIds, usersById, searchQuery) : []);\n\n    return sortChatIds(\n      unique([\n        ...listedIds,\n        ...(shouldUseSearchResults ? localUserIds || [] : []),\n        ...(shouldUseSearchResults ? globalUserIds || [] : []),\n      ]).filter((contactId) => {\n        const user = usersById[contactId];\n        if (!user) {\n          return true;\n        }\n\n        return (isChannel || user.canBeInvitedToGroup || !isUserBot(user))\n          && (!noAdmins || !adminIds.includes(contactId));\n      }),\n      chatsById,\n      true,\n    );\n  }, [memberIds, localContactIds, searchQuery, localUserIds, globalUserIds, isChannel, noAdmins, adminIds]);\n\n  const [viewportIds, getMore] = useInfiniteScroll(undefined, displayedIds, Boolean(searchQuery));\n\n  const handleMemberClick = useCallback((id: string) => {\n    if (noAdmins) {\n      onChatMemberSelect!(id, false);\n      onScreenSelect!(ManagementScreens.ChatNewAdminRights);\n    } else {\n      closeManagement();\n      openChat({ id });\n    }\n  }, [closeManagement, noAdmins, onChatMemberSelect, onScreenSelect, openChat]);\n\n  const handleFilterChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    setUserSearchQuery({ query: e.target.value });\n  }, [setUserSearchQuery]);\n  const handleKeyDown = useKeyboardListNavigation(containerRef, isActive, (index) => {\n    if (viewportIds && viewportIds.length > 0) {\n      handleMemberClick(viewportIds[index === -1 ? 0 : index]);\n    }\n  }, '.ListItem-button', true);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  function renderSearchField() {\n    return (\n      <div className=\"Management__filter\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <InputText\n          ref={inputRef}\n          value={searchQuery}\n          onChange={handleFilterChange}\n          placeholder={lang('Search')}\n        />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"Management\">\n      {noAdmins && renderSearchField()}\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          {viewportIds?.length ? (\n            <InfiniteScroll\n              className=\"picker-list custom-scroll\"\n              items={displayedIds}\n              onLoadMore={getMore}\n              noScrollRestore={Boolean(searchQuery)}\n              ref={containerRef}\n              onKeyDown={handleKeyDown}\n            >\n              {viewportIds.map((id) => (\n                <ListItem\n                  key={id}\n                  className=\"chat-item-clickable scroll-item\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => handleMemberClick(id)}\n                >\n                  <PrivateChatInfo userId={id} forceShowSelf />\n                </ListItem>\n              ))}\n            </InfiniteScroll>\n          ) : !isSearching && viewportIds && !viewportIds.length ? (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          ) : (\n            <Loading />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const adminMembers = chat?.fullInfo?.adminMembers;\n    const isChannel = chat && isChatChannel(chat);\n    const { userIds: localContactIds } = global.contactList || {};\n\n    const {\n      query: searchQuery,\n      fetchingStatus,\n      globalUserIds,\n      localUserIds,\n    } = global.userSearch;\n\n    return {\n      members,\n      adminMembers,\n      userStatusesById,\n      isChannel,\n      localContactIds,\n      searchQuery,\n      isSearching: fetchingStatus,\n      globalUserIds,\n      localUserIds,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupMembers));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useMemo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ApiChatMember, ApiUser, ApiUserStatus } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectChat } from '../../../global/selectors';\nimport { sortUserIds, isChatChannel } from '../../../global/helpers';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\n\ntype OwnProps = {\n  chatId: string;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  usersById: Record<string, ApiUser>;\n  userStatusesById: Record<string, ApiUserStatus>;\n  members?: ApiChatMember[];\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageGroupUserPermissionsCreate: FC<OwnProps & StateProps> = ({\n  usersById,\n  userStatusesById,\n  members,\n  isChannel,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  serverTimeOffset,\n}) => {\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const memberIds = useMemo(() => {\n    if (!members || !usersById) {\n      return undefined;\n    }\n\n    return sortUserIds(\n      members.filter((member) => !member.isOwner).map(({ userId }) => userId),\n      usersById,\n      userStatusesById,\n      undefined,\n      serverTimeOffset,\n    );\n  }, [members, serverTimeOffset, usersById, userStatusesById]);\n\n  const handleExceptionMemberClick = useCallback((memberId: string) => {\n    onChatMemberSelect(memberId);\n    onScreenSelect(ManagementScreens.GroupUserPermissions);\n  }, [onChatMemberSelect, onScreenSelect]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\" teactFastList>\n          {memberIds ? (\n            memberIds.map((id, i) => (\n              <ListItem\n                key={id}\n                teactOrderKey={i}\n                className=\"chat-item-clickable scroll-item\"\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => handleExceptionMemberClick(id)}\n              >\n                <PrivateChatInfo userId={id} forceShowSelf />\n              </ListItem>\n            ))\n          ) : (\n            <NothingFound\n              teactOrderKey={0}\n              key=\"nothing-found\"\n              text={isChannel ? 'No subscribers found' : 'No members found'}\n            />\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n    const { byId: usersById, statusesById: userStatusesById } = global.users;\n    const members = chat?.fullInfo?.members;\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      members,\n      usersById,\n      userStatusesById,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageGroupUserPermissionsCreate));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useMemo, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat, ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport { STICKER_SIZE_INVITES } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatCountdown, MILLISECONDS_IN_DAY } from '../../../util/dateFormat';\nimport useInterval from '../../../hooks/useInterval';\nimport useForceUpdate from '../../../hooks/useForceUpdate';\nimport { selectChat } from '../../../global/selectors';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../../util/environment';\nimport { getServerTime } from '../../../util/serverTime';\nimport useFlag from '../../../hooks/useFlag';\nimport { isChatChannel } from '../../../global/helpers';\n\nimport ListItem from '../../ui/ListItem';\nimport NothingFound from '../../common/NothingFound';\nimport Button from '../../ui/Button';\nimport DropdownMenu from '../../ui/DropdownMenu';\nimport MenuItem from '../../ui/MenuItem';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  exportedInvites?: ApiExportedInvite[];\n  revokedExportedInvites?: ApiExportedInvite[];\n  serverTimeOffset: number;\n};\n\nconst BULLET = '\\u2022';\n\nfunction inviteComparator(i1: ApiExportedInvite, i2: ApiExportedInvite) {\n  const { isPermanent: i1IsPermanent, usage: i1Usage = 0, date: i1Date } = i1;\n  const { isPermanent: i2IsPermanent, usage: i2Usage = 0, date: i2Date } = i2;\n  if (i1IsPermanent || i2IsPermanent) return Number(i1IsPermanent) - Number(i2IsPermanent);\n  if (i1Usage || i2Usage) return i2Usage - i1Usage;\n  return i2Date - i1Date;\n}\n\nconst ManageInvites: FC<OwnProps & StateProps> = ({\n  chatId,\n  chat,\n  exportedInvites,\n  revokedExportedInvites,\n  isActive,\n  isChannel,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const {\n    setEditingExportedInvite,\n    showNotification,\n    editExportedChatInvite,\n    deleteExportedChatInvite,\n    deleteRevokedExportedChatInvites,\n    setOpenedInviteInfo,\n  } = getActions();\n\n  const lang = useLang();\n\n  const [isDeleteRevokeAllDialogOpen, openDeleteRevokeAllDialog, closeDeleteRevokeAllDialog] = useFlag();\n  const [isRevokeDialogOpen, openRevokeDialog, closeRevokeDialog] = useFlag();\n  const [revokingInvite, setRevokingInvite] = useState<ApiExportedInvite | undefined>();\n  const [isDeleteDialogOpen, openDeleteDialog, closeDeleteDialog] = useFlag();\n  const [deletingInvite, setDeletingInvite] = useState<ApiExportedInvite | undefined>();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const hasDetailedCountdown = useMemo(() => {\n    if (!exportedInvites) return undefined;\n    return exportedInvites\n      .some(({ expireDate }) => (\n        expireDate && (expireDate - getServerTime(serverTimeOffset) < MILLISECONDS_IN_DAY / 1000)\n      ));\n  }, [exportedInvites, serverTimeOffset]);\n  const forceUpdate = useForceUpdate();\n  useInterval(() => {\n    forceUpdate();\n  }, hasDetailedCountdown ? 1000 : undefined);\n\n  const primaryInvite = exportedInvites?.find(({ isPermanent }) => isPermanent);\n  const primaryInviteLink = chat?.username ? `t.me/${chat.username}` : primaryInvite?.link;\n  const temporalInvites = useMemo(() => {\n    const invites = chat?.username ? exportedInvites : exportedInvites?.filter(({ isPermanent }) => !isPermanent);\n    return invites?.sort(inviteComparator);\n  }, [chat?.username, exportedInvites]);\n\n  const editInvite = (invite: ApiExportedInvite) => {\n    setEditingExportedInvite({ chatId, invite });\n    onScreenSelect(ManagementScreens.EditInvite);\n  };\n\n  const revokeInvite = useCallback((invite: ApiExportedInvite) => {\n    const {\n      link, title, isRequestNeeded, expireDate, usageLimit,\n    } = invite;\n    editExportedChatInvite({\n      chatId,\n      link,\n      title,\n      isRequestNeeded,\n      expireDate,\n      usageLimit,\n      isRevoked: true,\n    });\n  }, [chatId, editExportedChatInvite]);\n\n  const askToRevoke = useCallback((invite: ApiExportedInvite) => {\n    setRevokingInvite(invite);\n    openRevokeDialog();\n  }, [openRevokeDialog]);\n\n  const handleRevoke = useCallback(() => {\n    if (!revokingInvite) return;\n    revokeInvite(revokingInvite);\n    setRevokingInvite(undefined);\n    closeRevokeDialog();\n  }, [closeRevokeDialog, revokeInvite, revokingInvite]);\n\n  const handleCreateNewClick = useCallback(() => {\n    onScreenSelect(ManagementScreens.EditInvite);\n  }, [onScreenSelect]);\n\n  const handlePrimaryRevoke = useCallback(() => {\n    if (primaryInvite) {\n      askToRevoke(primaryInvite);\n    }\n  }, [askToRevoke, primaryInvite]);\n\n  const handleDeleteAllRevoked = useCallback(() => {\n    deleteRevokedExportedChatInvites({ chatId });\n    closeDeleteRevokeAllDialog();\n  }, [chatId, closeDeleteRevokeAllDialog, deleteRevokedExportedChatInvites]);\n\n  const showInviteInfo = useCallback((invite: ApiExportedInvite) => {\n    setOpenedInviteInfo({ chatId, invite });\n    onScreenSelect(ManagementScreens.InviteInfo);\n  }, [chatId, onScreenSelect, setOpenedInviteInfo]);\n\n  const deleteInvite = useCallback((invite: ApiExportedInvite) => {\n    deleteExportedChatInvite({ chatId, link: invite.link });\n  }, [chatId, deleteExportedChatInvite]);\n\n  const askToDelete = useCallback((invite: ApiExportedInvite) => {\n    setDeletingInvite(invite);\n    openDeleteDialog();\n  }, [openDeleteDialog]);\n\n  const handleDelete = useCallback(() => {\n    if (!deletingInvite) return;\n    deleteInvite(deletingInvite);\n    setDeletingInvite(undefined);\n    closeDeleteDialog();\n  }, [closeDeleteDialog, deleteInvite, deletingInvite]);\n\n  const copyLink = useCallback((link: string) => {\n    copyTextToClipboard(link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [lang, showNotification]);\n\n  const handleCopyPrimaryClicked = useCallback(() => {\n    copyLink(primaryInviteLink!);\n  }, [copyLink, primaryInviteLink]);\n\n  const prepareUsageText = (invite: ApiExportedInvite) => {\n    const {\n      usage = 0, usageLimit, expireDate, isPermanent, requested, isRevoked,\n    } = invite;\n    let text = '';\n    if (!isRevoked && usageLimit && usage < usageLimit) {\n      text = lang('CanJoin', usageLimit - usage);\n    } else if (usage) {\n      text = lang('PeopleJoined', usage);\n    } else {\n      text = lang('NoOneJoined');\n    }\n\n    if (isRevoked) {\n      text += ` ${BULLET} ${lang('Revoked')}`;\n      return text;\n    }\n\n    if (requested) {\n      text += ` ${BULLET} ${lang('JoinRequests', requested)}`;\n    }\n\n    if (usageLimit !== undefined && usage === usageLimit) {\n      text += ` ${BULLET} ${lang('LinkLimitReached')}`;\n    } else if (expireDate) {\n      const diff = (expireDate - getServerTime(serverTimeOffset)) * 1000;\n      text += ` ${BULLET} `;\n      if (diff > 0) {\n        text += lang('InviteLink.ExpiresIn', formatCountdown(lang, diff));\n      } else {\n        text += lang('InviteLink.Expired');\n      }\n    } else if (isPermanent) {\n      text += ` ${BULLET} ${lang('Permanent')}`;\n    }\n\n    return text;\n  };\n\n  const prepareContextActions = (invite: ApiExportedInvite) => {\n    const actions = [];\n    actions.push({\n      title: lang('Copy'),\n      icon: 'copy',\n      handler: () => copyLink(invite.link),\n    });\n\n    if (!invite.isPermanent && !invite.isRevoked) {\n      actions.push({\n        title: lang('Edit'),\n        icon: 'edit',\n        handler: () => editInvite(invite),\n      });\n    }\n\n    if (!invite.isRevoked) {\n      actions.push({\n        title: lang('RevokeButton'),\n        icon: 'delete',\n        handler: () => askToRevoke(invite),\n        destructive: true,\n      });\n    } else {\n      actions.push({\n        title: lang('DeleteLink'),\n        icon: 'delete',\n        handler: () => askToDelete(invite),\n        destructive: true,\n      });\n    }\n    return actions;\n  };\n\n  const PrimaryLinkMenuButton: FC<{ onTrigger: () => void; isOpen?: boolean }> = useMemo(() => {\n    return ({ onTrigger, isOpen }) => (\n      <Button\n        round\n        ripple={!IS_SINGLE_COLUMN_LAYOUT}\n        size=\"smaller\"\n        color=\"translucent\"\n        className={isOpen ? 'active' : ''}\n        onClick={onTrigger}\n        ariaLabel=\"Actions\"\n      >\n        <i className=\"icon-more\" />\n      </Button>\n    );\n  }, []);\n\n  return (\n    <div className=\"Management ManageInvites\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.Invite}\n            size={STICKER_SIZE_INVITES}\n            className=\"section-icon\"\n          />\n          <p className=\"text-muted\">{isChannel ? lang('PrimaryLinkHelpChannel') : lang('PrimaryLinkHelp')}</p>\n        </div>\n        {primaryInviteLink && (\n          <div className=\"section\">\n            <p className=\"text-muted\">\n              {chat?.username ? lang('PublicLink') : lang('lng_create_permanent_link_title')}\n            </p>\n            <div className=\"primary-link\">\n              <input\n                className=\"form-control primary-link-input\"\n                value={primaryInviteLink}\n                readOnly\n                onClick={handleCopyPrimaryClicked}\n              />\n              <DropdownMenu\n                className=\"primary-link-more-menu\"\n                trigger={PrimaryLinkMenuButton}\n                positionX=\"right\"\n              >\n                <MenuItem icon=\"copy\" onClick={handleCopyPrimaryClicked}>{lang('Copy')}</MenuItem>\n                {!chat?.username && (\n                  <MenuItem icon=\"delete\" onClick={handlePrimaryRevoke} destructive>{lang('RevokeButton')}</MenuItem>\n                )}\n              </DropdownMenu>\n            </div>\n            <Button onClick={handleCopyPrimaryClicked}>{lang('CopyLink')}</Button>\n          </div>\n        )}\n        <div className=\"section\" teactFastList>\n          <Button isText key=\"create\" className=\"create-link\" onClick={handleCreateNewClick}>\n            {lang('CreateNewLink')}\n          </Button>\n          {(!temporalInvites || !temporalInvites.length) && <NothingFound text=\"No links found\" key=\"nothing\" />}\n          {temporalInvites?.map((invite) => (\n            <ListItem\n              icon=\"link\"\n              secondaryIcon=\"more\"\n              multiline\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => showInviteInfo(invite)}\n              contextActions={prepareContextActions(invite)}\n              key={invite.link}\n            >\n              <span className=\"title invite-title\">{invite.title || invite.link}</span>\n              <span className=\"subtitle\" dir=\"auto\">\n                {prepareUsageText(invite)}\n              </span>\n            </ListItem>\n          ))}\n          <p className=\"text-muted hint\" key=\"links-hint\">{lang('ManageLinksInfoHelp')}</p>\n        </div>\n        {revokedExportedInvites && Boolean(revokedExportedInvites.length) && (\n          <div className=\"section\" teactFastList>\n            <p className=\"text-muted\" key=\"title\">{lang('RevokedLinks')}</p>\n            <ListItem\n              icon=\"delete\"\n              destructive\n              key=\"delete\"\n              onClick={openDeleteRevokeAllDialog}\n            >\n              <span className=\"title\">{lang('DeleteAllRevokedLinks')}</span>\n            </ListItem>\n            {revokedExportedInvites?.map((invite) => (\n              <ListItem\n                icon=\"link\"\n                secondaryIcon=\"more\"\n                multiline\n                // eslint-disable-next-line react/jsx-no-bind\n                onClick={() => showInviteInfo(invite)}\n                contextActions={prepareContextActions(invite)}\n                key={invite.link}\n              >\n                <span className=\"title\">{invite.title || invite.link}</span>\n                <span className=\"subtitle\" dir=\"auto\">\n                  {prepareUsageText(invite)}\n                </span>\n              </ListItem>\n            ))}\n          </div>\n        )}\n      </div>\n      <ConfirmDialog\n        isOpen={isDeleteRevokeAllDialogOpen}\n        onClose={closeDeleteRevokeAllDialog}\n        title={lang('DeleteAllRevokedLinks')}\n        text={lang('DeleteAllRevokedLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('DeleteAll')}\n        confirmHandler={handleDeleteAllRevoked}\n      />\n      <ConfirmDialog\n        isOpen={isRevokeDialogOpen}\n        onClose={closeRevokeDialog}\n        title={lang('RevokeLink')}\n        text={lang('RevokeAlert')}\n        confirmIsDestructive\n        confirmLabel={lang('RevokeButton')}\n        confirmHandler={handleRevoke}\n      />\n      <ConfirmDialog\n        isOpen={isDeleteDialogOpen}\n        onClose={closeDeleteDialog}\n        title={lang('DeleteLink')}\n        text={lang('DeleteLinkHelp')}\n        confirmIsDestructive\n        confirmLabel={lang('Delete')}\n        confirmHandler={handleDelete}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { invites, revokedInvites } = global.management.byChatId[chatId];\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      exportedInvites: invites,\n      revokedExportedInvites: revokedInvites,\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel,\n    };\n  },\n)(ManageInvites));\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useState } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiExportedInvite } from '../../../api/types';\nimport { ManagementScreens } from '../../../types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { formatFullDate, formatTime } from '../../../util/dateFormat';\nimport useFlag from '../../../hooks/useFlag';\nimport { getServerTime } from '../../../util/serverTime';\n\nimport Checkbox from '../../ui/Checkbox';\nimport InputText from '../../ui/InputText';\nimport RadioGroup from '../../ui/RadioGroup';\nimport Button from '../../ui/Button';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport useOnChange from '../../../hooks/useOnChange';\nimport CalendarModal from '../../common/CalendarModal';\n\nconst DEFAULT_USAGE_LIMITS = [1, 10, 100];\nconst DEFAULT_EXPIRE_DATE = {\n  hour: 3600000,\n  day: 86400000,\n  week: 604800000,\n};\nconst DEFAULT_CUSTOM_EXPIRE_DATE = DEFAULT_EXPIRE_DATE.hour;\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  editingInvite?: ApiExportedInvite;\n  serverTimeOffset: number;\n};\n\nconst ManageInvite: FC<OwnProps & StateProps> = ({\n  chatId,\n  editingInvite,\n  isActive,\n  serverTimeOffset,\n  onClose,\n  onScreenSelect,\n}) => {\n  const { editExportedChatInvite, exportChatInvite } = getActions();\n\n  const lang = useLang();\n  const [isCalendarOpened, openCalendar, closeCalendar] = useFlag();\n  const [isRequestNeeded, setIsRequestNeeded] = useState(false);\n  const [title, setTitle] = useState('');\n  const [customExpireDate, setCustomExpireDate] = useState<number>(Date.now() + DEFAULT_CUSTOM_EXPIRE_DATE);\n  const [selectedExpireOption, setSelectedExpireOption] = useState('unlimited');\n  const [customUsageLimit, setCustomUsageLimit] = useState<number | undefined>(10);\n  const [selectedUsageOption, setSelectedUsageOption] = useState('0');\n  const [isSubmitBlocked, setIsSubmitBlocked] = useState(false);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useOnChange(([oldEditingInvite]) => {\n    if (oldEditingInvite === editingInvite) return;\n    if (!editingInvite) {\n      setTitle('');\n      setSelectedExpireOption('unlimited');\n      setSelectedUsageOption('0');\n      setCustomExpireDate(getServerTime(serverTimeOffset) * 1000 + DEFAULT_CUSTOM_EXPIRE_DATE);\n      setCustomUsageLimit(10);\n      setIsRequestNeeded(false);\n    } else {\n      const {\n        title: editingTitle, usageLimit, expireDate, isRequestNeeded: editingIsRequestNeeded,\n      } = editingInvite;\n      if (editingTitle) setTitle(editingTitle);\n      if (usageLimit) {\n        setSelectedUsageOption(DEFAULT_USAGE_LIMITS.includes(usageLimit) ? usageLimit.toString() : 'custom');\n        setCustomUsageLimit(usageLimit);\n      }\n      if (expireDate) {\n        const minSafeDate = getServerTime(serverTimeOffset) + DEFAULT_CUSTOM_EXPIRE_DATE;\n        setSelectedExpireOption('custom');\n        setCustomExpireDate(Math.max(expireDate, minSafeDate) * 1000);\n      }\n      if (editingIsRequestNeeded) {\n        setIsRequestNeeded(true);\n      }\n    }\n  }, [editingInvite, serverTimeOffset]);\n\n  const handleIsRequestChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setIsRequestNeeded(e.target.checked);\n  }, []);\n\n  const handleTitleChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setTitle(e.target.value);\n  }, []);\n\n  const handleCustomUsageLimitChange = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n    setCustomUsageLimit(Number.parseInt(e.target.value, 10));\n  }, []);\n\n  const handleExpireDateChange = useCallback((date: Date) => {\n    setCustomExpireDate(date.getTime());\n    closeCalendar();\n  }, [closeCalendar]);\n\n  const handleSaveClick = useCallback(() => {\n    setIsSubmitBlocked(true);\n    const usageLimit = selectedUsageOption === 'custom' ? customUsageLimit : selectedUsageOption;\n    let expireDate;\n    switch (selectedExpireOption) {\n      case 'custom':\n        expireDate = getServerTime(serverTimeOffset) + (customExpireDate - Date.now()) / 1000;\n        break;\n      case 'hour':\n      case 'day':\n      case 'week':\n        expireDate = getServerTime(serverTimeOffset) + DEFAULT_EXPIRE_DATE[selectedExpireOption] / 1000;\n        break;\n      case 'unlimited':\n        expireDate = 0;\n        break;\n      default:\n        expireDate = undefined;\n    }\n\n    if (editingInvite) {\n      editExportedChatInvite({\n        link: editingInvite.link,\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    } else {\n      exportChatInvite({\n        chatId,\n        title,\n        isRequestNeeded,\n        expireDate,\n        usageLimit,\n      });\n    }\n    onScreenSelect(ManagementScreens.Invites);\n  }, [\n    chatId, customExpireDate, customUsageLimit, editExportedChatInvite, editingInvite,\n    exportChatInvite, isRequestNeeded, selectedExpireOption, selectedUsageOption, title, onScreenSelect,\n    serverTimeOffset,\n  ]);\n\n  return (\n    <div className=\"Management ManageInvite\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <Checkbox\n            label={lang('ApproveNewMembers')}\n            subLabel={lang('ApproveNewMembersDescription')}\n            checked={isRequestNeeded}\n            onChange={handleIsRequestChange}\n          />\n        </div>\n        <div className=\"section\">\n          <InputText\n            className=\"link-name\"\n            placeholder={lang('LinkNameHint')}\n            value={title}\n            onChange={handleTitleChange}\n          />\n          <p className=\"text-muted hint\">{lang('LinkNameHelp')}</p>\n        </div>\n        <div className=\"section\">\n          <div className=\"section-header\">{lang('LimitByPeriod')}</div>\n          <RadioGroup\n            name=\"expireOptions\"\n            options={[\n              {\n                value: 'hour',\n                label: lang('Hours', 1),\n              },\n              {\n                value: 'day',\n                label: lang('Days', 1),\n              },\n              {\n                value: 'week',\n                label: lang('Weeks', 1),\n              },\n              {\n                value: 'unlimited',\n                label: lang('NoLimit'),\n              },\n              {\n                value: 'custom',\n                label: lang('lng_group_invite_expire_custom'),\n              },\n            ]}\n            onChange={setSelectedExpireOption}\n            selected={selectedExpireOption}\n          />\n          {selectedExpireOption === 'custom' && (\n            <Button className=\"expire-limit\" isText onClick={openCalendar}>\n              {formatFullDate(lang, customExpireDate)} {formatTime(lang, customExpireDate)}\n            </Button>\n          )}\n          <p className=\"text-muted hint\">{lang('TimeLimitHelp')}</p>\n        </div>\n        {!isRequestNeeded && (\n          <div className=\"section\">\n            <div className=\"section-header\">{lang('LimitNumberOfUses')}</div>\n            <RadioGroup\n              name=\"usageOptions\"\n              options={[\n                ...DEFAULT_USAGE_LIMITS.map((n) => ({ value: n.toString(), label: n })),\n                {\n                  value: '0',\n                  label: lang('NoLimit'),\n                },\n                {\n                  value: 'custom',\n                  label: lang('lng_group_invite_usage_custom'),\n                },\n              ]}\n              onChange={setSelectedUsageOption}\n              selected={selectedUsageOption}\n            />\n            {selectedUsageOption === 'custom' && (\n              <input\n                className=\"form-control usage-limit\"\n                type=\"number\"\n                min=\"1\"\n                max=\"99999\"\n                value={customUsageLimit}\n                onChange={handleCustomUsageLimitChange}\n              />\n            )}\n            <p className=\"text-muted hint\">{lang('UsesLimitHelp')}</p>\n          </div>\n        )}\n        <FloatingActionButton\n          isShown\n          onClick={handleSaveClick}\n          disabled={isSubmitBlocked}\n          ariaLabel={editingInvite ? lang('SaveLink') : lang('CreateLink')}\n        >\n          <i className=\"icon-check\" />\n        </FloatingActionButton>\n      </div>\n      <CalendarModal\n        isOpen={isCalendarOpened}\n        isFutureMode\n        withTimePicker\n        onClose={closeCalendar}\n        onSubmit={handleExpireDateChange}\n        selectedAt={customExpireDate}\n        submitButtonLabel={lang('Save')}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { editingInvite } = global.management.byChatId[chatId];\n\n    return {\n      editingInvite,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInvite));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useState,\n} from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiAvailableReaction, ApiChat } from '../../../api/types';\n\nimport { selectChat } from '../../../global/selectors';\nimport useLang from '../../../hooks/useLang';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\n\nimport ReactionStaticEmoji from '../../common/ReactionStaticEmoji';\nimport Checkbox from '../../ui/Checkbox';\nimport FloatingActionButton from '../../ui/FloatingActionButton';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  availableReactions?: ApiAvailableReaction[];\n  enabledReactions?: string[];\n};\n\nconst ManageReactions: FC<OwnProps & StateProps> = ({\n  availableReactions,\n  enabledReactions,\n  chat,\n  isActive,\n  onClose,\n}) => {\n  const { setChatEnabledReactions } = getActions();\n\n  const lang = useLang();\n  const [isTouched, setIsTouched] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localEnabledReactions, setLocalEnabledReactions] = useState(enabledReactions || []);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const handleSaveReactions = useCallback(() => {\n    if (!chat) return;\n    setIsLoading(true);\n\n    setChatEnabledReactions({\n      chatId: chat.id,\n      enabledReactions: localEnabledReactions,\n    });\n  }, [chat, localEnabledReactions, setChatEnabledReactions]);\n\n  useEffect(() => {\n    if (enabledReactions) {\n      setIsLoading(false);\n      setIsTouched(false);\n      setLocalEnabledReactions(enabledReactions);\n    }\n  }, [enabledReactions]);\n\n  const handleReactionChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!chat || !availableReactions) return;\n\n    const { name, checked } = e.currentTarget;\n    const newEnabledReactions = name === 'all' ? (checked ? availableReactions.map((l) => l.reaction) : [])\n      : (!checked\n        ? localEnabledReactions.filter((l) => l !== name)\n        : [...localEnabledReactions, name]);\n\n    setLocalEnabledReactions(newEnabledReactions);\n    setIsTouched(true);\n  }, [availableReactions, chat, localEnabledReactions]);\n\n  return (\n    <div className=\"Management\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <div className=\"ListItem no-selection\">\n            <Checkbox\n              name=\"all\"\n              checked={!localEnabledReactions || localEnabledReactions.length > 0}\n              label={lang('EnableReactions')}\n              onChange={handleReactionChange}\n            />\n          </div>\n          {availableReactions?.filter((l) => !l.isInactive).map(({ reaction, title }) => (\n            <div className=\"ListItem no-selection\">\n              <Checkbox\n                name={reaction}\n                checked={!localEnabledReactions || localEnabledReactions?.includes(reaction)}\n                disabled={localEnabledReactions?.length === 0}\n                label={(\n                  <div className=\"Reaction\">\n                    <ReactionStaticEmoji reaction={reaction} />\n                    {title}\n                  </div>\n                )}\n                onChange={handleReactionChange}\n              />\n            </div>\n          ))}\n        </div>\n      </div>\n\n      <FloatingActionButton\n        isShown={isTouched}\n        onClick={handleSaveReactions}\n        ariaLabel={lang('Save')}\n        disabled={isLoading}\n      >\n        {isLoading ? (\n          <Spinner color=\"white\" />\n        ) : (\n          <i className=\"icon-check\" />\n        )}\n      </FloatingActionButton>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId)!;\n\n    return {\n      enabledReactions: chat.fullInfo?.enabledReactions,\n      availableReactions: global.availableReactions,\n      chat,\n    };\n  },\n)(ManageReactions));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChatInviteImporter, ApiExportedInvite, ApiUser } from '../../../api/types';\n\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport useLang from '../../../hooks/useLang';\nimport { copyTextToClipboard } from '../../../util/clipboard';\nimport { getServerTime } from '../../../util/serverTime';\nimport { formatFullDate, formatMediaDateTime, formatTime } from '../../../util/dateFormat';\nimport { isChatChannel } from '../../../global/helpers';\nimport { selectChat } from '../../../global/selectors';\n\nimport PrivateChatInfo from '../../common/PrivateChatInfo';\nimport ListItem from '../../ui/ListItem';\nimport Button from '../../ui/Button';\nimport Spinner from '../../ui/Spinner';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  invite?: ApiExportedInvite;\n  importers?: ApiChatInviteImporter[];\n  requesters?: ApiChatInviteImporter[];\n  admin?: ApiUser;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageInviteInfo: FC<OwnProps & StateProps> = ({\n  chatId,\n  invite,\n  importers,\n  requesters,\n  isChannel,\n  isActive,\n  serverTimeOffset,\n  onClose,\n}) => {\n  const {\n    showNotification,\n    loadChatInviteImporters,\n    loadChatInviteRequesters,\n    openChat,\n  } = getActions();\n\n  const lang = useLang();\n  const {\n    usage = 0, usageLimit, link, adminId,\n  } = invite || {};\n  const expireDate = invite?.expireDate && (invite.expireDate - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n  const isExpired = ((invite?.expireDate || 0) - getServerTime(serverTimeOffset)) < 0;\n\n  useEffect(() => {\n    if (link) {\n      loadChatInviteImporters({ chatId, link });\n      loadChatInviteRequesters({ chatId, link });\n    }\n  }, [chatId, link, loadChatInviteImporters, loadChatInviteRequesters]);\n\n  const handleCopyClicked = useCallback(() => {\n    copyTextToClipboard(invite!.link);\n    showNotification({\n      message: lang('LinkCopied'),\n    });\n  }, [invite, lang, showNotification]);\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  const renderImporters = () => {\n    if (!importers?.length && requesters?.length) return undefined;\n    if (!importers) return <Spinner />;\n    return (\n      <div className=\"section\">\n        <p>{importers.length ? lang('PeopleJoined', usage) : lang('NoOneJoined')}</p>\n        <p className=\"text-muted\">\n          {!importers.length && (\n            usageLimit ? lang('PeopleCanJoinViaLinkCount', usageLimit - usage) : lang('NoOneJoinedYet')\n          )}\n          {importers.map((importer) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: importer.userId })}\n            >\n              <PrivateChatInfo\n                userId={importer.userId}\n                status={formatMediaDateTime(lang, importer.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  const renderRequesters = () => {\n    if (invite?.isRevoked) return undefined;\n    if (!requesters && importers) return <Spinner />;\n    if (!requesters?.length) return undefined;\n    return (\n      <div className=\"section\">\n        <p>{isChannel ? lang('SubscribeRequests') : lang('MemberRequests')}</p>\n        <p className=\"text-muted\">\n          {requesters.map((requester) => (\n            <ListItem\n              className=\"chat-item-clickable scroll-item small-icon\"\n              // eslint-disable-next-line react/jsx-no-bind\n              onClick={() => openChat({ id: requester.userId })}\n            >\n              <PrivateChatInfo\n                userId={requester.userId}\n                status={formatMediaDateTime(lang, requester.date * 1000, true)}\n                forceShowSelf\n              />\n            </ListItem>\n          ))}\n        </p>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"Management ManageInviteInfo\">\n      <div className=\"custom-scroll\">\n        {!invite && (\n          <p className=\"text-muted\">{lang('Loading')}</p>\n        )}\n        {invite && (\n          <>\n            <div className=\"section\">\n              <h3 className=\"link-title\">{invite.title || invite.link}</h3>\n              <input\n                className=\"form-control\"\n                value={invite.link}\n                readOnly\n                onClick={handleCopyClicked}\n              />\n              <Button className=\"copy-link\" onClick={handleCopyClicked}>{lang('CopyLink')}</Button>\n              {expireDate && (\n                <p className=\"text-muted\">\n                  {isExpired\n                    ? lang('ExpiredLink')\n                    : lang('LinkExpiresIn', `${formatFullDate(lang, expireDate)} ${formatTime(lang, expireDate)}`)}\n                </p>\n              )}\n            </div>\n            {adminId && (\n              <div className=\"section\">\n                <p>{lang('LinkCreatedeBy')}</p>\n                <ListItem\n                  className=\"chat-item-clickable scroll-item small-icon\"\n                  // eslint-disable-next-line react/jsx-no-bind\n                  onClick={() => openChat({ id: adminId })}\n                >\n                  <PrivateChatInfo\n                    userId={adminId}\n                    status={formatMediaDateTime(lang, invite.date * 1000, true)}\n                    forceShowSelf\n                  />\n                </ListItem>\n              </div>\n            )}\n            {renderImporters()}\n            {renderRequesters()}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const { inviteInfo } = global.management.byChatId[chatId];\n    const { invite, importers, requesters } = inviteInfo || {};\n    const chat = selectChat(global, chatId);\n    const isChannel = chat && isChatChannel(chat);\n\n    return {\n      invite,\n      importers,\n      requesters,\n      isChannel,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(ManageInviteInfo));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiUser } from '../../../api/types';\n\nimport useLang from '../../../hooks/useLang';\nimport { getUserFullName } from '../../../global/helpers';\nimport { selectUser } from '../../../global/selectors';\nimport { formatHumanDate, formatTime, isToday } from '../../../util/dateFormat';\nimport { getServerTime } from '../../../util/serverTime';\nimport { createClassNameBuilder } from '../../../util/buildClassName';\n\nimport Avatar from '../../common/Avatar';\nimport Button from '../../ui/Button';\n\nimport './JoinRequest.scss';\n\ntype OwnProps = {\n  userId: string;\n  about?: string;\n  isChannel?: boolean;\n  date: number;\n  chatId: string;\n};\n\ntype StateProps = {\n  user?: ApiUser;\n  isSavedMessages?: boolean;\n  serverTimeOffset: number;\n};\n\nconst JoinRequest: FC<OwnProps & StateProps> = ({\n  userId,\n  about,\n  date,\n  isChannel,\n  user,\n  serverTimeOffset,\n  chatId,\n}) => {\n  const { openChat, hideChatJoinRequest } = getActions();\n\n  const buildClassName = createClassNameBuilder('JoinRequest');\n  const lang = useLang();\n\n  const fullName = getUserFullName(user);\n  const fixedDate = (date - getServerTime(serverTimeOffset)) * 1000 + Date.now();\n\n  const dateString = isToday(new Date(fixedDate))\n    ? formatTime(lang, fixedDate) : formatHumanDate(lang, fixedDate, true, false, true);\n\n  const handleUserClick = () => {\n    openChat({ id: userId });\n  };\n\n  const handleAcceptRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: true });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  const handleRejectRequest = useCallback(() => {\n    hideChatJoinRequest({ chatId, userId, isApproved: false });\n  }, [chatId, hideChatJoinRequest, userId]);\n\n  return (\n    <div className={buildClassName('&')}>\n      <div className={buildClassName('top')}>\n        <div className={buildClassName('user')} onClick={handleUserClick}>\n          <Avatar\n            key={userId}\n            size=\"medium\"\n            user={user}\n          />\n          <div className={buildClassName('user-info')}>\n            <div className={buildClassName('user-name')}>{fullName}</div>\n            <div className={buildClassName('user-subtitle')}>{about}</div>\n          </div>\n        </div>\n        <div className={buildClassName('date')}>{dateString}</div>\n      </div>\n      <div className={buildClassName('buttons')}>\n        <Button className={buildClassName('button')} onClick={handleAcceptRequest}>\n          {isChannel ? lang('ChannelAddToChannel') : lang('ChannelAddToGroup')}\n        </Button>\n        <Button className={buildClassName('button')} isText onClick={handleRejectRequest}>\n          {lang('DismissRequest')}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { userId }): StateProps => {\n    const user = selectUser(global, userId);\n\n    return {\n      user,\n      serverTimeOffset: global.serverTimeOffset,\n    };\n  },\n)(JoinRequest));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo, useCallback, useEffect } from '../../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../../global';\n\nimport type { ApiChat } from '../../../api/types';\n\nimport { STICKER_SIZE_JOIN_REQUESTS } from '../../../config';\nimport { LOCAL_TGS_URLS } from '../../common/helpers/animatedAssets';\nimport useHistoryBack from '../../../hooks/useHistoryBack';\nimport { selectChat } from '../../../global/selectors';\nimport { isChatChannel, isUserId } from '../../../global/helpers';\nimport useLang from '../../../hooks/useLang';\nimport useFlag from '../../../hooks/useFlag';\n\nimport JoinRequest from './JoinRequest';\nimport Button from '../../ui/Button';\nimport ConfirmDialog from '../../ui/ConfirmDialog';\nimport Spinner from '../../ui/Spinner';\nimport AnimatedIcon from '../../common/AnimatedIcon';\n\ntype OwnProps = {\n  chatId: string;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  chat?: ApiChat;\n  isChannel?: boolean;\n  serverTimeOffset: number;\n};\n\nconst ManageJoinRequests: FC<OwnProps & StateProps> = ({\n  chat,\n  chatId,\n  isActive,\n  isChannel,\n  onClose,\n}) => {\n  const { hideAllChatJoinRequests, loadChatJoinRequests } = getActions();\n  const [isAcceptAllDialogOpen, openAcceptAllDialog, closeAcceptAllDialog] = useFlag();\n  const [isRejectAllDialogOpen, openRejectAllDialog, closeRejectAllDialog] = useFlag();\n\n  const lang = useLang();\n\n  useHistoryBack({\n    isActive,\n    onBack: onClose,\n  });\n\n  useEffect(() => {\n    if (!chat?.joinRequests && !isUserId(chatId)) {\n      loadChatJoinRequests({ chatId });\n    }\n  }, [chat, chatId, loadChatJoinRequests]);\n\n  const handleAcceptAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: true });\n    closeAcceptAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeAcceptAllDialog]);\n\n  const handleRejectAllRequests = useCallback(() => {\n    hideAllChatJoinRequests({ chatId, isApproved: false });\n    closeRejectAllDialog();\n  }, [hideAllChatJoinRequests, chatId, closeRejectAllDialog]);\n\n  return (\n    <div className=\"Management ManageJoinRequests\">\n      <div className=\"custom-scroll\">\n        <div className=\"section\">\n          <AnimatedIcon\n            tgsUrl={LOCAL_TGS_URLS.JoinRequest}\n            size={STICKER_SIZE_JOIN_REQUESTS}\n            className=\"section-icon\"\n          />\n          {Boolean(chat?.joinRequests?.length) && (\n            <div className=\"bulk-actions\">\n              <Button className=\"bulk-action-button\" onClick={openAcceptAllDialog}>Accept all</Button>\n              <Button className=\"bulk-action-button\" onClick={openRejectAllDialog} isText>Dismiss all</Button>\n            </div>\n          )}\n        </div>\n        <div className=\"section\" teactFastList>\n          <p key=\"title\">\n            {!chat?.joinRequests ? lang('Loading') : chat.joinRequests.length\n              ? lang('JoinRequests', chat.joinRequests.length) : lang('NoMemberRequests')}\n          </p>\n          {!chat?.joinRequests && (\n            <Spinner key=\"loading\" />\n          )}\n          {chat?.joinRequests?.length === 0 && (\n            <p className=\"text-muted\" key=\"empty\">\n              {isChannel ? lang('NoSubscribeRequestsDescription') : lang('NoMemberRequestsDescription')}\n            </p>\n          )}\n          {chat?.joinRequests?.map(({ userId, about, date }) => (\n            <JoinRequest\n              userId={userId}\n              about={about}\n              date={date}\n              isChannel={isChannel}\n              chatId={chatId}\n              key={userId}\n            />\n          ))}\n        </div>\n      </div>\n      <ConfirmDialog\n        isOpen={isAcceptAllDialogOpen}\n        onClose={closeAcceptAllDialog}\n        title=\"Accept all requests?\"\n        text=\"Are you sure you want to accept all requests?\"\n        confirmHandler={handleAcceptAllRequests}\n      />\n      <ConfirmDialog\n        isOpen={isRejectAllDialogOpen}\n        onClose={closeRejectAllDialog}\n        title=\"Reject all requests?\"\n        text=\"Are you sure you want to reject all requests?\"\n        confirmHandler={handleRejectAllRequests}\n      />\n    </div>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global, { chatId }): StateProps => {\n    const chat = selectChat(global, chatId);\n\n    return {\n      chat,\n      serverTimeOffset: global.serverTimeOffset,\n      isChannel: chat && isChatChannel(chat),\n    };\n  },\n)(ManageJoinRequests));\n","import type { FC } from '../../../lib/teact/teact';\nimport React, { memo } from '../../../lib/teact/teact';\nimport { withGlobal } from '../../../global';\n\nimport type { ManagementType } from '../../../types';\nimport { ManagementScreens } from '../../../types';\n\nimport { selectCurrentManagementType } from '../../../global/selectors';\n\nimport ManageUser from './ManageUser';\nimport ManageGroup from './ManageGroup';\nimport ManageGroupPermissions from './ManageGroupPermissions';\nimport ManageChatRemovedUsers from './ManageChatRemovedUsers';\nimport ManageChannel from './ManageChannel';\nimport ManageChatPrivacyType from './ManageChatPrivacyType';\nimport ManageDiscussion from './ManageDiscussion';\nimport ManageGroupUserPermissions from './ManageGroupUserPermissions';\nimport ManageChatAdministrators from './ManageChatAdministrators';\nimport ManageGroupRecentActions from './ManageGroupRecentActions';\nimport ManageGroupAdminRights from './ManageGroupAdminRights';\nimport ManageGroupMembers from './ManageGroupMembers';\nimport ManageGroupUserPermissionsCreate from './ManageGroupUserPermissionsCreate';\nimport ManageInvites from './ManageInvites';\nimport ManageInvite from './ManageInvite';\nimport ManageReactions from './ManageReactions';\nimport ManageInviteInfo from './ManageInviteInfo';\nimport ManageJoinRequests from './ManageJoinRequests';\n\nexport type OwnProps = {\n  chatId: string;\n  currentScreen: ManagementScreens;\n  selectedChatMemberId?: string;\n  isPromotedByCurrentUser?: boolean;\n  onScreenSelect: (screen: ManagementScreens) => void;\n  onChatMemberSelect: (memberId: string, isPromotedByCurrentUser?: boolean) => void;\n  onClose: NoneToVoidFunction;\n  isActive: boolean;\n};\n\ntype StateProps = {\n  managementType?: ManagementType;\n};\n\nconst Management: FC<OwnProps & StateProps> = ({\n  chatId,\n  currentScreen,\n  selectedChatMemberId,\n  isPromotedByCurrentUser,\n  onScreenSelect,\n  onChatMemberSelect,\n  onClose,\n  isActive,\n  managementType,\n}) => {\n  switch (currentScreen) {\n    case ManagementScreens.Initial: {\n      switch (managementType) {\n        case 'user':\n          return (\n            <ManageUser\n              key={chatId}\n              userId={chatId}\n              onClose={onClose}\n              isActive={isActive}\n            />\n          );\n        case 'group':\n          return (\n            <ManageGroup\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.Discussion,\n                ManagementScreens.GroupPermissions,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.GroupRemovedUsers,\n                ManagementScreens.GroupUserPermissionsCreate,\n                ManagementScreens.GroupUserPermissions,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n        case 'channel':\n          return (\n            <ManageChannel\n              key={chatId}\n              chatId={chatId}\n              onScreenSelect={onScreenSelect}\n              onClose={onClose}\n              isActive={isActive || [\n                ManagementScreens.ChannelSubscribers,\n                ManagementScreens.ChatAdministrators,\n                ManagementScreens.ChannelRemovedUsers,\n                ManagementScreens.Discussion,\n                ManagementScreens.ChatPrivacyType,\n                ManagementScreens.ChatAdminRights,\n                ManagementScreens.ChatNewAdminRights,\n                ManagementScreens.GroupRecentActions,\n              ].includes(currentScreen)}\n            />\n          );\n      }\n\n      break;\n    }\n\n    case ManagementScreens.ChatPrivacyType:\n      return (\n        <ManageChatPrivacyType\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.Discussion:\n      return (\n        <ManageDiscussion\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupPermissions:\n      return (\n        <ManageGroupPermissions\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupRemovedUsers,\n            ManagementScreens.GroupUserPermissionsCreate,\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelRemovedUsers:\n    case ManagementScreens.GroupRemovedUsers:\n      return (\n        <ManageChatRemovedUsers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissionsCreate:\n      return (\n        <ManageGroupUserPermissionsCreate\n          chatId={chatId}\n          onChatMemberSelect={onChatMemberSelect}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive || [\n            ManagementScreens.GroupUserPermissions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupUserPermissions:\n      return (\n        <ManageGroupUserPermissions\n          chatId={chatId}\n          selectedChatMemberId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatAdministrators:\n      return (\n        <ManageChatAdministrators\n          chatId={chatId}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n          isActive={isActive || [\n            ManagementScreens.ChatAdminRights,\n            ManagementScreens.ChatNewAdminRights,\n            ManagementScreens.GroupRecentActions,\n          ].includes(currentScreen)}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.GroupRecentActions:\n      return (\n        <ManageGroupRecentActions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChatNewAdminRights:\n    case ManagementScreens.ChatAdminRights:\n      return (\n        <ManageGroupAdminRights\n          chatId={chatId}\n          isNewAdmin={currentScreen === ManagementScreens.ChatNewAdminRights}\n          selectedUserId={selectedChatMemberId}\n          isPromotedByCurrentUser={isPromotedByCurrentUser}\n          onScreenSelect={onScreenSelect}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n\n    case ManagementScreens.ChannelSubscribers:\n    case ManagementScreens.GroupMembers:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.Invites:\n      return (\n        <ManageInvites\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.EditInvite:\n      return (\n        <ManageInvite\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n        />\n      );\n    case ManagementScreens.GroupAddAdmins:\n      return (\n        <ManageGroupMembers\n          chatId={chatId}\n          noAdmins\n          isActive={isActive}\n          onClose={onClose}\n          onScreenSelect={onScreenSelect}\n          onChatMemberSelect={onChatMemberSelect}\n        />\n      );\n\n    case ManagementScreens.Reactions:\n      return (\n        <ManageReactions\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.InviteInfo:\n      return (\n        <ManageInviteInfo\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n    case ManagementScreens.JoinRequests:\n      return (\n        <ManageJoinRequests\n          chatId={chatId}\n          isActive={isActive}\n          onClose={onClose}\n        />\n      );\n  }\n\n  return undefined; // Never reached\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const managementType = selectCurrentManagementType(global);\n\n    return {\n      managementType,\n    };\n  },\n)(Management));\n","const VISA = /^4[0-9]{12}(?:[0-9]{1,3})?$/;\nconst MASTERCARD1 = /^5[1-5][0-9]{11,14}$/;\nconst MASTERCARD2 = /^2[2-7][0-9]{11,14}$/;\n\nexport enum CardType {\n  Default,\n  Visa,\n  Mastercard,\n}\n\nconst cards: Record<number, string> = {\n  [CardType.Default]: '',\n  [CardType.Visa]: 'visa',\n  [CardType.Mastercard]: 'mastercard',\n};\n\nexport function detectCardType(cardNumber: string): number {\n  cardNumber = cardNumber.replace(/\\s/g, '');\n  if (VISA.test(cardNumber)) {\n    return CardType.Visa;\n  }\n  if (MASTERCARD1.test(cardNumber) || MASTERCARD2.test(cardNumber)) {\n    return CardType.Mastercard;\n  }\n  return CardType.Default;\n}\n\nexport function detectCardTypeText(cardNumber: string): string {\n  const cardType = detectCardType(cardNumber);\n  return cards[cardType as number] || '';\n}\n","import type { StateReducer, Dispatch } from '../useReducer';\nimport useReducer from '../useReducer';\n\nexport type FormState = {\n  streetLine1: string;\n  streetLine2: string;\n  city: string;\n  state: string;\n  countryIso2: string;\n  postCode: string;\n  fullName: string;\n  email: string;\n  phone: string;\n  shipping: string;\n  cardNumber: string;\n  cardholder: string;\n  expiry: string;\n  cvv: string;\n  billingCountry: string;\n  billingZip: string;\n  saveInfo: boolean;\n  saveCredentials: boolean;\n  formErrors: Record<string, string>;\n};\n\nexport type FormActions = (\n  'changeAddress1' | 'changeAddress2' | 'changeCity' | 'changeState' | 'changeCountry' |\n  'changePostCode' | 'changeFullName' | 'changeEmail' | 'changePhone' | 'changeShipping' | 'updateUserInfo' |\n  'changeCardNumber' | 'changeCardholder' | 'changeExpiryDate' | 'changeCvvCode' | 'changeBillingCountry' |\n  'changeBillingZip' | 'changeSaveInfo' | 'changeSaveCredentials' | 'setFormErrors'\n);\nexport type FormEditDispatch = Dispatch<FormActions>;\n\nconst INITIAL_STATE: FormState = {\n  streetLine1: '',\n  streetLine2: '',\n  city: '',\n  state: '',\n  countryIso2: '',\n  postCode: '',\n  fullName: '',\n  email: '',\n  phone: '',\n  shipping: '',\n  cardNumber: '',\n  cardholder: '',\n  expiry: '',\n  cvv: '',\n  billingCountry: '',\n  billingZip: '',\n  saveInfo: true,\n  saveCredentials: false,\n  formErrors: {},\n};\n\nconst reducer: StateReducer<FormState, FormActions> = (state, action) => {\n  switch (action.type) {\n    case 'changeAddress1':\n      return {\n        ...state,\n        streetLine1: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine1: undefined,\n        },\n      };\n    case 'changeAddress2':\n      return {\n        ...state,\n        streetLine2: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          streetLine2: undefined,\n        },\n      };\n    case 'changeCity':\n      return {\n        ...state,\n        city: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          city: undefined,\n        },\n      };\n    case 'changeState':\n      return {\n        ...state,\n        state: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          state: undefined,\n        },\n      };\n    case 'changeCountry':\n      return {\n        ...state,\n        countryIso2: action.payload.iso2,\n        billingCountry: action.payload.defaultName,\n        formErrors: {\n          ...state.formErrors,\n          countryIso2: undefined,\n        },\n      };\n    case 'changePostCode':\n      return {\n        ...state,\n        postCode: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          postCode: undefined,\n        },\n      };\n    case 'changeFullName':\n      return {\n        ...state,\n        fullName: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          fullName: undefined,\n        },\n      };\n    case 'changeEmail':\n      return {\n        ...state,\n        email: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          email: undefined,\n        },\n      };\n    case 'changePhone':\n      return {\n        ...state,\n        phone: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          phone: undefined,\n        },\n      };\n    case 'changeShipping':\n      return { ...state, shipping: action.payload };\n    case 'changeCardNumber':\n      return {\n        ...state,\n        cardNumber: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardNumber: undefined,\n        },\n      };\n    case 'changeCardholder':\n      return {\n        ...state,\n        cardholder: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cardholder: undefined,\n        },\n      };\n    case 'changeExpiryDate':\n      return {\n        ...state,\n        expiry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          expiry: undefined,\n        },\n      };\n    case 'changeCvvCode':\n      return {\n        ...state,\n        cvv: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          cvv: undefined,\n        },\n      };\n    case 'changeBillingCountry':\n      return {\n        ...state,\n        billingCountry: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingCountry: undefined,\n        },\n      };\n    case 'changeBillingZip':\n      return {\n        ...state,\n        billingZip: action.payload,\n        formErrors: {\n          ...state.formErrors,\n          billingZip: undefined,\n        },\n      };\n    case 'changeSaveInfo':\n      return { ...state, saveInfo: action.payload };\n    case 'changeSaveCredentials':\n      return { ...state, saveCredentials: action.payload };\n    case 'updateUserInfo':\n      if (action.payload.country) {\n        return {\n          ...state,\n          ...action.payload,\n          billingCountry: action.payload.country,\n        };\n      }\n      return { ...state, ...action.payload };\n    case 'setFormErrors':\n      return {\n        ...state,\n        formErrors: {\n          ...state.formErrors,\n          ...action.payload,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\nconst usePaymentReducer = () => {\n  return useReducer(reducer, INITIAL_STATE);\n};\n\nexport default usePaymentReducer;\n","import type { RefObject } from 'react';\n\nimport { IS_TOUCH_ENV } from '../util/environment';\nimport { fastRaf } from '../util/schedulers';\nimport { useEffect } from '../lib/teact/teact';\n\nconst DEFAULT_DURATION = 400;\n\nexport default function useFocusAfterAnimation(\n  ref: RefObject<HTMLInputElement>, animationDuration = DEFAULT_DURATION,\n) {\n  useEffect(() => {\n    if (IS_TOUCH_ENV) {\n      return;\n    }\n\n    setTimeout(() => {\n      fastRaf(() => {\n        if (ref.current) {\n          ref.current.focus();\n        }\n      });\n    }, animationDuration);\n  }, [ref, animationDuration]);\n}\n","import type { ChangeEvent, RefObject } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\ntype OwnProps = {\n  id?: string;\n  value?: string;\n  label?: string;\n  error?: string;\n  ref?: RefObject<HTMLSelectElement>;\n  hasArrow?: boolean;\n  placeholder?: string;\n  onChange?: (e: ChangeEvent<HTMLSelectElement>) => void;\n  children: React.ReactNode;\n};\n\nconst Select: FC<OwnProps> = (props) => {\n  const {\n    id,\n    value,\n    label,\n    hasArrow,\n    error,\n    ref,\n    placeholder,\n    onChange,\n    children,\n  } = props;\n  const labelText = error || label;\n  const fullClassName = buildClassName(\n    'input-group',\n    value && 'touched',\n    error && 'error',\n    labelText && 'with-label',\n    hasArrow && 'with-arrow',\n    'input-group',\n  );\n\n  return (\n    <div className={fullClassName}>\n      <select\n        className=\"form-control\"\n        id={id}\n        value={value || ''}\n        onChange={onChange}\n        placeholder={placeholder || label}\n        ref={ref}\n      >\n        {children}\n      </select>\n      {labelText && id && (\n        <label htmlFor={id}>{labelText}</label>\n      )}\n    </div>\n  );\n};\n\nexport default memo(Select);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useRef, useCallback, useEffect, memo,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Select from '../ui/Select';\nimport Checkbox from '../ui/Checkbox';\n\nimport './ShippingInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  needEmail: boolean;\n  needPhone: boolean;\n  needName: boolean;\n  needAddress: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst ShippingInfo: FC<OwnProps> = ({\n  state,\n  needEmail,\n  needPhone,\n  needName,\n  needAddress,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const inputRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const phoneRef = useRef<HTMLInputElement>(null);\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.countryIso2) {\n      selectCountryRef.current.value = state.countryIso2;\n    }\n  }, [state.countryIso2]);\n\n  const lang = useLang();\n\n  useFocusAfterAnimation(inputRef);\n\n  const handleAddress1Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress1', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleAddress2Change = useCallback((e) => {\n    dispatch({ type: 'changeAddress2', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCityChange = useCallback((e) => {\n    dispatch({ type: 'changeCity', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleStateChange = useCallback((e) => {\n    dispatch({ type: 'changeState', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeCountry', payload: countryList.find((country) => country.iso2 === e.target.value) });\n  }, [countryList, dispatch]);\n\n  const handlePostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changePostCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleFullNameChange = useCallback((e) => {\n    dispatch({ type: 'changeFullName', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleEmailChange = useCallback((e) => {\n    dispatch({ type: 'changeEmail', payload: e.target.value });\n  }, [dispatch]);\n\n  const handlePhoneChange = useCallback((e) => {\n    let { value } = e.target;\n    value = `+${value.replace(/\\D/g, '')}`;\n    if (phoneRef.current) {\n      phoneRef.current.value = value;\n    }\n    dispatch({ type: 'changePhone', payload: value });\n  }, [dispatch]);\n\n  const handleSaveInfoChange = useCallback((e) => {\n    dispatch({ type: 'changeSaveInfo', payload: e.target.value });\n  }, [dispatch]);\n\n  const { formErrors } = state;\n  return (\n    <div className=\"ShippingInfo\">\n      <form>\n        {needAddress ? (\n          <div>\n            <h5>{lang('PaymentShippingAddress')}</h5>\n            <InputText\n              ref={inputRef}\n              label={lang('PaymentShippingAddress1Placeholder')}\n              onChange={handleAddress1Change}\n              value={state.streetLine1}\n              inputMode=\"text\"\n              error={formErrors.streetLine1}\n            />\n            <InputText\n              label={lang('PaymentShippingAddress2Placeholder')}\n              onChange={handleAddress2Change}\n              value={state.streetLine2}\n              inputMode=\"text\"\n              error={formErrors.streetLine2}\n            />\n            <InputText\n              label={lang('PaymentShippingCityPlaceholder')}\n              onChange={handleCityChange}\n              value={state.city}\n              inputMode=\"text\"\n              error={formErrors.city}\n            />\n            <InputText\n              label={lang('PaymentShippingStatePlaceholder')}\n              onChange={handleStateChange}\n              value={state.state}\n              inputMode=\"text\"\n              error={formErrors.state}\n            />\n            <Select\n              label={lang('PaymentShippingCountry')}\n              placeholder={lang('PaymentShippingCountry')}\n              onChange={handleCountryChange}\n              value={state.countryIso2}\n              hasArrow={Boolean(true)}\n              id=\"shipping-country\"\n              error={formErrors.countryIso2}\n              ref={selectCountryRef}\n            >\n              {countryList.map(({ defaultName, name, iso2 }) => (\n                <option\n                  value={iso2}\n                  className=\"county-item\"\n                >\n                  {defaultName || name}\n                </option>\n              ))}\n            </Select>\n\n            <InputText\n              label={lang('PaymentShippingZipPlaceholder')}\n              onChange={handlePostCodeChange}\n              value={state.postCode}\n              inputMode=\"text\"\n              error={formErrors.postCode}\n            />\n          </div>\n        ) : undefined}\n        { needName || needEmail || needPhone ? (\n          <h5>{lang('PaymentShippingReceiver')}</h5>\n        ) : undefined }\n        { needName && (\n          <InputText\n            label={lang('PaymentShippingName')}\n            onChange={handleFullNameChange}\n            value={state.fullName}\n            inputMode=\"text\"\n            error={formErrors.fullName}\n          />\n        ) }\n        { needEmail && (\n          <InputText\n            label={lang('PaymentShippingEmailPlaceholder')}\n            onChange={handleEmailChange}\n            value={state.email}\n            inputMode=\"email\"\n            error={formErrors.email}\n          />\n        ) }\n        { needPhone && (\n          <InputText\n            label={lang('PaymentShippingPhoneNumber')}\n            onChange={handlePhoneChange}\n            value={state.phone}\n            inputMode=\"tel\"\n            error={formErrors.phone}\n            ref={phoneRef}\n          />\n        ) }\n        <Checkbox\n          label={lang('PaymentShippingSave')}\n          subLabel={lang('PaymentShippingSaveInfo')}\n          checked={Boolean(state.saveInfo)}\n          onChange={handleSaveInfoChange}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(ShippingInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useMemo, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ShippingOption } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport RadioGroup from '../ui/RadioGroup';\n\nimport './Shipping.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  shippingOptions: ShippingOption[];\n  currency?: string;\n  dispatch: FormEditDispatch;\n};\n\nconst Shipping: FC<OwnProps> = ({\n  state,\n  shippingOptions,\n  currency,\n  dispatch,\n}) => {\n  const lang = useLang();\n\n  useEffect(() => {\n    if (!shippingOptions || state.shipping) {\n      return;\n    }\n    dispatch({ type: 'changeShipping', payload: shippingOptions[0].id });\n  }, [shippingOptions, state.shipping, dispatch]);\n\n  const handleShippingSelect = useCallback((value) => {\n    dispatch({ type: 'changeShipping', payload: value });\n  }, [dispatch]);\n\n  const options = useMemo(() => (shippingOptions.map(({ id: value, title: label, amount }) => ({\n    label,\n    subLabel: formatCurrency(amount, currency, lang.code),\n    value,\n  }))), [shippingOptions, currency, lang.code]);\n\n  return (\n    <div className=\"Shipping\">\n      <form>\n        <p>{lang('PaymentShippingMethod')}</p>\n        <RadioGroup\n          name=\"shipping-options\"\n          options={options}\n          onChange={handleShippingSelect}\n          selected={state.shipping}\n        />\n      </form>\n    </div>\n  );\n};\n\nexport default memo(Shipping);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport type { LangCode, Price } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport buildClassName from '../../util/buildClassName';\nimport useLang from '../../hooks/useLang';\n\nimport './Checkout.scss';\n\nexport type OwnProps = {\n  invoiceContent?: {\n    title?: string;\n    text?: string;\n    photoUrl?: string;\n  };\n  checkoutInfo?: {\n    paymentMethod?: string;\n    paymentProvider?: string;\n    shippingAddress?: string;\n    name?: string;\n    phone?: string;\n    shippingMethod?: string;\n  };\n  prices?: Price[];\n  totalPrice?: number;\n  shippingPrices?: Price[];\n  currency?: string;\n};\n\nconst Checkout: FC<OwnProps> = ({\n  invoiceContent,\n  prices,\n  shippingPrices,\n  checkoutInfo,\n  currency,\n  totalPrice,\n}) => {\n  const lang = useLang();\n\n  const { photoUrl, title, text } = invoiceContent || {};\n  const {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  } = (checkoutInfo || {});\n\n  return (\n    <div className=\"Checkout\">\n      <div className=\"description has-image\">\n        {photoUrl && <img src={photoUrl} alt=\"\" />}\n        <div className=\"text\">\n          <h5>{title}</h5>\n          <p>{text}</p>\n        </div>\n      </div>\n      <div className=\"price-info\">\n        { prices && prices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { shippingPrices && shippingPrices.map((item) => (\n          renderPaymentItem(lang.code, item.label, item.amount, currency)\n        )) }\n        { totalPrice !== undefined && (\n          renderPaymentItem(lang.code, lang('Checkout.TotalAmount'), totalPrice, currency, true)\n        ) }\n      </div>\n      <div className=\"invoice-info\">\n        {paymentMethod && renderCheckoutItem('icon-card', paymentMethod, lang('PaymentCheckoutMethod'))}\n        {paymentProvider && renderCheckoutItem(\n          buildClassName('provider', paymentProvider.toLowerCase()),\n          paymentProvider,\n          lang('PaymentCheckoutProvider'),\n        )}\n        {shippingAddress && renderCheckoutItem('icon-location', shippingAddress, lang('PaymentShippingAddress'))}\n        {name && renderCheckoutItem('icon-user', name, lang('PaymentCheckoutName'))}\n        {phone && renderCheckoutItem('icon-phone', phone, lang('PaymentCheckoutPhoneNumber'))}\n        {shippingMethod && renderCheckoutItem('icon-truck', shippingMethod, lang('PaymentCheckoutShippingMethod'))}\n      </div>\n    </div>\n  );\n};\n\nfunction renderPaymentItem(\n  langCode: LangCode | undefined, title: string, value: number, currency?: string, main = false,\n) {\n  return (\n    <div className={`price-info-item ${main ? 'price-info-item-main' : ''}`}>\n      <div className=\"title\">\n        { title }\n      </div>\n      <div className=\"value\">\n        {formatCurrency(value, currency, langCode)}\n      </div>\n    </div>\n  );\n}\n\nfunction renderCheckoutItem(icon: string, title: string, data: string) {\n  return (\n    <div className=\"checkout-info-item\">\n      <i className={icon}> </i>\n      <div className=\"info\">\n        <div className=\"title\">\n          { title }\n        </div>\n        <p className=\"data\">\n          { data }\n        </p>\n      </div>\n    </div>\n  );\n}\n\nexport default memo(Checkout);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useCallback, useRef } from '../../lib/teact/teact';\n\nimport { formatCardExpiry } from '../middle/helpers/inputFormatters';\n\nimport InputText from '../ui/InputText';\nimport useLang from '../../hooks/useLang';\n\nconst MAX_FIELD_LENGTH = 5;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst ExpiryInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const expiryInputRef = useRef<HTMLInputElement>(null);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.key === 'Backspace' && value.charAt(value.length - 1) === '/') {\n      const newValue = value.slice(0, value.length - 1);\n      if (expiryInputRef.current) {\n        expiryInputRef.current.value = newValue;\n      }\n    }\n  }, [value]);\n\n  const handleChange = useCallback((e) => {\n    onChange(formatCardExpiry(e.target.value));\n  }, [onChange]);\n\n  return (\n    <InputText\n      label={lang('PaymentCardExpireDate')}\n      ref={expiryInputRef}\n      onChange={handleChange}\n      onKeyDown={handleKeyDown}\n      value={value}\n      error={error}\n      inputMode=\"numeric\"\n      maxLength={MAX_FIELD_LENGTH}\n    />\n  );\n};\n\nexport default memo(ExpiryInput);\n","export function formatCardExpiry(input: string) {\n  input = input.replace(/[^\\d]/g, '').slice(0, 4);\n  const parts = input.match(/.{1,2}/g);\n  if (parts?.[0] && Number(parts[0]) > 12) {\n    parts[0] = '12';\n  }\n  if (parts?.[0] && parts[0].length === 2 && !parts[1]) {\n    parts[1] = '';\n  }\n  return parts ? parts.join('/') : '';\n}\n\nexport function formatCardNumber(input: string) {\n  input = input.replace(/[^\\d]/g, '');\n  const parts = input.match(/.{1,4}/g);\n  return parts ? parts.join(' ') : '';\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useState, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport { formatCardNumber } from '../middle/helpers/inputFormatters';\nimport { detectCardType, CardType } from '../common/helpers/detectCardType';\nimport useFocusAfterAnimation from '../../hooks/useFocusAfterAnimation';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\n\nimport './CardInput.scss';\n\nimport mastercardIconPath from '../../assets/mastercard.svg';\nimport visaIconPath from '../../assets/visa.svg';\n\nconst CARD_NUMBER_MAX_LENGTH = 23;\n\nexport type OwnProps = {\n  value: string;\n  error?: string;\n  onChange: (value: string) => void;\n};\n\nconst CardInput : FC<OwnProps> = ({ value, error, onChange }) => {\n  const lang = useLang();\n  // eslint-disable-next-line no-null/no-null\n  const cardNumberRef = useRef<HTMLInputElement>(null);\n\n  useFocusAfterAnimation(cardNumberRef);\n\n  const [cardType, setCardType] = useState<number>(CardType.Default);\n  useEffect(() => {\n    const newCardType = detectCardType(value);\n    setCardType(newCardType);\n  // eslint-disable-next-line\n  }, []);\n\n  const handleChange = useCallback((e) => {\n    const newValue = formatCardNumber(e.target.value);\n    const newCardType = detectCardType(e.target.value);\n    setCardType(newCardType);\n    onChange(newValue);\n    if (cardNumberRef.current) {\n      cardNumberRef.current.value = newValue;\n    }\n  }, [onChange, cardNumberRef]);\n\n  const cardIcon = getCardIcon(cardType);\n\n  return (\n    <div className=\"CardInput\">\n      <span className=\"left-addon\">{cardIcon}</span>\n      <InputText\n        ref={cardNumberRef}\n        label={lang('PaymentCardNumber')}\n        onChange={handleChange}\n        value={value}\n        inputMode=\"numeric\"\n        className={cardType ? 'has-left-addon' : ''}\n        error={error}\n        maxLength={CARD_NUMBER_MAX_LENGTH}\n      />\n    </div>\n  );\n};\n\nexport default memo(CardInput);\n\nfunction getCardIcon(cardType: CardType) {\n  switch (cardType) {\n    case CardType.Mastercard:\n      return <img src={mastercardIconPath} alt=\"\" />;\n    case CardType.Visa:\n      return <img src={visaIconPath} alt=\"\" />;\n    default:\n      return undefined;\n  }\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useCallback, memo, useRef, useEffect,\n} from '../../lib/teact/teact';\n\nimport type { ApiCountry } from '../../api/types';\n\nimport type { FormState, FormEditDispatch } from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport InputText from '../ui/InputText';\nimport Checkbox from '../ui/Checkbox';\nimport Select from '../ui/Select';\nimport ExpiryInput from './ExpiryInput';\nimport CardInput from './CardInput';\n\nimport './PaymentInfo.scss';\n\nexport type OwnProps = {\n  state: FormState;\n  canSaveCredentials: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  countryList: ApiCountry[];\n  dispatch: FormEditDispatch;\n};\n\nconst PaymentInfo: FC<OwnProps> = ({\n  state,\n  canSaveCredentials,\n  needCardholderName,\n  needCountry,\n  needZip,\n  countryList,\n  dispatch,\n}) => {\n  // eslint-disable-next-line no-null/no-null\n  const selectCountryRef = useRef<HTMLSelectElement>(null);\n\n  useEffect(() => {\n    if (selectCountryRef.current\n      && selectCountryRef.current.value !== state.billingCountry) {\n      selectCountryRef.current.value = state.billingCountry;\n    }\n  }, [state.billingCountry]);\n\n  const handleCardNumberChange = useCallback((value) => {\n    dispatch({ type: 'changeCardNumber', payload: value });\n  }, [dispatch]);\n\n  const handleCardholderChange = useCallback((e) => {\n    dispatch({ type: 'changeCardholder', payload: e.target.value.toUpperCase() });\n  }, [dispatch]);\n\n  const handleExpiryChange = useCallback((value) => {\n    dispatch({ type: 'changeExpiryDate', payload: value });\n  }, [dispatch]);\n\n  const handleCvvChange = useCallback((e) => {\n    dispatch({ type: 'changeCvvCode', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleCountryChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingCountry', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleBillingPostCodeChange = useCallback((e) => {\n    dispatch({ type: 'changeBillingZip', payload: e.target.value });\n  }, [dispatch]);\n\n  const handleChangeSaveCredentials = useCallback((e) => {\n    dispatch({ type: 'changeSaveCredentials', payload: e.target.value });\n  }, [dispatch]);\n\n  const lang = useLang();\n\n  const { formErrors = {} } = state;\n\n  return (\n    <div className=\"PaymentInfo\">\n      <form>\n        <h5>{lang('PaymentCardTitle')}</h5>\n        <CardInput\n          onChange={handleCardNumberChange}\n          value={state.cardNumber}\n          error={formErrors.cardNumber}\n        />\n        { needCardholderName && (\n          <InputText\n            label={lang('PaymentCardName')}\n            onChange={handleCardholderChange}\n            value={state.cardholder}\n            inputMode=\"text\"\n            error={formErrors.cardholder}\n          />\n        )}\n        <section className=\"inline-inputs\">\n          <ExpiryInput\n            value={state.expiry}\n            onChange={handleExpiryChange}\n            error={formErrors.expiry}\n          />\n          <InputText\n            label={lang('lng_payments_card_cvc')}\n            onChange={handleCvvChange}\n            value={state.cvv}\n            inputMode=\"numeric\"\n            maxLength={3}\n            error={formErrors.cvv}\n          />\n        </section>\n        { needCountry || needZip ? (\n          <h5>{lang('PaymentBillingAddress')}</h5>\n        ) : undefined }\n        { needCountry && (\n          <Select\n            label={lang('PaymentShippingCountry')}\n            placeholder={lang('PaymentShippingCountry')}\n            onChange={handleCountryChange}\n            value={state.billingCountry}\n            hasArrow={Boolean(true)}\n            id=\"billing-country\"\n            error={formErrors.billingCountry}\n            ref={selectCountryRef}\n          >\n            {\n              countryList.map(({ defaultName, name }) => (\n                <option\n                  value={defaultName}\n                  className=\"county-item\"\n                >\n                  {defaultName || name}\n                </option>\n              ))\n            }\n          </Select>\n        ) }\n        { needZip && (\n          <InputText\n            label={lang('PaymentShippingZipPlaceholder')}\n            onChange={handleBillingPostCodeChange}\n            value={state.billingZip}\n            inputMode=\"text\"\n            error={formErrors.billingZip}\n          />\n        )}\n        { canSaveCredentials && (\n          <Checkbox\n            label={lang('PaymentCardSavePaymentInformation')}\n            checked={state.saveCredentials}\n            onChange={handleChangeSaveCredentials}\n          />\n        ) }\n      </form>\n    </div>\n  );\n};\n\nexport default memo(PaymentInfo);\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo } from '../../lib/teact/teact';\n\nimport useLang from '../../hooks/useLang';\n\nimport './ConfirmPayment.scss';\n\nexport type OwnProps = {\n  url: string;\n};\n\nconst ConfirmPayment: FC<OwnProps> = ({ url }) => {\n  const lang = useLang();\n\n  return (\n    <div className=\"ConfirmPayment\">\n      <iframe\n        src={url}\n        title={lang('Checkout.WebConfirmation.Title')}\n        allow=\"payment\"\n        sandbox=\"allow-forms allow-scripts allow-same-origin allow-top-navigation\"\n        className=\"ConfirmPayment__content\"\n      />\n    </div>\n  );\n};\n\nexport default memo(ConfirmPayment);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  memo, useCallback, useEffect, useMemo, useState,\n} from '../../lib/teact/teact';\nimport { getActions, withGlobal } from '../../global';\n\nimport type { GlobalState } from '../../global/types';\nimport type { ApiCountry } from '../../api/types';\nimport type { ShippingOption, Price } from '../../types';\nimport { PaymentStep } from '../../types';\n\nimport { formatCurrency } from '../../util/formatCurrency';\nimport { detectCardTypeText } from '../common/helpers/detectCardType';\nimport type { FormState } from '../../hooks/reducers/usePaymentReducer';\nimport usePaymentReducer from '../../hooks/reducers/usePaymentReducer';\nimport useLang from '../../hooks/useLang';\n\nimport ShippingInfo from './ShippingInfo';\nimport Shipping from './Shipping';\nimport Checkout from './Checkout';\nimport PaymentInfo from './PaymentInfo';\nimport Button from '../ui/Button';\nimport Modal from '../ui/Modal';\nimport Transition from '../ui/Transition';\nimport Spinner from '../ui/Spinner';\nimport ConfirmPayment from './ConfirmPayment';\n\nimport './PaymentModal.scss';\n\nconst DEFAULT_PROVIDER = 'stripe';\nconst DONATE_PROVIDER = 'smartglocal';\nconst SUPPORTED_PROVIDERS = new Set([DEFAULT_PROVIDER, DONATE_PROVIDER]);\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  nameRequested?: boolean;\n  shippingAddressRequested?: boolean;\n  phoneRequested?: boolean;\n  emailRequested?: boolean;\n  flexible?: boolean;\n  phoneToProvider?: boolean;\n  emailToProvider?: boolean;\n  currency?: string;\n  prices?: Price[];\n  isProviderError: boolean;\n  needCardholderName?: boolean;\n  needCountry?: boolean;\n  needZip?: boolean;\n  confirmPaymentUrl?: string;\n  countryList: ApiCountry[];\n};\n\ntype GlobalStateProps = Pick<GlobalState['payment'], (\n  'step' | 'shippingOptions' |\n  'savedInfo' | 'canSaveCredentials' | 'nativeProvider' | 'passwordMissing' | 'invoiceContent' |\n  'error'\n)>;\n\nconst Invoice: FC<OwnProps & StateProps & GlobalStateProps> = ({\n  isOpen,\n  onClose,\n  step,\n  shippingOptions,\n  savedInfo,\n  canSaveCredentials,\n  nameRequested,\n  shippingAddressRequested,\n  phoneRequested,\n  emailRequested,\n  phoneToProvider,\n  emailToProvider,\n  currency,\n  passwordMissing,\n  isProviderError,\n  invoiceContent,\n  nativeProvider,\n  prices,\n  needCardholderName,\n  needCountry,\n  needZip,\n  confirmPaymentUrl,\n  error,\n  countryList,\n}) => {\n  const {\n    validateRequestedInfo,\n    sendPaymentForm,\n    setPaymentStep,\n    sendCredentialsInfo,\n    clearPaymentError,\n  } = getActions();\n\n  const [paymentState, paymentDispatch] = usePaymentReducer();\n  const [isLoading, setIsLoading] = useState(false);\n  const lang = useLang();\n  const canRenderFooter = step !== PaymentStep.ConfirmPayment;\n\n  useEffect(() => {\n    if (step || error) {\n      setIsLoading(false);\n    }\n  }, [step, error]);\n\n  useEffect(() => {\n    if (error?.field) {\n      paymentDispatch({\n        type: 'setFormErrors',\n        payload: {\n          [error.field]: error.message,\n        },\n      });\n    }\n  }, [error, paymentDispatch]);\n\n  useEffect(() => {\n    if (savedInfo) {\n      const {\n        name: fullName, phone, email, shippingAddress,\n      } = savedInfo;\n      const {\n        countryIso2, ...shippingAddressRest\n      } = shippingAddress || {};\n      const shippingCountry = countryIso2 && countryList.find(({ iso2 }) => iso2 === countryIso2)!.defaultName;\n      paymentDispatch({\n        type: 'updateUserInfo',\n        payload: {\n          fullName,\n          phone: phone && phone.charAt(0) !== '+'\n            ? `+${phone}`\n            : phone,\n          email,\n          ...(shippingCountry && {\n            country: shippingCountry,\n            ...shippingAddressRest,\n          }),\n        },\n      });\n    }\n  }, [savedInfo, paymentDispatch, countryList]);\n\n  const handleErrorModalClose = useCallback(() => {\n    clearPaymentError();\n  }, [clearPaymentError]);\n\n  const totalPrice = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return 0;\n    }\n\n    return getTotalPrice(prices, shippingOptions, paymentState.shipping);\n  }, [step, paymentState.shipping, prices, shippingOptions]);\n\n  const checkoutInfo = useMemo(() => {\n    if (step !== PaymentStep.Checkout) {\n      return undefined;\n    }\n    return getCheckoutInfo(paymentState, shippingOptions, nativeProvider || '');\n  }, [step, paymentState, shippingOptions, nativeProvider]);\n\n  function renderError() {\n    if (!error) {\n      return undefined;\n    }\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={Boolean(error)}\n        onClose={handleErrorModalClose}\n      >\n        <h4>{error.description || 'Error'}</h4>\n        <p>{error.description || 'Error'}</p>\n        <Button\n          isText\n          onClick={clearPaymentError}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  function renderModalContent(currentStep: PaymentStep) {\n    switch (currentStep) {\n      case PaymentStep.ShippingInfo:\n        return (\n          <ShippingInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            needAddress={Boolean(shippingAddressRequested)}\n            needEmail={Boolean(emailRequested || emailToProvider)}\n            needPhone={Boolean(phoneRequested || phoneToProvider)}\n            needName={Boolean(nameRequested)}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Shipping:\n        return (\n          <Shipping\n            state={paymentState}\n            dispatch={paymentDispatch}\n            shippingOptions={shippingOptions || []}\n            currency={currency}\n          />\n        );\n      case PaymentStep.PaymentInfo:\n        return (\n          <PaymentInfo\n            state={paymentState}\n            dispatch={paymentDispatch}\n            canSaveCredentials={Boolean(!passwordMissing && canSaveCredentials)}\n            needCardholderName={needCardholderName}\n            needCountry={needCountry}\n            needZip={needZip}\n            countryList={countryList}\n          />\n        );\n      case PaymentStep.Checkout:\n        return (\n          <Checkout\n            prices={prices}\n            shippingPrices={paymentState.shipping && shippingOptions\n              ? getShippingPrices(shippingOptions, paymentState.shipping)\n              : undefined}\n            totalPrice={totalPrice}\n            invoiceContent={invoiceContent}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        );\n      case PaymentStep.ConfirmPayment:\n        return (\n          <ConfirmPayment\n            url={confirmPaymentUrl!}\n          />\n        );\n      default:\n        return undefined;\n    }\n  }\n\n  const validateRequest = useCallback(() => {\n    const { saveInfo } = paymentState;\n    const requestInfo = getRequestInfo(paymentState);\n    validateRequestedInfo({ requestInfo, saveInfo });\n  }, [validateRequestedInfo, paymentState]);\n\n  const sendCredentials = useCallback(() => {\n    const credentials = getCredentials(paymentState);\n    sendCredentialsInfo({\n      credentials,\n    });\n  }, [sendCredentialsInfo, paymentState]);\n\n  const sendForm = useCallback(() => {\n    sendPaymentForm({\n      shippingOptionId: paymentState.shipping,\n      saveCredentials: paymentState.saveCredentials,\n    });\n  }, [sendPaymentForm, paymentState]);\n\n  const setStep = useCallback((nextStep) => {\n    setPaymentStep({ step: nextStep });\n  }, [setPaymentStep]);\n\n  const handleButtonClick = useCallback(() => {\n    setIsLoading(true);\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return validateRequest();\n      case PaymentStep.Shipping:\n        return setStep(PaymentStep.PaymentInfo);\n      case PaymentStep.PaymentInfo:\n        return sendCredentials();\n      case PaymentStep.Checkout:\n        return sendForm();\n      default:\n        return () => {\n        };\n    }\n  }, [step, validateRequest, setStep, sendCredentials, sendForm]);\n\n  const modalHeader = useMemo(() => {\n    switch (step) {\n      case PaymentStep.ShippingInfo:\n        return lang('PaymentShippingInfo');\n      case PaymentStep.Shipping:\n        return lang('PaymentShippingMethod');\n      case PaymentStep.PaymentInfo:\n        return lang('PaymentCardInfo');\n      case PaymentStep.Checkout:\n        return lang('PaymentCheckout');\n      case PaymentStep.ConfirmPayment:\n        return lang('Checkout.WebConfirmation.Title');\n      default:\n        return '';\n    }\n  }, [step, lang]);\n\n  const buttonText = useMemo(() => {\n    switch (step) {\n      case PaymentStep.Checkout:\n        return lang('Checkout.PayPrice', formatCurrency(totalPrice, currency, lang.code));\n      default:\n        return lang('Next');\n    }\n  }, [step, lang, currency, totalPrice]);\n\n  if (isProviderError) {\n    return (\n      <Modal\n        className=\"error\"\n        isOpen={isOpen}\n        onClose={onClose}\n      >\n        <p>\n          Sorry, Telegram WebZ doesn&apos;t support payments with this provider yet. <br />\n          Please use one of our mobile apps to do this.\n        </p>\n        <Button\n          isText\n          onClick={onClose}\n        >\n          {lang('OK')}\n        </Button>\n      </Modal>\n    );\n  }\n\n  return (\n    <Modal\n      className=\"PaymentModal\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n        <Button\n          className=\"close-button\"\n          color=\"translucent\"\n          round\n          size=\"smaller\"\n          onClick={onClose}\n          ariaLabel=\"Close\"\n        >\n          <i className=\"icon-close\" />\n        </Button>\n        <h3>{modalHeader}</h3>\n      </div>\n      {step !== undefined ? (\n        <Transition name=\"slide\" activeKey={step}>\n          <div className=\"content custom-scroll\">\n            {renderModalContent(step)}\n          </div>\n        </Transition>\n      ) : (\n        <div className=\"empty-content\">\n          <Spinner color=\"gray\" />\n        </div>\n      )}\n      {canRenderFooter && (\n        <div className=\"footer\">\n          <Button\n            type=\"submit\"\n            onClick={handleButtonClick}\n            disabled={isLoading}\n            isLoading={isLoading}\n          >\n            {buttonText}\n          </Button>\n        </div>\n      )}\n      {error && !error.field && renderError()}\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps & GlobalStateProps => {\n    const {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      invoice,\n      invoiceContent,\n      nativeProvider,\n      nativeParams,\n      passwordMissing,\n      error,\n      confirmPaymentUrl,\n    } = global.payment;\n\n    const isProviderError = Boolean(invoice && (!nativeProvider || !SUPPORTED_PROVIDERS.has(nativeProvider)));\n    const { needCardholderName, needCountry, needZip } = (nativeParams || {});\n    const {\n      nameRequested,\n      phoneRequested,\n      emailRequested,\n      shippingAddressRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n    } = (invoice || {});\n\n    return {\n      step,\n      shippingOptions,\n      savedInfo,\n      canSaveCredentials,\n      nativeProvider,\n      passwordMissing,\n      nameRequested,\n      shippingAddressRequested,\n      phoneRequested,\n      emailRequested,\n      flexible,\n      phoneToProvider,\n      emailToProvider,\n      currency,\n      prices,\n      isProviderError,\n      invoiceContent,\n      needCardholderName,\n      needCountry,\n      needZip,\n      error,\n      confirmPaymentUrl,\n      countryList: global.countryList.general,\n    };\n  },\n)(Invoice));\n\nfunction findShippingOption(shippingOptions: ShippingOption[], optionId: string) {\n  return shippingOptions.find(({ id }) => id === optionId);\n}\n\nfunction getShippingPrices(shippingOptions: ShippingOption[], shippingOption: string) {\n  const option = findShippingOption(shippingOptions, shippingOption);\n  return option?.prices;\n}\n\nfunction getTotalPrice(prices: Price[] = [], shippingOptions: ShippingOption[] | undefined, shippingOption: string) {\n  const shippingPrices = shippingOptions\n    ? getShippingPrices(shippingOptions, shippingOption)\n    : [];\n  let total = 0;\n  const totalPrices = prices.concat(shippingPrices || []);\n  total = totalPrices.reduce((acc, cur) => {\n    return acc + cur.amount;\n  }, total);\n  return total;\n}\n\nfunction getCheckoutInfo(state: FormState, shippingOptions: ShippingOption[] | undefined, paymentProvider: string) {\n  const cardTypeText = detectCardTypeText(state.cardNumber);\n  const paymentMethod = `${cardTypeText} *${state.cardNumber.slice(-4)}`;\n  const shippingAddress = state.streetLine1\n    ? `${state.streetLine1}, ${state.city}, ${state.countryIso2}`\n    : undefined;\n  const { phone, fullName: name } = state;\n  const shippingOption = shippingOptions ? findShippingOption(shippingOptions, state.shipping) : undefined;\n  const shippingMethod = shippingOption?.title;\n  return {\n    paymentMethod,\n    paymentProvider,\n    shippingAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n\nfunction getRequestInfo(paymentState: FormState) {\n  const {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n    fullName: name,\n    phone,\n    email,\n  } = paymentState;\n\n  const shippingAddress = {\n    streetLine1,\n    streetLine2,\n    city,\n    state,\n    countryIso2,\n    postCode,\n  };\n\n  return {\n    name,\n    phone,\n    email,\n    shippingAddress,\n  };\n}\n\nfunction getCredentials(paymentState: FormState) {\n  const {\n    cardNumber, cardholder, expiry, cvv, billingCountry, billingZip,\n  } = paymentState;\n  const [expiryMonth, expiryYear] = expiry.split('/');\n  const data = {\n    cardNumber,\n    cardholder,\n    expiryMonth,\n    expiryYear,\n    cvv,\n    country: billingCountry,\n    zip: billingZip,\n  };\n\n  return {\n    data,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { memo, useMemo } from '../../lib/teact/teact';\nimport { withGlobal } from '../../global';\n\nimport type { Price } from '../../types';\nimport type { ApiShippingAddress } from '../../api/types';\n\nimport useLang from '../../hooks/useLang';\n\nimport Checkout from './Checkout';\nimport Modal from '../ui/Modal';\nimport Button from '../ui/Button';\n\nimport './PaymentModal.scss';\n\nexport type OwnProps = {\n  isOpen: boolean;\n  onClose: () => void;\n};\n\ntype StateProps = {\n  prices?: Price[];\n  shippingPrices: any;\n  totalAmount?: number;\n  currency?: string;\n  info?: {\n    shippingAddress?: ApiShippingAddress;\n    phone?: string;\n    name?: string;\n  };\n  photoUrl?: string;\n  text?: string;\n  title?: string;\n  credentialsTitle?: string;\n  shippingMethod?: string;\n};\n\nconst ReceiptModal: FC<OwnProps & StateProps> = ({\n  isOpen,\n  onClose,\n  prices,\n  shippingPrices,\n  totalAmount,\n  currency,\n  info,\n  photoUrl,\n  text,\n  title,\n  credentialsTitle,\n  shippingMethod,\n}) => {\n  const lang = useLang();\n  const checkoutInfo = useMemo(() => {\n    return getCheckoutInfo(credentialsTitle, info, shippingMethod);\n  }, [info, shippingMethod, credentialsTitle]);\n\n  return (\n    <Modal\n      className=\"PaymentModal PaymentModal-receipt\"\n      isOpen={isOpen}\n      onClose={onClose}\n    >\n      <div>\n        <div className=\"header\" dir={lang.isRtl ? 'rtl' : undefined}>\n          <Button\n            className=\"close-button\"\n            color=\"translucent\"\n            round\n            size=\"smaller\"\n            onClick={onClose}\n            ariaLabel=\"Close\"\n          >\n            <i className=\"icon-close\" />\n          </Button>\n          <h3> {lang('PaymentReceipt')} </h3>\n        </div>\n        <div className=\"receipt-content custom-scroll\">\n          <Checkout\n            prices={prices}\n            shippingPrices={shippingPrices}\n            totalPrice={totalAmount}\n            invoiceContent={{\n              photoUrl,\n              text,\n              title,\n            }}\n            checkoutInfo={checkoutInfo}\n            currency={currency}\n          />\n        </div>\n      </div>\n    </Modal>\n  );\n};\n\nexport default memo(withGlobal<OwnProps>(\n  (global): StateProps => {\n    const { receipt } = global.payment;\n    const {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    } = (receipt || {});\n\n    return {\n      currency,\n      prices,\n      info,\n      totalAmount,\n      credentialsTitle,\n      shippingPrices,\n      shippingMethod,\n      photoUrl,\n      text,\n      title,\n    };\n  },\n)(ReceiptModal));\n\nfunction getCheckoutInfo(paymentMethod?: string,\n  info?:\n  { phone?: string;\n    name?: string;\n    shippingAddress?: ApiShippingAddress;\n  },\n  shippingMethod?: string) {\n  if (!info) {\n    return { paymentMethod };\n  }\n  const { shippingAddress } = info;\n  const fullAddress = shippingAddress?.streetLine1\n    ? `${shippingAddress.streetLine1}, ${shippingAddress.city}, ${shippingAddress.countryIso2}`\n    : undefined;\n  const { phone, name } = info;\n  return {\n    paymentMethod,\n    paymentProvider: 'Stripe',\n    shippingAddress: fullAddress,\n    name,\n    phone,\n    shippingMethod,\n  };\n}\n","import type { FC } from '../../lib/teact/teact';\nimport React, { useCallback, memo } from '../../lib/teact/teact';\n\nimport { STICKER_SIZE_AUTH, STICKER_SIZE_AUTH_MOBILE, STICKER_SIZE_TWO_FA } from '../../config';\nimport { IS_SINGLE_COLUMN_LAYOUT } from '../../util/environment';\nimport { LOCAL_TGS_URLS } from './helpers/animatedAssets';\n\nimport AnimatedSticker from './AnimatedSticker';\n\nimport useTimeout from '../../hooks/useTimeout';\nimport useFlag from '../../hooks/useFlag';\n\nimport './PasswordMonkey.scss';\n\ntype OwnProps = {\n  isPasswordVisible: boolean;\n  isBig?: boolean;\n};\n\nconst PEEK_MONKEY_SHOW_DELAY = 2000;\nconst SEGMENT_COVER_EYES: [number, number] = [0, 50];\nconst SEGMENT_UNCOVER_EYE: [number, number] = [0, 20];\nconst SEGMENT_COVER_EYE: [number, number] = [20, 0];\nconst STICKER_SIZE = IS_SINGLE_COLUMN_LAYOUT ? STICKER_SIZE_AUTH_MOBILE : STICKER_SIZE_AUTH;\n\nconst PasswordMonkey: FC<OwnProps> = ({ isPasswordVisible, isBig }) => {\n  const [isFirstMonkeyLoaded, markFirstMonkeyLoaded] = useFlag(false);\n  const [isPeekShown, markPeekShown] = useFlag(false);\n\n  useTimeout(markPeekShown, PEEK_MONKEY_SHOW_DELAY);\n  const handleFirstMonkeyLoad = useCallback(markFirstMonkeyLoaded, [markFirstMonkeyLoaded]);\n\n  return (\n    <div id=\"monkey\" className={isBig ? 'big' : ''}>\n      {!isFirstMonkeyLoaded && (\n        <div className=\"monkey-preview\" />\n      )}\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'hidden' : 'shown'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyClose}\n        playSegment={SEGMENT_COVER_EYES}\n        noLoop\n        onLoad={handleFirstMonkeyLoad}\n      />\n      <AnimatedSticker\n        size={isBig ? STICKER_SIZE_TWO_FA : STICKER_SIZE}\n        className={isPeekShown ? 'shown' : 'hidden'}\n        tgsUrl={LOCAL_TGS_URLS.MonkeyPeek}\n        playSegment={isPasswordVisible ? SEGMENT_UNCOVER_EYE : SEGMENT_COVER_EYE}\n        noLoop\n      />\n    </div>\n  );\n};\n\nexport default memo(PasswordMonkey);\n","import type { FC } from '../../lib/teact/teact';\nimport React, {\n  useEffect, useState, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport { DEBUG } from '../../config';\nimport { blobToFile, blobToDataUri } from '../../util/files';\nimport useLang from '../../hooks/useLang';\n\nimport Button from './Button';\nimport Modal from './Modal';\nimport Loading from './Loading';\n\nimport './CropModal.scss';\n\n// Change to 'base64' to get base64-encoded string\nconst cropperResultOptions: Croppie.ResultOptions & { type: 'blob' } = {\n  type: 'blob',\n  quality: 1,\n  format: 'jpeg',\n  circle: false,\n  size: { width: 1024, height: 1024 },\n};\n\ntype ICroppie = typeof import('croppie');\nlet Croppie: ICroppie;\nlet croppiePromise: Promise<{ default: ICroppie }>;\n\nasync function ensureCroppie() {\n  if (!croppiePromise) {\n    croppiePromise = import('../../lib/croppie') as unknown as Promise<{ default: ICroppie }>;\n    Croppie = (await croppiePromise).default;\n  }\n\n  return croppiePromise;\n}\n\nlet cropper: Croppie;\n\nasync function initCropper(imgFile: File) {\n  try {\n    const cropContainer = document.getElementById('avatar-crop');\n    if (!cropContainer) {\n      return;\n    }\n\n    const { offsetWidth, offsetHeight } = cropContainer;\n\n    cropper = new Croppie(cropContainer, {\n      enableZoom: true,\n      boundary: {\n        width: offsetWidth,\n        height: offsetHeight,\n      },\n      viewport: {\n        width: offsetWidth - 16,\n        height: offsetHeight - 16,\n        type: 'circle',\n      },\n    });\n\n    const dataUri = await blobToDataUri(imgFile);\n    await cropper.bind({ url: dataUri });\n  } catch (err) {\n    if (DEBUG) {\n      // eslint-disable-next-line no-console\n      console.error(err);\n    }\n  }\n}\n\ntype OwnProps = {\n  file?: File;\n  onChange: (file: File) => void;\n  onClose: () => void;\n};\n\nconst CropModal: FC<OwnProps> = ({ file, onChange, onClose }: OwnProps) => {\n  const [isCroppieReady, setIsCroppieReady] = useState(false);\n\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    if (!isCroppieReady) {\n      ensureCroppie().then(() => setIsCroppieReady(true));\n\n      return;\n    }\n\n    initCropper(file);\n  }, [file, isCroppieReady]);\n\n  const lang = useLang();\n\n  const handleCropClick = useCallback(async () => {\n    if (!cropper) {\n      return;\n    }\n\n    const result: Blob | string = await cropper.result(cropperResultOptions);\n    const croppedImg = typeof result === 'string' ? result : blobToFile(result, 'avatar.jpg');\n\n    onChange(croppedImg);\n  }, [onChange]);\n\n  return (\n    <Modal\n      isOpen={Boolean(file)}\n      onClose={onClose}\n      title=\"Drag to reposition\"\n      className=\"CropModal\"\n      hasCloseButton\n    >\n      {isCroppieReady ? (\n        <div id=\"avatar-crop\" />\n      ) : (\n        <Loading />\n      )}\n      <Button\n        className=\"confirm-button\"\n        round\n        color=\"primary\"\n        onClick={handleCropClick}\n        ariaLabel={lang('CropImage')}\n      >\n        <i className=\"icon-check\" />\n      </Button>\n    </Modal>\n  );\n};\n\nexport default memo(CropModal);\n","import type { ChangeEvent } from 'react';\nimport type { FC } from '../../lib/teact/teact';\nimport React, {\n  useState, useEffect, memo, useCallback,\n} from '../../lib/teact/teact';\n\nimport buildClassName from '../../util/buildClassName';\n\nimport CropModal from './CropModal';\n\nimport './AvatarEditable.scss';\n\ninterface OwnProps {\n  title?: string;\n  disabled?: boolean;\n  currentAvatarBlobUrl?: string;\n  onChange: (file: File) => void;\n}\n\nconst AvatarEditable: FC<OwnProps> = ({\n  title = 'Change your profile picture',\n  disabled,\n  currentAvatarBlobUrl,\n  onChange,\n}) => {\n  const [selectedFile, setSelectedFile] = useState<File | undefined>();\n  const [croppedBlobUrl, setCroppedBlobUrl] = useState<string | undefined>(currentAvatarBlobUrl);\n\n  useEffect(() => {\n    setCroppedBlobUrl(currentAvatarBlobUrl);\n  }, [currentAvatarBlobUrl]);\n\n  function handleSelectFile(event: ChangeEvent<HTMLInputElement>) {\n    const target = event.target as HTMLInputElement;\n\n    if (!target || !target.files || !target.files[0]) {\n      return;\n    }\n\n    setSelectedFile(target.files[0]);\n    target.value = '';\n  }\n\n  const handleAvatarCrop = useCallback((croppedImg: File) => {\n    setSelectedFile(undefined);\n    onChange(croppedImg);\n\n    if (croppedBlobUrl) {\n      URL.revokeObjectURL(croppedBlobUrl);\n    }\n    setCroppedBlobUrl(URL.createObjectURL(croppedImg));\n  }, [croppedBlobUrl, onChange]);\n\n  const handleModalClose = useCallback(() => {\n    setSelectedFile(undefined);\n  }, []);\n\n  const labelClassName = buildClassName(\n    croppedBlobUrl && 'filled',\n    disabled && 'disabled',\n  );\n\n  return (\n    <div className=\"AvatarEditable\">\n      <label\n        className={labelClassName}\n        role=\"button\"\n        tabIndex={0}\n        title={title}\n      >\n        <input\n          type=\"file\"\n          onChange={handleSelectFile}\n          accept=\"image/png, image/jpeg\"\n        />\n        <i className=\"icon-camera-add\" />\n        {croppedBlobUrl && <img src={croppedBlobUrl} alt=\"Avatar\" />}\n      </label>\n      <CropModal file={selectedFile} onClose={handleModalClose} onChange={handleAvatarCrop} />\n    </div>\n  );\n};\n\nexport default memo(AvatarEditable);\n"],"names":["createGhost","source","origin","ghost","document","createElement","classList","add","img","Image","draggable","oncontextmenu","stopEvent","src","HTMLVideoElement","poster","appendChild","MediaViewerOrigin","profileInfo","querySelector","cloneNode","isMessageImageFullyVisible","container","imageEl","messageListElement","imgOffsetTop","offsetTop","closest","id","includes","parentElement","scrollTop","offsetHeight","applyStyles","element","styles","Object","assign","style","getNodes","message","containerSelector","mediaSelector","getMessageHtmlId","mediaEls","querySelectorAll","mediaEl","length","applyShape","firstChild","objectFit","cache","Map","useBlurSync","dataUri","blurredRef","useRef","isChanged","useOnChange","current","undefined","width","canvas","imgToCanvas","fastBlur","getContext","height","toDataURL","blurredAsync","isDisabled","delay","get","timeoutRef","forceUpdate","useForceUpdate","clearTimeout","useEffect","onload","blurredDataUri","size","clear","set","window","setTimeout","useBlur","Boolean","memo","withGlobal","global","isDownloading","selectIsDownloading","isProtected","selectIsMessageProtected","mediaData","isVideo","fileName","isAvatar","canReport","onReport","onCloseMediaViewer","zoomLevelChange","setZoomLevelChange","onForward","downloadMessageMedia","cancelMessageMediaDownload","getActions","loadProgress","downloadProgress","useMediaWithLoadProgress","getMessageMediaHash","handleDownloadClick","useCallback","handleZoomOut","handleZoomIn","lang","useLang","MenuButton","useMemo","onTrigger","isOpen","Button","round","color","className","onClick","ariaLabel","IS_SINGLE_COLUMN_LAYOUT","DropdownMenu","trigger","positionX","MenuItem","icon","Math","href","download","ProgressSpinner","progress","noCross","renderDownloadButton","text","isHidden","isForVideo","isMultiline","setIsMultiline","useState","footerContent","checkIsMultiline","clientHeight","REM","handleResize","throttle","addEventListener","removeEventListener","classNames","buildClassName","e","stopPropagation","dir","prop","fullscreenElement","mozFullScreenElement","webkitFullscreenElement","units","bytes","number","floor","log","toFixed","PLAYBACK_RATES","bufferedRanges","bufferedProgress","currentTime","duration","fileSize","isForceMobileVersion","isPlayed","isFullscreenSupported","isFullscreen","isVisible","isBuffered","volume","isMuted","playbackRate","onChangeFullscreen","onVolumeClick","onVolumeChange","onPlaybackRateChange","onPlayPause","setVisibility","onSeek","isPlaybackMenuOpen","openPlaybackMenu","closePlaybackMenu","useFlag","seekerRef","isSeekingRef","isSeeking","timeout","body","remove","handleSeek","left","getBoundingClientRect","clientX","MouseEvent","targetTouches","max","min","handleStartSeek","handleStopSeek","captureEvents","onCapture","onRelease","onDrag","volumeIcon","percentagePlayed","ref","map","start","end","renderSeekLine","ripple","IS_IOS","RangeSlider","bold","value","onChange","formatMediaDuration","renderTime","loadedPercent","totalSize","formatFileSize","Menu","positionY","autoClose","onClose","rate","disabled","url","isGif","posterData","posterSize","isMediaViewerOpen","noPlay","toggleControls","areControlsVisible","setMediaViewerVolume","setMediaViewerMuted","setMediaViewerPlaybackRate","videoRef","setIsPlayed","IS_TOUCH_ENV","setCurrentTime","setFullscreen","exitFullscreen","elRef","setIsFullscreen","useLayoutEffect","listener","listenerEnter","listenerExit","video","PLATFORM_ENV","requestFullscreen","webkitRequestFullscreen","webkitEnterFullscreen","mozRequestFullScreen","mozCancelFullScreen","webkitCancelFullScreen","webkitExitFullscreen","useFullscreenStatus","bufferingHandlers","useBuffering","shouldRender","shouldRenderSpinner","transitionClassNames","spinnerClassNames","useShowTransition","shouldRenderPlayButton","playButtonClassNames","pause","safePlay","togglePlayState","useVideoCleanup","handleMouseMove","handleMouseOut","target","handleTimeUpdate","currentTarget","handleEnded","handleFullscreenChange","position","handleVolumeChange","newVolume","handleVolumeMuted","handlePlaybackRateChange","newPlaybackRate","togglePayingStateBySpace","key","preventDefault","wrapperStyle","videoStyle","onMouseMove","onMouseOut","autoPlay","playsInline","loop","muted","onPlay","onEnded","onDoubleClick","onTimeUpdate","join","square","ownProps","chatId","threadId","messageId","avatarOwnerId","profilePhotoIndex","mediaViewer","selectChatMessage","senderId","avatarOwner","selectUser","selectChat","selectScheduledMessage","props","isActive","animationLevel","isFooterHidden","onFooterClick","setIsFooterHidden","photo","getMessagePhoto","getMessageVideo","webPagePhoto","getMessageWebPagePhoto","webPageVideo","getMessageWebPageVideo","isDocumentPhoto","isMessageDocumentPhoto","isDocumentVideo","isMessageDocumentVideo","isPhoto","isFromSharedMedia","isFromSearch","isGhostAnimation","getMediaHash","isFull","photos","getChatAvatarHash","pictogramBlobUrl","useMedia","ApiMediaFormat","previewMediaHash","previewBlobUrl","fullMediaBlobUrl","getMessageMediaFormat","localBlobUrl","blobUrl","bestImageData","thumbDataUri","getMessageMediaThumbDataUri","videoSize","getMessageFileSize","dimensions","getMessageDocument","mediaSize","getPhotoFullDimensions","getVideoDimensions","AVATAR_FULL_DIMENSIONS","renderPhoto","calculateMediaViewerDimensions","textParts","renderMessageText","hasFooter","onContextMenu","imageSize","canDrag","Spinner","renderVideoPreview","alt","easeOutCubic","easeOutQuart","timingFunctions","SLIDES_GAP","ANIMATION_DURATION","cancelAnimation","cancelZoomAnimation","SwipeDirection","getMessageId","selectMessage","rest","containerRef","activeSlideRef","transformRef","x","y","scale","lastTransformRef","swipeDirectionRef","isActiveRef","activeMessageId","setActiveMessageId","prevZoomLevelChange","usePrevious","hasZoomChanged","isMouseDown","setIsMouseDown","windowHeight","windowWidth","isResizing","useWindowSize","setTransform","selectMessageDebounced","useDebouncedCallback","clearSwipeDirectionDebounced","setIsActiveDebounced","shouldCloseOnVideo","clickXThreshold","handleToggleFooterVisibility","isFooter","pageY","pageX","useTimeout","lastTransform","lastDragOffset","lastZoomCenter","panDelta","initialContentRect","content","lastGestureTime","Date","now","setLastGestureTime","debounce","changeSlide","direction","mId","offset","animateNumber","from","to","timing","onUpdate","changeSlideOnClick","handleKeyDown","calculateOffsetBoundaries","inBoundsX","inBoundsY","centerX","centerY","minOffsetX","maxOffsetX","right","isBetween","clamp","minOffsetY","top","maxOffsetY","bottom","cleanup","isNotPassive","withNativeDrag","excludedClosestSelector","minZoom","maxZoom","doubleTapZoom","checkIfControlTarget","type","arePropsShallowEqual","event","captureEvent","cancelDrag","dragOffsetX","dragOffsetY","touches","IOS_SCREEN_EDGE_THRESHOLD","absOffsetX","abs","absOffsetY","h","Vertical","Horizontal","limit","x1","y1","transform","onZoom","zoom","zoomFactor","initialCenterX","initialCenterY","currentCenterX","currentCenterY","MIN_ZOOM","MAX_ZOOM","scaleFactor","offsetX","offsetY","scaledCenterX","scaledCenterY","scaleOffsetX","scaleOffsetY","isInThreshold","hasNextSlide","checkIfInsideSelector","absX","absY","s1","k","Vx","Vy","dirX","prevValue","delta","wheelEvent","WheelEvent","deltaY","ctrlKey","dispatchEvent","nextMessageId","previousMessageId","getAnimationStyle","isRtl","selector","matches","sender","isUserId","selectSender","closeMediaViewer","focusMessage","toggleChatInfo","handleFocusMessage","forceSyncOnIOs","senderTitle","getSenderTitle","Avatar","user","chat","renderText","formatMediaDateTime","date","settings","byKey","chatMessages","collectionIds","isChatWithSelf","selectIsChatWithSelf","selectScheduledMessages","selectChatMessages","selectOutlyingIds","selectListedIds","currentSearch","selectCurrentMediaSearch","foundIds","resultsByType","media","openMediaViewer","openForwardMenu","singleMessageId","messageIds","getChatMediaMessageIds","selectedMediaMessageIndex","indexOf","animationKey","prevSenderId","headerAnimation","isReportModalOpen","openReportModal","closeReportModal","avatarPhoto","getMessageFileName","toggle","mql","matchMedia","MEDIA_VIEWER_MEDIA_QUERY","addListener","removeListener","prevMessage","prevOrigin","prevAvatarOwner","prevBestImageData","dispatchHeavyAnimationEvent","ANIMATION_END_DELAY","fromImage","windowSize","availableWidth","availableHeight","getMediaViewerAvailableDimensions","toWidth","toHeight","calculateDimensions","toLeft","toTop","topOffsetRem","getTopOffset","fromTop","fromLeft","fromWidth","fromHeight","uncovered","realWidth","realHeight","srcWidth","srcHeight","uncover","fromTranslateX","fromTranslateY","fromScaleX","fromScaleY","requestAnimationFrame","clearShape","contains","removeChild","animateOpening","toImage","getElementById","targetTop","isElementInViewport","shouldFadeOut","existingGhost","getElementsByClassName","transition","transformOrigin","opacity","animateClosing","close","handleFooterClick","handleForward","fromChatId","forceOnHeavyAnimation","captureEscKeyListener","stopCurrentAudio","fromId","index","useHistoryBack","onBack","ShowTransition","Transition","activeKey","name","ReportModal","subject","currentUserId","chatOrUserIds","filterRef","filter","filterPlaceholder","loadMore","onFilterChange","onSelectChatOrUser","onCloseAnimationEnd","viewportIds","getMore","useInfiniteScroll","resetFilter","useInputFocusOnOpen","handleFilterChange","useKeyboardListNavigation","modalHeader","InputText","onKeyDown","placeholder","viewportOffset","Modal","header","InfiniteScroll","items","onLoadMore","withAbsolutePositioning","maxHeight","CHAT_HEIGHT_PX","i","ListItem","PrivateChatInfo","status","userId","GroupChatInfo","Loading","chats","byId","chatsById","listIds","orderedPinnedIds","switchBotInline","activeListIds","active","archivedListIds","archived","pinnedIds","contactIds","contactList","userIds","setForwardChatId","exitForwardMode","openChatWithText","resetSwitchBotInline","setFilter","isShown","markIsShown","unmarkIsShown","chatAndContactIds","priorityIds","unique","chatIds","getCanPostInChat","MAIN_THREAD_ID","usersById","getGlobal","users","sortChatIds","filterChatsByName","filterUsersByName","handleSelectUser","botUsername","query","handleClose","renderingChatAndContactIds","useCurrentOrPrev","getErrorHeader","error","isSlowMode","hasErrorKey","pick","dialogs","dismissDialog","acceptInviteConfirmation","sendMessage","showNotification","isModalOpen","openModal","closeModal","dialog","contactRequest","invite","hash","title","about","participantsCount","isChannel","isRequestNeeded","participantsText","joinText","requestToJoinText","renderInviteHeader","isText","renderInvite","contact","getReadableErrorText","notifications","dismissNotification","localId","Notification","onDismiss","toggleSafeLinkModal","handleOpen","open","ensureProtocol","handleDismiss","renderingUrl","ConfirmDialog","confirmLabel","confirmHandler","urlAuth","currentUser","closeUrlAuthModal","acceptBotUrlAuth","acceptLinkUrlAuth","isLoginChecked","setLoginChecked","isWriteAccessChecked","setWriteAccessChecked","currentAuth","domain","botId","shouldRequestWriteAccess","request","bot","button","isWriteAllowed","handleLoginChecked","Checkbox","checked","label","getUserFullName","onCheck","MAX_SAFE_DATE","WEEKDAY_LETTERS","isDisabledDay","year","month","day","minDate","maxDate","selectedDay","fixedMinDate","getDayStart","fixedMaxDate","formatInputTime","String","padStart","formatDay","selectedAt","minAt","maxAt","isFutureMode","isPastMode","withTimePicker","submitButtonLabel","secondButtonLabel","onSubmit","onSecondButtonClick","passedSelectedDate","prevIsOpen","isTimeInputFocused","markTimeInputAsFocused","unmarkTimeInputAsFocused","selectedDate","setSelectedDate","currentMonthAndYear","setCurrentMonthAndYear","getFullYear","getMonth","selectedHours","setSelectedHours","getHours","selectedMinutes","setSelectedMinutes","getMinutes","getDate","currentYear","currentMonth","getTime","newSelectedDate","shouldDisableNextMonth","shouldDisablePrevMonth","prevMonthGrid","currentMonthGrid","nextMonthGrid","setDate","setMonth","setFullYear","firstDay","getDay","totalDaysInPrevMonth","push","gridDate","lastRowDaysCount","buildCalendarGrid","submitLabel","formatDateToString","code","formatTime","formatSubmitLabel","handleSubmit","handleChangeHours","replace","hours","Number","setHours","hoursStr","handleChangeMinutes","minutes","setMinutes","minutesStr","d","dateCopy","role","tabIndex","handleDateSelect","inputMode","onFocus","onBlur","historyCalendarSelectedAt","searchMessagesByDate","closeHistoryCalendar","handleJumpToDate","timestamp","valueOf","userStatus","selectUserStatus","serverTimeOffset","phoneCodeList","countryList","phoneCodes","isByPhoneNumber","updateContact","importContact","closeNewContactDialog","renderingUser","renderingIsByPhoneNumber","inputRef","firstName","setFirstName","lastName","setLastName","phone","setPhone","phoneNumber","shouldSharePhoneNumber","setShouldSharePhoneNumber","canBeSubmitted","focus","handleFirstNameChange","handlePhoneChange","formatPhoneNumberWithCode","handleLastNameChange","getUserStatus","webApp","isInstalled","attachMenu","bots","selectCurrentChat","theme","selectTheme","closeWebApp","sendWebViewData","prolongWebView","toggleBotInAttachMenu","openTelegramLink","openChat","mainButton","setMainButton","buttonText","queryId","isSimple","handleEvent","eventType","linkUrl","eventData","path_full","data","themeParams","extractCurrentThemeParams","validateHexColor","button_color","textColor","text_color","is_visible","trim","is_active","isProgressVisible","is_progress_visible","reloadFrame","sendEvent","sendViewport","sendTheme","isSimpleView","onEvent","ignoreEventsRef","frame","once","contentWindow","postMessage","JSON","stringify","is_expanded","theme_params","sendCustomStyle","handleMessage","parse","scrollbarColor","getComputedStyle","getPropertyValue","err","useWebAppFrame","shouldShowMainButton","useInterval","peer","handleMainButtonClick","handleRefreshClick","handleToggleClick","isEnabled","handleCloseClick","openBotChat","MoreMenuButton","isMenuOpen","isAttachMenuBot","destructive","prevMainButtonColor","prevMainButtonTextColor","prevMainButtonIsActive","prevMainButtonText","mainButtonCurrentColor","mainButtonCurrentTextColor","mainButtonCurrentIsActive","mainButtonCurrentText","shouldDecreaseWebFrameSize","setShouldDecreaseWebFrameSize","shouldHideButton","setShouldHideButton","buttonChangeTimeout","hasCloseButton","sandbox","allow","allowFullScreen","cancelBotTrustRequest","markBotTrusted","previousBot","previousType","currentBot","currentType","handleBotTrustAccept","closeBotAttachRequestModal","confirmBotAttachRequest","isSchedule","selectCurrentMessageList","canDeleteForAll","selectAllowedMessageActions","contactName","getUserFirstOrLastName","getPrivateChatUserId","willDeleteForCurrentUserOnly","isChatBasicGroup","willDeleteForAll","isChatSuperGroup","album","deleteMessages","deleteScheduledMessages","handleDeleteMessageForAll","messages","shouldDeleteForAll","handleDeleteMessageForSelf","onEnter","isPrivateChat","isChatChannel","isGroup","isSuperGroup","canPinForAll","pinMessage","handlePinMessageForAll","isUnpin","handlePinMessage","isOneSide","isSilent","pinnedMessagesCount","onUnpin","selectedMessageIds","selectedMessages","selectCanDeleteSelectedMessages","exitMessageSelectMode","messageListType","canDelete","selectCanReportSelectedMessages","canDownload","selectCanDownloadSelectedMessages","hasProtectedMessage","selectHasProtectedMessage","selectedMessagesCount","selectSelectedMessagesCount","canDeleteMessages","canReportMessages","canDownloadMessages","canPost","openForwardMenuForSelectedMessages","downloadSelectedMessages","copySelectedMessages","isDeleteModalOpen","openDeleteModal","closeDeleteModal","useHotkeys","useCopySelectedMessages","captureKeyboardListeners","onBackspace","onDelete","onEsc","handleCopy","handleDownload","prevSelectedMessagesCount","formattedMessagesCount","renderButton","seenByModal","memberIds","seenByUserIds","closeSeenByModal","handleClick","renderingMemberIds","noStatusOrTyping","reactorModal","reactions","reactors","loadReactors","closeReactorListModal","isClosing","startClosing","stopClosing","chosenTab","setChosenTab","canShowFilters","count","results","chatIdRef","handleCloseAnimationEnd","handleLoadMore","allReactions","l","reaction","concat","nextOffset","LoadMoreDirection","formatIntegerCompact","find","ReactionStaticEmoji","fullName","activeEmojiInteraction","animatedEffect","selectAnimatedEmojiEffect","effectAnimationId","localEffectAnimation","keys","LOCAL_TGS_URLS","stopActiveEmojiInteraction","isHiding","startHiding","isPlaying","startPlaying","stop","handleCancelAnimation","dispatchHeavyAnimationStop","effectTgsUrl","startSize","tgsUrl","isReversed","AnimatedSticker","play","quality","IS_ANDROID","noLoop","onLoad","onSelect","buttonRef","activeElement","privateChatUserId","isPinned","selectIsChatPinned","selectIsChatMuted","selectNotifySettings","selectNotifyExceptions","canChangeFolder","chatFolders","orderedIds","withUsername","isChatFolderModalOpen","openChatFolderModal","closeChatFolderModal","contextActions","useChatContextActions","handleDelete","handleChatFolderChange","useSelectWithEnter","avatarSize","DeleteChatModal","runThrottled","cb","topUserIds","topPeers","recentlyFoundChatIds","globalSearch","onReset","loadTopUsers","addRecentlyFoundChatId","clearRecentlyFoundChats","topUsersRef","useHorizontalScroll","shouldReplaceHistory","lastSyncTime","privateChatUser","searchQuery","mediaThumbnail","mediaBlobUrl","isRoundVideo","getMessageRoundVideo","isSavedMessages","isSelf","getChatTitle","isVerified","VerifiedIcon","fakeType","FakeIcon","Link","formatPastTimeShort","renderMessageSummary","renderSummary","searchDate","suggestions","match","suggestion","currentDate","latestYear","getSuggestionsFromDate","localContactIds","fetchingStatus","globalResults","localResults","globalChatIds","globalUserIds","localChatIds","localUserIds","byChatId","globalMessagesByChatId","dateSearchQuery","onSearchDateSelect","searchMessagesGlobal","setGlobalSearchChatId","shouldShowMoreLocal","setShouldShowMoreLocal","shouldShowMoreGlobal","setShouldShowMoreGlobal","handleChatClick","handlePickerItemClick","startsWith","MEMO_EMPTY_ARRAY","contactIdsWithMe","foundContactIds","foundMessages","split","sort","a","b","handleClickShowMoreLocal","handleClickShowMoreGlobal","nothingFound","noScrollRestoreOnTop","noFastList","NothingFound","description","PickerSelectedItem","chatOrUserId","clickArg","createMapStateToProps","isVoice","activeDownloads","isLoading","searchChatId","isChatProtected","CURRENT_TYPE","observe","observeIntersectionForMedia","useIntersectionObserver","rootRef","throttleMs","handleSelectMedia","canRenderContents","useAsyncRendering","SLIDE_TRANSITION_DURATION","isMediaGrid","isMessageList","itemSelector","Media","idPrefix","observeIntersection","handleMessageFocus","shouldDrawDateDivider","toYearMonth","formatMonthAndYear","WebLink","getSenderName","onMessageClick","Document","withDate","datetime","smaller","onDateClick","openAudioPlayer","handlePlayAudio","Audio","AudioOrigin","TABS","GlobalSearchContent","CHAT_TABS","slice","TRANSITION_RENDER_COUNT","currentContent","setGlobalSearchContent","setGlobalSearchDate","activeTab","setActiveTab","parseDateString","handleSwitchTab","tab","handleSearchDateSelect","TabList","tabs","onSwitchTab","renderCount","INITIAL_STATE","currentPassword","password","hint","email","twoFaReducer","state","action","payload","currentScreen","editedFolderId","onSaveFilter","onScreenSelect","signOut","deleteChatFolder","isSignOutDialogOpen","setIsSignOutDialogOpen","isDeleteFolderDialogOpen","setIsDeleteFolderDialogOpen","openSignOutConfirmation","closeSignOutConfirmation","openDeleteFolderConfirmation","closeDeleteFolderConfirmation","handleSignOutMessage","handleDeleteFolderMessage","SettingsMenuButton","SettingsScreens","renderHeaderContent","confirmIsDestructive","sessionCount","activeSessions","orderedHashes","loadProfilePhotos","loadAuthorizations","loadWebAuthorizations","getCustomLanguageName","localStorage","getItem","customLanguageName","profileId","ProfileInfo","forceShowSelf","ChatExtra","langName","LINK_PREFIX","LINK_PREFIX_REGEX","USERNAME_REGEX","runDebouncedForCheckUsername","currentUsername","asLink","isUsernameAvailable","checkUsername","username","setUsername","langPrefix","usernameSuccess","usernameError","test","handleUsernameChange","newUsername","isValid","isUsernameValid","success","readOnly","ERROR_FIRST_NAME_MISSING","ERROR_BIO_TOO_LONG","profileEdit","currentFirstName","currentLastName","fullInfo","bio","currentBio","currentAvatarHash","loadCurrentUser","updateProfile","isUsernameTouched","setIsUsernameTouched","isProfileFieldsTouched","setIsProfileFieldsTouched","setError","setPhoto","setBio","currentAvatarBlobUrl","ProfileEditProgress","isUsernameError","isSaveButtonShown","handlePhotoChange","newPhoto","handleBioChange","handleProfileSave","trimmedFirstName","trimmedLastName","trimmedBio","AvatarEditable","UsernameInput","FloatingActionButton","canAutoLoadPhotoFromContacts","canAutoLoadPhotoInPrivateChats","canAutoLoadPhotoInGroups","canAutoLoadPhotoInChannels","canAutoLoadVideoFromContacts","canAutoLoadVideoInPrivateChats","canAutoLoadVideoInGroups","canAutoLoadVideoInChannels","canAutoLoadFileFromContacts","canAutoLoadFileInPrivateChats","canAutoLoadFileInGroups","canAutoLoadFileInChannels","canAutoPlayGifs","canAutoPlayVideos","autoLoadFileMaxSizeMb","setSettingOption","renderFileSizeCallback","AUTODOWNLOAD_FILESIZE_MB_LIMITS","handleFileSizeChange","handleCanAutoPlayGifsChange","handleCanAutoPlayVideosChange","renderAutoDownloadBlock","canAutoLoadFromContacts","canAutoLoadInPrivateChats","canAutoLoadInGroups","canAutoLoadInChannels","isChecked","renderValue","renderContentSizeSlider","runThrottledForLoadRecommended","orderedFolderIds","foldersById","recommended","recommendedChatFolders","onCreateFolder","onEditFolder","loadRecommendedChatFolders","addChatFolder","showDialog","handleCreateFolder","chatsCountByFolderId","useFolderManagerForChatsCount","userFolders","folder","subtitle","getFolderDescriptionText","handleCreateFolderFromRecommended","AnimatedIcon","STICKER_SIZE_FOLDER_SETTINGS","pill","fluid","narrow","multiline","itemName","itemPluralName","ERROR_NO_TITLE","ERROR_NO_CHATS","loadedActiveChatIds","loadedArchivedChatIds","dispatch","onAddIncludedChats","onAddExcludedChats","editChatFolder","isIncludedChatsListExpanded","setIsIncludedChatsListExpanded","isExcludedChatsListExpanded","setIsExcludedChatsListExpanded","selectedChatIds","includedChatIds","selectedChatTypes","includedChatTypes","selectChatFilters","excludedChatIds","excludedChatTypes","folderId","visibleIncludedChatIds","visibleExcludedChatIds","allLoadedChatsSet","Set","loadedIncludedChatIds","findIntersectionWithSet","loadedExcludedChatIds","handleChange","mode","folderUpdate","renderChats","visibleChatIds","isExpanded","leftChatsCount","clickHandler","chatType","INCLUDED_CHAT_TYPES","typeKey","EXCLUDED_CHAT_TYPES","inactive","renderChatType","isTouched","selectedIds","filterValue","onSelectedIdsChange","onSelectedChatTypesChange","chatTypes","shouldMinimize","hasMaxChats","handleItemClick","newSelectedIds","splice","handleChatTypeClick","newSelectedChatTypes","selectedType","isMinimized","canClose","isSelected","withChatType","chatFilter","folderAllOrderedIds","useFolderManagerForOrderedIds","ALL_FOLDER_ID","folderArchivedOrderedIds","ARCHIVED_FOLDER_ID","displayedIds","newFilter","handleSelectedIdsChange","ids","includeFilters","excludeFilters","handleSelectedChatTypesChange","newFilters","forEach","shownScreen","handleReset","handleEditFolder","handleAddIncludedChats","handleAddExcludedChats","STICKER_SIZE_PICKER_HEADER","stickerSet","isIntersecting","useIsIntersecting","mediaHash","lottieData","useMediaTransition","firstLetters","getFirstLetters","hasThumbnail","isVideos","IS_WEBM_SUPPORTED","stickers","firstSticker","isLottie","STICKER_SIZE_GENERAL_SETTINGS","StickerButton","sticker","noContextMenu","ANIMATION_LEVEL_OPTIONS","TIME_FORMAT_OPTIONS","shouldUseSystemTheme","stickerSetIds","added","setIds","stickerSetsById","setsById","defaultReaction","appConfig","messageTextSize","messageSendKeyCombo","shouldSuggestStickers","shouldLoopStickers","timeFormat","stickerSettingsRef","observeIntersectionForCovers","setSticker","APPEARANCE_THEME_OPTIONS","KEYBOARD_SEND_OPTIONS","subLabel","IS_MAC_OS","handleAnimationLevelChange","newLevel","_","handleMessageTextSizeChange","newSize","documentElement","setProperty","setAttribute","toString","handleAppearanceThemeChange","newTheme","getSystemTheme","switchTheme","ANIMATION_LEVEL_MAX","handleTimeFormatChange","newTimeFormat","wasTimeFormatSetManually","setTimeFormat","handleStickerSetClick","handleMessageSendComboChange","newCombo","handleSuggestStickersChange","newValue","handleShouldLoopStickersChange","stickerSets","installedDate","RadioGroup","options","selected","fromSticker","hex2rgb","param","parseInt","substring","rgb2hex","p0","p1","p2","rgb2hsb","r","g","s","v","hsb2rgb","f","p","q","t","getPatternColor","rgbColor","hue","saturation","wallpaper","slug","localMediaHash","thumbRef","useCanvasBlur","thumbnail","isLoadAllowed","setIsLoadAllowed","fullMedia","wasLoadDisabled","UPLOADING_WALLPAPER_SLUG","cacheKeyRef","handleSelect","blob","fetchBlob","cacheApi","save","CUSTOM_BG_CACHE_NAME","isAllowed","background","isBlurred","themes","loadedWallpapers","loadWallpapers","uploadWallpaper","setThemeSettings","themeRef","handleFileSelect","files","handleUploadWallpaper","openSystemFilesDialog","handleSetColor","handleResetToDefault","backgroundColor","patternColor","DARK_THEME_PATTERN_COLOR","DEFAULT_PATTERN_COLOR","handleWallPaperSelect","currentWallpaper","async","defaultRGB","rgb","context","image","preloadImage","naturalHeight","naturalWidth","offsetWidth","drawImage","getImageData","blockSize","getAverageColor","then","handleWallPaperBlurChange","isUploading","DEFAULT_HSB","PREDEFINED_COLORS","hsb2positions","hsb","rects","colorPosition","colorRect","huePosition","hueRect","positions2hsb","colorPickerRef","huePickerRef","isFirstRunRef","setHsb","getInitialHsb","hsbRef","isDragging","markIsDragging","unmarkIsDragging","rgbInput","setRgbInput","hexInput","setHexInput","rectsRef","colorCtxRef","offsetLeft","handleColorDrag","handleHueDrag","selectorToPreventScroll","withCursor","hex","hueHex","w","ctx","imgData","createImageData","pixels","col","perY","st","ed","perX","putImageData","drawColor","drawHue","handleRgbChange","rgbValue","channel","handleHexChange","hexValue","handlePredefinedColorClick","dataset","hasPrivateChatsNotifications","hasPrivateChatsMessagePreview","hasGroupNotifications","hasGroupMessagePreview","hasBroadcastNotifications","hasBroadcastMessagePreview","hasContactJoinedNotifications","hasWebNotifications","hasPushNotifications","notificationSoundVolume","loadNotificationSettings","updateContactSignUpNotification","updateNotificationSettings","updateWebNotificationSettings","runDebounced","useRunDebounced","handleSettingsChange","peerType","setting","currentIsSilent","currentShouldShowPreviews","shouldShowPreviews","handleWebNotificationsChange","handlePushNotificationsChange","handlePrivateChatsNotificationsChange","handlePrivateChatsPreviewChange","handleGroupsNotificationsChange","handleGroupsPreviewChange","handleChannelsNotificationsChange","handleChannelsPreviewChange","handleContactNotificationChange","playNotifySound","hasPassword","isSensitiveEnabled","canChangeSensitive","privacy","blocked","passcode","hasPasscode","blockedCount","totalCount","webAuthCount","activeWebSessions","privacyPhoneNumber","privacyLastSeen","lastSeen","privacyProfilePhoto","profilePhoto","privacyForwarding","forwards","privacyGroupChats","chatInvite","privacyPhoneCall","phoneCall","privacyPhoneP2P","phoneP2P","loadPrivacySettings","loadBlockedContacts","loadContentSettings","updateContentSettings","getVisibilityValue","visibility","blockCount","blockChatIds","blockUserIds","allowCount","allowChatIds","allowUserIds","total","exceptionString","chinese","beta","nativeName","langCode","baseLangCode","pluralCode","stringsCount","translatedCount","translationsUrl","languages","language","loadLanguages","getCustomLanguage","customLanguage","selectedLanguage","setSelectedLanguage","markIsLoading","unmarkIsLoading","displayLang","setItem","removeItem","setLanguage","currentLangCode","navigator","toLowerCase","shortLangCode","substr","buildOptions","loadingOption","getPrivacyKey","screen","privacySettings","setPrivacyVisibility","visibilityOptions","exceptionLists","shouldShowDenied","shouldShowAllowed","privacyKey","headerText","descriptionText","allowedContactsScreen","deniedContactsScreen","allowedCount","reduce","result","membersCount","handleVisibilityChange","getSessionIcon","session","platform","device","deviceModel","systemVersion","byHash","changeSessionSettings","terminateAuthorization","renderingSession","handleSecretChatsStateChange","areSecretChatsEnabled","handleCallsStateChange","areCallsEnabled","handleTerminateSessionClick","formatDateTimeToString","dateActive","appName","appVersion","ip","region","country","getLocation","Switcher","ttlDays","terminateAllAuthorizations","changeSessionTtl","isConfirmTerminateAllDialogOpen","openConfirmTerminateAllDialog","closeConfirmTerminateAllDialog","openedSessionHash","setOpenedSessionHash","autoTerminateValue","AUTO_TERMINATE_OPTIONS","handleTerminateAllSessions","handleOpenSessionModal","handleCloseSessionModal","handleChangeSessionTtl","days","currentSession","currentSessionHash","isCurrent","otherSessionHashes","hasOtherSessions","sessionHashes","sessionHash","handler","terminateWebAuthorization","renderingBot","browser","terminateAllWebAuthorizations","openedWebsiteHash","setOpenedWebsiteHash","handleTerminateAuthClick","handleTerminateAllAuth","handleCloseWebsiteModal","blockedIds","userSearch","setUserSearchQuery","blockContact","filteredContactIds","availableContactIds","contactId","firstId","secondId","secondName","localeCompare","handleRemoveUser","accessHash","chatsByIds","usersByIds","unblockContact","isBlockUserModalOpen","openBlockUserModal","closeBlockUserModal","handleUnblockClick","isPrivate","renderContact","AnimatedIconWithPreview","previewUrl","lockPreviewUrl","shouldDisablePasswordManager","expectedPassword","clearError","validationError","setValidationError","shouldShowPassword","setShouldShowPassword","newPassword","handleClearError","PasswordMonkey","isBig","isPasswordVisible","PasswordForm","shouldResetValue","onChangePasswordVisibility","onStart","FOCUS_DELAY_TIMEOUT_MS","animatedEmoji","selectAnimatedEmoji","shouldConfirm","setValue","isConfirmShown","markIsConfirmShown","unmarkIsConfirmShown","handleInputChange","handleSkip","handleSkipConfirm","AnimatedIconFromSticker","STICKER_SIZE_TWO_FA","codeLength","twoFaSettings","waitingEmailCodeLength","updatePassword","checkPassword","clearTwoFaError","updateRecoveryEmail","provideTwoFaEmailCode","clearPassword","handleStartWizard","handleNewPassword","handleNewPasswordConfirm","handleNewPasswordHint","handleNewPasswordEmail","onSuccess","handleChangePasswordCurrent","handleChangePasswordNew","handleChangePasswordConfirm","handleChangePasswordHint","handleTurnOff","handleRecoveryEmailCurrentPassword","handleRecoveryEmail","handleEmailCode","getCurrentPrivacySettings","isAllowList","setPrivacySettings","selectedContactIds","setSearchQuery","isSubmitShown","setIsSubmitShown","newSelectedContactIds","setNewSelectedContactIds","handleSelectedContactIdsChange","contactsIds","Picker","itemIds","searchInputId","availableReactions","selectedReaction","setDefaultReaction","isInactive","STICKER_SIZE_PASSCODE","fullReset","onSetPasscode","setPasscode","clearPasscode","setPasscodeError","clearPasscodeError","currentPasscode","decryptSession","TWO_FA_SCREENS","PASSCODE_SCREENS","FOLDERS_SCREENS","PRIVACY_SCREENS","PRIVACY_PHONE_NUMBER_SCREENS","PRIVACY_LAST_SEEN_PHONE_SCREENS","PRIVACY_PROFILE_PHOTO_SCREENS","PRIVACY_PHONE_CALL_SCREENS","PRIVACY_PHONE_P2P_SCREENS","PRIVACY_FORWARDING_SCREENS","PRIVACY_GROUP_CHATS_SCREENS","foldersState","foldersDispatch","shouldSkipTransition","twoFaState","twoFaDispatch","useReducer","privacyPasscode","setPrivacyPasscode","forceReturnToChatList","handleSaveFilter","renderCurrentSection","isScreenActive","isFrom","currentKey","privacyAllowScreens","isTwoFaScreen","isPasscodeScreen","isFoldersScreen","isPrivacyScreen","values","SettingsGeneralBackgroundColor","renderCurrentSectionContent","LAYERS_ANIMATION_NAME","statusesById","userStatusesById","openNewContactDialog","filteredIds","sortUserIds","isSearching","selectedMemberIds","onSelectedMemberIdsChange","onNextStep","setGlobalSearchQuery","canBeInvitedToGroup","isUserBot","handleNextStep","creationProgress","creationError","chatCreation","createGroupChat","createChannel","setTitle","setAbout","chatTitleEmptyError","channelTitleEmptyError","chatTooManyUsersError","ChatCreationProgress","handleTitleChange","handleDescriptionChange","handleCreateGroup","handleCreateChannel","renderedError","RENDER_COUNT","LeftColumnContent","onContentChange","newChatMemberIds","setNewChatMemberIds","isStepActive","ChatList","folderType","folderOrderedIds","editChatFolders","initialSelectedFolderIds","pinnedChatIds","selectedFolderIds","setSelectedFolderIds","folders","idsToRemove","idsToAdd","CheckboxGroup","getCopyLabel","hasSelection","scrollLockEl","IGNORED_KEYS","Down","ArrowDown","Up","ArrowUp","Left","ArrowLeft","Right","ArrowRight","PageUp","PageDown","End","Home","Tab","getTouchY","changedTouches","clientY","scrollHeight","preventDefaultForScrollKeys","HTMLElement","tagName","getAttribute","isTextBox","disableScrolling","el","_excludedClosestSelector","passive","onkeydown","enableScrolling","REACTION_SIZE","IS_COMPACT_MENU","cn","createClassNameBuilder","previewIndex","onSendReaction","isReady","selectAnimation","isActivated","activate","deactivate","isAnimationLoaded","markAnimationLoaded","shouldRenderAnimated","animatedClassNames","shouldRenderStatic","staticClassNames","onMouseEnter","enabledReactions","itemsScrollRef","isHorizontalScrollEnabled","enableHorizontalScroll","handleWheel","onWheelCapture","onTouchMove","anchor","canSendNow","canReschedule","canReply","canEdit","canPin","canUnpin","canForward","canFaveSticker","canUnfaveSticker","canCopy","canCopyLink","canSelect","canSaveGif","canShowSeenBy","canShowReactionsCount","canRemoveReaction","canShowReactionList","seenByRecentUsers","onReply","onEdit","onPin","onFaveSticker","onUnfaveSticker","onSend","onReschedule","onCopyLink","onCopyNumber","onDownload","onSaveGif","onShowSeenBy","onShowReactors","onCopyMessages","menuRef","scrollableRef","noReactions","withReactions","markIsReady","unmarkIsReady","handleAfterCopy","copyOptions","afterEffect","getMessageText","getMessageContact","canImageBeCopied","hasMessageLocalBlobUrl","CLIPBOARD_ITEM_SUPPORTED","selection","getSelection","Promise","resolve","mediaLoader","copyImageToClipboard","anchorNode","parentNode","getMessageIdsForSelectedText","clipboardText","getMessageTextWithSpoilers","copyTextToClipboard","getMessageCopyOptions","getTriggerElement","getRootElement","getMenuElement","getLayout","extraHeightAudioPlayer","pinnedElement","extraHeightPinned","extraPaddingX","extraTopPadding","marginSides","extraMarginTop","handleRemoveReaction","transformOriginX","transformOriginY","menuStyle","withScroll","useContextMenuPosition","bubbleStyle","option","START_SIZE","selectActiveDownloadIds","seenByExpiresAt","seenByMaxChatMembers","noOptions","isScheduled","isLocal","isMessageLocal","isChatGroup","isOwnMessage","isAction","isActionMessage","areReactionsEmpty","canSeeList","some","isChosen","canCopyNumber","isForbidden","hasFullInfo","SERVICE_NOTIFICATIONS_USER_ID","chatUsername","setReplyingToId","setEditingId","faveSticker","unfaveSticker","toggleMessageSelection","sendScheduledMessages","rescheduleMessage","loadSeenBy","openSeenByModal","sendReaction","openReactorListModal","loadFullChat","copyMessagesByIds","saveGif","setIsMenuOpen","setIsDeleteModalOpen","setIsReportModalOpen","isPinModalOpen","setIsPinModalOpen","isCalendarOpen","openCalendar","closeCalendar","recentReactions","msg","handleReport","closeMenu","closePinModal","handleCloseCalendar","handleReply","handleEdit","handlePin","handleUnpin","handleFaveSticker","handleUnfaveSticker","handleSelectMessage","params","childMessageIds","withShift","handleScheduledMessageSend","handleOpenCalendar","handleOpenSeenByModal","handleOpenReactorListModal","handleRescheduleMessage","scheduledAt","handleCopyMessages","handleCopyLink","handleCopyNumber","handleSaveGif","gif","handleSendReaction","reportMessageIds","scheduledMaxDate","getDayStartAt","stickerSetShortName","currentMessageList","sendOptions","getAllowedAttachmentOptions","canSendStickers","canScheduleUntilOnline","selectCanScheduleUntilOnline","shouldSchedule","selectShouldSchedule","selectStickerSet","stickerSetId","selectStickerSetByShortName","loadStickers","toggleStickerSet","requestCalendar","calendar","useSchedule","stickerSetAccessHash","isScheduleRequested","isPreloadedGlobally","handleButtonClick","STICKER_SIZE_MODAL","BOT_BUTTONS","help","isRestricted","canAddContact","getCanAddContact","canReportChat","chatBot","REPLIES_USER_ID","selectChatBot","canDeleteChat","getCanDeleteChat","hasLinkedChat","linkedChatId","botCommands","botInfo","commands","withExtraActions","canStartBot","canRestartBot","canSubscribe","canSearch","canCall","canMute","canViewStatistics","canLeave","canEnterVoiceChat","canCreateVoiceChat","onSubscribeChannel","onSearchClick","updateChatMutedState","enterMessageSelectMode","sendBotCommand","restartBot","joinGroupCall","createGroupCall","openLinkedChat","openAddContactDialog","requestCall","toggleStatistics","handleStartBot","command","handleRestartBot","handleToggleMuteClick","handleEnterVoiceChatClick","handleLinkedChatClick","handleAddContactClick","handleSubscribe","handleVideoCall","handleCall","handleSearch","handleStatisticsClick","handleSelectMessages","botButtons","cmd","Portal","runDebouncedForSearch","selectCurrentTextSearch","isHistoryCalendarOpen","setLocalTextSearchQuery","searchTextMessagesLocal","closeLocalTextSearch","openHistoryCalendar","focusedIndex","setFocusedIndex","visualViewport","mainEl","pageTop","Array","input","div","contentEditable","blur","handleMessageSearchQueryChange","newQuery","handleUp","newFocusIndex","handleDown","SearchInput","findInViewport","selectorOrElements","margin","isDense","shouldContainBottom","isHorizontal","viewportY1","viewportY2","allElements","visibleIndexes","isFound","y2","setTooltipItemVisible","first","isFullyVisible","fastSmoothScroll","useKeyboardNavigation","shouldSaveSelectionOnUpdateItems","shouldRemoveSelectionOnReset","noArrowNavigation","shouldSelectOnTab","selectedItemIndex","setSelectedItemIndex","getSelectedIndex","newIndex","cycleRestrict","handleArrowKey","handleItemSelect","item","isSelectionOutOfRange","onUp","onDown","onLeft","onRight","onTab","onInsertUserName","filteredUsers","handleUserSelect","forceFocus","handleSelectMention","member","selectedMentionIndex","prevChatMembers","renderedChatMembers","attachments","caption","canShowCustomSendMenu","groupChatMembers","recentEmojis","baseEmojiKeywords","emojiKeywords","addRecentEmoji","onCaptionUpdate","onFileAppend","onClear","onSendSilent","onSendScheduled","captionRef","useStateRef","mainButtonRef","hideTimeoutRef","prevAttachments","renderingAttachments","isHovered","markHovered","unmarkHovered","isQuick","every","quick","isMentionTooltipOpen","closeMentionTooltip","insertMention","mentionFilteredUsers","useMentionTooltip","EDITABLE_INPUT_MODAL_ID","isEmojiTooltipOpen","closeEmojiTooltip","filteredEmojis","insertEmoji","useEmojiTooltip","isContextMenuOpen","isCustomSendMenuOpen","handleContextMenu","handleContextMenuClose","handleContextMenuHide","useContextMenuHandlers","sendAttachments","handleFilesDrop","dataTransfer","getFilesFromDataTransferItems","newFiles","file","CONTENT_TYPES_WITH_PREVIEW","areAllPhotos","SUPPORTED_IMAGE_CONTENT_TYPES","mimeType","areAllVideos","SUPPORTED_VIDEO_CONTENT_TYPES","areAllAudios","SUPPORTED_AUDIO_CONTENT_TYPES","isOpenToBottom","onSendSchedule","renderHeader","onDragEnter","onDrop","onDragOver","onDragLeave","relatedTarget","toTarget","fromTarget","attachment","File","filename","extension","getFileExtension","previewData","emojis","onEmojiSelect","MessageInput","isAttachmentModalInput","html","editableInputId","canAutoFocus","isQuiz","shouldBeAnonimous","questionInputRef","optionsListRef","solutionRef","question","setQuestion","setOptions","isAnonymous","setIsAnonymous","isMultipleAnswers","setIsMultipleAnswers","isQuizMode","setIsQuizMode","solution","setSolution","correctOption","setCorrectOption","hasErrors","setHasErrors","focusInput","solutionEl","innerHTML","addNewOption","newOptions","list","scrollTo","behavior","handleCreate","questionTrimmed","optionsTrimmed","o","summary","answers","correct","isPublic","multipleChoice","quiz","entities","parseMessageInput","correctAnswers","solutionEntities","updateOption","removeOption","handleCorrectOptionChange","handleIsAnonymousChange","handleMultipleAnswersChange","handleQuizModeChange","handleKeyPress","keyCode","handleQuestionChange","getQuestionError","getOptionsError","renderOptions","onKeyPress","renderQuizNoOptionError","hidden","emoji","native","isLoaded","LOADED_EMOJIS","onMouseDown","names","IS_EMOJI_SUPPORTED","loading","handleEmojiLoad","category","allEmojis","useOnIntersect","emojisPerRow","ceil","RECENT_SYMBOL_SET_ID","displayedEmoji","ICONS_BY_CATEGORY","recent","people","nature","foods","activity","places","objects","symbols","flags","categoryIntersections","emojiDataPromise","emojiRawData","emojiData","headerRef","categories","setCategories","setEmojis","activeCategoryIndex","setActiveCategoryIndex","entries","entry","intersectingWithIndexes","newLeft","HEADER_BUTTON_WIDTH","fastSmoothScrollHorizontal","allCategories","themeCategories","unshift","exec","default","uncompressEmoji","ensureEmojiData","selectCategory","categoryEl","handleEmojiSelect","MENU_TRANSITION_DURATION","containerClassName","faded","STICKER_MARGIN","loadAndPlay","favoriteStickers","onStickerSelect","onStickerUnfave","onStickerFave","onStickerRemoveRecent","clearRecentStickers","isConfirmModalOpen","openConfirmModal","closeConfirmModal","handleClearRecent","stickersPerRow","STICKER_SIZE_PICKER","favoriteStickerIdsSet","isRecent","noAnimate","onUnfaveClick","FAVORITE_SYMBOL_SET_ID","has","onFaveClick","onRemoveRecentClick","canViewSet","stickerSetIntersections","favorite","recentStickers","addedSetIds","shouldPlay","loadRecentStickers","addRecentSticker","removeRecentSticker","activeSetIndex","setActiveSetIndex","sendMessageAction","useSendMessageAction","areAddedLoaded","allSets","defaultSets","fullSet","CHAT_STICKER_SET_ID","pickTruthy","noPopulatedSets","stickerSetEl","handleStickerSelect","handleStickerUnfave","handleStickerFave","handleRemoveRecentSticker","fullClassName","buttonClassName","onUnsaveClick","videoData","shouldRenderVideo","isVideoReady","contextMenuPosition","handleBeforeContextMenu","handleUnsaveClick","handleContextDelete","handleSendQuiet","handleSendScheduled","handleMouseDown","preventMessageInputBlurWithBubbling","preload","savedGifs","gifs","saved","canSendGifs","onGifSelect","loadSavedGifs","debounceMs","shouldUnsave","SymbolMenuTabs","SYMBOL_MENU_TAB_TITLES","SYMBOL_MENU_TAB_ICONS","Emoji","Stickers","GIFs","onRemoveSymbol","onSearchOpen","renderTabButton","handleSearchOpen","isLeftColumnShown","setRecentEmojis","handleMouseEnter","handleMouseLeave","useMouseInside","fastRaf","recentEmojisRef","renderContent","onMouseLeave","noCloseOnBackdrop","noCompact","withAvatar","botCommand","handleSendCommand","selectedCommandIndex","prevCommands","renderedCommands","chatBotCommand","forEmoji","clearStickersForEmoji","prevStickers","displayedStickers","listEmojis","usePrevDuringAnimation","handleSelectEmoji","selectedIndex","setItemVisible","thumbUrl","thumbnailDataUrl","decoding","webThumbnail","isForGallery","inlineResult","_gif","STICKER_SIZE_INLINE_BOT_RESULT","isGallery","inlineBotResults","switchPm","onSelectResult","startBot","handleSendPm","startParam","prevInlineBotResults","renderedInlineBotResults","sensitiveArea","inlineBotResult","selectedSendAsId","sendAsIds","saveDefaultSendAs","markMouseInside","sendAsId","selectedSendAsIndex","messagesById","viewportResults","senderUser","senderChat","forwardInfo","isChannelPost","foundResult","isOnTop","preloadBackwards","teactOrderKey","LastMessageMeta","selectShouldLoopStickers","isSomeModalOpen","onModalToggle","isAdded","areStickersLoaded","coverStickerIds","covers","otherStickers","handleAddClick","canRenderStickers","STICKER_SIZE_SEARCH","selectCurrentStickerSearch","resultIds","featured","featuredIds","loadFeaturedStickers","setIsModalOpen","selectCurrentGifSearch","isChatWithBot","selectIsChatWithBot","canPostInChat","searchMoreGifs","setGifSearchQuery","handleGifClick","hasResults","CHANNEL_OVERVIEW","isPercentage","GROUP_OVERVIEW","MESSAGE_OVERVIEW","isPlain","isApproximate","isMessage","statistics","period","formatFullDate","row","cell","field","formatInteger","percentage","change","isChangeNegative","renderOverviewItemValue","toggleMessageStatistics","views","lovelyChartPromise","LovelyChart","CHANNEL_GRAPHS_TITLES","growthGraph","followersGraph","muteGraph","topHoursGraph","viewsBySourceGraph","newFollowersBySourceGraph","languagesGraph","interactionsGraph","CHANNEL_GRAPHS","GROUP_GRAPHS_TITLES","membersGraph","messagesGraph","actionsGraph","GROUP_GRAPHS","selectStatistics","dcId","statisticsDcId","setIsReady","loadedCharts","loadStatistics","loadStatisticsAsyncGraph","graphs","graphTitles","graph","token","ensureLovelyChart","zoomToken","create","children","callApi","zoomOutLabel","recentTopMessages","openChatByUsername","GRAPH_TITLES","viewsGraph","GRAPHS","currentMessage","currentMessageId","loadMessageStatistics","publicForwards","publicForwardsData","answer","voters","offsets","pollResults","answerVote","totalVoters","loadPollOptionResults","closePollResults","prevVotersCount","votersCount","setIsLoading","areVotersLoaded","shouldResetVoters","handleViewMoreClick","handleMemberClick","leftVotersCount","renderViewMoreButton","getMessagePoll","resultsByOption","buildCollectionByKey","management","deleteContact","closeManagement","isDeleteDialogOpen","openDeleteDialog","closeDeleteDialog","isNotificationsEnabled","setIsNotificationsEnabled","ManagementProgress","handleNotificationChange","handleDeleteContact","withFullInfo","GROUP_TITLE_EMPTY","hasLinkedChannel","isBasicGroup","invites","canChangeInfo","isCreator","getHasAdminRight","canBanUsers","canInvite","exportedInvites","availableReactionsCount","togglePreHistoryHidden","updateChat","deleteChat","leaveChannel","deleteChannel","loadExportedChatInvites","loadChatJoinRequests","currentTitle","currentAbout","imageHash","isPublicGroup","isRevoked","handleClickEditType","ManagementScreens","handleClickDiscussion","handleClickReactions","handleClickPermissions","handleClickAdministrators","handleClickInvites","handleClickRequests","handleSetPhoto","handleAboutChange","handleUpdateGroup","trimmedTitle","trimmedAbout","handleClickMembers","handleTogglePreHistory","isPreHistoryHidden","enabledReactionsCount","enabledPermissionsCount","defaultBannedRights","sendStickers","sendGifs","adminsCount","adminMembers","handleDeleteGroup","joinRequests","onChatMemberSelect","updateChatDefaultBannedRights","permissions","setPermissions","havePermissionChanged","setHavePermissionChanged","handleRemovedUsersClick","handleAddExceptionClick","handleExceptionMemberClick","promotedByUserId","handlePermissionChange","getUpdatedPermissionValue","handleSavePermissions","bannedRights","removedUsersCount","kickedMembers","exceptionMembers","members","getMemberExceptions","langKey","getLangKeyForBannedRightKey","translatedString","sendMessages","blocking","sendMedia","sendPolls","embedLinks","inviteUsers","pinMessages","changeInfo","loadMoreMembers","deleteChatMember","usersId","availableMemberIds","acc","isAdmin","isOwner","canDeleteMembers","updateChatMemberBannedRights","isRemoveUserModalOpen","openRemoveUserModal","closeRemoveUserModal","removedMembers","getRemovedBy","kickedByUserId","kickedByUser","getContextActions","CHANNEL_TITLE_EMPTY","isSignaturesShown","toggleSignatures","handleUpdateChannel","handleToggleSignatures","handleClickSubscribers","handleDeleteChannel","selectManagement","checkPublicLink","updatePublicLink","updatePrivateLink","toggleIsProtected","privateLink","inviteLink","privacyType","setPrivacyType","isRevokeConfirmDialogOpen","openRevokeConfirmDialog","closeRevokeConfirmDialog","canUpdate","handleOptionChange","handleForwardingOptionChange","handleSave","handleRevokePrivateLink","langPrefix1","langPrefix2","forwardingOptions","SafeLink","forDiscussionIds","linkedChat","loadGroupsForDiscussion","linkDiscussionGroup","unlinkDiscussionGroup","linkedGroupId","setLinkedGroupId","isConfirmUnlinkGroupDialogOpen","openConfirmUnlinkGroupDialog","closeConfirmUnlinkGroupDialog","isConfirmLinkGroupDialogOpen","openConfirmLinkGroupDialog","closeConfirmLinkGroupDialog","handleUnlinkGroupSessions","channelId","handleLinkGroupSessions","STICKER_SIZE_DISCUSSION_GROUPS","teactFastList","linkedGroup","renderLinkGroupHeader","hasPrivateLink","renderLinkGroupConfirmText","isButtonsInOneRow","isPromotedByCurrentUser","isFormFullyDisabled","selectedChatMemberId","isBanConfirmationDialogOpen","openBanConfirmationDialog","closeBanConfirmationDialog","selectedChatMember","handleBanFromGroup","viewMessages","getControlIsDisabled","handleRecentActionsClick","handleAdminMemberClick","handleAddAdminClick","getMemberStatus","promotedByUser","defaultRights","adminRights","isNewAdmin","selectedUserId","updateChatAdmin","setIsTouched","isDismissConfirmationDialogOpen","openDismissConfirmationDialog","closeDismissConfirmationDialog","customTitle","setCustomTitle","selectedAdminMember","handleDismissAdmin","memberStatus","handleCustomTitleChange","postMessages","editMessages","banUsers","addAdmins","manageCall","anonymous","maxLength","noAdmins","adminIds","shouldUseSearchResults","listedIds","noScrollRestore","memberId","inviteComparator","i1","i2","isPermanent","i1IsPermanent","usage","i1Usage","i1Date","i2IsPermanent","i2Usage","i2Date","revokedInvites","revokedExportedInvites","setEditingExportedInvite","editExportedChatInvite","deleteExportedChatInvite","deleteRevokedExportedChatInvites","setOpenedInviteInfo","isDeleteRevokeAllDialogOpen","openDeleteRevokeAllDialog","closeDeleteRevokeAllDialog","isRevokeDialogOpen","openRevokeDialog","closeRevokeDialog","revokingInvite","setRevokingInvite","deletingInvite","setDeletingInvite","hasDetailedCountdown","expireDate","getServerTime","MILLISECONDS_IN_DAY","primaryInvite","primaryInviteLink","link","temporalInvites","revokeInvite","usageLimit","askToRevoke","handleRevoke","handleCreateNewClick","handlePrimaryRevoke","handleDeleteAllRevoked","showInviteInfo","deleteInvite","askToDelete","copyLink","handleCopyPrimaryClicked","prepareUsageText","requested","diff","formatCountdown","prepareContextActions","actions","editInvite","PrimaryLinkMenuButton","STICKER_SIZE_INVITES","secondaryIcon","DEFAULT_USAGE_LIMITS","DEFAULT_EXPIRE_DATE","hour","week","DEFAULT_CUSTOM_EXPIRE_DATE","editingInvite","exportChatInvite","isCalendarOpened","setIsRequestNeeded","customExpireDate","setCustomExpireDate","selectedExpireOption","setSelectedExpireOption","customUsageLimit","setCustomUsageLimit","selectedUsageOption","setSelectedUsageOption","isSubmitBlocked","setIsSubmitBlocked","oldEditingInvite","editingTitle","editingIsRequestNeeded","minSafeDate","handleIsRequestChange","handleCustomUsageLimitChange","handleExpireDateChange","handleSaveClick","n","setChatEnabledReactions","localEnabledReactions","setLocalEnabledReactions","handleSaveReactions","handleReactionChange","newEnabledReactions","inviteInfo","importers","requesters","loadChatInviteImporters","loadChatInviteRequesters","adminId","isExpired","handleCopyClicked","importer","renderImporters","requester","renderRequesters","hideChatJoinRequest","fixedDate","dateString","isToday","formatHumanDate","handleAcceptRequest","isApproved","handleRejectRequest","hideAllChatJoinRequests","isAcceptAllDialogOpen","openAcceptAllDialog","closeAcceptAllDialog","isRejectAllDialogOpen","openRejectAllDialog","closeRejectAllDialog","handleAcceptAllRequests","handleRejectAllRequests","STICKER_SIZE_JOIN_REQUESTS","managementType","selectCurrentManagementType","VISA","MASTERCARD1","MASTERCARD2","CardType","cards","Default","Visa","Mastercard","detectCardType","cardNumber","streetLine1","streetLine2","city","countryIso2","postCode","shipping","cardholder","expiry","cvv","billingCountry","billingZip","saveInfo","saveCredentials","formErrors","reducer","iso2","defaultName","useFocusAfterAnimation","animationDuration","hasArrow","labelText","htmlFor","needEmail","needPhone","needName","needAddress","phoneRef","selectCountryRef","handleAddress1Change","handleAddress2Change","handleCityChange","handleStateChange","handleCountryChange","handlePostCodeChange","handleFullNameChange","handleEmailChange","handleSaveInfoChange","shippingOptions","currency","handleShippingSelect","amount","formatCurrency","renderPaymentItem","main","renderCheckoutItem","invoiceContent","prices","shippingPrices","checkoutInfo","totalPrice","photoUrl","paymentMethod","paymentProvider","shippingAddress","shippingMethod","expiryInputRef","charAt","parts","formatCardExpiry","cardNumberRef","cardType","setCardType","newCardType","formatCardNumber","cardIcon","mastercardIconPath","visaIconPath","getCardIcon","canSaveCredentials","needCardholderName","needCountry","needZip","handleCardNumberChange","handleCardholderChange","toUpperCase","handleExpiryChange","handleCvvChange","handleBillingPostCodeChange","handleChangeSaveCredentials","SUPPORTED_PROVIDERS","step","savedInfo","invoice","nativeProvider","nativeParams","passwordMissing","confirmPaymentUrl","payment","isProviderError","nameRequested","phoneRequested","emailRequested","shippingAddressRequested","flexible","phoneToProvider","emailToProvider","general","validateRequestedInfo","sendPaymentForm","setPaymentStep","sendCredentialsInfo","clearPaymentError","paymentState","paymentDispatch","canRenderFooter","PaymentStep","shippingAddressRest","shippingCountry","handleErrorModalClose","shippingOption","getShippingPrices","totalPrices","cur","getTotalPrice","detectCardTypeText","findShippingOption","getCheckoutInfo","validateRequest","requestInfo","getRequestInfo","sendCredentials","credentials","expiryMonth","expiryYear","zip","getCredentials","sendForm","shippingOptionId","setStep","nextStep","currentStep","renderModalContent","renderError","optionId","receipt","info","totalAmount","credentialsTitle","fullAddress","SEGMENT_COVER_EYES","SEGMENT_UNCOVER_EYE","SEGMENT_COVER_EYE","STICKER_SIZE","STICKER_SIZE_AUTH_MOBILE","STICKER_SIZE_AUTH","isFirstMonkeyLoaded","markFirstMonkeyLoaded","isPeekShown","markPeekShown","handleFirstMonkeyLoad","playSegment","cropperResultOptions","format","circle","Croppie","croppiePromise","cropper","isCroppieReady","setIsCroppieReady","imgFile","cropContainer","enableZoom","boundary","viewport","blobToDataUri","bind","DEBUG","console","initCropper","ensureCroppie","handleCropClick","croppedImg","blobToFile","selectedFile","setSelectedFile","croppedBlobUrl","setCroppedBlobUrl","handleAvatarCrop","URL","revokeObjectURL","createObjectURL","handleModalClose","labelClassName","accept"],"sourceRoot":""}